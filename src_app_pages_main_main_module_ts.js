"use strict";
(self["webpackChunkevent_infopage"] = self["webpackChunkevent_infopage"] || []).push([["src_app_pages_main_main_module_ts"],{

/***/ 8371:
/*!***************************************************!*\
  !*** ./src/app/pages/main/home/home.component.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HomeComponent": () => (/* binding */ HomeComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var _simpl_element_ng__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @simpl/element-ng */ 8008);


class HomeComponent {}
HomeComponent.ɵfac = function HomeComponent_Factory(t) {
  return new (t || HomeComponent)();
};
HomeComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: HomeComponent,
  selectors: [["ng-component"]],
  hostAttrs: [1, "si-layout-inner"],
  decls: 19,
  vars: 0,
  consts: [[1, "si-layout-content-padding"], [1, "mb-6"], [1, "si-h1-black"], [1, "mb-6", "position-relative"], ["src", "assets/images/floorplan.svg", 1, "w-100"], ["type", "button", "siTooltip", "Datenmodelle und Architektur", "placement", "bottom", 1, "btn", "btn-overlay", "btn-1", "btn-circle", "btn-primary", "element-favorites-filled"], ["type", "button", "siTooltip", "Programmaufbau & Organisation", "placement", "bottom", 1, "btn", "btn-overlay", "btn-2", "btn-circle", "btn-primary", "element-favorites-filled"], ["type", "button", "siTooltip", "Digital Outdoor Element Engineering", "placement", "bottom", 1, "btn", "btn-overlay", "btn-3", "btn-circle", "btn-primary", "element-favorites-filled"], ["type", "button", "siTooltip", "Schematic Topology Model", "placement", "bottom", 1, "btn", "btn-overlay", "btn-4", "btn-circle", "btn-primary", "element-favorites-filled"], ["type", "button", "siTooltip", "EPLAN Electric P8", "placement", "bottom", 1, "btn", "btn-overlay", "btn-5", "btn-circle", "btn-primary", "element-favorites-filled"], ["type", "button", "siTooltip", "BIM@Siemens Smart Infrastructure", "placement", "bottom", 1, "btn", "btn-overlay", "btn-6", "btn-circle", "btn-primary", "element-favorites-filled"], ["type", "button", "siTooltip", "Digital Field Management", "placement", "bottom", 1, "btn", "btn-overlay", "btn-7", "btn-circle", "btn-primary", "element-favorites-filled"]],
  template: function HomeComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "p")(3, "b");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4, "DIGITALISIERUNG HAUTNAH");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "h1", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6, "Wo findet ihr was?");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](8, "img", 4)(9, "button", 5)(10, "button", 6)(11, "button", 7)(12, "button", 8)(13, "button", 9)(14, "button", 10)(15, "button", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "div", 1)(17, "h2");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](18, "Hammerweg 1, Geb\u00E4ude 12, 4. OG");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
    }
  },
  dependencies: [_simpl_element_ng__WEBPACK_IMPORTED_MODULE_1__.SiTooltipDirective],
  styles: [".btn-overlay[_ngcontent-%COMP%] {\n    position: absolute;\n    box-shadow: 0px 0px 10px 0px rgba(0, 255, 185, .6);\n    animation: _ngcontent-%COMP%_glowing 4000ms infinite;\n    margin: -20px 0 0 -20px;\n  }\n  .btn-1[_ngcontent-%COMP%] { top:7.5vw; left:49vw; }\n  .btn-2[_ngcontent-%COMP%] { top:13vw; left:66vw; }\n  .btn-3[_ngcontent-%COMP%] { top:22vw; left:84vw; }\n  .btn-4[_ngcontent-%COMP%] { top:32.5vw; left:67vw; }\n  .btn-5[_ngcontent-%COMP%] { top:32vw; left:29vw; }\n  .btn-6[_ngcontent-%COMP%] { top:57.5vw; left:29vw; }\n  .btn-7[_ngcontent-%COMP%] { top: 72vw; left:9vw; }\n\n  @keyframes _ngcontent-%COMP%_glowing {\n  0% {\n    box-shadow: 0px 0px 10px 0px rgba(0, 255, 185, 0);\n  }\n  25% {\n    box-shadow: 0px 0px 10px 3px rgba(0, 255, 185, .6);\n  }\n  50% {\n    box-shadow: 0px 0px 10px 0px rgba(0, 255, 185, 0);\n  }\n  100% {\n    box-shadow: 0px 0px 10px 0px rgba(0, 255, 185, 0);\n  }\n}"]
});

/***/ }),

/***/ 3907:
/*!***************************************************!*\
  !*** ./src/app/pages/main/main-routing.module.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MainRoutingModule": () => (/* binding */ MainRoutingModule)
/* harmony export */ });
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ 124);
/* harmony import */ var _home_home_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./home/home.component */ 8371);
/* harmony import */ var _main_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./main.component */ 440);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 2560);





const routes = [{
  path: '',
  component: _main_component__WEBPACK_IMPORTED_MODULE_1__.MainComponent,
  children: [{
    path: 'home',
    component: _home_home_component__WEBPACK_IMPORTED_MODULE_0__.HomeComponent
  }, {
    path: '**',
    redirectTo: 'home'
  }]
}];
class MainRoutingModule {}
MainRoutingModule.ɵfac = function MainRoutingModule_Factory(t) {
  return new (t || MainRoutingModule)();
};
MainRoutingModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({
  type: MainRoutingModule
});
MainRoutingModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({
  imports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule.forChild(routes), _angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule]
});
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](MainRoutingModule, {
    imports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule],
    exports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule]
  });
})();

/***/ }),

/***/ 440:
/*!**********************************************!*\
  !*** ./src/app/pages/main/main.component.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MainComponent": () => (/* binding */ MainComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ 124);


class MainComponent {
  constructor() {}
}
MainComponent.ɵfac = function MainComponent_Factory(t) {
  return new (t || MainComponent)();
};
MainComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: MainComponent,
  selectors: [["app-main"]],
  hostAttrs: [1, "si-layout-fixed-height"],
  decls: 1,
  vars: 0,
  template: function MainComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "router-outlet");
    }
  },
  dependencies: [_angular_router__WEBPACK_IMPORTED_MODULE_1__.RouterOutlet],
  styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJtYWluLmNvbXBvbmVudC5zY3NzIn0= */\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvbWFpbi9tYWluLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxnS0FBZ0siLCJzb3VyY2VSb290IjoiIn0= */"]
});

/***/ }),

/***/ 9582:
/*!*******************************************!*\
  !*** ./src/app/pages/main/main.module.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MainModule": () => (/* binding */ MainModule)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 4666);
/* harmony import */ var _simpl_element_ng__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @simpl/element-ng */ 8008);
/* harmony import */ var _home_home_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./home/home.component */ 8371);
/* harmony import */ var _main_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./main.component */ 440);
/* harmony import */ var _main_routing_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./main-routing.module */ 3907);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 2560);






class MainModule {}
MainModule.ɵfac = function MainModule_Factory(t) {
  return new (t || MainModule)();
};
MainModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineNgModule"]({
  type: MainModule
});
MainModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule, _main_routing_module__WEBPACK_IMPORTED_MODULE_2__.MainRoutingModule, _simpl_element_ng__WEBPACK_IMPORTED_MODULE_5__.SimplElementNgModule]
});
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵsetNgModuleScope"](MainModule, {
    declarations: [_home_home_component__WEBPACK_IMPORTED_MODULE_0__.HomeComponent, _main_component__WEBPACK_IMPORTED_MODULE_1__.MainComponent],
    imports: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule, _main_routing_module__WEBPACK_IMPORTED_MODULE_2__.MainRoutingModule, _simpl_element_ng__WEBPACK_IMPORTED_MODULE_5__.SimplElementNgModule]
  });
})();

/***/ }),

/***/ 6067:
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/ReplaySubject.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReplaySubject": () => (/* binding */ ReplaySubject)
/* harmony export */ });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Subject */ 228);
/* harmony import */ var _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scheduler/dateTimestampProvider */ 7654);


class ReplaySubject extends _Subject__WEBPACK_IMPORTED_MODULE_0__.Subject {
  constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_1__.dateTimestampProvider) {
    super();
    this._bufferSize = _bufferSize;
    this._windowTime = _windowTime;
    this._timestampProvider = _timestampProvider;
    this._buffer = [];
    this._infiniteTimeWindow = true;
    this._infiniteTimeWindow = _windowTime === Infinity;
    this._bufferSize = Math.max(1, _bufferSize);
    this._windowTime = Math.max(1, _windowTime);
  }
  next(value) {
    const {
      isStopped,
      _buffer,
      _infiniteTimeWindow,
      _timestampProvider,
      _windowTime
    } = this;
    if (!isStopped) {
      _buffer.push(value);
      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }
    this._trimBuffer();
    super.next(value);
  }
  _subscribe(subscriber) {
    this._throwIfClosed();
    this._trimBuffer();
    const subscription = this._innerSubscribe(subscriber);
    const {
      _infiniteTimeWindow,
      _buffer
    } = this;
    const copy = _buffer.slice();
    for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy[i]);
    }
    this._checkFinalizedStatuses(subscriber);
    return subscription;
  }
  _trimBuffer() {
    const {
      _bufferSize,
      _timestampProvider,
      _buffer,
      _infiniteTimeWindow
    } = this;
    const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
    if (!_infiniteTimeWindow) {
      const now = _timestampProvider.now();
      let last = 0;
      for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
        last = i;
      }
      last && _buffer.splice(0, last + 1);
    }
  }
}

/***/ }),

/***/ 5014:
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/Scheduler.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Scheduler": () => (/* binding */ Scheduler)
/* harmony export */ });
/* harmony import */ var _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scheduler/dateTimestampProvider */ 7654);

class Scheduler {
  constructor(schedulerActionCtor, now = Scheduler.now) {
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now;
  }
  schedule(work, delay = 0, state) {
    return new this.schedulerActionCtor(this, work).schedule(state, delay);
  }
}
Scheduler.now = _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_0__.dateTimestampProvider.now;

/***/ }),

/***/ 1640:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/forkJoin.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "forkJoin": () => (/* binding */ forkJoin)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Observable */ 833);
/* harmony import */ var _util_argsArgArrayOrObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/argsArgArrayOrObject */ 5756);
/* harmony import */ var _innerFrom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./innerFrom */ 4987);
/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/args */ 420);
/* harmony import */ var _operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operators/OperatorSubscriber */ 3945);
/* harmony import */ var _util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/mapOneOrManyArgs */ 8385);
/* harmony import */ var _util_createObject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/createObject */ 1054);







function forkJoin(...args) {
  const resultSelector = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__.popResultSelector)(args);
  const {
    args: sources,
    keys
  } = (0,_util_argsArgArrayOrObject__WEBPACK_IMPORTED_MODULE_1__.argsArgArrayOrObject)(args);
  const result = new _Observable__WEBPACK_IMPORTED_MODULE_2__.Observable(subscriber => {
    const {
      length
    } = sources;
    if (!length) {
      subscriber.complete();
      return;
    }
    const values = new Array(length);
    let remainingCompletions = length;
    let remainingEmissions = length;
    for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {
      let hasValue = false;
      (0,_innerFrom__WEBPACK_IMPORTED_MODULE_3__.innerFrom)(sources[sourceIndex]).subscribe((0,_operators_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_4__.createOperatorSubscriber)(subscriber, value => {
        if (!hasValue) {
          hasValue = true;
          remainingEmissions--;
        }
        values[sourceIndex] = value;
      }, () => remainingCompletions--, undefined, () => {
        if (!remainingCompletions || !hasValue) {
          if (!remainingEmissions) {
            subscriber.next(keys ? (0,_util_createObject__WEBPACK_IMPORTED_MODULE_5__.createObject)(keys, values) : values);
          }
          subscriber.complete();
        }
      }));
    }
  });
  return resultSelector ? result.pipe((0,_util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_6__.mapOneOrManyArgs)(resultSelector)) : result;
}

/***/ }),

/***/ 3280:
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromEvent": () => (/* binding */ fromEvent)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../observable/innerFrom */ 4987);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Observable */ 833);
/* harmony import */ var _operators_mergeMap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operators/mergeMap */ 1353);
/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isArrayLike */ 9806);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isFunction */ 2971);
/* harmony import */ var _util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/mapOneOrManyArgs */ 8385);






const nodeEventEmitterMethods = ['addListener', 'removeListener'];
const eventTargetMethods = ['addEventListener', 'removeEventListener'];
const jqueryMethods = ['on', 'off'];
function fromEvent(target, eventName, options, resultSelector) {
  if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(options)) {
    resultSelector = options;
    options = undefined;
  }
  if (resultSelector) {
    return fromEvent(target, eventName, options).pipe((0,_util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_1__.mapOneOrManyArgs)(resultSelector));
  }
  const [add, remove] = isEventTarget(target) ? eventTargetMethods.map(methodName => handler => target[methodName](eventName, handler, options)) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [];
  if (!add) {
    if ((0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__.isArrayLike)(target)) {
      return (0,_operators_mergeMap__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(subTarget => fromEvent(subTarget, eventName, options))((0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_4__.innerFrom)(target));
    }
  }
  if (!add) {
    throw new TypeError('Invalid event target');
  }
  return new _Observable__WEBPACK_IMPORTED_MODULE_5__.Observable(subscriber => {
    const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);
    add(handler);
    return () => remove(handler);
  });
}
function toCommonHandlerRegistry(target, eventName) {
  return methodName => handler => target[methodName](eventName, handler);
}
function isNodeStyleEventEmitter(target) {
  return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.addListener) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.removeListener);
}
function isJQueryStyleEventEmitter(target) {
  return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.on) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.off);
}
function isEventTarget(target) {
  return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.addEventListener) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target.removeEventListener);
}

/***/ }),

/***/ 8653:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/interval.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "interval": () => (/* binding */ interval)
/* harmony export */ });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ 6936);
/* harmony import */ var _timer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./timer */ 8947);


function interval(period = 0, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__.asyncScheduler) {
  if (period < 0) {
    period = 0;
  }
  return (0,_timer__WEBPACK_IMPORTED_MODULE_1__.timer)(period, period, scheduler);
}

/***/ }),

/***/ 5971:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/never.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NEVER": () => (/* binding */ NEVER),
/* harmony export */   "never": () => (/* binding */ never)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 833);
/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/noop */ 9635);


const NEVER = new _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable(_util_noop__WEBPACK_IMPORTED_MODULE_1__.noop);
function never() {
  return NEVER;
}

/***/ }),

/***/ 8947:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/observable/timer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "timer": () => (/* binding */ timer)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Observable */ 833);
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ 6936);
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isScheduler */ 9867);
/* harmony import */ var _util_isDate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isDate */ 7885);




function timer(dueTime = 0, intervalOrScheduler, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__.async) {
  let intervalDuration = -1;
  if (intervalOrScheduler != null) {
    if ((0,_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__.isScheduler)(intervalOrScheduler)) {
      scheduler = intervalOrScheduler;
    } else {
      intervalDuration = intervalOrScheduler;
    }
  }
  return new _Observable__WEBPACK_IMPORTED_MODULE_2__.Observable(subscriber => {
    let due = (0,_util_isDate__WEBPACK_IMPORTED_MODULE_3__.isValidDate)(dueTime) ? +dueTime - scheduler.now() : dueTime;
    if (due < 0) {
      due = 0;
    }
    let n = 0;
    return scheduler.schedule(function () {
      if (!subscriber.closed) {
        subscriber.next(n++);
        if (0 <= intervalDuration) {
          this.schedule(undefined, intervalDuration);
        } else {
          subscriber.complete();
        }
      }
    }, due);
  });
}

/***/ }),

/***/ 4844:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/audit.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "audit": () => (/* binding */ audit)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 1944);
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/innerFrom */ 4987);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ 3945);



function audit(durationSelector) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    let hasValue = false;
    let lastValue = null;
    let durationSubscriber = null;
    let isComplete = false;
    const endDuration = () => {
      durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
      durationSubscriber = null;
      if (hasValue) {
        hasValue = false;
        const value = lastValue;
        lastValue = null;
        subscriber.next(value);
      }
      isComplete && subscriber.complete();
    };
    const cleanupDuration = () => {
      durationSubscriber = null;
      isComplete && subscriber.complete();
    };
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, value => {
      hasValue = true;
      lastValue = value;
      if (!durationSubscriber) {
        (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__.innerFrom)(durationSelector(value)).subscribe(durationSubscriber = (0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, endDuration, cleanupDuration));
      }
    }, () => {
      isComplete = true;
      (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();
    }));
  });
}

/***/ }),

/***/ 998:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/auditTime.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "auditTime": () => (/* binding */ auditTime)
/* harmony export */ });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ 6936);
/* harmony import */ var _audit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./audit */ 4844);
/* harmony import */ var _observable_timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/timer */ 8947);



function auditTime(duration, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__.asyncScheduler) {
  return (0,_audit__WEBPACK_IMPORTED_MODULE_1__.audit)(() => (0,_observable_timer__WEBPACK_IMPORTED_MODULE_2__.timer)(duration, scheduler));
}

/***/ }),

/***/ 1989:
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/debounceTime.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debounceTime": () => (/* binding */ debounceTime)
/* harmony export */ });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ 6936);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ 1944);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ 3945);



function debounceTime(dueTime, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__.asyncScheduler) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)((source, subscriber) => {
    let activeTask = null;
    let lastValue = null;
    let lastTime = null;
    const emit = () => {
      if (activeTask) {
        activeTask.unsubscribe();
        activeTask = null;
        const value = lastValue;
        lastValue = null;
        subscriber.next(value);
      }
    };
    function emitWhenIdle() {
      const targetTime = lastTime + dueTime;
      const now = scheduler.now();
      if (now < targetTime) {
        activeTask = this.schedule(undefined, targetTime - now);
        subscriber.add(activeTask);
        return;
      }
      emit();
    }
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, value => {
      lastValue = value;
      lastTime = scheduler.now();
      if (!activeTask) {
        activeTask = scheduler.schedule(emitWhenIdle, dueTime);
        subscriber.add(activeTask);
      }
    }, () => {
      emit();
      subscriber.complete();
    }, undefined, () => {
      lastValue = activeTask = null;
    }));
  });
}

/***/ }),

/***/ 1339:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/delay.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "delay": () => (/* binding */ delay)
/* harmony export */ });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ 6936);
/* harmony import */ var _delayWhen__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./delayWhen */ 5716);
/* harmony import */ var _observable_timer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observable/timer */ 8947);



function delay(due, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__.asyncScheduler) {
  const duration = (0,_observable_timer__WEBPACK_IMPORTED_MODULE_1__.timer)(due, scheduler);
  return (0,_delayWhen__WEBPACK_IMPORTED_MODULE_2__.delayWhen)(() => duration);
}

/***/ }),

/***/ 5716:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/delayWhen.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "delayWhen": () => (/* binding */ delayWhen)
/* harmony export */ });
/* harmony import */ var _observable_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/concat */ 4240);
/* harmony import */ var _take__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./take */ 9295);
/* harmony import */ var _ignoreElements__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ignoreElements */ 23);
/* harmony import */ var _mapTo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mapTo */ 73);
/* harmony import */ var _mergeMap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mergeMap */ 1353);





function delayWhen(delayDurationSelector, subscriptionDelay) {
  if (subscriptionDelay) {
    return source => (0,_observable_concat__WEBPACK_IMPORTED_MODULE_0__.concat)(subscriptionDelay.pipe((0,_take__WEBPACK_IMPORTED_MODULE_1__.take)(1), (0,_ignoreElements__WEBPACK_IMPORTED_MODULE_2__.ignoreElements)()), source.pipe(delayWhen(delayDurationSelector)));
  }
  return (0,_mergeMap__WEBPACK_IMPORTED_MODULE_3__.mergeMap)((value, index) => delayDurationSelector(value, index).pipe((0,_take__WEBPACK_IMPORTED_MODULE_1__.take)(1), (0,_mapTo__WEBPACK_IMPORTED_MODULE_4__.mapTo)(value)));
}

/***/ }),

/***/ 8977:
/*!*******************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "distinctUntilChanged": () => (/* binding */ distinctUntilChanged)
/* harmony export */ });
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/identity */ 9173);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ 1944);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ 3945);



function distinctUntilChanged(comparator, keySelector = _util_identity__WEBPACK_IMPORTED_MODULE_0__.identity) {
  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)((source, subscriber) => {
    let previousKey;
    let first = true;
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, value => {
      const currentKey = keySelector(value);
      if (first || !comparator(previousKey, currentKey)) {
        first = false;
        previousKey = currentKey;
        subscriber.next(value);
      }
    }));
  });
}
function defaultCompare(a, b) {
  return a === b;
}

/***/ }),

/***/ 8574:
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/endWith.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "endWith": () => (/* binding */ endWith)
/* harmony export */ });
/* harmony import */ var _observable_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/concat */ 4240);
/* harmony import */ var _observable_of__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observable/of */ 745);


function endWith(...values) {
  return source => (0,_observable_concat__WEBPACK_IMPORTED_MODULE_0__.concat)(source, (0,_observable_of__WEBPACK_IMPORTED_MODULE_1__.of)(...values));
}

/***/ }),

/***/ 23:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/ignoreElements.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ignoreElements": () => (/* binding */ ignoreElements)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 1944);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ 3945);
/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/noop */ 9635);



function ignoreElements() {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, _util_noop__WEBPACK_IMPORTED_MODULE_2__.noop));
  });
}

/***/ }),

/***/ 679:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/pairwise.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pairwise": () => (/* binding */ pairwise)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 1944);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OperatorSubscriber */ 3945);


function pairwise() {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    let prev;
    let hasPrev = false;
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__.createOperatorSubscriber)(subscriber, value => {
      const p = prev;
      prev = value;
      hasPrev && subscriber.next([p, value]);
      hasPrev = true;
    }));
  });
}

/***/ }),

/***/ 6319:
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/repeatWhen.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "repeatWhen": () => (/* binding */ repeatWhen)
/* harmony export */ });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subject */ 228);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 1944);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ 3945);



function repeatWhen(notifier) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    let innerSub;
    let syncResub = false;
    let completions$;
    let isNotifierComplete = false;
    let isMainComplete = false;
    const checkComplete = () => isMainComplete && isNotifierComplete && (subscriber.complete(), true);
    const getCompletionSubject = () => {
      if (!completions$) {
        completions$ = new _Subject__WEBPACK_IMPORTED_MODULE_1__.Subject();
        notifier(completions$).subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, () => {
          if (innerSub) {
            subscribeForRepeatWhen();
          } else {
            syncResub = true;
          }
        }, () => {
          isNotifierComplete = true;
          checkComplete();
        }));
      }
      return completions$;
    };
    const subscribeForRepeatWhen = () => {
      isMainComplete = false;
      innerSub = source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, undefined, () => {
        isMainComplete = true;
        !checkComplete() && getCompletionSubject().next();
      }));
      if (syncResub) {
        innerSub.unsubscribe();
        innerSub = null;
        syncResub = false;
        subscribeForRepeatWhen();
      }
    };
    subscribeForRepeatWhen();
  });
}

/***/ }),

/***/ 8504:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/retry.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "retry": () => (/* binding */ retry)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ 1944);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ 3945);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/identity */ 9173);
/* harmony import */ var _observable_timer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../observable/timer */ 8947);
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../observable/innerFrom */ 4987);





function retry(configOrCount = Infinity) {
  let config;
  if (configOrCount && typeof configOrCount === 'object') {
    config = configOrCount;
  } else {
    config = {
      count: configOrCount
    };
  }
  const {
    count = Infinity,
    delay,
    resetOnSuccess = false
  } = config;
  return count <= 0 ? _util_identity__WEBPACK_IMPORTED_MODULE_0__.identity : (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)((source, subscriber) => {
    let soFar = 0;
    let innerSub;
    const subscribeForRetry = () => {
      let syncUnsub = false;
      innerSub = source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, value => {
        if (resetOnSuccess) {
          soFar = 0;
        }
        subscriber.next(value);
      }, undefined, err => {
        if (soFar++ < count) {
          const resub = () => {
            if (innerSub) {
              innerSub.unsubscribe();
              innerSub = null;
              subscribeForRetry();
            } else {
              syncUnsub = true;
            }
          };
          if (delay != null) {
            const notifier = typeof delay === 'number' ? (0,_observable_timer__WEBPACK_IMPORTED_MODULE_3__.timer)(delay) : (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_4__.innerFrom)(delay(err, soFar));
            const notifierSubscriber = (0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, () => {
              notifierSubscriber.unsubscribe();
              resub();
            }, () => {
              subscriber.complete();
            });
            notifier.subscribe(notifierSubscriber);
          } else {
            resub();
          }
        } else {
          subscriber.error(err);
        }
      }));
      if (syncUnsub) {
        innerSub.unsubscribe();
        innerSub = null;
        subscribeForRetry();
      }
    };
    subscribeForRetry();
  });
}

/***/ }),

/***/ 9196:
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shareReplay": () => (/* binding */ shareReplay)
/* harmony export */ });
/* harmony import */ var _ReplaySubject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ReplaySubject */ 6067);
/* harmony import */ var _share__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./share */ 1203);


function shareReplay(configOrBufferSize, windowTime, scheduler) {
  let bufferSize;
  let refCount = false;
  if (configOrBufferSize && typeof configOrBufferSize === 'object') {
    ({
      bufferSize = Infinity,
      windowTime = Infinity,
      refCount = false,
      scheduler
    } = configOrBufferSize);
  } else {
    bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
  }
  return (0,_share__WEBPACK_IMPORTED_MODULE_0__.share)({
    connector: () => new _ReplaySubject__WEBPACK_IMPORTED_MODULE_1__.ReplaySubject(bufferSize, windowTime, scheduler),
    resetOnError: true,
    resetOnComplete: false,
    resetOnRefCountZero: refCount
  });
}

/***/ }),

/***/ 7260:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/skip.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "skip": () => (/* binding */ skip)
/* harmony export */ });
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter */ 116);

function skip(count) {
  return (0,_filter__WEBPACK_IMPORTED_MODULE_0__.filter)((_, index) => count <= index);
}

/***/ }),

/***/ 8951:
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "takeUntil": () => (/* binding */ takeUntil)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 1944);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ 3945);
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observable/innerFrom */ 4987);
/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/noop */ 9635);




function takeUntil(notifier) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_1__.innerFrom)(notifier).subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, () => subscriber.complete(), _util_noop__WEBPACK_IMPORTED_MODULE_3__.noop));
    !subscriber.closed && source.subscribe(subscriber);
  });
}

/***/ }),

/***/ 9156:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/throttle.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultThrottleConfig": () => (/* binding */ defaultThrottleConfig),
/* harmony export */   "throttle": () => (/* binding */ throttle)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/lift */ 1944);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ 3945);
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observable/innerFrom */ 4987);



const defaultThrottleConfig = {
  leading: true,
  trailing: false
};
function throttle(durationSelector, config = defaultThrottleConfig) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__.operate)((source, subscriber) => {
    const {
      leading,
      trailing
    } = config;
    let hasValue = false;
    let sendValue = null;
    let throttled = null;
    let isComplete = false;
    const endThrottling = () => {
      throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
      throttled = null;
      if (trailing) {
        send();
        isComplete && subscriber.complete();
      }
    };
    const cleanupThrottling = () => {
      throttled = null;
      isComplete && subscriber.complete();
    };
    const startThrottle = value => throttled = (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_1__.innerFrom)(durationSelector(value)).subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, endThrottling, cleanupThrottling));
    const send = () => {
      if (hasValue) {
        hasValue = false;
        const value = sendValue;
        sendValue = null;
        subscriber.next(value);
        !isComplete && startThrottle(value);
      }
    };
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.createOperatorSubscriber)(subscriber, value => {
      hasValue = true;
      sendValue = value;
      !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));
    }, () => {
      isComplete = true;
      !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
    }));
  });
}

/***/ }),

/***/ 5004:
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/operators/throttleTime.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "throttleTime": () => (/* binding */ throttleTime)
/* harmony export */ });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ 6936);
/* harmony import */ var _throttle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./throttle */ 9156);
/* harmony import */ var _observable_timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/timer */ 8947);



function throttleTime(duration, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__.asyncScheduler, config = _throttle__WEBPACK_IMPORTED_MODULE_1__.defaultThrottleConfig) {
  const duration$ = (0,_observable_timer__WEBPACK_IMPORTED_MODULE_2__.timer)(duration, scheduler);
  return (0,_throttle__WEBPACK_IMPORTED_MODULE_1__.throttle)(() => duration$, config);
}

/***/ }),

/***/ 6733:
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/Action.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Action": () => (/* binding */ Action)
/* harmony export */ });
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscription */ 6078);

class Action extends _Subscription__WEBPACK_IMPORTED_MODULE_0__.Subscription {
  constructor(scheduler, work) {
    super();
  }
  schedule(state, delay = 0) {
    return this;
  }
}

/***/ }),

/***/ 3018:
/*!*******************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimationFrameAction": () => (/* binding */ AnimationFrameAction)
/* harmony export */ });
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncAction */ 5198);
/* harmony import */ var _animationFrameProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./animationFrameProvider */ 2915);


class AnimationFrameAction extends _AsyncAction__WEBPACK_IMPORTED_MODULE_0__.AsyncAction {
  constructor(scheduler, work) {
    super(scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
  }
  requestAsyncId(scheduler, id, delay = 0) {
    if (delay !== null && delay > 0) {
      return super.requestAsyncId(scheduler, id, delay);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = _animationFrameProvider__WEBPACK_IMPORTED_MODULE_1__.animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));
  }
  recycleAsyncId(scheduler, id, delay = 0) {
    var _a;
    if (delay != null ? delay > 0 : this.delay > 0) {
      return super.recycleAsyncId(scheduler, id, delay);
    }
    const {
      actions
    } = scheduler;
    if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
      _animationFrameProvider__WEBPACK_IMPORTED_MODULE_1__.animationFrameProvider.cancelAnimationFrame(id);
      scheduler._scheduled = undefined;
    }
    return undefined;
  }
}

/***/ }),

/***/ 9415:
/*!**********************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimationFrameScheduler": () => (/* binding */ AnimationFrameScheduler)
/* harmony export */ });
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncScheduler */ 5744);

class AnimationFrameScheduler extends _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__.AsyncScheduler {
  flush(action) {
    this._active = true;
    const flushId = this._scheduled;
    this._scheduled = undefined;
    const {
      actions
    } = this;
    let error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  }
}

/***/ }),

/***/ 4594:
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/AsapAction.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AsapAction": () => (/* binding */ AsapAction)
/* harmony export */ });
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncAction */ 5198);
/* harmony import */ var _immediateProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./immediateProvider */ 7666);


class AsapAction extends _AsyncAction__WEBPACK_IMPORTED_MODULE_0__.AsyncAction {
  constructor(scheduler, work) {
    super(scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
  }
  requestAsyncId(scheduler, id, delay = 0) {
    if (delay !== null && delay > 0) {
      return super.requestAsyncId(scheduler, id, delay);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = _immediateProvider__WEBPACK_IMPORTED_MODULE_1__.immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));
  }
  recycleAsyncId(scheduler, id, delay = 0) {
    var _a;
    if (delay != null ? delay > 0 : this.delay > 0) {
      return super.recycleAsyncId(scheduler, id, delay);
    }
    const {
      actions
    } = scheduler;
    if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
      _immediateProvider__WEBPACK_IMPORTED_MODULE_1__.immediateProvider.clearImmediate(id);
      scheduler._scheduled = undefined;
    }
    return undefined;
  }
}

/***/ }),

/***/ 321:
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AsapScheduler": () => (/* binding */ AsapScheduler)
/* harmony export */ });
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncScheduler */ 5744);

class AsapScheduler extends _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__.AsyncScheduler {
  flush(action) {
    this._active = true;
    const flushId = this._scheduled;
    this._scheduled = undefined;
    const {
      actions
    } = this;
    let error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  }
}

/***/ }),

/***/ 5198:
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AsyncAction": () => (/* binding */ AsyncAction)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ 6733);
/* harmony import */ var _intervalProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intervalProvider */ 1103);
/* harmony import */ var _util_arrRemove__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/arrRemove */ 9663);



class AsyncAction extends _Action__WEBPACK_IMPORTED_MODULE_0__.Action {
  constructor(scheduler, work) {
    super(scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
    this.pending = false;
  }
  schedule(state, delay = 0) {
    var _a;
    if (this.closed) {
      return this;
    }
    this.state = state;
    const id = this.id;
    const scheduler = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay);
    }
    this.pending = true;
    this.delay = delay;
    this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
    return this;
  }
  requestAsyncId(scheduler, _id, delay = 0) {
    return _intervalProvider__WEBPACK_IMPORTED_MODULE_1__.intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
  }
  recycleAsyncId(_scheduler, id, delay = 0) {
    if (delay != null && this.delay === delay && this.pending === false) {
      return id;
    }
    if (id != null) {
      _intervalProvider__WEBPACK_IMPORTED_MODULE_1__.intervalProvider.clearInterval(id);
    }
    return undefined;
  }
  execute(state, delay) {
    if (this.closed) {
      return new Error('executing a cancelled action');
    }
    this.pending = false;
    const error = this._execute(state, delay);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  }
  _execute(state, _delay) {
    let errored = false;
    let errorValue;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error('Scheduled action threw falsy error');
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  }
  unsubscribe() {
    if (!this.closed) {
      const {
        id,
        scheduler
      } = this;
      const {
        actions
      } = scheduler;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      (0,_util_arrRemove__WEBPACK_IMPORTED_MODULE_2__.arrRemove)(actions, this);
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }
      this.delay = null;
      super.unsubscribe();
    }
  }
}

/***/ }),

/***/ 5744:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AsyncScheduler": () => (/* binding */ AsyncScheduler)
/* harmony export */ });
/* harmony import */ var _Scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Scheduler */ 5014);

class AsyncScheduler extends _Scheduler__WEBPACK_IMPORTED_MODULE_0__.Scheduler {
  constructor(SchedulerAction, now = _Scheduler__WEBPACK_IMPORTED_MODULE_0__.Scheduler.now) {
    super(SchedulerAction, now);
    this.actions = [];
    this._active = false;
  }
  flush(action) {
    const {
      actions
    } = this;
    if (this._active) {
      actions.push(action);
      return;
    }
    let error;
    this._active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this._active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  }
}

/***/ }),

/***/ 8184:
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "animationFrame": () => (/* binding */ animationFrame),
/* harmony export */   "animationFrameScheduler": () => (/* binding */ animationFrameScheduler)
/* harmony export */ });
/* harmony import */ var _AnimationFrameAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AnimationFrameAction */ 3018);
/* harmony import */ var _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AnimationFrameScheduler */ 9415);


const animationFrameScheduler = new _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_0__.AnimationFrameScheduler(_AnimationFrameAction__WEBPACK_IMPORTED_MODULE_1__.AnimationFrameAction);
const animationFrame = animationFrameScheduler;

/***/ }),

/***/ 2915:
/*!*********************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "animationFrameProvider": () => (/* binding */ animationFrameProvider)
/* harmony export */ });
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscription */ 6078);

const animationFrameProvider = {
  schedule(callback) {
    let request = requestAnimationFrame;
    let cancel = cancelAnimationFrame;
    const {
      delegate
    } = animationFrameProvider;
    if (delegate) {
      request = delegate.requestAnimationFrame;
      cancel = delegate.cancelAnimationFrame;
    }
    const handle = request(timestamp => {
      cancel = undefined;
      callback(timestamp);
    });
    return new _Subscription__WEBPACK_IMPORTED_MODULE_0__.Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));
  },
  requestAnimationFrame(...args) {
    const {
      delegate
    } = animationFrameProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);
  },
  cancelAnimationFrame(...args) {
    const {
      delegate
    } = animationFrameProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);
  },
  delegate: undefined
};

/***/ }),

/***/ 9672:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/asap.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asap": () => (/* binding */ asap),
/* harmony export */   "asapScheduler": () => (/* binding */ asapScheduler)
/* harmony export */ });
/* harmony import */ var _AsapAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsapAction */ 4594);
/* harmony import */ var _AsapScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsapScheduler */ 321);


const asapScheduler = new _AsapScheduler__WEBPACK_IMPORTED_MODULE_0__.AsapScheduler(_AsapAction__WEBPACK_IMPORTED_MODULE_1__.AsapAction);
const asap = asapScheduler;

/***/ }),

/***/ 6936:
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/async.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "async": () => (/* binding */ async),
/* harmony export */   "asyncScheduler": () => (/* binding */ asyncScheduler)
/* harmony export */ });
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncAction */ 5198);
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncScheduler */ 5744);


const asyncScheduler = new _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__.AsyncScheduler(_AsyncAction__WEBPACK_IMPORTED_MODULE_1__.AsyncAction);
const async = asyncScheduler;

/***/ }),

/***/ 7654:
/*!********************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dateTimestampProvider": () => (/* binding */ dateTimestampProvider)
/* harmony export */ });
const dateTimestampProvider = {
  now() {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: undefined
};

/***/ }),

/***/ 7666:
/*!****************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/immediateProvider.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "immediateProvider": () => (/* binding */ immediateProvider)
/* harmony export */ });
/* harmony import */ var _util_Immediate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Immediate */ 1714);

const {
  setImmediate,
  clearImmediate
} = _util_Immediate__WEBPACK_IMPORTED_MODULE_0__.Immediate;
const immediateProvider = {
  setImmediate(...args) {
    const {
      delegate
    } = immediateProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate)(...args);
  },
  clearImmediate(handle) {
    const {
      delegate
    } = immediateProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
  },
  delegate: undefined
};

/***/ }),

/***/ 1103:
/*!***************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "intervalProvider": () => (/* binding */ intervalProvider)
/* harmony export */ });
const intervalProvider = {
  setInterval(handler, timeout, ...args) {
    const {
      delegate
    } = intervalProvider;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval(handler, timeout, ...args);
    }
    return setInterval(handler, timeout, ...args);
  },
  clearInterval(handle) {
    const {
      delegate
    } = intervalProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  },
  delegate: undefined
};

/***/ }),

/***/ 1714:
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/Immediate.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Immediate": () => (/* binding */ Immediate),
/* harmony export */   "TestTools": () => (/* binding */ TestTools)
/* harmony export */ });
let nextHandle = 1;
let resolved;
const activeHandles = {};
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
const Immediate = {
  setImmediate(cb) {
    const handle = nextHandle++;
    activeHandles[handle] = true;
    if (!resolved) {
      resolved = Promise.resolve();
    }
    resolved.then(() => findAndClearHandle(handle) && cb());
    return handle;
  },
  clearImmediate(handle) {
    findAndClearHandle(handle);
  }
};
const TestTools = {
  pending() {
    return Object.keys(activeHandles).length;
  }
};

/***/ }),

/***/ 7885:
/*!************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/isDate.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isValidDate": () => (/* binding */ isValidDate)
/* harmony export */ });
function isValidDate(value) {
  return value instanceof Date && !isNaN(value);
}

/***/ }),

/***/ 4437:
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm/internal/util/isObservable.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isObservable": () => (/* binding */ isObservable)
/* harmony export */ });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ 833);
/* harmony import */ var _isFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isFunction */ 2971);


function isObservable(obj) {
  return !!obj && (obj instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__.Observable || (0,_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(obj.lift) && (0,_isFunction__WEBPACK_IMPORTED_MODULE_1__.isFunction)(obj.subscribe));
}

/***/ }),

/***/ 4218:
/*!*****************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2020/a11y.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A11yModule": () => (/* binding */ A11yModule),
/* harmony export */   "ActiveDescendantKeyManager": () => (/* binding */ ActiveDescendantKeyManager),
/* harmony export */   "AriaDescriber": () => (/* binding */ AriaDescriber),
/* harmony export */   "CDK_DESCRIBEDBY_HOST_ATTRIBUTE": () => (/* binding */ CDK_DESCRIBEDBY_HOST_ATTRIBUTE),
/* harmony export */   "CDK_DESCRIBEDBY_ID_PREFIX": () => (/* binding */ CDK_DESCRIBEDBY_ID_PREFIX),
/* harmony export */   "CdkAriaLive": () => (/* binding */ CdkAriaLive),
/* harmony export */   "CdkMonitorFocus": () => (/* binding */ CdkMonitorFocus),
/* harmony export */   "CdkTrapFocus": () => (/* binding */ CdkTrapFocus),
/* harmony export */   "ConfigurableFocusTrap": () => (/* binding */ ConfigurableFocusTrap),
/* harmony export */   "ConfigurableFocusTrapFactory": () => (/* binding */ ConfigurableFocusTrapFactory),
/* harmony export */   "EventListenerFocusTrapInertStrategy": () => (/* binding */ EventListenerFocusTrapInertStrategy),
/* harmony export */   "FOCUS_MONITOR_DEFAULT_OPTIONS": () => (/* binding */ FOCUS_MONITOR_DEFAULT_OPTIONS),
/* harmony export */   "FOCUS_TRAP_INERT_STRATEGY": () => (/* binding */ FOCUS_TRAP_INERT_STRATEGY),
/* harmony export */   "FocusKeyManager": () => (/* binding */ FocusKeyManager),
/* harmony export */   "FocusMonitor": () => (/* binding */ FocusMonitor),
/* harmony export */   "FocusTrap": () => (/* binding */ FocusTrap),
/* harmony export */   "FocusTrapFactory": () => (/* binding */ FocusTrapFactory),
/* harmony export */   "HighContrastModeDetector": () => (/* binding */ HighContrastModeDetector),
/* harmony export */   "INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS": () => (/* binding */ INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS),
/* harmony export */   "INPUT_MODALITY_DETECTOR_OPTIONS": () => (/* binding */ INPUT_MODALITY_DETECTOR_OPTIONS),
/* harmony export */   "InputModalityDetector": () => (/* binding */ InputModalityDetector),
/* harmony export */   "InteractivityChecker": () => (/* binding */ InteractivityChecker),
/* harmony export */   "IsFocusableConfig": () => (/* binding */ IsFocusableConfig),
/* harmony export */   "LIVE_ANNOUNCER_DEFAULT_OPTIONS": () => (/* binding */ LIVE_ANNOUNCER_DEFAULT_OPTIONS),
/* harmony export */   "LIVE_ANNOUNCER_ELEMENT_TOKEN": () => (/* binding */ LIVE_ANNOUNCER_ELEMENT_TOKEN),
/* harmony export */   "LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY": () => (/* binding */ LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY),
/* harmony export */   "ListKeyManager": () => (/* binding */ ListKeyManager),
/* harmony export */   "LiveAnnouncer": () => (/* binding */ LiveAnnouncer),
/* harmony export */   "MESSAGES_CONTAINER_ID": () => (/* binding */ MESSAGES_CONTAINER_ID),
/* harmony export */   "isFakeMousedownFromScreenReader": () => (/* binding */ isFakeMousedownFromScreenReader),
/* harmony export */   "isFakeTouchstartFromScreenReader": () => (/* binding */ isFakeTouchstartFromScreenReader)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 4666);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/platform */ 9107);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 228);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 6078);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ 6317);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ 745);
/* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/keycodes */ 8456);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 9337);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ 1989);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 116);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ 635);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ 9295);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ 7260);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs/operators */ 8977);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs/operators */ 8951);
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/coercion */ 8971);
/* harmony import */ var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/cdk/observers */ 3773);
/* harmony import */ var _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/cdk/layout */ 3278);













/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** IDs are delimited by an empty space, as per the spec. */
const ID_DELIMITER = ' ';
/**
 * Adds the given ID to the specified ARIA attribute on an element.
 * Used for attributes such as aria-labelledby, aria-owns, etc.
 */
function addAriaReferencedId(el, attr, id) {
  const ids = getAriaReferenceIds(el, attr);
  if (ids.some(existingId => existingId.trim() == id.trim())) {
    return;
  }
  ids.push(id.trim());
  el.setAttribute(attr, ids.join(ID_DELIMITER));
}
/**
 * Removes the given ID from the specified ARIA attribute on an element.
 * Used for attributes such as aria-labelledby, aria-owns, etc.
 */
function removeAriaReferencedId(el, attr, id) {
  const ids = getAriaReferenceIds(el, attr);
  const filteredIds = ids.filter(val => val != id.trim());
  if (filteredIds.length) {
    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));
  } else {
    el.removeAttribute(attr);
  }
}
/**
 * Gets the list of IDs referenced by the given ARIA attribute on an element.
 * Used for attributes such as aria-labelledby, aria-owns, etc.
 */
function getAriaReferenceIds(el, attr) {
  // Get string array of all individual ids (whitespace delimited) in the attribute value
  return (el.getAttribute(attr) || '').match(/\S+/g) || [];
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * ID used for the body container where all messages are appended.
 * @deprecated No longer being used. To be removed.
 * @breaking-change 14.0.0
 */
const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';
/**
 * ID prefix used for each created message element.
 * @deprecated To be turned into a private variable.
 * @breaking-change 14.0.0
 */
const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';
/**
 * Attribute given to each host element that is described by a message element.
 * @deprecated To be turned into a private variable.
 * @breaking-change 14.0.0
 */
const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';
/** Global incremental identifier for each registered message element. */
let nextId = 0;
/**
 * Utility that creates visually hidden elements with a message content. Useful for elements that
 * want to use aria-describedby to further describe themselves without adding additional visual
 * content.
 */
class AriaDescriber {
  constructor(_document,
  /**
   * @deprecated To be turned into a required parameter.
   * @breaking-change 14.0.0
   */
  _platform) {
    this._platform = _platform;
    /** Map of all registered message elements that have been placed into the document. */
    this._messageRegistry = new Map();
    /** Container for all registered messages. */
    this._messagesContainer = null;
    /** Unique ID for the service. */
    this._id = `${nextId++}`;
    this._document = _document;
    this._id = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.APP_ID) + '-' + nextId++;
  }
  describe(hostElement, message, role) {
    if (!this._canBeDescribed(hostElement, message)) {
      return;
    }
    const key = getKey(message, role);
    if (typeof message !== 'string') {
      // We need to ensure that the element has an ID.
      setMessageId(message, this._id);
      this._messageRegistry.set(key, {
        messageElement: message,
        referenceCount: 0
      });
    } else if (!this._messageRegistry.has(key)) {
      this._createMessageElement(message, role);
    }
    if (!this._isElementDescribedByMessage(hostElement, key)) {
      this._addMessageReference(hostElement, key);
    }
  }
  removeDescription(hostElement, message, role) {
    if (!message || !this._isElementNode(hostElement)) {
      return;
    }
    const key = getKey(message, role);
    if (this._isElementDescribedByMessage(hostElement, key)) {
      this._removeMessageReference(hostElement, key);
    }
    // If the message is a string, it means that it's one that we created for the
    // consumer so we can remove it safely, otherwise we should leave it in place.
    if (typeof message === 'string') {
      const registeredMessage = this._messageRegistry.get(key);
      if (registeredMessage && registeredMessage.referenceCount === 0) {
        this._deleteMessageElement(key);
      }
    }
    if (this._messagesContainer?.childNodes.length === 0) {
      this._messagesContainer.remove();
      this._messagesContainer = null;
    }
  }
  /** Unregisters all created message elements and removes the message container. */
  ngOnDestroy() {
    const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}="${this._id}"]`);
    for (let i = 0; i < describedElements.length; i++) {
      this._removeCdkDescribedByReferenceIds(describedElements[i]);
      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
    }
    this._messagesContainer?.remove();
    this._messagesContainer = null;
    this._messageRegistry.clear();
  }
  /**
   * Creates a new element in the visually hidden message container element with the message
   * as its content and adds it to the message registry.
   */
  _createMessageElement(message, role) {
    const messageElement = this._document.createElement('div');
    setMessageId(messageElement, this._id);
    messageElement.textContent = message;
    if (role) {
      messageElement.setAttribute('role', role);
    }
    this._createMessagesContainer();
    this._messagesContainer.appendChild(messageElement);
    this._messageRegistry.set(getKey(message, role), {
      messageElement,
      referenceCount: 0
    });
  }
  /** Deletes the message element from the global messages container. */
  _deleteMessageElement(key) {
    this._messageRegistry.get(key)?.messageElement?.remove();
    this._messageRegistry.delete(key);
  }
  /** Creates the global container for all aria-describedby messages. */
  _createMessagesContainer() {
    if (this._messagesContainer) {
      return;
    }
    const containerClassName = 'cdk-describedby-message-container';
    const serverContainers = this._document.querySelectorAll(`.${containerClassName}[platform="server"]`);
    for (let i = 0; i < serverContainers.length; i++) {
      // When going from the server to the client, we may end up in a situation where there's
      // already a container on the page, but we don't have a reference to it. Clear the
      // old container so we don't get duplicates. Doing this, instead of emptying the previous
      // container, should be slightly faster.
      serverContainers[i].remove();
    }
    const messagesContainer = this._document.createElement('div');
    // We add `visibility: hidden` in order to prevent text in this container from
    // being searchable by the browser's Ctrl + F functionality.
    // Screen-readers will still read the description for elements with aria-describedby even
    // when the description element is not visible.
    messagesContainer.style.visibility = 'hidden';
    // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that
    // the description element doesn't impact page layout.
    messagesContainer.classList.add(containerClassName);
    messagesContainer.classList.add('cdk-visually-hidden');
    // @breaking-change 14.0.0 Remove null check for `_platform`.
    if (this._platform && !this._platform.isBrowser) {
      messagesContainer.setAttribute('platform', 'server');
    }
    this._document.body.appendChild(messagesContainer);
    this._messagesContainer = messagesContainer;
  }
  /** Removes all cdk-describedby messages that are hosted through the element. */
  _removeCdkDescribedByReferenceIds(element) {
    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX
    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);
    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));
  }
  /**
   * Adds a message reference to the element using aria-describedby and increments the registered
   * message's reference count.
   */
  _addMessageReference(element, key) {
    const registeredMessage = this._messageRegistry.get(key);
    // Add the aria-describedby reference and set the
    // describedby_host attribute to mark the element.
    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);
    registeredMessage.referenceCount++;
  }
  /**
   * Removes a message reference from the element using aria-describedby
   * and decrements the registered message's reference count.
   */
  _removeMessageReference(element, key) {
    const registeredMessage = this._messageRegistry.get(key);
    registeredMessage.referenceCount--;
    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
  }
  /** Returns true if the element has been described by the provided message ID. */
  _isElementDescribedByMessage(element, key) {
    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');
    const registeredMessage = this._messageRegistry.get(key);
    const messageId = registeredMessage && registeredMessage.messageElement.id;
    return !!messageId && referenceIds.indexOf(messageId) != -1;
  }
  /** Determines whether a message can be described on a particular element. */
  _canBeDescribed(element, message) {
    if (!this._isElementNode(element)) {
      return false;
    }
    if (message && typeof message === 'object') {
      // We'd have to make some assumptions about the description element's text, if the consumer
      // passed in an element. Assume that if an element is passed in, the consumer has verified
      // that it can be used as a description.
      return true;
    }
    const trimmedMessage = message == null ? '' : `${message}`.trim();
    const ariaLabel = element.getAttribute('aria-label');
    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the
    // element, because screen readers will end up reading out the same text twice in a row.
    return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;
  }
  /** Checks whether a node is an Element node. */
  _isElementNode(element) {
    return element.nodeType === this._document.ELEMENT_NODE;
  }
}
AriaDescriber.ɵfac = function AriaDescriber_Factory(t) {
  return new (t || AriaDescriber)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform));
};
AriaDescriber.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: AriaDescriber,
  factory: AriaDescriber.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AriaDescriber, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
      }]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform
    }];
  }, null);
})();
/** Gets a key that can be used to look messages up in the registry. */
function getKey(message, role) {
  return typeof message === 'string' ? `${role || ''}/${message}` : message;
}
/** Assigns a unique ID to an element, if it doesn't have one already. */
function setMessageId(element, serviceId) {
  if (!element.id) {
    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * This class manages keyboard events for selectable lists. If you pass it a query list
 * of items, it will set the active item correctly when arrow events occur.
 */
class ListKeyManager {
  constructor(_items) {
    this._items = _items;
    this._activeItemIndex = -1;
    this._activeItem = null;
    this._wrap = false;
    this._letterKeyStream = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
    this._typeaheadSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__.Subscription.EMPTY;
    this._vertical = true;
    this._allowedModifierKeys = [];
    this._homeAndEnd = false;
    this._pageUpAndDown = {
      enabled: false,
      delta: 10
    };
    /**
     * Predicate function that can be used to check whether an item should be skipped
     * by the key manager. By default, disabled items are skipped.
     */
    this._skipPredicateFn = item => item.disabled;
    // Buffer for the letters that the user has pressed when the typeahead option is turned on.
    this._pressedLetters = [];
    /**
     * Stream that emits any time the TAB key is pressed, so components can react
     * when focus is shifted off of the list.
     */
    this.tabOut = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
    /** Stream that emits whenever the active item of the list manager changes. */
    this.change = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
    // We allow for the items to be an array because, in some cases, the consumer may
    // not have access to a QueryList of the items they want to manage (e.g. when the
    // items aren't being collected via `ViewChildren` or `ContentChildren`).
    if (_items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.QueryList) {
      this._itemChangesSubscription = _items.changes.subscribe(newItems => {
        if (this._activeItem) {
          const itemArray = newItems.toArray();
          const newIndex = itemArray.indexOf(this._activeItem);
          if (newIndex > -1 && newIndex !== this._activeItemIndex) {
            this._activeItemIndex = newIndex;
          }
        }
      });
    }
  }
  /**
   * Sets the predicate function that determines which items should be skipped by the
   * list key manager.
   * @param predicate Function that determines whether the given item should be skipped.
   */
  skipPredicate(predicate) {
    this._skipPredicateFn = predicate;
    return this;
  }
  /**
   * Configures wrapping mode, which determines whether the active item will wrap to
   * the other end of list when there are no more items in the given direction.
   * @param shouldWrap Whether the list should wrap when reaching the end.
   */
  withWrap(shouldWrap = true) {
    this._wrap = shouldWrap;
    return this;
  }
  /**
   * Configures whether the key manager should be able to move the selection vertically.
   * @param enabled Whether vertical selection should be enabled.
   */
  withVerticalOrientation(enabled = true) {
    this._vertical = enabled;
    return this;
  }
  /**
   * Configures the key manager to move the selection horizontally.
   * Passing in `null` will disable horizontal movement.
   * @param direction Direction in which the selection can be moved.
   */
  withHorizontalOrientation(direction) {
    this._horizontal = direction;
    return this;
  }
  /**
   * Modifier keys which are allowed to be held down and whose default actions will be prevented
   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.
   */
  withAllowedModifierKeys(keys) {
    this._allowedModifierKeys = keys;
    return this;
  }
  /**
   * Turns on typeahead mode which allows users to set the active item by typing.
   * @param debounceInterval Time to wait after the last keystroke before setting the active item.
   */
  withTypeAhead(debounceInterval = 200) {
    if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {
      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');
    }
    this._typeaheadSubscription.unsubscribe();
    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters
    // and convert those letters back into a string. Afterwards find the first item that starts
    // with that string and select it.
    this._typeaheadSubscription = this._letterKeyStream.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.tap)(letter => this._pressedLetters.push(letter)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.debounceTime)(debounceInterval), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.filter)(() => this._pressedLetters.length > 0), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(() => this._pressedLetters.join(''))).subscribe(inputString => {
      const items = this._getItemsArray();
      // Start at 1 because we want to start searching at the item immediately
      // following the current active item.
      for (let i = 1; i < items.length + 1; i++) {
        const index = (this._activeItemIndex + i) % items.length;
        const item = items[index];
        if (!this._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {
          this.setActiveItem(index);
          break;
        }
      }
      this._pressedLetters = [];
    });
    return this;
  }
  /** Cancels the current typeahead sequence. */
  cancelTypeahead() {
    this._pressedLetters = [];
    return this;
  }
  /**
   * Configures the key manager to activate the first and last items
   * respectively when the Home or End key is pressed.
   * @param enabled Whether pressing the Home or End key activates the first/last item.
   */
  withHomeAndEnd(enabled = true) {
    this._homeAndEnd = enabled;
    return this;
  }
  /**
   * Configures the key manager to activate every 10th, configured or first/last element in up/down direction
   * respectively when the Page-Up or Page-Down key is pressed.
   * @param enabled Whether pressing the Page-Up or Page-Down key activates the first/last item.
   * @param delta Whether pressing the Home or End key activates the first/last item.
   */
  withPageUpDown(enabled = true, delta = 10) {
    this._pageUpAndDown = {
      enabled,
      delta
    };
    return this;
  }
  setActiveItem(item) {
    const previousActiveItem = this._activeItem;
    this.updateActiveItem(item);
    if (this._activeItem !== previousActiveItem) {
      this.change.next(this._activeItemIndex);
    }
  }
  /**
   * Sets the active item depending on the key event passed in.
   * @param event Keyboard event to be used for determining which element should be active.
   */
  onKeydown(event) {
    const keyCode = event.keyCode;
    const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];
    const isModifierAllowed = modifiers.every(modifier => {
      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;
    });
    switch (keyCode) {
      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.TAB:
        this.tabOut.next();
        return;
      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.DOWN_ARROW:
        if (this._vertical && isModifierAllowed) {
          this.setNextItemActive();
          break;
        } else {
          return;
        }
      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.UP_ARROW:
        if (this._vertical && isModifierAllowed) {
          this.setPreviousItemActive();
          break;
        } else {
          return;
        }
      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.RIGHT_ARROW:
        if (this._horizontal && isModifierAllowed) {
          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();
          break;
        } else {
          return;
        }
      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.LEFT_ARROW:
        if (this._horizontal && isModifierAllowed) {
          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();
          break;
        } else {
          return;
        }
      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.HOME:
        if (this._homeAndEnd && isModifierAllowed) {
          this.setFirstItemActive();
          break;
        } else {
          return;
        }
      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.END:
        if (this._homeAndEnd && isModifierAllowed) {
          this.setLastItemActive();
          break;
        } else {
          return;
        }
      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.PAGE_UP:
        if (this._pageUpAndDown.enabled && isModifierAllowed) {
          const targetIndex = this._activeItemIndex - this._pageUpAndDown.delta;
          this._setActiveItemByIndex(targetIndex > 0 ? targetIndex : 0, 1);
          break;
        } else {
          return;
        }
      case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.PAGE_DOWN:
        if (this._pageUpAndDown.enabled && isModifierAllowed) {
          const targetIndex = this._activeItemIndex + this._pageUpAndDown.delta;
          const itemsLength = this._getItemsArray().length;
          this._setActiveItemByIndex(targetIndex < itemsLength ? targetIndex : itemsLength - 1, -1);
          break;
        } else {
          return;
        }
      default:
        if (isModifierAllowed || (0,_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.hasModifierKey)(event, 'shiftKey')) {
          // Attempt to use the `event.key` which also maps it to the user's keyboard language,
          // otherwise fall back to resolving alphanumeric characters via the keyCode.
          if (event.key && event.key.length === 1) {
            this._letterKeyStream.next(event.key.toLocaleUpperCase());
          } else if (keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.A && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.Z || keyCode >= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.ZERO && keyCode <= _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.NINE) {
            this._letterKeyStream.next(String.fromCharCode(keyCode));
          }
        }
        // Note that we return here, in order to avoid preventing
        // the default action of non-navigational keys.
        return;
    }
    this._pressedLetters = [];
    event.preventDefault();
  }
  /** Index of the currently active item. */
  get activeItemIndex() {
    return this._activeItemIndex;
  }
  /** The active item. */
  get activeItem() {
    return this._activeItem;
  }
  /** Gets whether the user is currently typing into the manager using the typeahead feature. */
  isTyping() {
    return this._pressedLetters.length > 0;
  }
  /** Sets the active item to the first enabled item in the list. */
  setFirstItemActive() {
    this._setActiveItemByIndex(0, 1);
  }
  /** Sets the active item to the last enabled item in the list. */
  setLastItemActive() {
    this._setActiveItemByIndex(this._items.length - 1, -1);
  }
  /** Sets the active item to the next enabled item in the list. */
  setNextItemActive() {
    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);
  }
  /** Sets the active item to a previous enabled item in the list. */
  setPreviousItemActive() {
    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);
  }
  updateActiveItem(item) {
    const itemArray = this._getItemsArray();
    const index = typeof item === 'number' ? item : itemArray.indexOf(item);
    const activeItem = itemArray[index];
    // Explicitly check for `null` and `undefined` because other falsy values are valid.
    this._activeItem = activeItem == null ? null : activeItem;
    this._activeItemIndex = index;
  }
  /** Cleans up the key manager. */
  destroy() {
    this._typeaheadSubscription.unsubscribe();
    this._itemChangesSubscription?.unsubscribe();
    this._letterKeyStream.complete();
    this.tabOut.complete();
    this.change.complete();
    this._pressedLetters = [];
  }
  /**
   * This method sets the active item, given a list of items and the delta between the
   * currently active item and the new active item. It will calculate differently
   * depending on whether wrap mode is turned on.
   */
  _setActiveItemByDelta(delta) {
    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);
  }
  /**
   * Sets the active item properly given "wrap" mode. In other words, it will continue to move
   * down the list until it finds an item that is not disabled, and it will wrap if it
   * encounters either end of the list.
   */
  _setActiveInWrapMode(delta) {
    const items = this._getItemsArray();
    for (let i = 1; i <= items.length; i++) {
      const index = (this._activeItemIndex + delta * i + items.length) % items.length;
      const item = items[index];
      if (!this._skipPredicateFn(item)) {
        this.setActiveItem(index);
        return;
      }
    }
  }
  /**
   * Sets the active item properly given the default mode. In other words, it will
   * continue to move down the list until it finds an item that is not disabled. If
   * it encounters either end of the list, it will stop and not wrap.
   */
  _setActiveInDefaultMode(delta) {
    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);
  }
  /**
   * Sets the active item to the first enabled item starting at the index specified. If the
   * item is disabled, it will move in the fallbackDelta direction until it either
   * finds an enabled item or encounters the end of the list.
   */
  _setActiveItemByIndex(index, fallbackDelta) {
    const items = this._getItemsArray();
    if (!items[index]) {
      return;
    }
    while (this._skipPredicateFn(items[index])) {
      index += fallbackDelta;
      if (!items[index]) {
        return;
      }
    }
    this.setActiveItem(index);
  }
  /** Returns the items as an array. */
  _getItemsArray() {
    return this._items instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.QueryList ? this._items.toArray() : this._items;
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class ActiveDescendantKeyManager extends ListKeyManager {
  setActiveItem(index) {
    if (this.activeItem) {
      this.activeItem.setInactiveStyles();
    }
    super.setActiveItem(index);
    if (this.activeItem) {
      this.activeItem.setActiveStyles();
    }
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class FocusKeyManager extends ListKeyManager {
  constructor() {
    super(...arguments);
    this._origin = 'program';
  }
  /**
   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.
   * @param origin Focus origin to be used when focusing items.
   */
  setFocusOrigin(origin) {
    this._origin = origin;
    return this;
  }
  setActiveItem(item) {
    super.setActiveItem(item);
    if (this.activeItem) {
      this.activeItem.focus(this._origin);
    }
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Configuration for the isFocusable method.
 */
class IsFocusableConfig {
  constructor() {
    /**
     * Whether to count an element as focusable even if it is not currently visible.
     */
    this.ignoreVisibility = false;
  }
}
// The InteractivityChecker leans heavily on the ally.js accessibility utilities.
// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are
// supported.
/**
 * Utility for checking the interactivity of an element, such as whether is is focusable or
 * tabbable.
 */
class InteractivityChecker {
  constructor(_platform) {
    this._platform = _platform;
  }
  /**
   * Gets whether an element is disabled.
   *
   * @param element Element to be checked.
   * @returns Whether the element is disabled.
   */
  isDisabled(element) {
    // This does not capture some cases, such as a non-form control with a disabled attribute or
    // a form control inside of a disabled form, but should capture the most common cases.
    return element.hasAttribute('disabled');
  }
  /**
   * Gets whether an element is visible for the purposes of interactivity.
   *
   * This will capture states like `display: none` and `visibility: hidden`, but not things like
   * being clipped by an `overflow: hidden` parent or being outside the viewport.
   *
   * @returns Whether the element is visible.
   */
  isVisible(element) {
    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';
  }
  /**
   * Gets whether an element can be reached via Tab key.
   * Assumes that the element has already been checked with isFocusable.
   *
   * @param element Element to be checked.
   * @returns Whether the element is tabbable.
   */
  isTabbable(element) {
    // Nothing is tabbable on the server 😎
    if (!this._platform.isBrowser) {
      return false;
    }
    const frameElement = getFrameElement(getWindow(element));
    if (frameElement) {
      // Frame elements inherit their tabindex onto all child elements.
      if (getTabIndexValue(frameElement) === -1) {
        return false;
      }
      // Browsers disable tabbing to an element inside of an invisible frame.
      if (!this.isVisible(frameElement)) {
        return false;
      }
    }
    let nodeName = element.nodeName.toLowerCase();
    let tabIndexValue = getTabIndexValue(element);
    if (element.hasAttribute('contenteditable')) {
      return tabIndexValue !== -1;
    }
    if (nodeName === 'iframe' || nodeName === 'object') {
      // The frame or object's content may be tabbable depending on the content, but it's
      // not possibly to reliably detect the content of the frames. We always consider such
      // elements as non-tabbable.
      return false;
    }
    // In iOS, the browser only considers some specific elements as tabbable.
    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {
      return false;
    }
    if (nodeName === 'audio') {
      // Audio elements without controls enabled are never tabbable, regardless
      // of the tabindex attribute explicitly being set.
      if (!element.hasAttribute('controls')) {
        return false;
      }
      // Audio elements with controls are by default tabbable unless the
      // tabindex attribute is set to `-1` explicitly.
      return tabIndexValue !== -1;
    }
    if (nodeName === 'video') {
      // For all video elements, if the tabindex attribute is set to `-1`, the video
      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`
      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The
      // tabindex attribute is the source of truth here.
      if (tabIndexValue === -1) {
        return false;
      }
      // If the tabindex is explicitly set, and not `-1` (as per check before), the
      // video element is always tabbable (regardless of whether it has controls or not).
      if (tabIndexValue !== null) {
        return true;
      }
      // Otherwise (when no explicit tabindex is set), a video is only tabbable if it
      // has controls enabled. Firefox is special as videos are always tabbable regardless
      // of whether there are controls or not.
      return this._platform.FIREFOX || element.hasAttribute('controls');
    }
    return element.tabIndex >= 0;
  }
  /**
   * Gets whether an element can be focused by the user.
   *
   * @param element Element to be checked.
   * @param config The config object with options to customize this method's behavior
   * @returns Whether the element is focusable.
   */
  isFocusable(element, config) {
    // Perform checks in order of left to most expensive.
    // Again, naive approach that does not capture many edge cases and browser quirks.
    return isPotentiallyFocusable(element) && !this.isDisabled(element) && (config?.ignoreVisibility || this.isVisible(element));
  }
}
InteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {
  return new (t || InteractivityChecker)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform));
};
InteractivityChecker.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: InteractivityChecker,
  factory: InteractivityChecker.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](InteractivityChecker, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform
    }];
  }, null);
})();
/**
 * Returns the frame element from a window object. Since browsers like MS Edge throw errors if
 * the frameElement property is being accessed from a different host address, this property
 * should be accessed carefully.
 */
function getFrameElement(window) {
  try {
    return window.frameElement;
  } catch {
    return null;
  }
}
/** Checks whether the specified element has any geometry / rectangles. */
function hasGeometry(element) {
  // Use logic from jQuery to check for an invisible element.
  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12
  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);
}
/** Gets whether an element's  */
function isNativeFormElement(element) {
  let nodeName = element.nodeName.toLowerCase();
  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';
}
/** Gets whether an element is an `<input type="hidden">`. */
function isHiddenInput(element) {
  return isInputElement(element) && element.type == 'hidden';
}
/** Gets whether an element is an anchor that has an href attribute. */
function isAnchorWithHref(element) {
  return isAnchorElement(element) && element.hasAttribute('href');
}
/** Gets whether an element is an input element. */
function isInputElement(element) {
  return element.nodeName.toLowerCase() == 'input';
}
/** Gets whether an element is an anchor element. */
function isAnchorElement(element) {
  return element.nodeName.toLowerCase() == 'a';
}
/** Gets whether an element has a valid tabindex. */
function hasValidTabIndex(element) {
  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {
    return false;
  }
  let tabIndex = element.getAttribute('tabindex');
  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));
}
/**
 * Returns the parsed tabindex from the element attributes instead of returning the
 * evaluated tabindex from the browsers defaults.
 */
function getTabIndexValue(element) {
  if (!hasValidTabIndex(element)) {
    return null;
  }
  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);
  return isNaN(tabIndex) ? -1 : tabIndex;
}
/** Checks whether the specified element is potentially tabbable on iOS */
function isPotentiallyTabbableIOS(element) {
  let nodeName = element.nodeName.toLowerCase();
  let inputType = nodeName === 'input' && element.type;
  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';
}
/**
 * Gets whether an element is potentially focusable without taking current visible/disabled state
 * into account.
 */
function isPotentiallyFocusable(element) {
  // Inputs are potentially focusable *unless* they're type="hidden".
  if (isHiddenInput(element)) {
    return false;
  }
  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);
}
/** Gets the parent window of a DOM node with regards of being inside of an iframe. */
function getWindow(node) {
  // ownerDocument is null if `node` itself *is* a document.
  return node.ownerDocument && node.ownerDocument.defaultView || window;
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Class that allows for trapping focus within a DOM element.
 *
 * This class currently uses a relatively simple approach to focus trapping.
 * It assumes that the tab order is the same as DOM order, which is not necessarily true.
 * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.
 *
 * @deprecated Use `ConfigurableFocusTrap` instead.
 * @breaking-change 11.0.0
 */
class FocusTrap {
  /** Whether the focus trap is active. */
  get enabled() {
    return this._enabled;
  }
  set enabled(value) {
    this._enabled = value;
    if (this._startAnchor && this._endAnchor) {
      this._toggleAnchorTabIndex(value, this._startAnchor);
      this._toggleAnchorTabIndex(value, this._endAnchor);
    }
  }
  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {
    this._element = _element;
    this._checker = _checker;
    this._ngZone = _ngZone;
    this._document = _document;
    this._hasAttached = false;
    // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.
    this.startAnchorListener = () => this.focusLastTabbableElement();
    this.endAnchorListener = () => this.focusFirstTabbableElement();
    this._enabled = true;
    if (!deferAnchors) {
      this.attachAnchors();
    }
  }
  /** Destroys the focus trap by cleaning up the anchors. */
  destroy() {
    const startAnchor = this._startAnchor;
    const endAnchor = this._endAnchor;
    if (startAnchor) {
      startAnchor.removeEventListener('focus', this.startAnchorListener);
      startAnchor.remove();
    }
    if (endAnchor) {
      endAnchor.removeEventListener('focus', this.endAnchorListener);
      endAnchor.remove();
    }
    this._startAnchor = this._endAnchor = null;
    this._hasAttached = false;
  }
  /**
   * Inserts the anchors into the DOM. This is usually done automatically
   * in the constructor, but can be deferred for cases like directives with `*ngIf`.
   * @returns Whether the focus trap managed to attach successfully. This may not be the case
   * if the target element isn't currently in the DOM.
   */
  attachAnchors() {
    // If we're not on the browser, there can be no focus to trap.
    if (this._hasAttached) {
      return true;
    }
    this._ngZone.runOutsideAngular(() => {
      if (!this._startAnchor) {
        this._startAnchor = this._createAnchor();
        this._startAnchor.addEventListener('focus', this.startAnchorListener);
      }
      if (!this._endAnchor) {
        this._endAnchor = this._createAnchor();
        this._endAnchor.addEventListener('focus', this.endAnchorListener);
      }
    });
    if (this._element.parentNode) {
      this._element.parentNode.insertBefore(this._startAnchor, this._element);
      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);
      this._hasAttached = true;
    }
    return this._hasAttached;
  }
  /**
   * Waits for the zone to stabilize, then focuses the first tabbable element.
   * @returns Returns a promise that resolves with a boolean, depending
   * on whether focus was moved successfully.
   */
  focusInitialElementWhenReady(options) {
    return new Promise(resolve => {
      this._executeOnStable(() => resolve(this.focusInitialElement(options)));
    });
  }
  /**
   * Waits for the zone to stabilize, then focuses
   * the first tabbable element within the focus trap region.
   * @returns Returns a promise that resolves with a boolean, depending
   * on whether focus was moved successfully.
   */
  focusFirstTabbableElementWhenReady(options) {
    return new Promise(resolve => {
      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));
    });
  }
  /**
   * Waits for the zone to stabilize, then focuses
   * the last tabbable element within the focus trap region.
   * @returns Returns a promise that resolves with a boolean, depending
   * on whether focus was moved successfully.
   */
  focusLastTabbableElementWhenReady(options) {
    return new Promise(resolve => {
      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));
    });
  }
  /**
   * Get the specified boundary element of the trapped region.
   * @param bound The boundary to get (start or end of trapped region).
   * @returns The boundary element.
   */
  _getRegionBoundary(bound) {
    // Contains the deprecated version of selector, for temporary backwards comparability.
    const markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      for (let i = 0; i < markers.length; i++) {
        // @breaking-change 8.0.0
        if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {
          console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);
        } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {
          console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);
        }
      }
    }
    if (bound == 'start') {
      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);
    }
    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);
  }
  /**
   * Focuses the element that should be focused when the focus trap is initialized.
   * @returns Whether focus was moved successfully.
   */
  focusInitialElement(options) {
    // Contains the deprecated version of selector, for temporary backwards comparability.
    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);
    if (redirectToElement) {
      // @breaking-change 8.0.0
      if ((typeof ngDevMode === 'undefined' || ngDevMode) && redirectToElement.hasAttribute(`cdk-focus-initial`)) {
        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);
      }
      // Warn the consumer if the element they've pointed to
      // isn't focusable, when not in production mode.
      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {
        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);
      }
      if (!this._checker.isFocusable(redirectToElement)) {
        const focusableChild = this._getFirstTabbableElement(redirectToElement);
        focusableChild?.focus(options);
        return !!focusableChild;
      }
      redirectToElement.focus(options);
      return true;
    }
    return this.focusFirstTabbableElement(options);
  }
  /**
   * Focuses the first tabbable element within the focus trap region.
   * @returns Whether focus was moved successfully.
   */
  focusFirstTabbableElement(options) {
    const redirectToElement = this._getRegionBoundary('start');
    if (redirectToElement) {
      redirectToElement.focus(options);
    }
    return !!redirectToElement;
  }
  /**
   * Focuses the last tabbable element within the focus trap region.
   * @returns Whether focus was moved successfully.
   */
  focusLastTabbableElement(options) {
    const redirectToElement = this._getRegionBoundary('end');
    if (redirectToElement) {
      redirectToElement.focus(options);
    }
    return !!redirectToElement;
  }
  /**
   * Checks whether the focus trap has successfully been attached.
   */
  hasAttached() {
    return this._hasAttached;
  }
  /** Get the first tabbable element from a DOM subtree (inclusive). */
  _getFirstTabbableElement(root) {
    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
      return root;
    }
    const children = root.children;
    for (let i = 0; i < children.length; i++) {
      const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;
      if (tabbableChild) {
        return tabbableChild;
      }
    }
    return null;
  }
  /** Get the last tabbable element from a DOM subtree (inclusive). */
  _getLastTabbableElement(root) {
    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
      return root;
    }
    // Iterate in reverse DOM order.
    const children = root.children;
    for (let i = children.length - 1; i >= 0; i--) {
      const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;
      if (tabbableChild) {
        return tabbableChild;
      }
    }
    return null;
  }
  /** Creates an anchor element. */
  _createAnchor() {
    const anchor = this._document.createElement('div');
    this._toggleAnchorTabIndex(this._enabled, anchor);
    anchor.classList.add('cdk-visually-hidden');
    anchor.classList.add('cdk-focus-trap-anchor');
    anchor.setAttribute('aria-hidden', 'true');
    return anchor;
  }
  /**
   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.
   * @param isEnabled Whether the focus trap is enabled.
   * @param anchor Anchor on which to toggle the tabindex.
   */
  _toggleAnchorTabIndex(isEnabled, anchor) {
    // Remove the tabindex completely, rather than setting it to -1, because if the
    // element has a tabindex, the user might still hit it when navigating with the arrow keys.
    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');
  }
  /**
   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.
   * @param enabled: Whether the anchors should trap Tab.
   */
  toggleAnchors(enabled) {
    if (this._startAnchor && this._endAnchor) {
      this._toggleAnchorTabIndex(enabled, this._startAnchor);
      this._toggleAnchorTabIndex(enabled, this._endAnchor);
    }
  }
  /** Executes a function when the zone is stable. */
  _executeOnStable(fn) {
    if (this._ngZone.isStable) {
      fn();
    } else {
      this._ngZone.onStable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.take)(1)).subscribe(fn);
    }
  }
}
/**
 * Factory that allows easy instantiation of focus traps.
 * @deprecated Use `ConfigurableFocusTrapFactory` instead.
 * @breaking-change 11.0.0
 */
class FocusTrapFactory {
  constructor(_checker, _ngZone, _document) {
    this._checker = _checker;
    this._ngZone = _ngZone;
    this._document = _document;
  }
  /**
   * Creates a focus-trapped region around the given element.
   * @param element The element around which focus will be trapped.
   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done
   *     manually by the user.
   * @returns The created focus trap instance.
   */
  create(element, deferCaptureElements = false) {
    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);
  }
}
FocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {
  return new (t || FocusTrapFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](InteractivityChecker), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
};
FocusTrapFactory.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: FocusTrapFactory,
  factory: FocusTrapFactory.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FocusTrapFactory, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: InteractivityChecker
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
      }]
    }];
  }, null);
})();
/** Directive for trapping focus within a region. */
class CdkTrapFocus {
  /** Whether the focus trap is active. */
  get enabled() {
    return this.focusTrap.enabled;
  }
  set enabled(value) {
    this.focusTrap.enabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceBooleanProperty)(value);
  }
  /**
   * Whether the directive should automatically move focus into the trapped region upon
   * initialization and return focus to the previous activeElement upon destruction.
   */
  get autoCapture() {
    return this._autoCapture;
  }
  set autoCapture(value) {
    this._autoCapture = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceBooleanProperty)(value);
  }
  constructor(_elementRef, _focusTrapFactory,
  /**
   * @deprecated No longer being used. To be removed.
   * @breaking-change 13.0.0
   */
  _document) {
    this._elementRef = _elementRef;
    this._focusTrapFactory = _focusTrapFactory;
    /** Previously focused element to restore focus to upon destroy when using autoCapture. */
    this._previouslyFocusedElement = null;
    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);
  }
  ngOnDestroy() {
    this.focusTrap.destroy();
    // If we stored a previously focused element when using autoCapture, return focus to that
    // element now that the trapped region is being destroyed.
    if (this._previouslyFocusedElement) {
      this._previouslyFocusedElement.focus();
      this._previouslyFocusedElement = null;
    }
  }
  ngAfterContentInit() {
    this.focusTrap.attachAnchors();
    if (this.autoCapture) {
      this._captureFocus();
    }
  }
  ngDoCheck() {
    if (!this.focusTrap.hasAttached()) {
      this.focusTrap.attachAnchors();
    }
  }
  ngOnChanges(changes) {
    const autoCaptureChange = changes['autoCapture'];
    if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap.hasAttached()) {
      this._captureFocus();
    }
  }
  _captureFocus() {
    this._previouslyFocusedElement = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getFocusedElementPierceShadowDom)();
    this.focusTrap.focusInitialElementWhenReady();
  }
}
CdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {
  return new (t || CdkTrapFocus)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](FocusTrapFactory), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
};
CdkTrapFocus.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CdkTrapFocus,
  selectors: [["", "cdkTrapFocus", ""]],
  inputs: {
    enabled: ["cdkTrapFocus", "enabled"],
    autoCapture: ["cdkTrapFocusAutoCapture", "autoCapture"]
  },
  exportAs: ["cdkTrapFocus"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkTrapFocus, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[cdkTrapFocus]',
      exportAs: 'cdkTrapFocus'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: FocusTrapFactory
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
      }]
    }];
  }, {
    enabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['cdkTrapFocus']
    }],
    autoCapture: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['cdkTrapFocusAutoCapture']
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Class that allows for trapping focus within a DOM element.
 *
 * This class uses a strategy pattern that determines how it traps focus.
 * See FocusTrapInertStrategy.
 */
class ConfigurableFocusTrap extends FocusTrap {
  /** Whether the FocusTrap is enabled. */
  get enabled() {
    return this._enabled;
  }
  set enabled(value) {
    this._enabled = value;
    if (this._enabled) {
      this._focusTrapManager.register(this);
    } else {
      this._focusTrapManager.deregister(this);
    }
  }
  constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {
    super(_element, _checker, _ngZone, _document, config.defer);
    this._focusTrapManager = _focusTrapManager;
    this._inertStrategy = _inertStrategy;
    this._focusTrapManager.register(this);
  }
  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */
  destroy() {
    this._focusTrapManager.deregister(this);
    super.destroy();
  }
  /** @docs-private Implemented as part of ManagedFocusTrap. */
  _enable() {
    this._inertStrategy.preventFocus(this);
    this.toggleAnchors(true);
  }
  /** @docs-private Implemented as part of ManagedFocusTrap. */
  _disable() {
    this._inertStrategy.allowFocus(this);
    this.toggleAnchors(false);
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** The injection token used to specify the inert strategy. */
const FOCUS_TRAP_INERT_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('FOCUS_TRAP_INERT_STRATEGY');

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Lightweight FocusTrapInertStrategy that adds a document focus event
 * listener to redirect focus back inside the FocusTrap.
 */
class EventListenerFocusTrapInertStrategy {
  constructor() {
    /** Focus event handler. */
    this._listener = null;
  }
  /** Adds a document event listener that keeps focus inside the FocusTrap. */
  preventFocus(focusTrap) {
    // Ensure there's only one listener per document
    if (this._listener) {
      focusTrap._document.removeEventListener('focus', this._listener, true);
    }
    this._listener = e => this._trapFocus(focusTrap, e);
    focusTrap._ngZone.runOutsideAngular(() => {
      focusTrap._document.addEventListener('focus', this._listener, true);
    });
  }
  /** Removes the event listener added in preventFocus. */
  allowFocus(focusTrap) {
    if (!this._listener) {
      return;
    }
    focusTrap._document.removeEventListener('focus', this._listener, true);
    this._listener = null;
  }
  /**
   * Refocuses the first element in the FocusTrap if the focus event target was outside
   * the FocusTrap.
   *
   * This is an event listener callback. The event listener is added in runOutsideAngular,
   * so all this code runs outside Angular as well.
   */
  _trapFocus(focusTrap, event) {
    const target = event.target;
    const focusTrapRoot = focusTrap._element;
    // Don't refocus if target was in an overlay, because the overlay might be associated
    // with an element inside the FocusTrap, ex. mat-select.
    if (target && !focusTrapRoot.contains(target) && !target.closest?.('div.cdk-overlay-pane')) {
      // Some legacy FocusTrap usages have logic that focuses some element on the page
      // just before FocusTrap is destroyed. For backwards compatibility, wait
      // to be sure FocusTrap is still enabled before refocusing.
      setTimeout(() => {
        // Check whether focus wasn't put back into the focus trap while the timeout was pending.
        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {
          focusTrap.focusFirstTabbableElement();
        }
      });
    }
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Injectable that ensures only the most recently enabled FocusTrap is active. */
class FocusTrapManager {
  constructor() {
    // A stack of the FocusTraps on the page. Only the FocusTrap at the
    // top of the stack is active.
    this._focusTrapStack = [];
  }
  /**
   * Disables the FocusTrap at the top of the stack, and then pushes
   * the new FocusTrap onto the stack.
   */
  register(focusTrap) {
    // Dedupe focusTraps that register multiple times.
    this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);
    let stack = this._focusTrapStack;
    if (stack.length) {
      stack[stack.length - 1]._disable();
    }
    stack.push(focusTrap);
    focusTrap._enable();
  }
  /**
   * Removes the FocusTrap from the stack, and activates the
   * FocusTrap that is the new top of the stack.
   */
  deregister(focusTrap) {
    focusTrap._disable();
    const stack = this._focusTrapStack;
    const i = stack.indexOf(focusTrap);
    if (i !== -1) {
      stack.splice(i, 1);
      if (stack.length) {
        stack[stack.length - 1]._enable();
      }
    }
  }
}
FocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) {
  return new (t || FocusTrapManager)();
};
FocusTrapManager.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: FocusTrapManager,
  factory: FocusTrapManager.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FocusTrapManager, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Factory that allows easy instantiation of configurable focus traps. */
class ConfigurableFocusTrapFactory {
  constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {
    this._checker = _checker;
    this._ngZone = _ngZone;
    this._focusTrapManager = _focusTrapManager;
    this._document = _document;
    // TODO split up the strategies into different modules, similar to DateAdapter.
    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();
  }
  create(element, config = {
    defer: false
  }) {
    let configObject;
    if (typeof config === 'boolean') {
      configObject = {
        defer: config
      };
    } else {
      configObject = config;
    }
    return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);
  }
}
ConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {
  return new (t || ConfigurableFocusTrapFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](InteractivityChecker), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](FocusTrapManager), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](FOCUS_TRAP_INERT_STRATEGY, 8));
};
ConfigurableFocusTrapFactory.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: ConfigurableFocusTrapFactory,
  factory: ConfigurableFocusTrapFactory.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ConfigurableFocusTrapFactory, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: InteractivityChecker
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: FocusTrapManager
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [FOCUS_TRAP_INERT_STRATEGY]
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */
function isFakeMousedownFromScreenReader(event) {
  // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on
  // a clickable element. We can distinguish these events when both `offsetX` and `offsetY` are
  // zero or `event.buttons` is zero, depending on the browser:
  // - `event.buttons` works on Firefox, but fails on Chrome.
  // - `offsetX` and `offsetY` work on Chrome, but fail on Firefox.
  // Note that there's an edge case where the user could click the 0x0 spot of the
  // screen themselves, but that is unlikely to contain interactive elements.
  return event.buttons === 0 || event.offsetX === 0 && event.offsetY === 0;
}
/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */
function isFakeTouchstartFromScreenReader(event) {
  const touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0];
  // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`
  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,
  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10
  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.
  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Injectable options for the InputModalityDetector. These are shallowly merged with the default
 * options.
 */
const INPUT_MODALITY_DETECTOR_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('cdk-input-modality-detector-options');
/**
 * Default options for the InputModalityDetector.
 *
 * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect
 * keyboard input modality) for two reasons:
 *
 * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open
 *    in new tab', and are thus less representative of actual keyboard interaction.
 * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but
 *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore
 *    these keys so as to not update the input modality.
 *
 * Note that we do not by default ignore the right Meta key on Safari because it has the same key
 * code as the ContextMenu key on other browsers. When we switch to using event.key, we can
 * distinguish between the two.
 */
const INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {
  ignoreKeys: [_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.ALT, _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.CONTROL, _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.MAC_META, _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.META, _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__.SHIFT]
};
/**
 * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown
 * event to be attributed as mouse and not touch.
 *
 * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found
 * that a value of around 650ms seems appropriate.
 */
const TOUCH_BUFFER_MS = 650;
/**
 * Event listener options that enable capturing and also mark the listener as passive if the browser
 * supports it.
 */
const modalityEventListenerOptions = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.normalizePassiveListenerOptions)({
  passive: true,
  capture: true
});
/**
 * Service that detects the user's input modality.
 *
 * This service does not update the input modality when a user navigates with a screen reader
 * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC
 * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not
 * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a
 * screen reader is akin to visually scanning a page, and should not be interpreted as actual user
 * input interaction.
 *
 * When a user is not navigating but *interacting* with a screen reader, this service attempts to
 * update the input modality to keyboard, but in general this service's behavior is largely
 * undefined.
 */
class InputModalityDetector {
  /** The most recently detected input modality. */
  get mostRecentModality() {
    return this._modality.value;
  }
  constructor(_platform, ngZone, document, options) {
    this._platform = _platform;
    /**
     * The most recently detected input modality event target. Is null if no input modality has been
     * detected or if the associated event target is null for some unknown reason.
     */
    this._mostRecentTarget = null;
    /** The underlying BehaviorSubject that emits whenever an input modality is detected. */
    this._modality = new rxjs__WEBPACK_IMPORTED_MODULE_12__.BehaviorSubject(null);
    /**
     * The timestamp of the last touch input modality. Used to determine whether mousedown events
     * should be attributed to mouse or touch.
     */
    this._lastTouchMs = 0;
    /**
     * Handles keydown events. Must be an arrow function in order to preserve the context when it gets
     * bound.
     */
    this._onKeydown = event => {
      // If this is one of the keys we should ignore, then ignore it and don't update the input
      // modality to keyboard.
      if (this._options?.ignoreKeys?.some(keyCode => keyCode === event.keyCode)) {
        return;
      }
      this._modality.next('keyboard');
      this._mostRecentTarget = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getEventTarget)(event);
    };
    /**
     * Handles mousedown events. Must be an arrow function in order to preserve the context when it
     * gets bound.
     */
    this._onMousedown = event => {
      // Touches trigger both touch and mouse events, so we need to distinguish between mouse events
      // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely
      // after the previous touch event.
      if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {
        return;
      }
      // Fake mousedown events are fired by some screen readers when controls are activated by the
      // screen reader. Attribute them to keyboard input modality.
      this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');
      this._mostRecentTarget = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getEventTarget)(event);
    };
    /**
     * Handles touchstart events. Must be an arrow function in order to preserve the context when it
     * gets bound.
     */
    this._onTouchstart = event => {
      // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart
      // events are fired. Again, attribute to keyboard input modality.
      if (isFakeTouchstartFromScreenReader(event)) {
        this._modality.next('keyboard');
        return;
      }
      // Store the timestamp of this touch event, as it's used to distinguish between mouse events
      // triggered via mouse vs touch.
      this._lastTouchMs = Date.now();
      this._modality.next('touch');
      this._mostRecentTarget = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getEventTarget)(event);
    };
    this._options = {
      ...INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS,
      ...options
    };
    // Skip the first emission as it's null.
    this.modalityDetected = this._modality.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.skip)(1));
    this.modalityChanged = this.modalityDetected.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_14__.distinctUntilChanged)());
    // If we're not in a browser, this service should do nothing, as there's no relevant input
    // modality to detect.
    if (_platform.isBrowser) {
      ngZone.runOutsideAngular(() => {
        document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);
        document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);
        document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);
      });
    }
  }
  ngOnDestroy() {
    this._modality.complete();
    if (this._platform.isBrowser) {
      document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);
      document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);
      document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);
    }
  }
}
InputModalityDetector.ɵfac = function InputModalityDetector_Factory(t) {
  return new (t || InputModalityDetector)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](INPUT_MODALITY_DETECTOR_OPTIONS, 8));
};
InputModalityDetector.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: InputModalityDetector,
  factory: InputModalityDetector.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](InputModalityDetector, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: Document,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [INPUT_MODALITY_DETECTOR_OPTIONS]
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const LIVE_ANNOUNCER_ELEMENT_TOKEN = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('liveAnnouncerElement', {
  providedIn: 'root',
  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY
});
/** @docs-private */
function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {
  return null;
}
/** Injection token that can be used to configure the default options for the LiveAnnouncer. */
const LIVE_ANNOUNCER_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
let uniqueIds = 0;
class LiveAnnouncer {
  constructor(elementToken, _ngZone, _document, _defaultOptions) {
    this._ngZone = _ngZone;
    this._defaultOptions = _defaultOptions;
    // We inject the live element and document as `any` because the constructor signature cannot
    // reference browser globals (HTMLElement, Document) on non-browser environments, since having
    // a class decorator causes TypeScript to preserve the constructor signature types.
    this._document = _document;
    this._liveElement = elementToken || this._createLiveElement();
  }
  announce(message, ...args) {
    const defaultOptions = this._defaultOptions;
    let politeness;
    let duration;
    if (args.length === 1 && typeof args[0] === 'number') {
      duration = args[0];
    } else {
      [politeness, duration] = args;
    }
    this.clear();
    clearTimeout(this._previousTimeout);
    if (!politeness) {
      politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';
    }
    if (duration == null && defaultOptions) {
      duration = defaultOptions.duration;
    }
    // TODO: ensure changing the politeness works on all environments we support.
    this._liveElement.setAttribute('aria-live', politeness);
    if (this._liveElement.id) {
      this._exposeAnnouncerToModals(this._liveElement.id);
    }
    // This 100ms timeout is necessary for some browser + screen-reader combinations:
    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.
    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a
    //   second time without clearing and then using a non-zero delay.
    // (using JAWS 17 at time of this writing).
    return this._ngZone.runOutsideAngular(() => {
      if (!this._currentPromise) {
        this._currentPromise = new Promise(resolve => this._currentResolve = resolve);
      }
      clearTimeout(this._previousTimeout);
      this._previousTimeout = setTimeout(() => {
        this._liveElement.textContent = message;
        if (typeof duration === 'number') {
          this._previousTimeout = setTimeout(() => this.clear(), duration);
        }
        this._currentResolve();
        this._currentPromise = this._currentResolve = undefined;
      }, 100);
      return this._currentPromise;
    });
  }
  /**
   * Clears the current text from the announcer element. Can be used to prevent
   * screen readers from reading the text out again while the user is going
   * through the page landmarks.
   */
  clear() {
    if (this._liveElement) {
      this._liveElement.textContent = '';
    }
  }
  ngOnDestroy() {
    clearTimeout(this._previousTimeout);
    this._liveElement?.remove();
    this._liveElement = null;
    this._currentResolve?.();
    this._currentPromise = this._currentResolve = undefined;
  }
  _createLiveElement() {
    const elementClass = 'cdk-live-announcer-element';
    const previousElements = this._document.getElementsByClassName(elementClass);
    const liveEl = this._document.createElement('div');
    // Remove any old containers. This can happen when coming in from a server-side-rendered page.
    for (let i = 0; i < previousElements.length; i++) {
      previousElements[i].remove();
    }
    liveEl.classList.add(elementClass);
    liveEl.classList.add('cdk-visually-hidden');
    liveEl.setAttribute('aria-atomic', 'true');
    liveEl.setAttribute('aria-live', 'polite');
    liveEl.id = `cdk-live-announcer-${uniqueIds++}`;
    this._document.body.appendChild(liveEl);
    return liveEl;
  }
  /**
   * Some browsers won't expose the accessibility node of the live announcer element if there is an
   * `aria-modal` and the live announcer is outside of it. This method works around the issue by
   * pointing the `aria-owns` of all modals to the live announcer element.
   */
  _exposeAnnouncerToModals(id) {
    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the
    // section of the DOM we need to look through. This should cover all the cases we support, but
    // the selector can be expanded if it turns out to be too narrow.
    const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal="true"]');
    for (let i = 0; i < modals.length; i++) {
      const modal = modals[i];
      const ariaOwns = modal.getAttribute('aria-owns');
      if (!ariaOwns) {
        modal.setAttribute('aria-owns', id);
      } else if (ariaOwns.indexOf(id) === -1) {
        modal.setAttribute('aria-owns', ariaOwns + ' ' + id);
      }
    }
  }
}
LiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {
  return new (t || LiveAnnouncer)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));
};
LiveAnnouncer.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: LiveAnnouncer,
  factory: LiveAnnouncer.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](LiveAnnouncer, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]
      }]
    }];
  }, null);
})();
/**
 * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility
 * with a wider range of browsers and screen readers.
 */
class CdkAriaLive {
  /** The aria-live politeness level to use when announcing messages. */
  get politeness() {
    return this._politeness;
  }
  set politeness(value) {
    this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';
    if (this._politeness === 'off') {
      if (this._subscription) {
        this._subscription.unsubscribe();
        this._subscription = null;
      }
    } else if (!this._subscription) {
      this._subscription = this._ngZone.runOutsideAngular(() => {
        return this._contentObserver.observe(this._elementRef).subscribe(() => {
          // Note that we use textContent here, rather than innerText, in order to avoid a reflow.
          const elementText = this._elementRef.nativeElement.textContent;
          // The `MutationObserver` fires also for attribute
          // changes which we don't want to announce.
          if (elementText !== this._previousAnnouncedText) {
            this._liveAnnouncer.announce(elementText, this._politeness, this.duration);
            this._previousAnnouncedText = elementText;
          }
        });
      });
    }
  }
  constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {
    this._elementRef = _elementRef;
    this._liveAnnouncer = _liveAnnouncer;
    this._contentObserver = _contentObserver;
    this._ngZone = _ngZone;
    this._politeness = 'polite';
  }
  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }
}
CdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {
  return new (t || CdkAriaLive)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](LiveAnnouncer), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_observers__WEBPACK_IMPORTED_MODULE_15__.ContentObserver), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
};
CdkAriaLive.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CdkAriaLive,
  selectors: [["", "cdkAriaLive", ""]],
  inputs: {
    politeness: ["cdkAriaLive", "politeness"],
    duration: ["cdkAriaLiveDuration", "duration"]
  },
  exportAs: ["cdkAriaLive"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkAriaLive, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[cdkAriaLive]',
      exportAs: 'cdkAriaLive'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: LiveAnnouncer
    }, {
      type: _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_15__.ContentObserver
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }];
  }, {
    politeness: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['cdkAriaLive']
    }],
    duration: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['cdkAriaLiveDuration']
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** InjectionToken for FocusMonitorOptions. */
const FOCUS_MONITOR_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('cdk-focus-monitor-default-options');
/**
 * Event listener options that enable capturing and also
 * mark the listener as passive if the browser supports it.
 */
const captureEventListenerOptions = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.normalizePassiveListenerOptions)({
  passive: true,
  capture: true
});
/** Monitors mouse and keyboard events to determine the cause of focus events. */
class FocusMonitor {
  constructor(_ngZone, _platform, _inputModalityDetector, /** @breaking-change 11.0.0 make document required */
  document, options) {
    this._ngZone = _ngZone;
    this._platform = _platform;
    this._inputModalityDetector = _inputModalityDetector;
    /** The focus origin that the next focus event is a result of. */
    this._origin = null;
    /** Whether the window has just been focused. */
    this._windowFocused = false;
    /**
     * Whether the origin was determined via a touch interaction. Necessary as properly attributing
     * focus events to touch interactions requires special logic.
     */
    this._originFromTouchInteraction = false;
    /** Map of elements being monitored to their info. */
    this._elementInfo = new Map();
    /** The number of elements currently being monitored. */
    this._monitoredElementCount = 0;
    /**
     * Keeps track of the root nodes to which we've currently bound a focus/blur handler,
     * as well as the number of monitored elements that they contain. We have to treat focus/blur
     * handlers differently from the rest of the events, because the browser won't emit events
     * to the document when focus moves inside of a shadow root.
     */
    this._rootNodeFocusListenerCount = new Map();
    /**
     * Event listener for `focus` events on the window.
     * Needs to be an arrow function in order to preserve the context when it gets bound.
     */
    this._windowFocusListener = () => {
      // Make a note of when the window regains focus, so we can
      // restore the origin info for the focused element.
      this._windowFocused = true;
      this._windowFocusTimeoutId = window.setTimeout(() => this._windowFocused = false);
    };
    /** Subject for stopping our InputModalityDetector subscription. */
    this._stopInputModalityDetector = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
    /**
     * Event listener for `focus` and 'blur' events on the document.
     * Needs to be an arrow function in order to preserve the context when it gets bound.
     */
    this._rootNodeFocusAndBlurListener = event => {
      const target = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getEventTarget)(event);
      // We need to walk up the ancestor chain in order to support `checkChildren`.
      for (let element = target; element; element = element.parentElement) {
        if (event.type === 'focus') {
          this._onFocus(event, element);
        } else {
          this._onBlur(event, element);
        }
      }
    };
    this._document = document;
    this._detectionMode = options?.detectionMode || 0 /* FocusMonitorDetectionMode.IMMEDIATE */;
  }

  monitor(element, checkChildren = false) {
    const nativeElement = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceElement)(element);
    // Do nothing if we're not on the browser platform or the passed in node isn't an element.
    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.of)(null);
    }
    // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to
    // the shadow root, rather than the `document`, because the browser won't emit focus events
    // to the `document`, if focus is moving within the same shadow root.
    const rootNode = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getShadowRoot)(nativeElement) || this._getDocument();
    const cachedInfo = this._elementInfo.get(nativeElement);
    // Check if we're already monitoring this element.
    if (cachedInfo) {
      if (checkChildren) {
        // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren
        // observers into ones that behave as if `checkChildren` was turned on. We need a more
        // robust solution.
        cachedInfo.checkChildren = true;
      }
      return cachedInfo.subject;
    }
    // Create monitored element info.
    const info = {
      checkChildren: checkChildren,
      subject: new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject(),
      rootNode
    };
    this._elementInfo.set(nativeElement, info);
    this._registerGlobalListeners(info);
    return info.subject;
  }
  stopMonitoring(element) {
    const nativeElement = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceElement)(element);
    const elementInfo = this._elementInfo.get(nativeElement);
    if (elementInfo) {
      elementInfo.subject.complete();
      this._setClasses(nativeElement);
      this._elementInfo.delete(nativeElement);
      this._removeGlobalListeners(elementInfo);
    }
  }
  focusVia(element, origin, options) {
    const nativeElement = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__.coerceElement)(element);
    const focusedElement = this._getDocument().activeElement;
    // If the element is focused already, calling `focus` again won't trigger the event listener
    // which means that the focus classes won't be updated. If that's the case, update the classes
    // directly without waiting for an event.
    if (nativeElement === focusedElement) {
      this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));
    } else {
      this._setOrigin(origin);
      // `focus` isn't available on the server
      if (typeof nativeElement.focus === 'function') {
        nativeElement.focus(options);
      }
    }
  }
  ngOnDestroy() {
    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));
  }
  /** Access injected document if available or fallback to global document reference */
  _getDocument() {
    return this._document || document;
  }
  /** Use defaultView of injected document if available or fallback to global window reference */
  _getWindow() {
    const doc = this._getDocument();
    return doc.defaultView || window;
  }
  _getFocusOrigin(focusEventTarget) {
    if (this._origin) {
      // If the origin was realized via a touch interaction, we need to perform additional checks
      // to determine whether the focus origin should be attributed to touch or program.
      if (this._originFromTouchInteraction) {
        return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';
      } else {
        return this._origin;
      }
    }
    // If the window has just regained focus, we can restore the most recent origin from before the
    // window blurred. Otherwise, we've reached the point where we can't identify the source of the
    // focus. This typically means one of two things happened:
    //
    // 1) The element was programmatically focused, or
    // 2) The element was focused via screen reader navigation (which generally doesn't fire
    //    events).
    //
    // Because we can't distinguish between these two cases, we default to setting `program`.
    if (this._windowFocused && this._lastFocusOrigin) {
      return this._lastFocusOrigin;
    }
    // If the interaction is coming from an input label, we consider it a mouse interactions.
    // This is a special case where focus moves on `click`, rather than `mousedown` which breaks
    // our detection, because all our assumptions are for `mousedown`. We need to handle this
    // special case, because it's very common for checkboxes and radio buttons.
    if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {
      return 'mouse';
    }
    return 'program';
  }
  /**
   * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a
   * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we
   * handle a focus event following a touch interaction, we need to determine whether (1) the focus
   * event was directly caused by the touch interaction or (2) the focus event was caused by a
   * subsequent programmatic focus call triggered by the touch interaction.
   * @param focusEventTarget The target of the focus event under examination.
   */
  _shouldBeAttributedToTouch(focusEventTarget) {
    // Please note that this check is not perfect. Consider the following edge case:
    //
    // <div #parent tabindex="0">
    //   <div #child tabindex="0" (click)="#parent.focus()"></div>
    // </div>
    //
    // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches
    // #child, #parent is programmatically focused. This code will attribute the focus to touch
    // instead of program. This is a relatively minor edge-case that can be worked around by using
    // focusVia(parent, 'program') to focus #parent.
    return this._detectionMode === 1 /* FocusMonitorDetectionMode.EVENTUAL */ || !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget);
  }
  /**
   * Sets the focus classes on the element based on the given focus origin.
   * @param element The element to update the classes on.
   * @param origin The focus origin.
   */
  _setClasses(element, origin) {
    element.classList.toggle('cdk-focused', !!origin);
    element.classList.toggle('cdk-touch-focused', origin === 'touch');
    element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');
    element.classList.toggle('cdk-mouse-focused', origin === 'mouse');
    element.classList.toggle('cdk-program-focused', origin === 'program');
  }
  /**
   * Updates the focus origin. If we're using immediate detection mode, we schedule an async
   * function to clear the origin at the end of a timeout. The duration of the timeout depends on
   * the origin being set.
   * @param origin The origin to set.
   * @param isFromInteraction Whether we are setting the origin from an interaction event.
   */
  _setOrigin(origin, isFromInteraction = false) {
    this._ngZone.runOutsideAngular(() => {
      this._origin = origin;
      this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;
      // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms
      // for a touch event). We reset the origin at the next tick because Firefox focuses one tick
      // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for
      // a touch event because when a touch event is fired, the associated focus event isn't yet in
      // the event queue. Before doing so, clear any pending timeouts.
      if (this._detectionMode === 0 /* FocusMonitorDetectionMode.IMMEDIATE */) {
        clearTimeout(this._originTimeoutId);
        const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;
        this._originTimeoutId = setTimeout(() => this._origin = null, ms);
      }
    });
  }
  /**
   * Handles focus events on a registered element.
   * @param event The focus event.
   * @param element The monitored element.
   */
  _onFocus(event, element) {
    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent
    // focus event affecting the monitored element. If we want to use the origin of the first event
    // instead we should check for the cdk-focused class here and return if the element already has
    // it. (This only matters for elements that have includesChildren = true).
    // If we are not counting child-element-focus as focused, make sure that the event target is the
    // monitored element itself.
    const elementInfo = this._elementInfo.get(element);
    const focusEventTarget = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__._getEventTarget)(event);
    if (!elementInfo || !elementInfo.checkChildren && element !== focusEventTarget) {
      return;
    }
    this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);
  }
  /**
   * Handles blur events on a registered element.
   * @param event The blur event.
   * @param element The monitored element.
   */
  _onBlur(event, element) {
    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in
    // order to focus another child of the monitored element.
    const elementInfo = this._elementInfo.get(element);
    if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {
      return;
    }
    this._setClasses(element);
    this._emitOrigin(elementInfo, null);
  }
  _emitOrigin(info, origin) {
    if (info.subject.observers.length) {
      this._ngZone.run(() => info.subject.next(origin));
    }
  }
  _registerGlobalListeners(elementInfo) {
    if (!this._platform.isBrowser) {
      return;
    }
    const rootNode = elementInfo.rootNode;
    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;
    if (!rootNodeFocusListeners) {
      this._ngZone.runOutsideAngular(() => {
        rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
        rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
      });
    }
    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);
    // Register global listeners when first element is monitored.
    if (++this._monitoredElementCount === 1) {
      // Note: we listen to events in the capture phase so we
      // can detect them even if the user stops propagation.
      this._ngZone.runOutsideAngular(() => {
        const window = this._getWindow();
        window.addEventListener('focus', this._windowFocusListener);
      });
      // The InputModalityDetector is also just a collection of global listeners.
      this._inputModalityDetector.modalityDetected.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.takeUntil)(this._stopInputModalityDetector)).subscribe(modality => {
        this._setOrigin(modality, true /* isFromInteraction */);
      });
    }
  }

  _removeGlobalListeners(elementInfo) {
    const rootNode = elementInfo.rootNode;
    if (this._rootNodeFocusListenerCount.has(rootNode)) {
      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);
      if (rootNodeFocusListeners > 1) {
        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);
      } else {
        rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
        rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
        this._rootNodeFocusListenerCount.delete(rootNode);
      }
    }
    // Unregister global listeners when last element is unmonitored.
    if (! --this._monitoredElementCount) {
      const window = this._getWindow();
      window.removeEventListener('focus', this._windowFocusListener);
      // Equivalently, stop our InputModalityDetector subscription.
      this._stopInputModalityDetector.next();
      // Clear timeouts for all potentially pending timeouts to prevent the leaks.
      clearTimeout(this._windowFocusTimeoutId);
      clearTimeout(this._originTimeoutId);
    }
  }
  /** Updates all the state on an element once its focus origin has changed. */
  _originChanged(element, origin, elementInfo) {
    this._setClasses(element, origin);
    this._emitOrigin(elementInfo, origin);
    this._lastFocusOrigin = origin;
  }
  /**
   * Collects the `MonitoredElementInfo` of a particular element and
   * all of its ancestors that have enabled `checkChildren`.
   * @param element Element from which to start the search.
   */
  _getClosestElementsInfo(element) {
    const results = [];
    this._elementInfo.forEach((info, currentElement) => {
      if (currentElement === element || info.checkChildren && currentElement.contains(element)) {
        results.push([currentElement, info]);
      }
    });
    return results;
  }
  /**
   * Returns whether an interaction is likely to have come from the user clicking the `label` of
   * an `input` or `textarea` in order to focus it.
   * @param focusEventTarget Target currently receiving focus.
   */
  _isLastInteractionFromInputLabel(focusEventTarget) {
    const {
      _mostRecentTarget: mostRecentTarget,
      mostRecentModality
    } = this._inputModalityDetector;
    // If the last interaction used the mouse on an element contained by one of the labels
    // of an `input`/`textarea` that is currently focused, it is very likely that the
    // user redirected focus using the label.
    if (mostRecentModality !== 'mouse' || !mostRecentTarget || mostRecentTarget === focusEventTarget || focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA' || focusEventTarget.disabled) {
      return false;
    }
    const labels = focusEventTarget.labels;
    if (labels) {
      for (let i = 0; i < labels.length; i++) {
        if (labels[i].contains(mostRecentTarget)) {
          return true;
        }
      }
    }
    return false;
  }
}
FocusMonitor.ɵfac = function FocusMonitor_Factory(t) {
  return new (t || FocusMonitor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](InputModalityDetector), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](FOCUS_MONITOR_DEFAULT_OPTIONS, 8));
};
FocusMonitor.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: FocusMonitor,
  factory: FocusMonitor.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FocusMonitor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform
    }, {
      type: InputModalityDetector
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [FOCUS_MONITOR_DEFAULT_OPTIONS]
      }]
    }];
  }, null);
})();
/**
 * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or
 * programmatically) and adds corresponding classes to the element.
 *
 * There are two variants of this directive:
 * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is
 *    focused.
 * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.
 */
class CdkMonitorFocus {
  constructor(_elementRef, _focusMonitor) {
    this._elementRef = _elementRef;
    this._focusMonitor = _focusMonitor;
    this._focusOrigin = null;
    this.cdkFocusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  get focusOrigin() {
    return this._focusOrigin;
  }
  ngAfterViewInit() {
    const element = this._elementRef.nativeElement;
    this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(origin => {
      this._focusOrigin = origin;
      this.cdkFocusChange.emit(origin);
    });
  }
  ngOnDestroy() {
    this._focusMonitor.stopMonitoring(this._elementRef);
    if (this._monitorSubscription) {
      this._monitorSubscription.unsubscribe();
    }
  }
}
CdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {
  return new (t || CdkMonitorFocus)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](FocusMonitor));
};
CdkMonitorFocus.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CdkMonitorFocus,
  selectors: [["", "cdkMonitorElementFocus", ""], ["", "cdkMonitorSubtreeFocus", ""]],
  outputs: {
    cdkFocusChange: "cdkFocusChange"
  },
  exportAs: ["cdkMonitorFocus"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkMonitorFocus, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',
      exportAs: 'cdkMonitorFocus'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: FocusMonitor
    }];
  }, {
    cdkFocusChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** CSS class applied to the document body when in black-on-white high-contrast mode. */
const BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';
/** CSS class applied to the document body when in white-on-black high-contrast mode. */
const WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';
/** CSS class applied to the document body when in high-contrast mode. */
const HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';
/**
 * Service to determine whether the browser is currently in a high-contrast-mode environment.
 *
 * Microsoft Windows supports an accessibility feature called "High Contrast Mode". This mode
 * changes the appearance of all applications, including web applications, to dramatically increase
 * contrast.
 *
 * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast
 * Mode. This service does not detect high-contrast mode as added by the Chrome "High Contrast"
 * browser extension.
 */
class HighContrastModeDetector {
  constructor(_platform, document) {
    this._platform = _platform;
    this._document = document;
    this._breakpointSubscription = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_18__.BreakpointObserver).observe('(forced-colors: active)').subscribe(() => {
      if (this._hasCheckedHighContrastMode) {
        this._hasCheckedHighContrastMode = false;
        this._applyBodyHighContrastModeCssClasses();
      }
    });
  }
  /** Gets the current high-contrast-mode for the page. */
  getHighContrastMode() {
    if (!this._platform.isBrowser) {
      return 0 /* HighContrastMode.NONE */;
    }
    // Create a test element with an arbitrary background-color that is neither black nor
    // white; high-contrast mode will coerce the color to either black or white. Also ensure that
    // appending the test element to the DOM does not affect layout by absolutely positioning it
    const testElement = this._document.createElement('div');
    testElement.style.backgroundColor = 'rgb(1,2,3)';
    testElement.style.position = 'absolute';
    this._document.body.appendChild(testElement);
    // Get the computed style for the background color, collapsing spaces to normalize between
    // browsers. Once we get this color, we no longer need the test element. Access the `window`
    // via the document so we can fake it in tests. Note that we have extra null checks, because
    // this logic will likely run during app bootstrap and throwing can break the entire app.
    const documentWindow = this._document.defaultView || window;
    const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;
    const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');
    testElement.remove();
    switch (computedColor) {
      // Pre Windows 11 dark theme.
      case 'rgb(0,0,0)':
      // Windows 11 dark themes.
      case 'rgb(45,50,54)':
      case 'rgb(32,32,32)':
        return 2 /* HighContrastMode.WHITE_ON_BLACK */;
      // Pre Windows 11 light theme.
      case 'rgb(255,255,255)':
      // Windows 11 light theme.
      case 'rgb(255,250,239)':
        return 1 /* HighContrastMode.BLACK_ON_WHITE */;
    }

    return 0 /* HighContrastMode.NONE */;
  }

  ngOnDestroy() {
    this._breakpointSubscription.unsubscribe();
  }
  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */
  _applyBodyHighContrastModeCssClasses() {
    if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {
      const bodyClasses = this._document.body.classList;
      bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);
      this._hasCheckedHighContrastMode = true;
      const mode = this.getHighContrastMode();
      if (mode === 1 /* HighContrastMode.BLACK_ON_WHITE */) {
        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);
      } else if (mode === 2 /* HighContrastMode.WHITE_ON_BLACK */) {
        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);
      }
    }
  }
}
HighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) {
  return new (t || HighContrastModeDetector)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
};
HighContrastModeDetector.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: HighContrastModeDetector,
  factory: HighContrastModeDetector.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HighContrastModeDetector, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_2__.Platform
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class A11yModule {
  constructor(highContrastModeDetector) {
    highContrastModeDetector._applyBodyHighContrastModeCssClasses();
  }
}
A11yModule.ɵfac = function A11yModule_Factory(t) {
  return new (t || A11yModule)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](HighContrastModeDetector));
};
A11yModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: A11yModule
});
A11yModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_cdk_observers__WEBPACK_IMPORTED_MODULE_15__.ObserversModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](A11yModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_cdk_observers__WEBPACK_IMPORTED_MODULE_15__.ObserversModule],
      declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],
      exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]
    }]
  }], function () {
    return [{
      type: HighContrastModeDetector
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 2867:
/*!*****************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2020/bidi.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BidiModule": () => (/* binding */ BidiModule),
/* harmony export */   "DIR_DOCUMENT": () => (/* binding */ DIR_DOCUMENT),
/* harmony export */   "Dir": () => (/* binding */ Dir),
/* harmony export */   "Directionality": () => (/* binding */ Directionality)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 4666);




/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Injection token used to inject the document into Directionality.
 * This is used so that the value can be faked in tests.
 *
 * We can't use the real document in tests because changing the real `dir` causes geometry-based
 * tests in Safari to fail.
 *
 * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests
 * themselves use things like `querySelector` in test code.
 *
 * This token is defined in a separate file from Directionality as a workaround for
 * https://github.com/angular/angular/issues/22559
 *
 * @docs-private
 */
const DIR_DOCUMENT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('cdk-dir-doc', {
  providedIn: 'root',
  factory: DIR_DOCUMENT_FACTORY
});
/** @docs-private */
function DIR_DOCUMENT_FACTORY() {
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT);
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */
const RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;
/** Resolves a string value to a specific direction. */
function _resolveDirectionality(rawValue) {
  const value = rawValue?.toLowerCase() || '';
  if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {
    return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';
  }
  return value === 'rtl' ? 'rtl' : 'ltr';
}
/**
 * The directionality (LTR / RTL) context for the application (or a subtree of it).
 * Exposes the current direction and a stream of direction changes.
 */
class Directionality {
  constructor(_document) {
    /** The current 'ltr' or 'rtl' value. */
    this.value = 'ltr';
    /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */
    this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    if (_document) {
      const bodyDir = _document.body ? _document.body.dir : null;
      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;
      this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');
    }
  }
  ngOnDestroy() {
    this.change.complete();
  }
}
Directionality.ɵfac = function Directionality_Factory(t) {
  return new (t || Directionality)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](DIR_DOCUMENT, 8));
};
Directionality.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: Directionality,
  factory: Directionality.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](Directionality, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [DIR_DOCUMENT]
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Directive to listen for changes of direction of part of the DOM.
 *
 * Provides itself as Directionality such that descendant directives only need to ever inject
 * Directionality to get the closest direction.
 */
class Dir {
  constructor() {
    /** Normalized direction that accounts for invalid/unsupported values. */
    this._dir = 'ltr';
    /** Whether the `value` has been set to its initial value. */
    this._isInitialized = false;
    /** Event emitted when the direction changes. */
    this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  /** @docs-private */
  get dir() {
    return this._dir;
  }
  set dir(value) {
    const previousValue = this._dir;
    // Note: `_resolveDirectionality` resolves the language based on the browser's language,
    // whereas the browser does it based on the content of the element. Since doing so based
    // on the content can be expensive, for now we're doing the simpler matching.
    this._dir = _resolveDirectionality(value);
    this._rawDir = value;
    if (previousValue !== this._dir && this._isInitialized) {
      this.change.emit(this._dir);
    }
  }
  /** Current layout direction of the element. */
  get value() {
    return this.dir;
  }
  /** Initialize once default value has been set. */
  ngAfterContentInit() {
    this._isInitialized = true;
  }
  ngOnDestroy() {
    this.change.complete();
  }
}
Dir.ɵfac = function Dir_Factory(t) {
  return new (t || Dir)();
};
Dir.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: Dir,
  selectors: [["", "dir", ""]],
  hostVars: 1,
  hostBindings: function Dir_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("dir", ctx._rawDir);
    }
  },
  inputs: {
    dir: "dir"
  },
  outputs: {
    change: "dirChange"
  },
  exportAs: ["dir"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: Directionality,
    useExisting: Dir
  }])]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](Dir, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[dir]',
      providers: [{
        provide: Directionality,
        useExisting: Dir
      }],
      host: {
        '[attr.dir]': '_rawDir'
      },
      exportAs: 'dir'
    }]
  }], null, {
    change: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
      args: ['dirChange']
    }],
    dir: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class BidiModule {}
BidiModule.ɵfac = function BidiModule_Factory(t) {
  return new (t || BidiModule)();
};
BidiModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: BidiModule
});
BidiModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BidiModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      exports: [Dir],
      declarations: [Dir]
    }]
  }], null, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 8971:
/*!*********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2020/coercion.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_isNumberValue": () => (/* binding */ _isNumberValue),
/* harmony export */   "coerceArray": () => (/* binding */ coerceArray),
/* harmony export */   "coerceBooleanProperty": () => (/* binding */ coerceBooleanProperty),
/* harmony export */   "coerceCssPixelValue": () => (/* binding */ coerceCssPixelValue),
/* harmony export */   "coerceElement": () => (/* binding */ coerceElement),
/* harmony export */   "coerceNumberProperty": () => (/* binding */ coerceNumberProperty),
/* harmony export */   "coerceStringArray": () => (/* binding */ coerceStringArray)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2560);


/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Coerces a data-bound value (typically a string) to a boolean. */
function coerceBooleanProperty(value) {
  return value != null && `${value}` !== 'false';
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function coerceNumberProperty(value, fallbackValue = 0) {
  return _isNumberValue(value) ? Number(value) : fallbackValue;
}
/**
 * Whether the provided value is considered a number.
 * @docs-private
 */
function _isNumberValue(value) {
  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
  // and other non-number values as NaN, where Number just uses 0) but it considers the string
  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
  return !isNaN(parseFloat(value)) && !isNaN(Number(value));
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function coerceArray(value) {
  return Array.isArray(value) ? value : [value];
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Coerces a value to a CSS pixel value. */
function coerceCssPixelValue(value) {
  if (value == null) {
    return '';
  }
  return typeof value === 'string' ? value : `${value}px`;
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Coerces an ElementRef or an Element into an element.
 * Useful for APIs that can accept either a ref or the native element itself.
 */
function coerceElement(elementOrRef) {
  return elementOrRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef ? elementOrRef.nativeElement : elementOrRef;
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Coerces a value to an array of trimmed non-empty strings.
 * Any input that is not an array, `null` or `undefined` will be turned into a string
 * via `toString()` and subsequently split with the given separator.
 * `null` and `undefined` will result in an empty array.
 * This results in the following outcomes:
 * - `null` -&gt; `[]`
 * - `[null]` -&gt; `["null"]`
 * - `["a", "b ", " "]` -&gt; `["a", "b"]`
 * - `[1, [2, 3]]` -&gt; `["1", "2,3"]`
 * - `[{ a: 0 }]` -&gt; `["[object Object]"]`
 * - `{ a: 0 }` -&gt; `["[object", "Object]"]`
 *
 * Useful for defining CSS classes or table columns.
 * @param value the value to coerce into an array of strings
 * @param separator split-separator if value isn't an array
 */
function coerceStringArray(value, separator = /\s+/) {
  const result = [];
  if (value != null) {
    const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);
    for (const sourceValue of sourceValues) {
      const trimmedString = `${sourceValue}`.trim();
      if (trimmedString) {
        result.push(trimmedString);
      }
    }
  }
  return result;
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */



/***/ }),

/***/ 1755:
/*!************************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2020/collections.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArrayDataSource": () => (/* binding */ ArrayDataSource),
/* harmony export */   "DataSource": () => (/* binding */ DataSource),
/* harmony export */   "SelectionModel": () => (/* binding */ SelectionModel),
/* harmony export */   "UniqueSelectionDispatcher": () => (/* binding */ UniqueSelectionDispatcher),
/* harmony export */   "_DisposeViewRepeaterStrategy": () => (/* binding */ _DisposeViewRepeaterStrategy),
/* harmony export */   "_RecycleViewRepeaterStrategy": () => (/* binding */ _RecycleViewRepeaterStrategy),
/* harmony export */   "_VIEW_REPEATER_STRATEGY": () => (/* binding */ _VIEW_REPEATER_STRATEGY),
/* harmony export */   "getMultipleValuesInSingleSelectionError": () => (/* binding */ getMultipleValuesInSingleSelectionError),
/* harmony export */   "isDataSource": () => (/* binding */ isDataSource)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ 3932);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ 4437);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 745);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 228);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 2560);




/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class DataSource {}
/** Checks whether an object is a data source. */
function isDataSource(value) {
  // Check if the value is a DataSource by observing if it has a connect function. Cannot
  // be checked as an `instanceof DataSource` since people could create their own sources
  // that match the interface, but don't extend DataSource. We also can't use `isObservable`
  // here, because of some internal apps.
  return value && typeof value.connect === 'function' && !(value instanceof rxjs__WEBPACK_IMPORTED_MODULE_0__.ConnectableObservable);
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** DataSource wrapper for a native array. */
class ArrayDataSource extends DataSource {
  constructor(_data) {
    super();
    this._data = _data;
  }
  connect() {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.isObservable)(this._data) ? this._data : (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(this._data);
  }
  disconnect() {}
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A repeater that destroys views when they are removed from a
 * {@link ViewContainerRef}. When new items are inserted into the container,
 * the repeater will always construct a new embedded view for each item.
 *
 * @template T The type for the embedded view's $implicit property.
 * @template R The type for the item in each IterableDiffer change record.
 * @template C The type for the context passed to each embedded view.
 */
class _DisposeViewRepeaterStrategy {
  applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {
    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {
      let view;
      let operation;
      if (record.previousIndex == null) {
        const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);
        view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);
        operation = 1 /* _ViewRepeaterOperation.INSERTED */;
      } else if (currentIndex == null) {
        viewContainerRef.remove(adjustedPreviousIndex);
        operation = 3 /* _ViewRepeaterOperation.REMOVED */;
      } else {
        view = viewContainerRef.get(adjustedPreviousIndex);
        viewContainerRef.move(view, currentIndex);
        operation = 2 /* _ViewRepeaterOperation.MOVED */;
      }

      if (itemViewChanged) {
        itemViewChanged({
          context: view?.context,
          operation,
          record
        });
      }
    });
  }
  detach() {}
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A repeater that caches views when they are removed from a
 * {@link ViewContainerRef}. When new items are inserted into the container,
 * the repeater will reuse one of the cached views instead of creating a new
 * embedded view. Recycling cached views reduces the quantity of expensive DOM
 * inserts.
 *
 * @template T The type for the embedded view's $implicit property.
 * @template R The type for the item in each IterableDiffer change record.
 * @template C The type for the context passed to each embedded view.
 */
class _RecycleViewRepeaterStrategy {
  constructor() {
    /**
     * The size of the cache used to store unused views.
     * Setting the cache size to `0` will disable caching. Defaults to 20 views.
     */
    this.viewCacheSize = 20;
    /**
     * View cache that stores embedded view instances that have been previously stamped out,
     * but don't are not currently rendered. The view repeater will reuse these views rather than
     * creating brand new ones.
     *
     * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.
     */
    this._viewCache = [];
  }
  /** Apply changes to the DOM. */
  applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {
    // Rearrange the views to put them in the right location.
    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {
      let view;
      let operation;
      if (record.previousIndex == null) {
        // Item added.
        const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);
        view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));
        operation = view ? 1 /* _ViewRepeaterOperation.INSERTED */ : 0 /* _ViewRepeaterOperation.REPLACED */;
      } else if (currentIndex == null) {
        // Item removed.
        this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);
        operation = 3 /* _ViewRepeaterOperation.REMOVED */;
      } else {
        // Item moved.
        view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));
        operation = 2 /* _ViewRepeaterOperation.MOVED */;
      }

      if (itemViewChanged) {
        itemViewChanged({
          context: view?.context,
          operation,
          record
        });
      }
    });
  }
  detach() {
    for (const view of this._viewCache) {
      view.destroy();
    }
    this._viewCache = [];
  }
  /**
   * Inserts a view for a new item, either from the cache or by creating a new
   * one. Returns `undefined` if the item was inserted into a cached view.
   */
  _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {
    const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);
    if (cachedView) {
      cachedView.context.$implicit = value;
      return undefined;
    }
    const viewArgs = viewArgsFactory();
    return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);
  }
  /** Detaches the view at the given index and inserts into the view cache. */
  _detachAndCacheView(index, viewContainerRef) {
    const detachedView = viewContainerRef.detach(index);
    this._maybeCacheView(detachedView, viewContainerRef);
  }
  /** Moves view at the previous index to the current index. */
  _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {
    const view = viewContainerRef.get(adjustedPreviousIndex);
    viewContainerRef.move(view, currentIndex);
    view.context.$implicit = value;
    return view;
  }
  /**
   * Cache the given detached view. If the cache is full, the view will be
   * destroyed.
   */
  _maybeCacheView(view, viewContainerRef) {
    if (this._viewCache.length < this.viewCacheSize) {
      this._viewCache.push(view);
    } else {
      const index = viewContainerRef.indexOf(view);
      // The host component could remove views from the container outside of
      // the view repeater. It's unlikely this will occur, but just in case,
      // destroy the view on its own, otherwise destroy it through the
      // container to ensure that all the references are removed.
      if (index === -1) {
        view.destroy();
      } else {
        viewContainerRef.remove(index);
      }
    }
  }
  /** Inserts a recycled view from the cache at the given index. */
  _insertViewFromCache(index, viewContainerRef) {
    const cachedView = this._viewCache.pop();
    if (cachedView) {
      viewContainerRef.insert(cachedView, index);
    }
    return cachedView || null;
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Class to be used to power selecting one or more options from a list.
 */
class SelectionModel {
  /** Selected values. */
  get selected() {
    if (!this._selected) {
      this._selected = Array.from(this._selection.values());
    }
    return this._selected;
  }
  constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {
    this._multiple = _multiple;
    this._emitChanges = _emitChanges;
    this.compareWith = compareWith;
    /** Currently-selected values. */
    this._selection = new Set();
    /** Keeps track of the deselected options that haven't been emitted by the change event. */
    this._deselectedToEmit = [];
    /** Keeps track of the selected options that haven't been emitted by the change event. */
    this._selectedToEmit = [];
    /** Event emitted when the value has changed. */
    this.changed = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
    if (initiallySelectedValues && initiallySelectedValues.length) {
      if (_multiple) {
        initiallySelectedValues.forEach(value => this._markSelected(value));
      } else {
        this._markSelected(initiallySelectedValues[0]);
      }
      // Clear the array in order to avoid firing the change event for preselected values.
      this._selectedToEmit.length = 0;
    }
  }
  /**
   * Selects a value or an array of values.
   * @param values The values to select
   * @return Whether the selection changed as a result of this call
   * @breaking-change 16.0.0 make return type boolean
   */
  select(...values) {
    this._verifyValueAssignment(values);
    values.forEach(value => this._markSelected(value));
    const changed = this._hasQueuedChanges();
    this._emitChangeEvent();
    return changed;
  }
  /**
   * Deselects a value or an array of values.
   * @param values The values to deselect
   * @return Whether the selection changed as a result of this call
   * @breaking-change 16.0.0 make return type boolean
   */
  deselect(...values) {
    this._verifyValueAssignment(values);
    values.forEach(value => this._unmarkSelected(value));
    const changed = this._hasQueuedChanges();
    this._emitChangeEvent();
    return changed;
  }
  /**
   * Sets the selected values
   * @param values The new selected values
   * @return Whether the selection changed as a result of this call
   * @breaking-change 16.0.0 make return type boolean
   */
  setSelection(...values) {
    this._verifyValueAssignment(values);
    const oldValues = this.selected;
    const newSelectedSet = new Set(values);
    values.forEach(value => this._markSelected(value));
    oldValues.filter(value => !newSelectedSet.has(value)).forEach(value => this._unmarkSelected(value));
    const changed = this._hasQueuedChanges();
    this._emitChangeEvent();
    return changed;
  }
  /**
   * Toggles a value between selected and deselected.
   * @param value The value to toggle
   * @return Whether the selection changed as a result of this call
   * @breaking-change 16.0.0 make return type boolean
   */
  toggle(value) {
    return this.isSelected(value) ? this.deselect(value) : this.select(value);
  }
  /**
   * Clears all of the selected values.
   * @param flushEvent Whether to flush the changes in an event.
   *   If false, the changes to the selection will be flushed along with the next event.
   * @return Whether the selection changed as a result of this call
   * @breaking-change 16.0.0 make return type boolean
   */
  clear(flushEvent = true) {
    this._unmarkAll();
    const changed = this._hasQueuedChanges();
    if (flushEvent) {
      this._emitChangeEvent();
    }
    return changed;
  }
  /**
   * Determines whether a value is selected.
   */
  isSelected(value) {
    return this._selection.has(this._getConcreteValue(value));
  }
  /**
   * Determines whether the model does not have a value.
   */
  isEmpty() {
    return this._selection.size === 0;
  }
  /**
   * Determines whether the model has a value.
   */
  hasValue() {
    return !this.isEmpty();
  }
  /**
   * Sorts the selected values based on a predicate function.
   */
  sort(predicate) {
    if (this._multiple && this.selected) {
      this._selected.sort(predicate);
    }
  }
  /**
   * Gets whether multiple values can be selected.
   */
  isMultipleSelection() {
    return this._multiple;
  }
  /** Emits a change event and clears the records of selected and deselected values. */
  _emitChangeEvent() {
    // Clear the selected values so they can be re-cached.
    this._selected = null;
    if (this._selectedToEmit.length || this._deselectedToEmit.length) {
      this.changed.next({
        source: this,
        added: this._selectedToEmit,
        removed: this._deselectedToEmit
      });
      this._deselectedToEmit = [];
      this._selectedToEmit = [];
    }
  }
  /** Selects a value. */
  _markSelected(value) {
    value = this._getConcreteValue(value);
    if (!this.isSelected(value)) {
      if (!this._multiple) {
        this._unmarkAll();
      }
      if (!this.isSelected(value)) {
        this._selection.add(value);
      }
      if (this._emitChanges) {
        this._selectedToEmit.push(value);
      }
    }
  }
  /** Deselects a value. */
  _unmarkSelected(value) {
    value = this._getConcreteValue(value);
    if (this.isSelected(value)) {
      this._selection.delete(value);
      if (this._emitChanges) {
        this._deselectedToEmit.push(value);
      }
    }
  }
  /** Clears out the selected values. */
  _unmarkAll() {
    if (!this.isEmpty()) {
      this._selection.forEach(value => this._unmarkSelected(value));
    }
  }
  /**
   * Verifies the value assignment and throws an error if the specified value array is
   * including multiple values while the selection model is not supporting multiple values.
   */
  _verifyValueAssignment(values) {
    if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw getMultipleValuesInSingleSelectionError();
    }
  }
  /** Whether there are queued up change to be emitted. */
  _hasQueuedChanges() {
    return !!(this._deselectedToEmit.length || this._selectedToEmit.length);
  }
  /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */
  _getConcreteValue(inputValue) {
    if (!this.compareWith) {
      return inputValue;
    } else {
      for (let selectedValue of this._selection) {
        if (this.compareWith(inputValue, selectedValue)) {
          return selectedValue;
        }
      }
      return inputValue;
    }
  }
}
/**
 * Returns an error that reports that multiple values are passed into a selection model
 * with a single value.
 * @docs-private
 */
function getMultipleValuesInSingleSelectionError() {
  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Class to coordinate unique selection based on name.
 * Intended to be consumed as an Angular service.
 * This service is needed because native radio change events are only fired on the item currently
 * being selected, and we still need to uncheck the previous selection.
 *
 * This service does not *store* any IDs and names because they may change at any time, so it is
 * less error-prone if they are simply passed through when the events occur.
 */
class UniqueSelectionDispatcher {
  constructor() {
    this._listeners = [];
  }
  /**
   * Notify other items that selection for the given name has been set.
   * @param id ID of the item.
   * @param name Name of the item.
   */
  notify(id, name) {
    for (let listener of this._listeners) {
      listener(id, name);
    }
  }
  /**
   * Listen for future changes to item selection.
   * @return Function used to deregister listener
   */
  listen(listener) {
    this._listeners.push(listener);
    return () => {
      this._listeners = this._listeners.filter(registered => {
        return listener !== registered;
      });
    };
  }
  ngOnDestroy() {
    this._listeners = [];
  }
}
UniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) {
  return new (t || UniqueSelectionDispatcher)();
};
UniqueSelectionDispatcher.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
  token: UniqueSelectionDispatcher,
  factory: UniqueSelectionDispatcher.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](UniqueSelectionDispatcher, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.
 * @docs-private
 */
const _VIEW_REPEATER_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.InjectionToken('_ViewRepeater');

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 7727:
/*!**********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2020/drag-drop.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CDK_DRAG_CONFIG": () => (/* binding */ CDK_DRAG_CONFIG),
/* harmony export */   "CDK_DRAG_HANDLE": () => (/* binding */ CDK_DRAG_HANDLE),
/* harmony export */   "CDK_DRAG_PARENT": () => (/* binding */ CDK_DRAG_PARENT),
/* harmony export */   "CDK_DRAG_PLACEHOLDER": () => (/* binding */ CDK_DRAG_PLACEHOLDER),
/* harmony export */   "CDK_DRAG_PREVIEW": () => (/* binding */ CDK_DRAG_PREVIEW),
/* harmony export */   "CDK_DROP_LIST": () => (/* binding */ CDK_DROP_LIST),
/* harmony export */   "CDK_DROP_LIST_GROUP": () => (/* binding */ CDK_DROP_LIST_GROUP),
/* harmony export */   "CdkDrag": () => (/* binding */ CdkDrag),
/* harmony export */   "CdkDragHandle": () => (/* binding */ CdkDragHandle),
/* harmony export */   "CdkDragPlaceholder": () => (/* binding */ CdkDragPlaceholder),
/* harmony export */   "CdkDragPreview": () => (/* binding */ CdkDragPreview),
/* harmony export */   "CdkDropList": () => (/* binding */ CdkDropList),
/* harmony export */   "CdkDropListGroup": () => (/* binding */ CdkDropListGroup),
/* harmony export */   "DragDrop": () => (/* binding */ DragDrop),
/* harmony export */   "DragDropModule": () => (/* binding */ DragDropModule),
/* harmony export */   "DragDropRegistry": () => (/* binding */ DragDropRegistry),
/* harmony export */   "DragRef": () => (/* binding */ DragRef),
/* harmony export */   "DropListRef": () => (/* binding */ DropListRef),
/* harmony export */   "copyArrayItem": () => (/* binding */ copyArrayItem),
/* harmony export */   "moveItemInArray": () => (/* binding */ moveItemInArray),
/* harmony export */   "transferArrayItem": () => (/* binding */ transferArrayItem)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/common */ 4666);
/* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/scrolling */ 6328);
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/platform */ 9107);
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ 8971);
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/a11y */ 4218);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 228);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 6078);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ 8653);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ 8184);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ 833);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ 6646);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 8951);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ 4874);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs/operators */ 635);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs/operators */ 9295);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs/operators */ 9337);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs/operators */ 2673);
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/cdk/bidi */ 2867);












/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Shallow-extends a stylesheet object with another stylesheet-like object.
 * Note that the keys in `source` have to be dash-cased.
 * @docs-private
 */
function extendStyles(dest, source, importantProperties) {
  for (let key in source) {
    if (source.hasOwnProperty(key)) {
      const value = source[key];
      if (value) {
        dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');
      } else {
        dest.removeProperty(key);
      }
    }
  }
  return dest;
}
/**
 * Toggles whether the native drag interactions should be enabled for an element.
 * @param element Element on which to toggle the drag interactions.
 * @param enable Whether the drag interactions should be enabled.
 * @docs-private
 */
function toggleNativeDragInteractions(element, enable) {
  const userSelect = enable ? '' : 'none';
  extendStyles(element.style, {
    'touch-action': enable ? '' : 'none',
    '-webkit-user-drag': enable ? '' : 'none',
    '-webkit-tap-highlight-color': enable ? '' : 'transparent',
    'user-select': userSelect,
    '-ms-user-select': userSelect,
    '-webkit-user-select': userSelect,
    '-moz-user-select': userSelect
  });
}
/**
 * Toggles whether an element is visible while preserving its dimensions.
 * @param element Element whose visibility to toggle
 * @param enable Whether the element should be visible.
 * @param importantProperties Properties to be set as `!important`.
 * @docs-private
 */
function toggleVisibility(element, enable, importantProperties) {
  extendStyles(element.style, {
    position: enable ? '' : 'fixed',
    top: enable ? '' : '0',
    opacity: enable ? '' : '0',
    left: enable ? '' : '-999em'
  }, importantProperties);
}
/**
 * Combines a transform string with an optional other transform
 * that exited before the base transform was applied.
 */
function combineTransforms(transform, initialTransform) {
  return initialTransform && initialTransform != 'none' ? transform + ' ' + initialTransform : transform;
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Parses a CSS time value to milliseconds. */
function parseCssTimeUnitsToMs(value) {
  // Some browsers will return it in seconds, whereas others will return milliseconds.
  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;
  return parseFloat(value) * multiplier;
}
/** Gets the transform transition duration, including the delay, of an element in milliseconds. */
function getTransformTransitionDurationInMs(element) {
  const computedStyle = getComputedStyle(element);
  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');
  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');
  // If there's no transition for `all` or `transform`, we shouldn't do anything.
  if (!property) {
    return 0;
  }
  // Get the index of the property that we're interested in and match
  // it up to the same index in `transition-delay` and `transition-duration`.
  const propertyIndex = transitionedProperties.indexOf(property);
  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');
  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');
  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) + parseCssTimeUnitsToMs(rawDelays[propertyIndex]);
}
/** Parses out multiple values from a computed style into an array. */
function parseCssPropertyValue(computedStyle, name) {
  const value = computedStyle.getPropertyValue(name);
  return value.split(',').map(part => part.trim());
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Gets a mutable version of an element's bounding `ClientRect`. */
function getMutableClientRect(element) {
  const clientRect = element.getBoundingClientRect();
  // We need to clone the `clientRect` here, because all the values on it are readonly
  // and we need to be able to update them. Also we can't use a spread here, because
  // the values on a `ClientRect` aren't own properties. See:
  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes
  return {
    top: clientRect.top,
    right: clientRect.right,
    bottom: clientRect.bottom,
    left: clientRect.left,
    width: clientRect.width,
    height: clientRect.height,
    x: clientRect.x,
    y: clientRect.y
  };
}
/**
 * Checks whether some coordinates are within a `ClientRect`.
 * @param clientRect ClientRect that is being checked.
 * @param x Coordinates along the X axis.
 * @param y Coordinates along the Y axis.
 */
function isInsideClientRect(clientRect, x, y) {
  const {
    top,
    bottom,
    left,
    right
  } = clientRect;
  return y >= top && y <= bottom && x >= left && x <= right;
}
/**
 * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.
 * @param clientRect `ClientRect` that should be updated.
 * @param top Amount to add to the `top` position.
 * @param left Amount to add to the `left` position.
 */
function adjustClientRect(clientRect, top, left) {
  clientRect.top += top;
  clientRect.bottom = clientRect.top + clientRect.height;
  clientRect.left += left;
  clientRect.right = clientRect.left + clientRect.width;
}
/**
 * Checks whether the pointer coordinates are close to a ClientRect.
 * @param rect ClientRect to check against.
 * @param threshold Threshold around the ClientRect.
 * @param pointerX Coordinates along the X axis.
 * @param pointerY Coordinates along the Y axis.
 */
function isPointerNearClientRect(rect, threshold, pointerX, pointerY) {
  const {
    top,
    right,
    bottom,
    left,
    width,
    height
  } = rect;
  const xThreshold = width * threshold;
  const yThreshold = height * threshold;
  return pointerY > top - yThreshold && pointerY < bottom + yThreshold && pointerX > left - xThreshold && pointerX < right + xThreshold;
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Keeps track of the scroll position and dimensions of the parents of an element. */
class ParentPositionTracker {
  constructor(_document) {
    this._document = _document;
    /** Cached positions of the scrollable parent elements. */
    this.positions = new Map();
  }
  /** Clears the cached positions. */
  clear() {
    this.positions.clear();
  }
  /** Caches the positions. Should be called at the beginning of a drag sequence. */
  cache(elements) {
    this.clear();
    this.positions.set(this._document, {
      scrollPosition: this.getViewportScrollPosition()
    });
    elements.forEach(element => {
      this.positions.set(element, {
        scrollPosition: {
          top: element.scrollTop,
          left: element.scrollLeft
        },
        clientRect: getMutableClientRect(element)
      });
    });
  }
  /** Handles scrolling while a drag is taking place. */
  handleScroll(event) {
    const target = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__._getEventTarget)(event);
    const cachedPosition = this.positions.get(target);
    if (!cachedPosition) {
      return null;
    }
    const scrollPosition = cachedPosition.scrollPosition;
    let newTop;
    let newLeft;
    if (target === this._document) {
      const viewportScrollPosition = this.getViewportScrollPosition();
      newTop = viewportScrollPosition.top;
      newLeft = viewportScrollPosition.left;
    } else {
      newTop = target.scrollTop;
      newLeft = target.scrollLeft;
    }
    const topDifference = scrollPosition.top - newTop;
    const leftDifference = scrollPosition.left - newLeft;
    // Go through and update the cached positions of the scroll
    // parents that are inside the element that was scrolled.
    this.positions.forEach((position, node) => {
      if (position.clientRect && target !== node && target.contains(node)) {
        adjustClientRect(position.clientRect, topDifference, leftDifference);
      }
    });
    scrollPosition.top = newTop;
    scrollPosition.left = newLeft;
    return {
      top: topDifference,
      left: leftDifference
    };
  }
  /**
   * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,
   * instead of going through the `ViewportRuler`, because the first value the ruler looks at is
   * the top/left offset of the `document.documentElement` which works for most cases, but breaks
   * if the element is offset by something like the `BlockScrollStrategy`.
   */
  getViewportScrollPosition() {
    return {
      top: window.scrollY,
      left: window.scrollX
    };
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Creates a deep clone of an element. */
function deepCloneNode(node) {
  const clone = node.cloneNode(true);
  const descendantsWithId = clone.querySelectorAll('[id]');
  const nodeName = node.nodeName.toLowerCase();
  // Remove the `id` to avoid having multiple elements with the same id on the page.
  clone.removeAttribute('id');
  for (let i = 0; i < descendantsWithId.length; i++) {
    descendantsWithId[i].removeAttribute('id');
  }
  if (nodeName === 'canvas') {
    transferCanvasData(node, clone);
  } else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {
    transferInputData(node, clone);
  }
  transferData('canvas', node, clone, transferCanvasData);
  transferData('input, textarea, select', node, clone, transferInputData);
  return clone;
}
/** Matches elements between an element and its clone and allows for their data to be cloned. */
function transferData(selector, node, clone, callback) {
  const descendantElements = node.querySelectorAll(selector);
  if (descendantElements.length) {
    const cloneElements = clone.querySelectorAll(selector);
    for (let i = 0; i < descendantElements.length; i++) {
      callback(descendantElements[i], cloneElements[i]);
    }
  }
}
// Counter for unique cloned radio button names.
let cloneUniqueId = 0;
/** Transfers the data of one input element to another. */
function transferInputData(source, clone) {
  // Browsers throw an error when assigning the value of a file input programmatically.
  if (clone.type !== 'file') {
    clone.value = source.value;
  }
  // Radio button `name` attributes must be unique for radio button groups
  // otherwise original radio buttons can lose their checked state
  // once the clone is inserted in the DOM.
  if (clone.type === 'radio' && clone.name) {
    clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;
  }
}
/** Transfers the data of one canvas element to another. */
function transferCanvasData(source, clone) {
  const context = clone.getContext('2d');
  if (context) {
    // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).
    // We can't do much about it so just ignore the error.
    try {
      context.drawImage(source, 0, 0);
    } catch {}
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Options that can be used to bind a passive event listener. */
const passiveEventListenerOptions = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__.normalizePassiveListenerOptions)({
  passive: true
});
/** Options that can be used to bind an active event listener. */
const activeEventListenerOptions = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__.normalizePassiveListenerOptions)({
  passive: false
});
/**
 * Time in milliseconds for which to ignore mouse events, after
 * receiving a touch event. Used to avoid doing double work for
 * touch devices where the browser fires fake mouse events, in
 * addition to touch events.
 */
const MOUSE_EVENT_IGNORE_TIME = 800;
/** Inline styles to be set as `!important` while dragging. */
const dragImportantProperties = new Set([
// Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.
'position']);
/**
 * Reference to a draggable item. Used to manipulate or dispose of the item.
 */
class DragRef {
  /** Whether starting to drag this element is disabled. */
  get disabled() {
    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);
  }
  set disabled(value) {
    const newValue = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
    if (newValue !== this._disabled) {
      this._disabled = newValue;
      this._toggleNativeDragInteractions();
      this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));
    }
  }
  constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {
    this._config = _config;
    this._document = _document;
    this._ngZone = _ngZone;
    this._viewportRuler = _viewportRuler;
    this._dragDropRegistry = _dragDropRegistry;
    /**
     * CSS `transform` applied to the element when it isn't being dragged. We need a
     * passive transform in order for the dragged element to retain its new position
     * after the user has stopped dragging and because we need to know the relative
     * position in case they start dragging again. This corresponds to `element.style.transform`.
     */
    this._passiveTransform = {
      x: 0,
      y: 0
    };
    /** CSS `transform` that is applied to the element while it's being dragged. */
    this._activeTransform = {
      x: 0,
      y: 0
    };
    /**
     * Whether the dragging sequence has been started. Doesn't
     * necessarily mean that the element has been moved.
     */
    this._hasStartedDragging = false;
    /** Emits when the item is being moved. */
    this._moveEvents = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Subscription to pointer movement events. */
    this._pointerMoveSubscription = rxjs__WEBPACK_IMPORTED_MODULE_3__.Subscription.EMPTY;
    /** Subscription to the event that is dispatched when the user lifts their pointer. */
    this._pointerUpSubscription = rxjs__WEBPACK_IMPORTED_MODULE_3__.Subscription.EMPTY;
    /** Subscription to the viewport being scrolled. */
    this._scrollSubscription = rxjs__WEBPACK_IMPORTED_MODULE_3__.Subscription.EMPTY;
    /** Subscription to the viewport being resized. */
    this._resizeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_3__.Subscription.EMPTY;
    /** Cached reference to the boundary element. */
    this._boundaryElement = null;
    /** Whether the native dragging interactions have been enabled on the root element. */
    this._nativeInteractionsEnabled = true;
    /** Elements that can be used to drag the draggable item. */
    this._handles = [];
    /** Registered handles that are currently disabled. */
    this._disabledHandles = new Set();
    /** Layout direction of the item. */
    this._direction = 'ltr';
    /**
     * Amount of milliseconds to wait after the user has put their
     * pointer down before starting to drag the element.
     */
    this.dragStartDelay = 0;
    this._disabled = false;
    /** Emits as the drag sequence is being prepared. */
    this.beforeStarted = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Emits when the user starts dragging the item. */
    this.started = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Emits when the user has released a drag item, before any animations have started. */
    this.released = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Emits when the user stops dragging an item in the container. */
    this.ended = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Emits when the user has moved the item into a new container. */
    this.entered = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Emits when the user removes the item its container by dragging it into another container. */
    this.exited = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Emits when the user drops the item inside a container. */
    this.dropped = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /**
     * Emits as the user is dragging the item. Use with caution,
     * because this event will fire for every pixel that the user has dragged.
     */
    this.moved = this._moveEvents;
    /** Handler for the `mousedown`/`touchstart` events. */
    this._pointerDown = event => {
      this.beforeStarted.next();
      // Delegate the event based on whether it started from a handle or the element itself.
      if (this._handles.length) {
        const targetHandle = this._getTargetHandle(event);
        if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {
          this._initializeDragSequence(targetHandle, event);
        }
      } else if (!this.disabled) {
        this._initializeDragSequence(this._rootElement, event);
      }
    };
    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */
    this._pointerMove = event => {
      const pointerPosition = this._getPointerPositionOnPage(event);
      if (!this._hasStartedDragging) {
        const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);
        const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);
        const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;
        // Only start dragging after the user has moved more than the minimum distance in either
        // direction. Note that this is preferable over doing something like `skip(minimumDistance)`
        // in the `pointerMove` subscription, because we're not guaranteed to have one move event
        // per pixel of movement (e.g. if the user moves their pointer quickly).
        if (isOverThreshold) {
          const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);
          const container = this._dropContainer;
          if (!isDelayElapsed) {
            this._endDragSequence(event);
            return;
          }
          // Prevent other drag sequences from starting while something in the container is still
          // being dragged. This can happen while we're waiting for the drop animation to finish
          // and can cause errors, because some elements might still be moving around.
          if (!container || !container.isDragging() && !container.isReceiving()) {
            // Prevent the default action as soon as the dragging sequence is considered as
            // "started" since waiting for the next event can allow the device to begin scrolling.
            event.preventDefault();
            this._hasStartedDragging = true;
            this._ngZone.run(() => this._startDragSequence(event));
          }
        }
        return;
      }
      // We prevent the default action down here so that we know that dragging has started. This is
      // important for touch devices where doing this too early can unnecessarily block scrolling,
      // if there's a dragging delay.
      event.preventDefault();
      const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);
      this._hasMoved = true;
      this._lastKnownPointerPosition = pointerPosition;
      this._updatePointerDirectionDelta(constrainedPointerPosition);
      if (this._dropContainer) {
        this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);
      } else {
        // If there's a position constraint function, we want the element's top/left to be at the
        // specific position on the page. Use the initial position as a reference if that's the case.
        const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;
        const activeTransform = this._activeTransform;
        activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;
        activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;
        this._applyRootElementTransform(activeTransform.x, activeTransform.y);
      }
      // Since this event gets fired for every pixel while dragging, we only
      // want to fire it if the consumer opted into it. Also we have to
      // re-enter the zone because we run all of the events on the outside.
      if (this._moveEvents.observers.length) {
        this._ngZone.run(() => {
          this._moveEvents.next({
            source: this,
            pointerPosition: constrainedPointerPosition,
            event,
            distance: this._getDragDistance(constrainedPointerPosition),
            delta: this._pointerDirectionDelta
          });
        });
      }
    };
    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */
    this._pointerUp = event => {
      this._endDragSequence(event);
    };
    /** Handles a native `dragstart` event. */
    this._nativeDragStart = event => {
      if (this._handles.length) {
        const targetHandle = this._getTargetHandle(event);
        if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {
          event.preventDefault();
        }
      } else if (!this.disabled) {
        // Usually this isn't necessary since the we prevent the default action in `pointerDown`,
        // but some cases like dragging of links can slip through (see #24403).
        event.preventDefault();
      }
    };
    this.withRootElement(element).withParent(_config.parentDragRef || null);
    this._parentPositions = new ParentPositionTracker(_document);
    _dragDropRegistry.registerDragItem(this);
  }
  /**
   * Returns the element that is being used as a placeholder
   * while the current element is being dragged.
   */
  getPlaceholderElement() {
    return this._placeholder;
  }
  /** Returns the root draggable element. */
  getRootElement() {
    return this._rootElement;
  }
  /**
   * Gets the currently-visible element that represents the drag item.
   * While dragging this is the placeholder, otherwise it's the root element.
   */
  getVisibleElement() {
    return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();
  }
  /** Registers the handles that can be used to drag the element. */
  withHandles(handles) {
    this._handles = handles.map(handle => (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(handle));
    this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));
    this._toggleNativeDragInteractions();
    // Delete any lingering disabled handles that may have been destroyed. Note that we re-create
    // the set, rather than iterate over it and filter out the destroyed handles, because while
    // the ES spec allows for sets to be modified while they're being iterated over, some polyfills
    // use an array internally which may throw an error.
    const disabledHandles = new Set();
    this._disabledHandles.forEach(handle => {
      if (this._handles.indexOf(handle) > -1) {
        disabledHandles.add(handle);
      }
    });
    this._disabledHandles = disabledHandles;
    return this;
  }
  /**
   * Registers the template that should be used for the drag preview.
   * @param template Template that from which to stamp out the preview.
   */
  withPreviewTemplate(template) {
    this._previewTemplate = template;
    return this;
  }
  /**
   * Registers the template that should be used for the drag placeholder.
   * @param template Template that from which to stamp out the placeholder.
   */
  withPlaceholderTemplate(template) {
    this._placeholderTemplate = template;
    return this;
  }
  /**
   * Sets an alternate drag root element. The root element is the element that will be moved as
   * the user is dragging. Passing an alternate root element is useful when trying to enable
   * dragging on an element that you might not have access to.
   */
  withRootElement(rootElement) {
    const element = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(rootElement);
    if (element !== this._rootElement) {
      if (this._rootElement) {
        this._removeRootElementListeners(this._rootElement);
      }
      this._ngZone.runOutsideAngular(() => {
        element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);
        element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);
        element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);
      });
      this._initialTransform = undefined;
      this._rootElement = element;
    }
    if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {
      this._ownerSVGElement = this._rootElement.ownerSVGElement;
    }
    return this;
  }
  /**
   * Element to which the draggable's position will be constrained.
   */
  withBoundaryElement(boundaryElement) {
    this._boundaryElement = boundaryElement ? (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(boundaryElement) : null;
    this._resizeSubscription.unsubscribe();
    if (boundaryElement) {
      this._resizeSubscription = this._viewportRuler.change(10).subscribe(() => this._containInsideBoundaryOnResize());
    }
    return this;
  }
  /** Sets the parent ref that the ref is nested in.  */
  withParent(parent) {
    this._parentDragRef = parent;
    return this;
  }
  /** Removes the dragging functionality from the DOM element. */
  dispose() {
    this._removeRootElementListeners(this._rootElement);
    // Do this check before removing from the registry since it'll
    // stop being considered as dragged once it is removed.
    if (this.isDragging()) {
      // Since we move out the element to the end of the body while it's being
      // dragged, we have to make sure that it's removed if it gets destroyed.
      this._rootElement?.remove();
    }
    this._anchor?.remove();
    this._destroyPreview();
    this._destroyPlaceholder();
    this._dragDropRegistry.removeDragItem(this);
    this._removeSubscriptions();
    this.beforeStarted.complete();
    this.started.complete();
    this.released.complete();
    this.ended.complete();
    this.entered.complete();
    this.exited.complete();
    this.dropped.complete();
    this._moveEvents.complete();
    this._handles = [];
    this._disabledHandles.clear();
    this._dropContainer = undefined;
    this._resizeSubscription.unsubscribe();
    this._parentPositions.clear();
    this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate = this._previewTemplate = this._anchor = this._parentDragRef = null;
  }
  /** Checks whether the element is currently being dragged. */
  isDragging() {
    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);
  }
  /** Resets a standalone drag item to its initial position. */
  reset() {
    this._rootElement.style.transform = this._initialTransform || '';
    this._activeTransform = {
      x: 0,
      y: 0
    };
    this._passiveTransform = {
      x: 0,
      y: 0
    };
  }
  /**
   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.
   * @param handle Handle element that should be disabled.
   */
  disableHandle(handle) {
    if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {
      this._disabledHandles.add(handle);
      toggleNativeDragInteractions(handle, true);
    }
  }
  /**
   * Enables a handle, if it has been disabled.
   * @param handle Handle element to be enabled.
   */
  enableHandle(handle) {
    if (this._disabledHandles.has(handle)) {
      this._disabledHandles.delete(handle);
      toggleNativeDragInteractions(handle, this.disabled);
    }
  }
  /** Sets the layout direction of the draggable item. */
  withDirection(direction) {
    this._direction = direction;
    return this;
  }
  /** Sets the container that the item is part of. */
  _withDropContainer(container) {
    this._dropContainer = container;
  }
  /**
   * Gets the current position in pixels the draggable outside of a drop container.
   */
  getFreeDragPosition() {
    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;
    return {
      x: position.x,
      y: position.y
    };
  }
  /**
   * Sets the current position in pixels the draggable outside of a drop container.
   * @param value New position to be set.
   */
  setFreeDragPosition(value) {
    this._activeTransform = {
      x: 0,
      y: 0
    };
    this._passiveTransform.x = value.x;
    this._passiveTransform.y = value.y;
    if (!this._dropContainer) {
      this._applyRootElementTransform(value.x, value.y);
    }
    return this;
  }
  /**
   * Sets the container into which to insert the preview element.
   * @param value Container into which to insert the preview.
   */
  withPreviewContainer(value) {
    this._previewContainer = value;
    return this;
  }
  /** Updates the item's sort order based on the last-known pointer position. */
  _sortFromLastPointerPosition() {
    const position = this._lastKnownPointerPosition;
    if (position && this._dropContainer) {
      this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);
    }
  }
  /** Unsubscribes from the global subscriptions. */
  _removeSubscriptions() {
    this._pointerMoveSubscription.unsubscribe();
    this._pointerUpSubscription.unsubscribe();
    this._scrollSubscription.unsubscribe();
  }
  /** Destroys the preview element and its ViewRef. */
  _destroyPreview() {
    this._preview?.remove();
    this._previewRef?.destroy();
    this._preview = this._previewRef = null;
  }
  /** Destroys the placeholder element and its ViewRef. */
  _destroyPlaceholder() {
    this._placeholder?.remove();
    this._placeholderRef?.destroy();
    this._placeholder = this._placeholderRef = null;
  }
  /**
   * Clears subscriptions and stops the dragging sequence.
   * @param event Browser event object that ended the sequence.
   */
  _endDragSequence(event) {
    // Note that here we use `isDragging` from the service, rather than from `this`.
    // The difference is that the one from the service reflects whether a dragging sequence
    // has been initiated, whereas the one on `this` includes whether the user has passed
    // the minimum dragging threshold.
    if (!this._dragDropRegistry.isDragging(this)) {
      return;
    }
    this._removeSubscriptions();
    this._dragDropRegistry.stopDragging(this);
    this._toggleNativeDragInteractions();
    if (this._handles) {
      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;
    }
    if (!this._hasStartedDragging) {
      return;
    }
    this.released.next({
      source: this,
      event
    });
    if (this._dropContainer) {
      // Stop scrolling immediately, instead of waiting for the animation to finish.
      this._dropContainer._stopScrolling();
      this._animatePreviewToPlaceholder().then(() => {
        this._cleanupDragArtifacts(event);
        this._cleanupCachedDimensions();
        this._dragDropRegistry.stopDragging(this);
      });
    } else {
      // Convert the active transform into a passive one. This means that next time
      // the user starts dragging the item, its position will be calculated relatively
      // to the new passive transform.
      this._passiveTransform.x = this._activeTransform.x;
      const pointerPosition = this._getPointerPositionOnPage(event);
      this._passiveTransform.y = this._activeTransform.y;
      this._ngZone.run(() => {
        this.ended.next({
          source: this,
          distance: this._getDragDistance(pointerPosition),
          dropPoint: pointerPosition,
          event
        });
      });
      this._cleanupCachedDimensions();
      this._dragDropRegistry.stopDragging(this);
    }
  }
  /** Starts the dragging sequence. */
  _startDragSequence(event) {
    if (isTouchEvent(event)) {
      this._lastTouchEventTime = Date.now();
    }
    this._toggleNativeDragInteractions();
    const dropContainer = this._dropContainer;
    if (dropContainer) {
      const element = this._rootElement;
      const parent = element.parentNode;
      const placeholder = this._placeholder = this._createPlaceholderElement();
      const anchor = this._anchor = this._anchor || this._document.createComment('');
      // Needs to happen before the root element is moved.
      const shadowRoot = this._getShadowRoot();
      // Insert an anchor node so that we can restore the element's position in the DOM.
      parent.insertBefore(anchor, element);
      // There's no risk of transforms stacking when inside a drop container so
      // we can keep the initial transform up to date any time dragging starts.
      this._initialTransform = element.style.transform || '';
      // Create the preview after the initial transform has
      // been cached, because it can be affected by the transform.
      this._preview = this._createPreviewElement();
      // We move the element out at the end of the body and we make it hidden, because keeping it in
      // place will throw off the consumer's `:last-child` selectors. We can't remove the element
      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.
      toggleVisibility(element, false, dragImportantProperties);
      this._document.body.appendChild(parent.replaceChild(placeholder, element));
      this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);
      this.started.next({
        source: this,
        event
      }); // Emit before notifying the container.
      dropContainer.start();
      this._initialContainer = dropContainer;
      this._initialIndex = dropContainer.getItemIndex(this);
    } else {
      this.started.next({
        source: this,
        event
      });
      this._initialContainer = this._initialIndex = undefined;
    }
    // Important to run after we've called `start` on the parent container
    // so that it has had time to resolve its scrollable parents.
    this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);
  }
  /**
   * Sets up the different variables and subscriptions
   * that will be necessary for the dragging sequence.
   * @param referenceElement Element that started the drag sequence.
   * @param event Browser event object that started the sequence.
   */
  _initializeDragSequence(referenceElement, event) {
    // Stop propagation if the item is inside another
    // draggable so we don't start multiple drag sequences.
    if (this._parentDragRef) {
      event.stopPropagation();
    }
    const isDragging = this.isDragging();
    const isTouchSequence = isTouchEvent(event);
    const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;
    const rootElement = this._rootElement;
    const target = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__._getEventTarget)(event);
    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime && this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();
    const isFakeEvent = isTouchSequence ? (0,_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__.isFakeTouchstartFromScreenReader)(event) : (0,_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__.isFakeMousedownFromScreenReader)(event);
    // If the event started from an element with the native HTML drag&drop, it'll interfere
    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action
    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but
    // it's flaky and it fails if the user drags it away quickly. Also note that we only want
    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`
    // events from firing on touch devices.
    if (target && target.draggable && event.type === 'mousedown') {
      event.preventDefault();
    }
    // Abort if the user is already dragging or is using a mouse button other than the primary one.
    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {
      return;
    }
    // If we've got handles, we need to disable the tap highlight on the entire root element,
    // otherwise iOS will still add it, even though all the drag interactions on the handle
    // are disabled.
    if (this._handles.length) {
      const rootStyles = rootElement.style;
      this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';
      rootStyles.webkitTapHighlightColor = 'transparent';
    }
    this._hasStartedDragging = this._hasMoved = false;
    // Avoid multiple subscriptions and memory leaks when multi touch
    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)
    this._removeSubscriptions();
    this._initialClientRect = this._rootElement.getBoundingClientRect();
    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);
    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);
    this._scrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(scrollEvent => this._updateOnScroll(scrollEvent));
    if (this._boundaryElement) {
      this._boundaryRect = getMutableClientRect(this._boundaryElement);
    }
    // If we have a custom preview we can't know ahead of time how large it'll be so we position
    // it next to the cursor. The exception is when the consumer has opted into making the preview
    // the same size as the root element, in which case we do know the size.
    const previewTemplate = this._previewTemplate;
    this._pickupPositionInElement = previewTemplate && previewTemplate.template && !previewTemplate.matchSize ? {
      x: 0,
      y: 0
    } : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);
    const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition = this._getPointerPositionOnPage(event);
    this._pointerDirectionDelta = {
      x: 0,
      y: 0
    };
    this._pointerPositionAtLastDirectionChange = {
      x: pointerPosition.x,
      y: pointerPosition.y
    };
    this._dragStartTime = Date.now();
    this._dragDropRegistry.startDragging(this, event);
  }
  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */
  _cleanupDragArtifacts(event) {
    // Restore the element's visibility and insert it at its old position in the DOM.
    // It's important that we maintain the position, because moving the element around in the DOM
    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,
    // while moving the existing elements in all other cases.
    toggleVisibility(this._rootElement, true, dragImportantProperties);
    this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);
    this._destroyPreview();
    this._destroyPlaceholder();
    this._initialClientRect = this._boundaryRect = this._previewRect = this._initialTransform = undefined;
    // Re-enter the NgZone since we bound `document` events on the outside.
    this._ngZone.run(() => {
      const container = this._dropContainer;
      const currentIndex = container.getItemIndex(this);
      const pointerPosition = this._getPointerPositionOnPage(event);
      const distance = this._getDragDistance(pointerPosition);
      const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);
      this.ended.next({
        source: this,
        distance,
        dropPoint: pointerPosition,
        event
      });
      this.dropped.next({
        item: this,
        currentIndex,
        previousIndex: this._initialIndex,
        container: container,
        previousContainer: this._initialContainer,
        isPointerOverContainer,
        distance,
        dropPoint: pointerPosition,
        event
      });
      container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);
      this._dropContainer = this._initialContainer;
    });
  }
  /**
   * Updates the item's position in its drop container, or moves it
   * into a new one, depending on its current drag position.
   */
  _updateActiveDropContainer({
    x,
    y
  }, {
    x: rawX,
    y: rawY
  }) {
    // Drop container that draggable has been moved into.
    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);
    // If we couldn't find a new container to move the item into, and the item has left its
    // initial container, check whether the it's over the initial container. This handles the
    // case where two containers are connected one way and the user tries to undo dragging an
    // item into a new container.
    if (!newContainer && this._dropContainer !== this._initialContainer && this._initialContainer._isOverContainer(x, y)) {
      newContainer = this._initialContainer;
    }
    if (newContainer && newContainer !== this._dropContainer) {
      this._ngZone.run(() => {
        // Notify the old container that the item has left.
        this.exited.next({
          item: this,
          container: this._dropContainer
        });
        this._dropContainer.exit(this);
        // Notify the new container that the item has entered.
        this._dropContainer = newContainer;
        this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&
        // If we're re-entering the initial container and sorting is disabled,
        // put item the into its starting index to begin with.
        newContainer.sortingDisabled ? this._initialIndex : undefined);
        this.entered.next({
          item: this,
          container: newContainer,
          currentIndex: newContainer.getItemIndex(this)
        });
      });
    }
    // Dragging may have been interrupted as a result of the events above.
    if (this.isDragging()) {
      this._dropContainer._startScrollingIfNecessary(rawX, rawY);
      this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);
      if (this.constrainPosition) {
        this._applyPreviewTransform(x, y);
      } else {
        this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);
      }
    }
  }
  /**
   * Creates the element that will be rendered next to the user's pointer
   * and will be used as a preview of the element that is being dragged.
   */
  _createPreviewElement() {
    const previewConfig = this._previewTemplate;
    const previewClass = this.previewClass;
    const previewTemplate = previewConfig ? previewConfig.template : null;
    let preview;
    if (previewTemplate && previewConfig) {
      // Measure the element before we've inserted the preview
      // since the insertion could throw off the measurement.
      const rootRect = previewConfig.matchSize ? this._initialClientRect : null;
      const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);
      viewRef.detectChanges();
      preview = getRootNode(viewRef, this._document);
      this._previewRef = viewRef;
      if (previewConfig.matchSize) {
        matchElementSize(preview, rootRect);
      } else {
        preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);
      }
    } else {
      preview = deepCloneNode(this._rootElement);
      matchElementSize(preview, this._initialClientRect);
      if (this._initialTransform) {
        preview.style.transform = this._initialTransform;
      }
    }
    extendStyles(preview.style, {
      // It's important that we disable the pointer events on the preview, because
      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.
      'pointer-events': 'none',
      // We have to reset the margin, because it can throw off positioning relative to the viewport.
      'margin': '0',
      'position': 'fixed',
      'top': '0',
      'left': '0',
      'z-index': `${this._config.zIndex || 1000}`
    }, dragImportantProperties);
    toggleNativeDragInteractions(preview, false);
    preview.classList.add('cdk-drag-preview');
    preview.setAttribute('dir', this._direction);
    if (previewClass) {
      if (Array.isArray(previewClass)) {
        previewClass.forEach(className => preview.classList.add(className));
      } else {
        preview.classList.add(previewClass);
      }
    }
    return preview;
  }
  /**
   * Animates the preview element from its current position to the location of the drop placeholder.
   * @returns Promise that resolves when the animation completes.
   */
  _animatePreviewToPlaceholder() {
    // If the user hasn't moved yet, the transitionend event won't fire.
    if (!this._hasMoved) {
      return Promise.resolve();
    }
    const placeholderRect = this._placeholder.getBoundingClientRect();
    // Apply the class that adds a transition to the preview.
    this._preview.classList.add('cdk-drag-animating');
    // Move the preview to the placeholder position.
    this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);
    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since
    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to
    // apply its style, we take advantage of the available info to figure out whether we need to
    // bind the event in the first place.
    const duration = getTransformTransitionDurationInMs(this._preview);
    if (duration === 0) {
      return Promise.resolve();
    }
    return this._ngZone.runOutsideAngular(() => {
      return new Promise(resolve => {
        const handler = event => {
          if (!event || (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__._getEventTarget)(event) === this._preview && event.propertyName === 'transform') {
            this._preview?.removeEventListener('transitionend', handler);
            resolve();
            clearTimeout(timeout);
          }
        };
        // If a transition is short enough, the browser might not fire the `transitionend` event.
        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll
        // fire if the transition hasn't completed when it was supposed to.
        const timeout = setTimeout(handler, duration * 1.5);
        this._preview.addEventListener('transitionend', handler);
      });
    });
  }
  /** Creates an element that will be shown instead of the current element while dragging. */
  _createPlaceholderElement() {
    const placeholderConfig = this._placeholderTemplate;
    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;
    let placeholder;
    if (placeholderTemplate) {
      this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);
      this._placeholderRef.detectChanges();
      placeholder = getRootNode(this._placeholderRef, this._document);
    } else {
      placeholder = deepCloneNode(this._rootElement);
    }
    // Stop pointer events on the preview so the user can't
    // interact with it while the preview is animating.
    placeholder.style.pointerEvents = 'none';
    placeholder.classList.add('cdk-drag-placeholder');
    return placeholder;
  }
  /**
   * Figures out the coordinates at which an element was picked up.
   * @param referenceElement Element that initiated the dragging.
   * @param event Event that initiated the dragging.
   */
  _getPointerPositionInElement(elementRect, referenceElement, event) {
    const handleElement = referenceElement === this._rootElement ? null : referenceElement;
    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;
    const point = isTouchEvent(event) ? event.targetTouches[0] : event;
    const scrollPosition = this._getViewportScrollPosition();
    const x = point.pageX - referenceRect.left - scrollPosition.left;
    const y = point.pageY - referenceRect.top - scrollPosition.top;
    return {
      x: referenceRect.left - elementRect.left + x,
      y: referenceRect.top - elementRect.top + y
    };
  }
  /** Determines the point of the page that was touched by the user. */
  _getPointerPositionOnPage(event) {
    const scrollPosition = this._getViewportScrollPosition();
    const point = isTouchEvent(event) ?
    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.
    // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`
    // to have a value, but Firefox in device emulation mode has a bug where both can be empty
    // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid
    // throwing an error. The value returned here will be incorrect, but since this only
    // breaks inside a developer tool and the value is only used for secondary information,
    // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.
    event.touches[0] || event.changedTouches[0] || {
      pageX: 0,
      pageY: 0
    } : event;
    const x = point.pageX - scrollPosition.left;
    const y = point.pageY - scrollPosition.top;
    // if dragging SVG element, try to convert from the screen coordinate system to the SVG
    // coordinate system
    if (this._ownerSVGElement) {
      const svgMatrix = this._ownerSVGElement.getScreenCTM();
      if (svgMatrix) {
        const svgPoint = this._ownerSVGElement.createSVGPoint();
        svgPoint.x = x;
        svgPoint.y = y;
        return svgPoint.matrixTransform(svgMatrix.inverse());
      }
    }
    return {
      x,
      y
    };
  }
  /** Gets the pointer position on the page, accounting for any position constraints. */
  _getConstrainedPointerPosition(point) {
    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;
    let {
      x,
      y
    } = this.constrainPosition ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement) : point;
    if (this.lockAxis === 'x' || dropContainerLock === 'x') {
      y = this._pickupPositionOnPage.y;
    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {
      x = this._pickupPositionOnPage.x;
    }
    if (this._boundaryRect) {
      const {
        x: pickupX,
        y: pickupY
      } = this._pickupPositionInElement;
      const boundaryRect = this._boundaryRect;
      const {
        width: previewWidth,
        height: previewHeight
      } = this._getPreviewRect();
      const minY = boundaryRect.top + pickupY;
      const maxY = boundaryRect.bottom - (previewHeight - pickupY);
      const minX = boundaryRect.left + pickupX;
      const maxX = boundaryRect.right - (previewWidth - pickupX);
      x = clamp$1(x, minX, maxX);
      y = clamp$1(y, minY, maxY);
    }
    return {
      x,
      y
    };
  }
  /** Updates the current drag delta, based on the user's current pointer position on the page. */
  _updatePointerDirectionDelta(pointerPositionOnPage) {
    const {
      x,
      y
    } = pointerPositionOnPage;
    const delta = this._pointerDirectionDelta;
    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;
    // Amount of pixels the user has dragged since the last time the direction changed.
    const changeX = Math.abs(x - positionSinceLastChange.x);
    const changeY = Math.abs(y - positionSinceLastChange.y);
    // Because we handle pointer events on a per-pixel basis, we don't want the delta
    // to change for every pixel, otherwise anything that depends on it can look erratic.
    // To make the delta more consistent, we track how much the user has moved since the last
    // delta change and we only update it after it has reached a certain threshold.
    if (changeX > this._config.pointerDirectionChangeThreshold) {
      delta.x = x > positionSinceLastChange.x ? 1 : -1;
      positionSinceLastChange.x = x;
    }
    if (changeY > this._config.pointerDirectionChangeThreshold) {
      delta.y = y > positionSinceLastChange.y ? 1 : -1;
      positionSinceLastChange.y = y;
    }
    return delta;
  }
  /** Toggles the native drag interactions, based on how many handles are registered. */
  _toggleNativeDragInteractions() {
    if (!this._rootElement || !this._handles) {
      return;
    }
    const shouldEnable = this._handles.length > 0 || !this.isDragging();
    if (shouldEnable !== this._nativeInteractionsEnabled) {
      this._nativeInteractionsEnabled = shouldEnable;
      toggleNativeDragInteractions(this._rootElement, shouldEnable);
    }
  }
  /** Removes the manually-added event listeners from the root element. */
  _removeRootElementListeners(element) {
    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);
    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);
    element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);
  }
  /**
   * Applies a `transform` to the root element, taking into account any existing transforms on it.
   * @param x New transform value along the X axis.
   * @param y New transform value along the Y axis.
   */
  _applyRootElementTransform(x, y) {
    const transform = getTransform(x, y);
    const styles = this._rootElement.style;
    // Cache the previous transform amount only after the first drag sequence, because
    // we don't want our own transforms to stack on top of each other.
    // Should be excluded none because none + translate3d(x, y, x) is invalid css
    if (this._initialTransform == null) {
      this._initialTransform = styles.transform && styles.transform != 'none' ? styles.transform : '';
    }
    // Preserve the previous `transform` value, if there was one. Note that we apply our own
    // transform before the user's, because things like rotation can affect which direction
    // the element will be translated towards.
    styles.transform = combineTransforms(transform, this._initialTransform);
  }
  /**
   * Applies a `transform` to the preview, taking into account any existing transforms on it.
   * @param x New transform value along the X axis.
   * @param y New transform value along the Y axis.
   */
  _applyPreviewTransform(x, y) {
    // Only apply the initial transform if the preview is a clone of the original element, otherwise
    // it could be completely different and the transform might not make sense anymore.
    const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;
    const transform = getTransform(x, y);
    this._preview.style.transform = combineTransforms(transform, initialTransform);
  }
  /**
   * Gets the distance that the user has dragged during the current drag sequence.
   * @param currentPosition Current position of the user's pointer.
   */
  _getDragDistance(currentPosition) {
    const pickupPosition = this._pickupPositionOnPage;
    if (pickupPosition) {
      return {
        x: currentPosition.x - pickupPosition.x,
        y: currentPosition.y - pickupPosition.y
      };
    }
    return {
      x: 0,
      y: 0
    };
  }
  /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */
  _cleanupCachedDimensions() {
    this._boundaryRect = this._previewRect = undefined;
    this._parentPositions.clear();
  }
  /**
   * Checks whether the element is still inside its boundary after the viewport has been resized.
   * If not, the position is adjusted so that the element fits again.
   */
  _containInsideBoundaryOnResize() {
    let {
      x,
      y
    } = this._passiveTransform;
    if (x === 0 && y === 0 || this.isDragging() || !this._boundaryElement) {
      return;
    }
    // Note: don't use `_clientRectAtStart` here, because we want the latest position.
    const elementRect = this._rootElement.getBoundingClientRect();
    const boundaryRect = this._boundaryElement.getBoundingClientRect();
    // It's possible that the element got hidden away after dragging (e.g. by switching to a
    // different tab). Don't do anything in this case so we don't clear the user's position.
    if (boundaryRect.width === 0 && boundaryRect.height === 0 || elementRect.width === 0 && elementRect.height === 0) {
      return;
    }
    const leftOverflow = boundaryRect.left - elementRect.left;
    const rightOverflow = elementRect.right - boundaryRect.right;
    const topOverflow = boundaryRect.top - elementRect.top;
    const bottomOverflow = elementRect.bottom - boundaryRect.bottom;
    // If the element has become wider than the boundary, we can't
    // do much to make it fit so we just anchor it to the left.
    if (boundaryRect.width > elementRect.width) {
      if (leftOverflow > 0) {
        x += leftOverflow;
      }
      if (rightOverflow > 0) {
        x -= rightOverflow;
      }
    } else {
      x = 0;
    }
    // If the element has become taller than the boundary, we can't
    // do much to make it fit so we just anchor it to the top.
    if (boundaryRect.height > elementRect.height) {
      if (topOverflow > 0) {
        y += topOverflow;
      }
      if (bottomOverflow > 0) {
        y -= bottomOverflow;
      }
    } else {
      y = 0;
    }
    if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {
      this.setFreeDragPosition({
        y,
        x
      });
    }
  }
  /** Gets the drag start delay, based on the event type. */
  _getDragStartDelay(event) {
    const value = this.dragStartDelay;
    if (typeof value === 'number') {
      return value;
    } else if (isTouchEvent(event)) {
      return value.touch;
    }
    return value ? value.mouse : 0;
  }
  /** Updates the internal state of the draggable element when scrolling has occurred. */
  _updateOnScroll(event) {
    const scrollDifference = this._parentPositions.handleScroll(event);
    if (scrollDifference) {
      const target = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__._getEventTarget)(event);
      // ClientRect dimensions are based on the scroll position of the page and its parent
      // node so we have to update the cached boundary ClientRect if the user has scrolled.
      if (this._boundaryRect && target !== this._boundaryElement && target.contains(this._boundaryElement)) {
        adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);
      }
      this._pickupPositionOnPage.x += scrollDifference.left;
      this._pickupPositionOnPage.y += scrollDifference.top;
      // If we're in free drag mode, we have to update the active transform, because
      // it isn't relative to the viewport like the preview inside a drop list.
      if (!this._dropContainer) {
        this._activeTransform.x -= scrollDifference.left;
        this._activeTransform.y -= scrollDifference.top;
        this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);
      }
    }
  }
  /** Gets the scroll position of the viewport. */
  _getViewportScrollPosition() {
    return this._parentPositions.positions.get(this._document)?.scrollPosition || this._parentPositions.getViewportScrollPosition();
  }
  /**
   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather
   * than saving it in property directly on init, because we want to resolve it as late as possible
   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the
   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.
   */
  _getShadowRoot() {
    if (this._cachedShadowRoot === undefined) {
      this._cachedShadowRoot = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__._getShadowRoot)(this._rootElement);
    }
    return this._cachedShadowRoot;
  }
  /** Gets the element into which the drag preview should be inserted. */
  _getPreviewInsertionPoint(initialParent, shadowRoot) {
    const previewContainer = this._previewContainer || 'global';
    if (previewContainer === 'parent') {
      return initialParent;
    }
    if (previewContainer === 'global') {
      const documentRef = this._document;
      // We can't use the body if the user is in fullscreen mode,
      // because the preview will render under the fullscreen element.
      // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.
      return shadowRoot || documentRef.fullscreenElement || documentRef.webkitFullscreenElement || documentRef.mozFullScreenElement || documentRef.msFullscreenElement || documentRef.body;
    }
    return (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(previewContainer);
  }
  /** Lazily resolves and returns the dimensions of the preview. */
  _getPreviewRect() {
    // Cache the preview element rect if we haven't cached it already or if
    // we cached it too early before the element dimensions were computed.
    if (!this._previewRect || !this._previewRect.width && !this._previewRect.height) {
      this._previewRect = this._preview ? this._preview.getBoundingClientRect() : this._initialClientRect;
    }
    return this._previewRect;
  }
  /** Gets a handle that is the target of an event. */
  _getTargetHandle(event) {
    return this._handles.find(handle => {
      return event.target && (event.target === handle || handle.contains(event.target));
    });
  }
}
/**
 * Gets a 3d `transform` that can be applied to an element.
 * @param x Desired position of the element along the X axis.
 * @param y Desired position of the element along the Y axis.
 */
function getTransform(x, y) {
  // Round the transforms since some browsers will
  // blur the elements for sub-pixel transforms.
  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;
}
/** Clamps a value between a minimum and a maximum. */
function clamp$1(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
/** Determines whether an event is a touch event. */
function isTouchEvent(event) {
  // This function is called for every pixel that the user has dragged so we need it to be
  // as fast as possible. Since we only bind mouse events and touch events, we can assume
  // that if the event's name starts with `t`, it's a touch event.
  return event.type[0] === 't';
}
/**
 * Gets the root HTML element of an embedded view.
 * If the root is not an HTML element it gets wrapped in one.
 */
function getRootNode(viewRef, _document) {
  const rootNodes = viewRef.rootNodes;
  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {
    return rootNodes[0];
  }
  const wrapper = _document.createElement('div');
  rootNodes.forEach(node => wrapper.appendChild(node));
  return wrapper;
}
/**
 * Matches the target element's size to the source's size.
 * @param target Element that needs to be resized.
 * @param sourceRect Dimensions of the source element.
 */
function matchElementSize(target, sourceRect) {
  target.style.width = `${sourceRect.width}px`;
  target.style.height = `${sourceRect.height}px`;
  target.style.transform = getTransform(sourceRect.left, sourceRect.top);
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Moves an item one index in an array to another.
 * @param array Array in which to move the item.
 * @param fromIndex Starting index of the item.
 * @param toIndex Index to which the item should be moved.
 */
function moveItemInArray(array, fromIndex, toIndex) {
  const from = clamp(fromIndex, array.length - 1);
  const to = clamp(toIndex, array.length - 1);
  if (from === to) {
    return;
  }
  const target = array[from];
  const delta = to < from ? -1 : 1;
  for (let i = from; i !== to; i += delta) {
    array[i] = array[i + delta];
  }
  array[to] = target;
}
/**
 * Moves an item from one array to another.
 * @param currentArray Array from which to transfer the item.
 * @param targetArray Array into which to put the item.
 * @param currentIndex Index of the item in its current array.
 * @param targetIndex Index at which to insert the item.
 */
function transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {
  const from = clamp(currentIndex, currentArray.length - 1);
  const to = clamp(targetIndex, targetArray.length);
  if (currentArray.length) {
    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);
  }
}
/**
 * Copies an item from one array to another, leaving it in its
 * original position in current array.
 * @param currentArray Array from which to copy the item.
 * @param targetArray Array into which is copy the item.
 * @param currentIndex Index of the item in its current array.
 * @param targetIndex Index at which to insert the item.
 *
 */
function copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {
  const to = clamp(targetIndex, targetArray.length);
  if (currentArray.length) {
    targetArray.splice(to, 0, currentArray[currentIndex]);
  }
}
/** Clamps a number between zero and a maximum. */
function clamp(value, max) {
  return Math.max(0, Math.min(max, value));
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Strategy that only supports sorting along a single axis.
 * Items are reordered using CSS transforms which allows for sorting to be animated.
 * @docs-private
 */
class SingleAxisSortStrategy {
  constructor(_element, _dragDropRegistry) {
    this._element = _element;
    this._dragDropRegistry = _dragDropRegistry;
    /** Cache of the dimensions of all the items inside the container. */
    this._itemPositions = [];
    /** Direction in which the list is oriented. */
    this.orientation = 'vertical';
    /**
     * Keeps track of the item that was last swapped with the dragged item, as well as what direction
     * the pointer was moving in when the swap occurred and whether the user's pointer continued to
     * overlap with the swapped item after the swapping occurred.
     */
    this._previousSwap = {
      drag: null,
      delta: 0,
      overlaps: false
    };
  }
  /**
   * To be called when the drag sequence starts.
   * @param items Items that are currently in the list.
   */
  start(items) {
    this.withItems(items);
  }
  /**
   * To be called when an item is being sorted.
   * @param item Item to be sorted.
   * @param pointerX Position of the item along the X axis.
   * @param pointerY Position of the item along the Y axis.
   * @param pointerDelta Direction in which the pointer is moving along each axis.
   */
  sort(item, pointerX, pointerY, pointerDelta) {
    const siblings = this._itemPositions;
    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);
    if (newIndex === -1 && siblings.length > 0) {
      return null;
    }
    const isHorizontal = this.orientation === 'horizontal';
    const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);
    const siblingAtNewPosition = siblings[newIndex];
    const currentPosition = siblings[currentIndex].clientRect;
    const newPosition = siblingAtNewPosition.clientRect;
    const delta = currentIndex > newIndex ? 1 : -1;
    // How many pixels the item's placeholder should be offset.
    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);
    // How many pixels all the other items should be offset.
    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);
    // Save the previous order of the items before moving the item to its new index.
    // We use this to check whether an item has been moved as a result of the sorting.
    const oldOrder = siblings.slice();
    // Shuffle the array in place.
    moveItemInArray(siblings, currentIndex, newIndex);
    siblings.forEach((sibling, index) => {
      // Don't do anything if the position hasn't changed.
      if (oldOrder[index] === sibling) {
        return;
      }
      const isDraggedItem = sibling.drag === item;
      const offset = isDraggedItem ? itemOffset : siblingOffset;
      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() : sibling.drag.getRootElement();
      // Update the offset to reflect the new position.
      sibling.offset += offset;
      // Since we're moving the items with a `transform`, we need to adjust their cached
      // client rects to reflect their new position, as well as swap their positions in the cache.
      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the
      // elements may be mid-animation which will give us a wrong result.
      if (isHorizontal) {
        // Round the transforms since some browsers will
        // blur the elements, for sub-pixel transforms.
        elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);
        adjustClientRect(sibling.clientRect, 0, offset);
      } else {
        elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);
        adjustClientRect(sibling.clientRect, offset, 0);
      }
    });
    // Note that it's important that we do this after the client rects have been adjusted.
    this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);
    this._previousSwap.drag = siblingAtNewPosition.drag;
    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;
    return {
      previousIndex: currentIndex,
      currentIndex: newIndex
    };
  }
  /**
   * Called when an item is being moved into the container.
   * @param item Item that was moved into the container.
   * @param pointerX Position of the item along the X axis.
   * @param pointerY Position of the item along the Y axis.
   * @param index Index at which the item entered. If omitted, the container will try to figure it
   *   out automatically.
   */
  enter(item, pointerX, pointerY, index) {
    const newIndex = index == null || index < 0 ?
    // We use the coordinates of where the item entered the drop
    // zone to figure out at which index it should be inserted.
    this._getItemIndexFromPointerPosition(item, pointerX, pointerY) : index;
    const activeDraggables = this._activeDraggables;
    const currentIndex = activeDraggables.indexOf(item);
    const placeholder = item.getPlaceholderElement();
    let newPositionReference = activeDraggables[newIndex];
    // If the item at the new position is the same as the item that is being dragged,
    // it means that we're trying to restore the item to its initial position. In this
    // case we should use the next item from the list as the reference.
    if (newPositionReference === item) {
      newPositionReference = activeDraggables[newIndex + 1];
    }
    // If we didn't find a new position reference, it means that either the item didn't start off
    // in this container, or that the item requested to be inserted at the end of the list.
    if (!newPositionReference && (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) && this._shouldEnterAsFirstChild(pointerX, pointerY)) {
      newPositionReference = activeDraggables[0];
    }
    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it
    // into another container and back again), we have to ensure that it isn't duplicated.
    if (currentIndex > -1) {
      activeDraggables.splice(currentIndex, 1);
    }
    // Don't use items that are being dragged as a reference, because
    // their element has been moved down to the bottom of the body.
    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {
      const element = newPositionReference.getRootElement();
      element.parentElement.insertBefore(placeholder, element);
      activeDraggables.splice(newIndex, 0, item);
    } else {
      (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(this._element).appendChild(placeholder);
      activeDraggables.push(item);
    }
    // The transform needs to be cleared so it doesn't throw off the measurements.
    placeholder.style.transform = '';
    // Note that usually `start` is called together with `enter` when an item goes into a new
    // container. This will cache item positions, but we need to refresh them since the amount
    // of items has changed.
    this._cacheItemPositions();
  }
  /** Sets the items that are currently part of the list. */
  withItems(items) {
    this._activeDraggables = items.slice();
    this._cacheItemPositions();
  }
  /** Assigns a sort predicate to the strategy. */
  withSortPredicate(predicate) {
    this._sortPredicate = predicate;
  }
  /** Resets the strategy to its initial state before dragging was started. */
  reset() {
    // TODO(crisbeto): may have to wait for the animations to finish.
    this._activeDraggables.forEach(item => {
      const rootElement = item.getRootElement();
      if (rootElement) {
        const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;
        rootElement.style.transform = initialTransform || '';
      }
    });
    this._itemPositions = [];
    this._activeDraggables = [];
    this._previousSwap.drag = null;
    this._previousSwap.delta = 0;
    this._previousSwap.overlaps = false;
  }
  /**
   * Gets a snapshot of items currently in the list.
   * Can include items that we dragged in from another list.
   */
  getActiveItemsSnapshot() {
    return this._activeDraggables;
  }
  /** Gets the index of a specific item. */
  getItemIndex(item) {
    // Items are sorted always by top/left in the cache, however they flow differently in RTL.
    // The rest of the logic still stands no matter what orientation we're in, however
    // we need to invert the array when determining the index.
    const items = this.orientation === 'horizontal' && this.direction === 'rtl' ? this._itemPositions.slice().reverse() : this._itemPositions;
    return items.findIndex(currentItem => currentItem.drag === item);
  }
  /** Used to notify the strategy that the scroll position has changed. */
  updateOnScroll(topDifference, leftDifference) {
    // Since we know the amount that the user has scrolled we can shift all of the
    // client rectangles ourselves. This is cheaper than re-measuring everything and
    // we can avoid inconsistent behavior where we might be measuring the element before
    // its position has changed.
    this._itemPositions.forEach(({
      clientRect
    }) => {
      adjustClientRect(clientRect, topDifference, leftDifference);
    });
    // We need two loops for this, because we want all of the cached
    // positions to be up-to-date before we re-sort the item.
    this._itemPositions.forEach(({
      drag
    }) => {
      if (this._dragDropRegistry.isDragging(drag)) {
        // We need to re-sort the item manually, because the pointer move
        // events won't be dispatched while the user is scrolling.
        drag._sortFromLastPointerPosition();
      }
    });
  }
  /** Refreshes the position cache of the items and sibling containers. */
  _cacheItemPositions() {
    const isHorizontal = this.orientation === 'horizontal';
    this._itemPositions = this._activeDraggables.map(drag => {
      const elementToMeasure = drag.getVisibleElement();
      return {
        drag,
        offset: 0,
        initialTransform: elementToMeasure.style.transform || '',
        clientRect: getMutableClientRect(elementToMeasure)
      };
    }).sort((a, b) => {
      return isHorizontal ? a.clientRect.left - b.clientRect.left : a.clientRect.top - b.clientRect.top;
    });
  }
  /**
   * Gets the offset in pixels by which the item that is being dragged should be moved.
   * @param currentPosition Current position of the item.
   * @param newPosition Position of the item where the current item should be moved.
   * @param delta Direction in which the user is moving.
   */
  _getItemOffsetPx(currentPosition, newPosition, delta) {
    const isHorizontal = this.orientation === 'horizontal';
    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left : newPosition.top - currentPosition.top;
    // Account for differences in the item width/height.
    if (delta === -1) {
      itemOffset += isHorizontal ? newPosition.width - currentPosition.width : newPosition.height - currentPosition.height;
    }
    return itemOffset;
  }
  /**
   * Gets the offset in pixels by which the items that aren't being dragged should be moved.
   * @param currentIndex Index of the item currently being dragged.
   * @param siblings All of the items in the list.
   * @param delta Direction in which the user is moving.
   */
  _getSiblingOffsetPx(currentIndex, siblings, delta) {
    const isHorizontal = this.orientation === 'horizontal';
    const currentPosition = siblings[currentIndex].clientRect;
    const immediateSibling = siblings[currentIndex + delta * -1];
    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;
    if (immediateSibling) {
      const start = isHorizontal ? 'left' : 'top';
      const end = isHorizontal ? 'right' : 'bottom';
      // Get the spacing between the start of the current item and the end of the one immediately
      // after it in the direction in which the user is dragging, or vice versa. We add it to the
      // offset in order to push the element to where it will be when it's inline and is influenced
      // by the `margin` of its siblings.
      if (delta === -1) {
        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];
      } else {
        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];
      }
    }
    return siblingOffset;
  }
  /**
   * Checks if pointer is entering in the first position
   * @param pointerX Position of the user's pointer along the X axis.
   * @param pointerY Position of the user's pointer along the Y axis.
   */
  _shouldEnterAsFirstChild(pointerX, pointerY) {
    if (!this._activeDraggables.length) {
      return false;
    }
    const itemPositions = this._itemPositions;
    const isHorizontal = this.orientation === 'horizontal';
    // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index
    // check if container is using some sort of "reverse" ordering (eg: flex-direction: row-reverse)
    const reversed = itemPositions[0].drag !== this._activeDraggables[0];
    if (reversed) {
      const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;
      return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;
    } else {
      const firstItemRect = itemPositions[0].clientRect;
      return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;
    }
  }
  /**
   * Gets the index of an item in the drop container, based on the position of the user's pointer.
   * @param item Item that is being sorted.
   * @param pointerX Position of the user's pointer along the X axis.
   * @param pointerY Position of the user's pointer along the Y axis.
   * @param delta Direction in which the user is moving their pointer.
   */
  _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {
    const isHorizontal = this.orientation === 'horizontal';
    const index = this._itemPositions.findIndex(({
      drag,
      clientRect
    }) => {
      // Skip the item itself.
      if (drag === item) {
        return false;
      }
      if (delta) {
        const direction = isHorizontal ? delta.x : delta.y;
        // If the user is still hovering over the same item as last time, their cursor hasn't left
        // the item after we made the swap, and they didn't change the direction in which they're
        // dragging, we don't consider it a direction swap.
        if (drag === this._previousSwap.drag && this._previousSwap.overlaps && direction === this._previousSwap.delta) {
          return false;
        }
      }
      return isHorizontal ?
      // Round these down since most browsers report client rects with
      // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.
      pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);
    });
    return index === -1 || !this._sortPredicate(index, item) ? -1 : index;
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Proximity, as a ratio to width/height, at which a
 * dragged item will affect the drop container.
 */
const DROP_PROXIMITY_THRESHOLD = 0.05;
/**
 * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the
 * viewport. The value comes from trying it out manually until it feels right.
 */
const SCROLL_PROXIMITY_THRESHOLD = 0.05;
/**
 * Reference to a drop list. Used to manipulate or dispose of the container.
 */
class DropListRef {
  constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {
    this._dragDropRegistry = _dragDropRegistry;
    this._ngZone = _ngZone;
    this._viewportRuler = _viewportRuler;
    /** Whether starting a dragging sequence from this container is disabled. */
    this.disabled = false;
    /** Whether sorting items within the list is disabled. */
    this.sortingDisabled = false;
    /**
     * Whether auto-scrolling the view when the user
     * moves their pointer close to the edges is disabled.
     */
    this.autoScrollDisabled = false;
    /** Number of pixels to scroll for each frame when auto-scrolling an element. */
    this.autoScrollStep = 2;
    /**
     * Function that is used to determine whether an item
     * is allowed to be moved into a drop container.
     */
    this.enterPredicate = () => true;
    /** Function that is used to determine whether an item can be sorted into a particular index. */
    this.sortPredicate = () => true;
    /** Emits right before dragging has started. */
    this.beforeStarted = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /**
     * Emits when the user has moved a new drag item into this container.
     */
    this.entered = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /**
     * Emits when the user removes an item from the container
     * by dragging it into another container.
     */
    this.exited = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Emits when the user drops an item inside the container. */
    this.dropped = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Emits as the user is swapping items while actively dragging. */
    this.sorted = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Emits when a dragging sequence is started in a list connected to the current one. */
    this.receivingStarted = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Emits when a dragging sequence is stopped from a list connected to the current one. */
    this.receivingStopped = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Whether an item in the list is being dragged. */
    this._isDragging = false;
    /** Draggable items in the container. */
    this._draggables = [];
    /** Drop lists that are connected to the current one. */
    this._siblings = [];
    /** Connected siblings that currently have a dragged item. */
    this._activeSiblings = new Set();
    /** Subscription to the window being scrolled. */
    this._viewportScrollSubscription = rxjs__WEBPACK_IMPORTED_MODULE_3__.Subscription.EMPTY;
    /** Vertical direction in which the list is currently scrolling. */
    this._verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;
    /** Horizontal direction in which the list is currently scrolling. */
    this._horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;
    /** Used to signal to the current auto-scroll sequence when to stop. */
    this._stopScrollTimers = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */
    this._cachedShadowRoot = null;
    /** Starts the interval that'll auto-scroll the element. */
    this._startScrollInterval = () => {
      this._stopScrolling();
      (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.interval)(0, rxjs__WEBPACK_IMPORTED_MODULE_6__.animationFrameScheduler).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.takeUntil)(this._stopScrollTimers)).subscribe(() => {
        const node = this._scrollNode;
        const scrollStep = this.autoScrollStep;
        if (this._verticalScrollDirection === 1 /* AutoScrollVerticalDirection.UP */) {
          node.scrollBy(0, -scrollStep);
        } else if (this._verticalScrollDirection === 2 /* AutoScrollVerticalDirection.DOWN */) {
          node.scrollBy(0, scrollStep);
        }
        if (this._horizontalScrollDirection === 1 /* AutoScrollHorizontalDirection.LEFT */) {
          node.scrollBy(-scrollStep, 0);
        } else if (this._horizontalScrollDirection === 2 /* AutoScrollHorizontalDirection.RIGHT */) {
          node.scrollBy(scrollStep, 0);
        }
      });
    };
    this.element = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(element);
    this._document = _document;
    this.withScrollableParents([this.element]);
    _dragDropRegistry.registerDropContainer(this);
    this._parentPositions = new ParentPositionTracker(_document);
    this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);
    this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));
  }
  /** Removes the drop list functionality from the DOM element. */
  dispose() {
    this._stopScrolling();
    this._stopScrollTimers.complete();
    this._viewportScrollSubscription.unsubscribe();
    this.beforeStarted.complete();
    this.entered.complete();
    this.exited.complete();
    this.dropped.complete();
    this.sorted.complete();
    this.receivingStarted.complete();
    this.receivingStopped.complete();
    this._activeSiblings.clear();
    this._scrollNode = null;
    this._parentPositions.clear();
    this._dragDropRegistry.removeDropContainer(this);
  }
  /** Whether an item from this list is currently being dragged. */
  isDragging() {
    return this._isDragging;
  }
  /** Starts dragging an item. */
  start() {
    this._draggingStarted();
    this._notifyReceivingSiblings();
  }
  /**
   * Attempts to move an item into the container.
   * @param item Item that was moved into the container.
   * @param pointerX Position of the item along the X axis.
   * @param pointerY Position of the item along the Y axis.
   * @param index Index at which the item entered. If omitted, the container will try to figure it
   *   out automatically.
   */
  enter(item, pointerX, pointerY, index) {
    this._draggingStarted();
    // If sorting is disabled, we want the item to return to its starting
    // position if the user is returning it to its initial container.
    if (index == null && this.sortingDisabled) {
      index = this._draggables.indexOf(item);
    }
    this._sortStrategy.enter(item, pointerX, pointerY, index);
    // Note that this usually happens inside `_draggingStarted` as well, but the dimensions
    // can change when the sort strategy moves the item around inside `enter`.
    this._cacheParentPositions();
    // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.
    this._notifyReceivingSiblings();
    this.entered.next({
      item,
      container: this,
      currentIndex: this.getItemIndex(item)
    });
  }
  /**
   * Removes an item from the container after it was dragged into another container by the user.
   * @param item Item that was dragged out.
   */
  exit(item) {
    this._reset();
    this.exited.next({
      item,
      container: this
    });
  }
  /**
   * Drops an item into this container.
   * @param item Item being dropped into the container.
   * @param currentIndex Index at which the item should be inserted.
   * @param previousIndex Index of the item when dragging started.
   * @param previousContainer Container from which the item got dragged in.
   * @param isPointerOverContainer Whether the user's pointer was over the
   *    container when the item was dropped.
   * @param distance Distance the user has dragged since the start of the dragging sequence.
   * @param event Event that triggered the dropping sequence.
   *
   * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.
   */
  drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {
    this._reset();
    this.dropped.next({
      item,
      currentIndex,
      previousIndex,
      container: this,
      previousContainer,
      isPointerOverContainer,
      distance,
      dropPoint,
      event
    });
  }
  /**
   * Sets the draggable items that are a part of this list.
   * @param items Items that are a part of this list.
   */
  withItems(items) {
    const previousItems = this._draggables;
    this._draggables = items;
    items.forEach(item => item._withDropContainer(this));
    if (this.isDragging()) {
      const draggedItems = previousItems.filter(item => item.isDragging());
      // If all of the items being dragged were removed
      // from the list, abort the current drag sequence.
      if (draggedItems.every(item => items.indexOf(item) === -1)) {
        this._reset();
      } else {
        this._sortStrategy.withItems(this._draggables);
      }
    }
    return this;
  }
  /** Sets the layout direction of the drop list. */
  withDirection(direction) {
    this._sortStrategy.direction = direction;
    return this;
  }
  /**
   * Sets the containers that are connected to this one. When two or more containers are
   * connected, the user will be allowed to transfer items between them.
   * @param connectedTo Other containers that the current containers should be connected to.
   */
  connectedTo(connectedTo) {
    this._siblings = connectedTo.slice();
    return this;
  }
  /**
   * Sets the orientation of the container.
   * @param orientation New orientation for the container.
   */
  withOrientation(orientation) {
    // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on
    // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.
    this._sortStrategy.orientation = orientation;
    return this;
  }
  /**
   * Sets which parent elements are can be scrolled while the user is dragging.
   * @param elements Elements that can be scrolled.
   */
  withScrollableParents(elements) {
    const element = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(this.element);
    // We always allow the current element to be scrollable
    // so we need to ensure that it's in the array.
    this._scrollableElements = elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();
    return this;
  }
  /** Gets the scrollable parents that are registered with this drop container. */
  getScrollableParents() {
    return this._scrollableElements;
  }
  /**
   * Figures out the index of an item in the container.
   * @param item Item whose index should be determined.
   */
  getItemIndex(item) {
    return this._isDragging ? this._sortStrategy.getItemIndex(item) : this._draggables.indexOf(item);
  }
  /**
   * Whether the list is able to receive the item that
   * is currently being dragged inside a connected drop list.
   */
  isReceiving() {
    return this._activeSiblings.size > 0;
  }
  /**
   * Sorts an item inside the container based on its position.
   * @param item Item to be sorted.
   * @param pointerX Position of the item along the X axis.
   * @param pointerY Position of the item along the Y axis.
   * @param pointerDelta Direction in which the pointer is moving along each axis.
   */
  _sortItem(item, pointerX, pointerY, pointerDelta) {
    // Don't sort the item if sorting is disabled or it's out of range.
    if (this.sortingDisabled || !this._clientRect || !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {
      return;
    }
    const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);
    if (result) {
      this.sorted.next({
        previousIndex: result.previousIndex,
        currentIndex: result.currentIndex,
        container: this,
        item
      });
    }
  }
  /**
   * Checks whether the user's pointer is close to the edges of either the
   * viewport or the drop list and starts the auto-scroll sequence.
   * @param pointerX User's pointer position along the x axis.
   * @param pointerY User's pointer position along the y axis.
   */
  _startScrollingIfNecessary(pointerX, pointerY) {
    if (this.autoScrollDisabled) {
      return;
    }
    let scrollNode;
    let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;
    let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;
    // Check whether we should start scrolling any of the parent containers.
    this._parentPositions.positions.forEach((position, element) => {
      // We have special handling for the `document` below. Also this would be
      // nicer with a  for...of loop, but it requires changing a compiler flag.
      if (element === this._document || !position.clientRect || scrollNode) {
        return;
      }
      if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {
        [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);
        if (verticalScrollDirection || horizontalScrollDirection) {
          scrollNode = element;
        }
      }
    });
    // Otherwise check if we can start scrolling the viewport.
    if (!verticalScrollDirection && !horizontalScrollDirection) {
      const {
        width,
        height
      } = this._viewportRuler.getViewportSize();
      const clientRect = {
        width,
        height,
        top: 0,
        right: width,
        bottom: height,
        left: 0
      };
      verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);
      horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);
      scrollNode = window;
    }
    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection || horizontalScrollDirection !== this._horizontalScrollDirection || scrollNode !== this._scrollNode)) {
      this._verticalScrollDirection = verticalScrollDirection;
      this._horizontalScrollDirection = horizontalScrollDirection;
      this._scrollNode = scrollNode;
      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {
        this._ngZone.runOutsideAngular(this._startScrollInterval);
      } else {
        this._stopScrolling();
      }
    }
  }
  /** Stops any currently-running auto-scroll sequences. */
  _stopScrolling() {
    this._stopScrollTimers.next();
  }
  /** Starts the dragging sequence within the list. */
  _draggingStarted() {
    const styles = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(this.element).style;
    this.beforeStarted.next();
    this._isDragging = true;
    // We need to disable scroll snapping while the user is dragging, because it breaks automatic
    // scrolling. The browser seems to round the value based on the snapping points which means
    // that we can't increment/decrement the scroll position.
    this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';
    styles.scrollSnapType = styles.msScrollSnapType = 'none';
    this._sortStrategy.start(this._draggables);
    this._cacheParentPositions();
    this._viewportScrollSubscription.unsubscribe();
    this._listenToScrollEvents();
  }
  /** Caches the positions of the configured scrollable parents. */
  _cacheParentPositions() {
    const element = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(this.element);
    this._parentPositions.cache(this._scrollableElements);
    // The list element is always in the `scrollableElements`
    // so we can take advantage of the cached `ClientRect`.
    this._clientRect = this._parentPositions.positions.get(element).clientRect;
  }
  /** Resets the container to its initial state. */
  _reset() {
    this._isDragging = false;
    const styles = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(this.element).style;
    styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;
    this._siblings.forEach(sibling => sibling._stopReceiving(this));
    this._sortStrategy.reset();
    this._stopScrolling();
    this._viewportScrollSubscription.unsubscribe();
    this._parentPositions.clear();
  }
  /**
   * Checks whether the user's pointer is positioned over the container.
   * @param x Pointer position along the X axis.
   * @param y Pointer position along the Y axis.
   */
  _isOverContainer(x, y) {
    return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);
  }
  /**
   * Figures out whether an item should be moved into a sibling
   * drop container, based on its current position.
   * @param item Drag item that is being moved.
   * @param x Position of the item along the X axis.
   * @param y Position of the item along the Y axis.
   */
  _getSiblingContainerFromPosition(item, x, y) {
    return this._siblings.find(sibling => sibling._canReceive(item, x, y));
  }
  /**
   * Checks whether the drop list can receive the passed-in item.
   * @param item Item that is being dragged into the list.
   * @param x Position of the item along the X axis.
   * @param y Position of the item along the Y axis.
   */
  _canReceive(item, x, y) {
    if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {
      return false;
    }
    const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);
    // If there's no element at the pointer position, then
    // the client rect is probably scrolled out of the view.
    if (!elementFromPoint) {
      return false;
    }
    const nativeElement = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(this.element);
    // The `ClientRect`, that we're using to find the container over which the user is
    // hovering, doesn't give us any information on whether the element has been scrolled
    // out of the view or whether it's overlapping with other containers. This means that
    // we could end up transferring the item into a container that's invisible or is positioned
    // below another one. We use the result from `elementFromPoint` to get the top-most element
    // at the pointer position and to find whether it's one of the intersecting drop containers.
    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);
  }
  /**
   * Called by one of the connected drop lists when a dragging sequence has started.
   * @param sibling Sibling in which dragging has started.
   */
  _startReceiving(sibling, items) {
    const activeSiblings = this._activeSiblings;
    if (!activeSiblings.has(sibling) && items.every(item => {
      // Note that we have to add an exception to the `enterPredicate` for items that started off
      // in this drop list. The drag ref has logic that allows an item to return to its initial
      // container, if it has left the initial container and none of the connected containers
      // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.
      return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;
    })) {
      activeSiblings.add(sibling);
      this._cacheParentPositions();
      this._listenToScrollEvents();
      this.receivingStarted.next({
        initiator: sibling,
        receiver: this,
        items
      });
    }
  }
  /**
   * Called by a connected drop list when dragging has stopped.
   * @param sibling Sibling whose dragging has stopped.
   */
  _stopReceiving(sibling) {
    this._activeSiblings.delete(sibling);
    this._viewportScrollSubscription.unsubscribe();
    this.receivingStopped.next({
      initiator: sibling,
      receiver: this
    });
  }
  /**
   * Starts listening to scroll events on the viewport.
   * Used for updating the internal state of the list.
   */
  _listenToScrollEvents() {
    this._viewportScrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(event => {
      if (this.isDragging()) {
        const scrollDifference = this._parentPositions.handleScroll(event);
        if (scrollDifference) {
          this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);
        }
      } else if (this.isReceiving()) {
        this._cacheParentPositions();
      }
    });
  }
  /**
   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather
   * than saving it in property directly on init, because we want to resolve it as late as possible
   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the
   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.
   */
  _getShadowRoot() {
    if (!this._cachedShadowRoot) {
      const shadowRoot = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__._getShadowRoot)((0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(this.element));
      this._cachedShadowRoot = shadowRoot || this._document;
    }
    return this._cachedShadowRoot;
  }
  /** Notifies any siblings that may potentially receive the item. */
  _notifyReceivingSiblings() {
    const draggedItems = this._sortStrategy.getActiveItemsSnapshot().filter(item => item.isDragging());
    this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));
  }
}
/**
 * Gets whether the vertical auto-scroll direction of a node.
 * @param clientRect Dimensions of the node.
 * @param pointerY Position of the user's pointer along the y axis.
 */
function getVerticalScrollDirection(clientRect, pointerY) {
  const {
    top,
    bottom,
    height
  } = clientRect;
  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;
  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {
    return 1 /* AutoScrollVerticalDirection.UP */;
  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {
    return 2 /* AutoScrollVerticalDirection.DOWN */;
  }

  return 0 /* AutoScrollVerticalDirection.NONE */;
}
/**
 * Gets whether the horizontal auto-scroll direction of a node.
 * @param clientRect Dimensions of the node.
 * @param pointerX Position of the user's pointer along the x axis.
 */
function getHorizontalScrollDirection(clientRect, pointerX) {
  const {
    left,
    right,
    width
  } = clientRect;
  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;
  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {
    return 1 /* AutoScrollHorizontalDirection.LEFT */;
  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {
    return 2 /* AutoScrollHorizontalDirection.RIGHT */;
  }

  return 0 /* AutoScrollHorizontalDirection.NONE */;
}
/**
 * Gets the directions in which an element node should be scrolled,
 * assuming that the user's pointer is already within it scrollable region.
 * @param element Element for which we should calculate the scroll direction.
 * @param clientRect Bounding client rectangle of the element.
 * @param pointerX Position of the user's pointer along the x axis.
 * @param pointerY Position of the user's pointer along the y axis.
 */
function getElementScrollDirections(element, clientRect, pointerX, pointerY) {
  const computedVertical = getVerticalScrollDirection(clientRect, pointerY);
  const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);
  let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;
  let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;
  // Note that we here we do some extra checks for whether the element is actually scrollable in
  // a certain direction and we only assign the scroll direction if it is. We do this so that we
  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.
  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.
  if (computedVertical) {
    const scrollTop = element.scrollTop;
    if (computedVertical === 1 /* AutoScrollVerticalDirection.UP */) {
      if (scrollTop > 0) {
        verticalScrollDirection = 1 /* AutoScrollVerticalDirection.UP */;
      }
    } else if (element.scrollHeight - scrollTop > element.clientHeight) {
      verticalScrollDirection = 2 /* AutoScrollVerticalDirection.DOWN */;
    }
  }

  if (computedHorizontal) {
    const scrollLeft = element.scrollLeft;
    if (computedHorizontal === 1 /* AutoScrollHorizontalDirection.LEFT */) {
      if (scrollLeft > 0) {
        horizontalScrollDirection = 1 /* AutoScrollHorizontalDirection.LEFT */;
      }
    } else if (element.scrollWidth - scrollLeft > element.clientWidth) {
      horizontalScrollDirection = 2 /* AutoScrollHorizontalDirection.RIGHT */;
    }
  }

  return [verticalScrollDirection, horizontalScrollDirection];
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Event options that can be used to bind an active, capturing event. */
const activeCapturingEventOptions = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__.normalizePassiveListenerOptions)({
  passive: false,
  capture: true
});
/**
 * Service that keeps track of all the drag item and drop container
 * instances, and manages global event listeners on the `document`.
 * @docs-private
 */
// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order
// to avoid circular imports. If we were to reference them here, importing the registry into the
// classes that are registering themselves will introduce a circular import.
class DragDropRegistry {
  constructor(_ngZone, _document) {
    this._ngZone = _ngZone;
    /** Registered drop container instances. */
    this._dropInstances = new Set();
    /** Registered drag item instances. */
    this._dragInstances = new Set();
    /** Drag item instances that are currently being dragged. */
    this._activeDragInstances = [];
    /** Keeps track of the event listeners that we've bound to the `document`. */
    this._globalListeners = new Map();
    /**
     * Predicate function to check if an item is being dragged.  Moved out into a property,
     * because it'll be called a lot and we don't want to create a new function every time.
     */
    this._draggingPredicate = item => item.isDragging();
    /**
     * Emits the `touchmove` or `mousemove` events that are dispatched
     * while the user is dragging a drag item instance.
     */
    this.pointerMove = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /**
     * Emits the `touchend` or `mouseup` events that are dispatched
     * while the user is dragging a drag item instance.
     */
    this.pointerUp = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /**
     * Emits when the viewport has been scrolled while the user is dragging an item.
     * @deprecated To be turned into a private member. Use the `scrolled` method instead.
     * @breaking-change 13.0.0
     */
    this.scroll = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /**
     * Event listener that will prevent the default browser action while the user is dragging.
     * @param event Event whose default action should be prevented.
     */
    this._preventDefaultWhileDragging = event => {
      if (this._activeDragInstances.length > 0) {
        event.preventDefault();
      }
    };
    /** Event listener for `touchmove` that is bound even if no dragging is happening. */
    this._persistentTouchmoveListener = event => {
      if (this._activeDragInstances.length > 0) {
        // Note that we only want to prevent the default action after dragging has actually started.
        // Usually this is the same time at which the item is added to the `_activeDragInstances`,
        // but it could be pushed back if the user has set up a drag delay or threshold.
        if (this._activeDragInstances.some(this._draggingPredicate)) {
          event.preventDefault();
        }
        this.pointerMove.next(event);
      }
    };
    this._document = _document;
  }
  /** Adds a drop container to the registry. */
  registerDropContainer(drop) {
    if (!this._dropInstances.has(drop)) {
      this._dropInstances.add(drop);
    }
  }
  /** Adds a drag item instance to the registry. */
  registerDragItem(drag) {
    this._dragInstances.add(drag);
    // The `touchmove` event gets bound once, ahead of time, because WebKit
    // won't preventDefault on a dynamically-added `touchmove` listener.
    // See https://bugs.webkit.org/show_bug.cgi?id=184250.
    if (this._dragInstances.size === 1) {
      this._ngZone.runOutsideAngular(() => {
        // The event handler has to be explicitly active,
        // because newer browsers make it passive by default.
        this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);
      });
    }
  }
  /** Removes a drop container from the registry. */
  removeDropContainer(drop) {
    this._dropInstances.delete(drop);
  }
  /** Removes a drag item instance from the registry. */
  removeDragItem(drag) {
    this._dragInstances.delete(drag);
    this.stopDragging(drag);
    if (this._dragInstances.size === 0) {
      this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);
    }
  }
  /**
   * Starts the dragging sequence for a drag instance.
   * @param drag Drag instance which is being dragged.
   * @param event Event that initiated the dragging.
   */
  startDragging(drag, event) {
    // Do not process the same drag twice to avoid memory leaks and redundant listeners
    if (this._activeDragInstances.indexOf(drag) > -1) {
      return;
    }
    this._activeDragInstances.push(drag);
    if (this._activeDragInstances.length === 1) {
      const isTouchEvent = event.type.startsWith('touch');
      // We explicitly bind __active__ listeners here, because newer browsers will default to
      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we
      // use `preventDefault` to prevent the page from scrolling while the user is dragging.
      this._globalListeners.set(isTouchEvent ? 'touchend' : 'mouseup', {
        handler: e => this.pointerUp.next(e),
        options: true
      }).set('scroll', {
        handler: e => this.scroll.next(e),
        // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't
        // the document. See https://github.com/angular/components/issues/17144.
        options: true
      })
      // Preventing the default action on `mousemove` isn't enough to disable text selection
      // on Safari so we need to prevent the selection event as well. Alternatively this can
      // be done by setting `user-select: none` on the `body`, however it has causes a style
      // recalculation which can be expensive on pages with a lot of elements.
      .set('selectstart', {
        handler: this._preventDefaultWhileDragging,
        options: activeCapturingEventOptions
      });
      // We don't have to bind a move event for touch drag sequences, because
      // we already have a persistent global one bound from `registerDragItem`.
      if (!isTouchEvent) {
        this._globalListeners.set('mousemove', {
          handler: e => this.pointerMove.next(e),
          options: activeCapturingEventOptions
        });
      }
      this._ngZone.runOutsideAngular(() => {
        this._globalListeners.forEach((config, name) => {
          this._document.addEventListener(name, config.handler, config.options);
        });
      });
    }
  }
  /** Stops dragging a drag item instance. */
  stopDragging(drag) {
    const index = this._activeDragInstances.indexOf(drag);
    if (index > -1) {
      this._activeDragInstances.splice(index, 1);
      if (this._activeDragInstances.length === 0) {
        this._clearGlobalListeners();
      }
    }
  }
  /** Gets whether a drag item instance is currently being dragged. */
  isDragging(drag) {
    return this._activeDragInstances.indexOf(drag) > -1;
  }
  /**
   * Gets a stream that will emit when any element on the page is scrolled while an item is being
   * dragged.
   * @param shadowRoot Optional shadow root that the current dragging sequence started from.
   *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can
   *   be used to include an additional top-level listener at the shadow root level.
   */
  scrolled(shadowRoot) {
    const streams = [this.scroll];
    if (shadowRoot && shadowRoot !== this._document) {
      // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,
      // because we want to guarantee that the event is bound outside of the `NgZone`. With
      // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.
      streams.push(new rxjs__WEBPACK_IMPORTED_MODULE_8__.Observable(observer => {
        return this._ngZone.runOutsideAngular(() => {
          const eventOptions = true;
          const callback = event => {
            if (this._activeDragInstances.length) {
              observer.next(event);
            }
          };
          shadowRoot.addEventListener('scroll', callback, eventOptions);
          return () => {
            shadowRoot.removeEventListener('scroll', callback, eventOptions);
          };
        });
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.merge)(...streams);
  }
  ngOnDestroy() {
    this._dragInstances.forEach(instance => this.removeDragItem(instance));
    this._dropInstances.forEach(instance => this.removeDropContainer(instance));
    this._clearGlobalListeners();
    this.pointerMove.complete();
    this.pointerUp.complete();
  }
  /** Clears out the global event listeners from the `document`. */
  _clearGlobalListeners() {
    this._globalListeners.forEach((config, name) => {
      this._document.removeEventListener(name, config.handler, config.options);
    });
    this._globalListeners.clear();
  }
}
DragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) {
  return new (t || DragDropRegistry)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT));
};
DragDropRegistry.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjectable"]({
  token: DragDropRegistry,
  factory: DragDropRegistry.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](DragDropRegistry, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT]
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Default configuration to be used when creating a `DragRef`. */
const DEFAULT_CONFIG = {
  dragStartThreshold: 5,
  pointerDirectionChangeThreshold: 5
};
/**
 * Service that allows for drag-and-drop functionality to be attached to DOM elements.
 */
class DragDrop {
  constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {
    this._document = _document;
    this._ngZone = _ngZone;
    this._viewportRuler = _viewportRuler;
    this._dragDropRegistry = _dragDropRegistry;
  }
  /**
   * Turns an element into a draggable item.
   * @param element Element to which to attach the dragging functionality.
   * @param config Object used to configure the dragging behavior.
   */
  createDrag(element, config = DEFAULT_CONFIG) {
    return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);
  }
  /**
   * Turns an element into a drop list.
   * @param element Element to which to attach the drop list functionality.
   */
  createDropList(element) {
    return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);
  }
}
DragDrop.ɵfac = function DragDrop_Factory(t) {
  return new (t || DragDrop)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__.ViewportRuler), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵinject"](DragDropRegistry));
};
DragDrop.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjectable"]({
  token: DragDrop,
  factory: DragDrop.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](DragDrop, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.NgZone
    }, {
      type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__.ViewportRuler
    }, {
      type: DragDropRegistry
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the
 * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily
 * to avoid circular imports.
 * @docs-private
 */
const CDK_DRAG_PARENT = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.InjectionToken('CDK_DRAG_PARENT');

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as
 * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary
 * retention of the class and its directive metadata.
 */
const CDK_DROP_LIST_GROUP = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.InjectionToken('CdkDropListGroup');
/**
 * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`
 * elements that are placed inside a `cdkDropListGroup` will be connected to each other
 * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input
 * from `cdkDropList`.
 */
class CdkDropListGroup {
  constructor() {
    /** Drop lists registered inside the group. */
    this._items = new Set();
    this._disabled = false;
  }
  /** Whether starting a dragging sequence from inside this group is disabled. */
  get disabled() {
    return this._disabled;
  }
  set disabled(value) {
    this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
  }
  ngOnDestroy() {
    this._items.clear();
  }
}
CdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) {
  return new (t || CdkDropListGroup)();
};
CdkDropListGroup.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineDirective"]({
  type: CdkDropListGroup,
  selectors: [["", "cdkDropListGroup", ""]],
  inputs: {
    disabled: ["cdkDropListGroupDisabled", "disabled"]
  },
  exportAs: ["cdkDropListGroup"],
  standalone: true,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵProvidersFeature"]([{
    provide: CDK_DROP_LIST_GROUP,
    useExisting: CdkDropListGroup
  }])]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](CdkDropListGroup, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Directive,
    args: [{
      selector: '[cdkDropListGroup]',
      exportAs: 'cdkDropListGroup',
      standalone: true,
      providers: [{
        provide: CDK_DROP_LIST_GROUP,
        useExisting: CdkDropListGroup
      }]
    }]
  }], null, {
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDropListGroupDisabled']
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Injection token that can be used to configure the
 * behavior of the drag&drop-related components.
 */
const CDK_DRAG_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.InjectionToken('CDK_DRAG_CONFIG');

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Asserts that a particular node is an element.
 * @param node Node to be checked.
 * @param name Name to attach to the error message.
 */
function assertElementNode(node, name) {
  if (node.nodeType !== 1) {
    throw Error(`${name} must be attached to an element node. ` + `Currently attached to "${node.nodeName}".`);
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Counter used to generate unique ids for drop zones. */
let _uniqueIdCounter = 0;
/**
 * Injection token that can be used to reference instances of `CdkDropList`. It serves as
 * alternative token to the actual `CdkDropList` class which could cause unnecessary
 * retention of the class and its directive metadata.
 */
const CDK_DROP_LIST = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.InjectionToken('CdkDropList');
/** Container that wraps a set of draggable items. */
class CdkDropList {
  /** Whether starting a dragging sequence from this container is disabled. */
  get disabled() {
    return this._disabled || !!this._group && this._group.disabled;
  }
  set disabled(value) {
    // Usually we sync the directive and ref state right before dragging starts, in order to have
    // a single point of failure and to avoid having to use setters for everything. `disabled` is
    // a special case, because it can prevent the `beforeStarted` event from firing, which can lock
    // the user in a disabled state, so we also need to sync it as it's being set.
    this._dropListRef.disabled = this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
  }
  constructor( /** Element that the drop list is attached to. */
  element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {
    this.element = element;
    this._changeDetectorRef = _changeDetectorRef;
    this._scrollDispatcher = _scrollDispatcher;
    this._dir = _dir;
    this._group = _group;
    /** Emits when the list has been destroyed. */
    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /**
     * Other draggable containers that this container is connected to and into which the
     * container's items can be transferred. Can either be references to other drop containers,
     * or their unique IDs.
     */
    this.connectedTo = [];
    /**
     * Unique ID for the drop zone. Can be used as a reference
     * in the `connectedTo` of another `CdkDropList`.
     */
    this.id = `cdk-drop-list-${_uniqueIdCounter++}`;
    /**
     * Function that is used to determine whether an item
     * is allowed to be moved into a drop container.
     */
    this.enterPredicate = () => true;
    /** Functions that is used to determine whether an item can be sorted into a particular index. */
    this.sortPredicate = () => true;
    /** Emits when the user drops an item inside the container. */
    this.dropped = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();
    /**
     * Emits when the user has moved a new drag item into this container.
     */
    this.entered = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();
    /**
     * Emits when the user removes an item from the container
     * by dragging it into another container.
     */
    this.exited = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();
    /** Emits as the user is swapping items while actively dragging. */
    this.sorted = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();
    /**
     * Keeps track of the items that are registered with this container. Historically we used to
     * do this with a `ContentChildren` query, however queries don't handle transplanted views very
     * well which means that we can't handle cases like dragging the headers of a `mat-table`
     * correctly. What we do instead is to have the items register themselves with the container
     * and then we sort them based on their position in the DOM.
     */
    this._unsortedItems = new Set();
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      assertElementNode(element.nativeElement, 'cdkDropList');
    }
    this._dropListRef = dragDrop.createDropList(element);
    this._dropListRef.data = this;
    if (config) {
      this._assignDefaults(config);
    }
    this._dropListRef.enterPredicate = (drag, drop) => {
      return this.enterPredicate(drag.data, drop.data);
    };
    this._dropListRef.sortPredicate = (index, drag, drop) => {
      return this.sortPredicate(index, drag.data, drop.data);
    };
    this._setupInputSyncSubscription(this._dropListRef);
    this._handleEvents(this._dropListRef);
    CdkDropList._dropLists.push(this);
    if (_group) {
      _group._items.add(this);
    }
  }
  /** Registers an items with the drop list. */
  addItem(item) {
    this._unsortedItems.add(item);
    if (this._dropListRef.isDragging()) {
      this._syncItemsWithRef();
    }
  }
  /** Removes an item from the drop list. */
  removeItem(item) {
    this._unsortedItems.delete(item);
    if (this._dropListRef.isDragging()) {
      this._syncItemsWithRef();
    }
  }
  /** Gets the registered items in the list, sorted by their position in the DOM. */
  getSortedItems() {
    return Array.from(this._unsortedItems).sort((a, b) => {
      const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());
      // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.
      // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
      // tslint:disable-next-line:no-bitwise
      return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;
    });
  }
  ngOnDestroy() {
    const index = CdkDropList._dropLists.indexOf(this);
    if (index > -1) {
      CdkDropList._dropLists.splice(index, 1);
    }
    if (this._group) {
      this._group._items.delete(this);
    }
    this._unsortedItems.clear();
    this._dropListRef.dispose();
    this._destroyed.next();
    this._destroyed.complete();
  }
  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */
  _setupInputSyncSubscription(ref) {
    if (this._dir) {
      this._dir.change.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.startWith)(this._dir.value), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.takeUntil)(this._destroyed)).subscribe(value => ref.withDirection(value));
    }
    ref.beforeStarted.subscribe(() => {
      const siblings = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceArray)(this.connectedTo).map(drop => {
        if (typeof drop === 'string') {
          const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);
          if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {
            console.warn(`CdkDropList could not find connected drop list with id "${drop}"`);
          }
          return correspondingDropList;
        }
        return drop;
      });
      if (this._group) {
        this._group._items.forEach(drop => {
          if (siblings.indexOf(drop) === -1) {
            siblings.push(drop);
          }
        });
      }
      // Note that we resolve the scrollable parents here so that we delay the resolution
      // as long as possible, ensuring that the element is in its final place in the DOM.
      if (!this._scrollableParentsResolved) {
        const scrollableParents = this._scrollDispatcher.getAncestorScrollContainers(this.element).map(scrollable => scrollable.getElementRef().nativeElement);
        this._dropListRef.withScrollableParents(scrollableParents);
        // Only do this once since it involves traversing the DOM and the parents
        // shouldn't be able to change without the drop list being destroyed.
        this._scrollableParentsResolved = true;
      }
      ref.disabled = this.disabled;
      ref.lockAxis = this.lockAxis;
      ref.sortingDisabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(this.sortingDisabled);
      ref.autoScrollDisabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(this.autoScrollDisabled);
      ref.autoScrollStep = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceNumberProperty)(this.autoScrollStep, 2);
      ref.connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef)).withOrientation(this.orientation);
    });
  }
  /** Handles events from the underlying DropListRef. */
  _handleEvents(ref) {
    ref.beforeStarted.subscribe(() => {
      this._syncItemsWithRef();
      this._changeDetectorRef.markForCheck();
    });
    ref.entered.subscribe(event => {
      this.entered.emit({
        container: this,
        item: event.item.data,
        currentIndex: event.currentIndex
      });
    });
    ref.exited.subscribe(event => {
      this.exited.emit({
        container: this,
        item: event.item.data
      });
      this._changeDetectorRef.markForCheck();
    });
    ref.sorted.subscribe(event => {
      this.sorted.emit({
        previousIndex: event.previousIndex,
        currentIndex: event.currentIndex,
        container: this,
        item: event.item.data
      });
    });
    ref.dropped.subscribe(dropEvent => {
      this.dropped.emit({
        previousIndex: dropEvent.previousIndex,
        currentIndex: dropEvent.currentIndex,
        previousContainer: dropEvent.previousContainer.data,
        container: dropEvent.container.data,
        item: dropEvent.item.data,
        isPointerOverContainer: dropEvent.isPointerOverContainer,
        distance: dropEvent.distance,
        dropPoint: dropEvent.dropPoint,
        event: dropEvent.event
      });
      // Mark for check since all of these events run outside of change
      // detection and we're not guaranteed for something else to have triggered it.
      this._changeDetectorRef.markForCheck();
    });
    (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.merge)(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());
  }
  /** Assigns the default input values based on a provided config object. */
  _assignDefaults(config) {
    const {
      lockAxis,
      draggingDisabled,
      sortingDisabled,
      listAutoScrollDisabled,
      listOrientation
    } = config;
    this.disabled = draggingDisabled == null ? false : draggingDisabled;
    this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;
    this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;
    this.orientation = listOrientation || 'vertical';
    if (lockAxis) {
      this.lockAxis = lockAxis;
    }
  }
  /** Syncs up the registered drag items with underlying drop list ref. */
  _syncItemsWithRef() {
    this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));
  }
}
/** Keeps track of the drop lists that are currently on the page. */
CdkDropList._dropLists = [];
CdkDropList.ɵfac = function CdkDropList_Factory(t) {
  return new (t || CdkDropList)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](DragDrop), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__.ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_14__.Directionality, 8), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](CDK_DROP_LIST_GROUP, 12), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](CDK_DRAG_CONFIG, 8));
};
CdkDropList.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineDirective"]({
  type: CdkDropList,
  selectors: [["", "cdkDropList", ""], ["cdk-drop-list"]],
  hostAttrs: [1, "cdk-drop-list"],
  hostVars: 7,
  hostBindings: function CdkDropList_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵattribute"]("id", ctx.id);
      _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵclassProp"]("cdk-drop-list-disabled", ctx.disabled)("cdk-drop-list-dragging", ctx._dropListRef.isDragging())("cdk-drop-list-receiving", ctx._dropListRef.isReceiving());
    }
  },
  inputs: {
    connectedTo: ["cdkDropListConnectedTo", "connectedTo"],
    data: ["cdkDropListData", "data"],
    orientation: ["cdkDropListOrientation", "orientation"],
    id: "id",
    lockAxis: ["cdkDropListLockAxis", "lockAxis"],
    disabled: ["cdkDropListDisabled", "disabled"],
    sortingDisabled: ["cdkDropListSortingDisabled", "sortingDisabled"],
    enterPredicate: ["cdkDropListEnterPredicate", "enterPredicate"],
    sortPredicate: ["cdkDropListSortPredicate", "sortPredicate"],
    autoScrollDisabled: ["cdkDropListAutoScrollDisabled", "autoScrollDisabled"],
    autoScrollStep: ["cdkDropListAutoScrollStep", "autoScrollStep"]
  },
  outputs: {
    dropped: "cdkDropListDropped",
    entered: "cdkDropListEntered",
    exited: "cdkDropListExited",
    sorted: "cdkDropListSorted"
  },
  exportAs: ["cdkDropList"],
  standalone: true,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵProvidersFeature"]([
  // Prevent child drop lists from picking up the same group as their parent.
  {
    provide: CDK_DROP_LIST_GROUP,
    useValue: undefined
  }, {
    provide: CDK_DROP_LIST,
    useExisting: CdkDropList
  }])]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](CdkDropList, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Directive,
    args: [{
      selector: '[cdkDropList], cdk-drop-list',
      exportAs: 'cdkDropList',
      standalone: true,
      providers: [
      // Prevent child drop lists from picking up the same group as their parent.
      {
        provide: CDK_DROP_LIST_GROUP,
        useValue: undefined
      }, {
        provide: CDK_DROP_LIST,
        useExisting: CdkDropList
      }],
      host: {
        'class': 'cdk-drop-list',
        '[attr.id]': 'id',
        '[class.cdk-drop-list-disabled]': 'disabled',
        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',
        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'
      }
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.ElementRef
    }, {
      type: DragDrop
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.ChangeDetectorRef
    }, {
      type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__.ScrollDispatcher
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_14__.Directionality,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Optional
      }]
    }, {
      type: CdkDropListGroup,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [CDK_DROP_LIST_GROUP]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.SkipSelf
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [CDK_DRAG_CONFIG]
      }]
    }];
  }, {
    connectedTo: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDropListConnectedTo']
    }],
    data: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDropListData']
    }],
    orientation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDropListOrientation']
    }],
    id: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input
    }],
    lockAxis: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDropListLockAxis']
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDropListDisabled']
    }],
    sortingDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDropListSortingDisabled']
    }],
    enterPredicate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDropListEnterPredicate']
    }],
    sortPredicate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDropListSortPredicate']
    }],
    autoScrollDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDropListAutoScrollDisabled']
    }],
    autoScrollStep: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDropListAutoScrollStep']
    }],
    dropped: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Output,
      args: ['cdkDropListDropped']
    }],
    entered: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Output,
      args: ['cdkDropListEntered']
    }],
    exited: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Output,
      args: ['cdkDropListExited']
    }],
    sorted: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Output,
      args: ['cdkDropListSorted']
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as
 * alternative token to the actual `CdkDragHandle` class which could cause unnecessary
 * retention of the class and its directive metadata.
 */
const CDK_DRAG_HANDLE = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.InjectionToken('CdkDragHandle');
/** Handle that can be used to drag a CdkDrag instance. */
class CdkDragHandle {
  /** Whether starting to drag through this handle is disabled. */
  get disabled() {
    return this._disabled;
  }
  set disabled(value) {
    this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
    this._stateChanges.next(this);
  }
  constructor(element, parentDrag) {
    this.element = element;
    /** Emits when the state of the handle has changed. */
    this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    this._disabled = false;
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      assertElementNode(element.nativeElement, 'cdkDragHandle');
    }
    this._parentDrag = parentDrag;
  }
  ngOnDestroy() {
    this._stateChanges.complete();
  }
}
CdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) {
  return new (t || CdkDragHandle)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](CDK_DRAG_PARENT, 12));
};
CdkDragHandle.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineDirective"]({
  type: CdkDragHandle,
  selectors: [["", "cdkDragHandle", ""]],
  hostAttrs: [1, "cdk-drag-handle"],
  inputs: {
    disabled: ["cdkDragHandleDisabled", "disabled"]
  },
  standalone: true,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵProvidersFeature"]([{
    provide: CDK_DRAG_HANDLE,
    useExisting: CdkDragHandle
  }])]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](CdkDragHandle, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Directive,
    args: [{
      selector: '[cdkDragHandle]',
      standalone: true,
      host: {
        'class': 'cdk-drag-handle'
      },
      providers: [{
        provide: CDK_DRAG_HANDLE,
        useExisting: CdkDragHandle
      }]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.ElementRef
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [CDK_DRAG_PARENT]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.SkipSelf
      }]
    }];
  }, {
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDragHandleDisabled']
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as
 * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary
 * retention of the class and its directive metadata.
 */
const CDK_DRAG_PLACEHOLDER = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.InjectionToken('CdkDragPlaceholder');
/**
 * Element that will be used as a template for the placeholder of a CdkDrag when
 * it is being dragged. The placeholder is displayed in place of the element being dragged.
 */
class CdkDragPlaceholder {
  constructor(templateRef) {
    this.templateRef = templateRef;
  }
}
CdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) {
  return new (t || CdkDragPlaceholder)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.TemplateRef));
};
CdkDragPlaceholder.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineDirective"]({
  type: CdkDragPlaceholder,
  selectors: [["ng-template", "cdkDragPlaceholder", ""]],
  inputs: {
    data: "data"
  },
  standalone: true,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵProvidersFeature"]([{
    provide: CDK_DRAG_PLACEHOLDER,
    useExisting: CdkDragPlaceholder
  }])]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](CdkDragPlaceholder, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Directive,
    args: [{
      selector: 'ng-template[cdkDragPlaceholder]',
      standalone: true,
      providers: [{
        provide: CDK_DRAG_PLACEHOLDER,
        useExisting: CdkDragPlaceholder
      }]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.TemplateRef
    }];
  }, {
    data: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as
 * alternative token to the actual `CdkDragPreview` class which could cause unnecessary
 * retention of the class and its directive metadata.
 */
const CDK_DRAG_PREVIEW = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.InjectionToken('CdkDragPreview');
/**
 * Element that will be used as a template for the preview
 * of a CdkDrag when it is being dragged.
 */
class CdkDragPreview {
  /** Whether the preview should preserve the same size as the item that is being dragged. */
  get matchSize() {
    return this._matchSize;
  }
  set matchSize(value) {
    this._matchSize = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
  }
  constructor(templateRef) {
    this.templateRef = templateRef;
    this._matchSize = false;
  }
}
CdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) {
  return new (t || CdkDragPreview)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.TemplateRef));
};
CdkDragPreview.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineDirective"]({
  type: CdkDragPreview,
  selectors: [["ng-template", "cdkDragPreview", ""]],
  inputs: {
    data: "data",
    matchSize: "matchSize"
  },
  standalone: true,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵProvidersFeature"]([{
    provide: CDK_DRAG_PREVIEW,
    useExisting: CdkDragPreview
  }])]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](CdkDragPreview, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Directive,
    args: [{
      selector: 'ng-template[cdkDragPreview]',
      standalone: true,
      providers: [{
        provide: CDK_DRAG_PREVIEW,
        useExisting: CdkDragPreview
      }]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.TemplateRef
    }];
  }, {
    data: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input
    }],
    matchSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const DRAG_HOST_CLASS = 'cdk-drag';
/** Element that can be moved inside a CdkDropList container. */
class CdkDrag {
  /** Whether starting to drag this element is disabled. */
  get disabled() {
    return this._disabled || this.dropContainer && this.dropContainer.disabled;
  }
  set disabled(value) {
    this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
    this._dragRef.disabled = this._disabled;
  }
  constructor( /** Element that the draggable is attached to. */
  element, /** Droppable container that the draggable is a part of. */
  dropContainer,
  /**
   * @deprecated `_document` parameter no longer being used and will be removed.
   * @breaking-change 12.0.0
   */
  _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {
    this.element = element;
    this.dropContainer = dropContainer;
    this._ngZone = _ngZone;
    this._viewContainerRef = _viewContainerRef;
    this._dir = _dir;
    this._changeDetectorRef = _changeDetectorRef;
    this._selfHandle = _selfHandle;
    this._parentDrag = _parentDrag;
    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Emits when the user starts dragging the item. */
    this.started = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();
    /** Emits when the user has released a drag item, before any animations have started. */
    this.released = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();
    /** Emits when the user stops dragging an item in the container. */
    this.ended = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();
    /** Emits when the user has moved the item into a new container. */
    this.entered = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();
    /** Emits when the user removes the item its container by dragging it into another container. */
    this.exited = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();
    /** Emits when the user drops the item inside a container. */
    this.dropped = new _angular_core__WEBPACK_IMPORTED_MODULE_10__.EventEmitter();
    /**
     * Emits as the user is dragging the item. Use with caution,
     * because this event will fire for every pixel that the user has dragged.
     */
    this.moved = new rxjs__WEBPACK_IMPORTED_MODULE_8__.Observable(observer => {
      const subscription = this._dragRef.moved.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.map)(movedEvent => ({
        source: this,
        pointerPosition: movedEvent.pointerPosition,
        event: movedEvent.event,
        delta: movedEvent.delta,
        distance: movedEvent.distance
      }))).subscribe(observer);
      return () => {
        subscription.unsubscribe();
      };
    });
    this._dragRef = dragDrop.createDrag(element, {
      dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,
      pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ? config.pointerDirectionChangeThreshold : 5,
      zIndex: config?.zIndex
    });
    this._dragRef.data = this;
    // We have to keep track of the drag instances in order to be able to match an element to
    // a drag instance. We can't go through the global registry of `DragRef`, because the root
    // element could be different.
    CdkDrag._dragInstances.push(this);
    if (config) {
      this._assignDefaults(config);
    }
    // Note that usually the container is assigned when the drop list is picks up the item, but in
    // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation
    // where there are no items on the first change detection pass, but the items get picked up as
    // soon as the user triggers another pass by dragging. This is a problem, because the item would
    // have to switch from standalone mode to drag mode in the middle of the dragging sequence which
    // is too late since the two modes save different kinds of information. We work around it by
    // assigning the drop container both from here and the list.
    if (dropContainer) {
      this._dragRef._withDropContainer(dropContainer._dropListRef);
      dropContainer.addItem(this);
    }
    this._syncInputs(this._dragRef);
    this._handleEvents(this._dragRef);
  }
  /**
   * Returns the element that is being used as a placeholder
   * while the current element is being dragged.
   */
  getPlaceholderElement() {
    return this._dragRef.getPlaceholderElement();
  }
  /** Returns the root draggable element. */
  getRootElement() {
    return this._dragRef.getRootElement();
  }
  /** Resets a standalone drag item to its initial position. */
  reset() {
    this._dragRef.reset();
  }
  /**
   * Gets the pixel coordinates of the draggable outside of a drop container.
   */
  getFreeDragPosition() {
    return this._dragRef.getFreeDragPosition();
  }
  /**
   * Sets the current position in pixels the draggable outside of a drop container.
   * @param value New position to be set.
   */
  setFreeDragPosition(value) {
    this._dragRef.setFreeDragPosition(value);
  }
  ngAfterViewInit() {
    // Normally this isn't in the zone, but it can cause major performance regressions for apps
    // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.
    this._ngZone.runOutsideAngular(() => {
      // We need to wait for the zone to stabilize, in order for the reference
      // element to be in the proper place in the DOM. This is mostly relevant
      // for draggable elements inside portals since they get stamped out in
      // their original DOM position and then they get transferred to the portal.
      this._ngZone.onStable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.take)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.takeUntil)(this._destroyed)).subscribe(() => {
        this._updateRootElement();
        this._setupHandlesListener();
        if (this.freeDragPosition) {
          this._dragRef.setFreeDragPosition(this.freeDragPosition);
        }
      });
    });
  }
  ngOnChanges(changes) {
    const rootSelectorChange = changes['rootElementSelector'];
    const positionChange = changes['freeDragPosition'];
    // We don't have to react to the first change since it's being
    // handled in `ngAfterViewInit` where it needs to be deferred.
    if (rootSelectorChange && !rootSelectorChange.firstChange) {
      this._updateRootElement();
    }
    // Skip the first change since it's being handled in `ngAfterViewInit`.
    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {
      this._dragRef.setFreeDragPosition(this.freeDragPosition);
    }
  }
  ngOnDestroy() {
    if (this.dropContainer) {
      this.dropContainer.removeItem(this);
    }
    const index = CdkDrag._dragInstances.indexOf(this);
    if (index > -1) {
      CdkDrag._dragInstances.splice(index, 1);
    }
    // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.
    this._ngZone.runOutsideAngular(() => {
      this._destroyed.next();
      this._destroyed.complete();
      this._dragRef.dispose();
    });
  }
  /** Syncs the root element with the `DragRef`. */
  _updateRootElement() {
    const element = this.element.nativeElement;
    let rootElement = element;
    if (this.rootElementSelector) {
      rootElement = element.closest !== undefined ? element.closest(this.rootElementSelector) :
      // Comment tag doesn't have closest method, so use parent's one.
      element.parentElement?.closest(this.rootElementSelector);
    }
    if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      assertElementNode(rootElement, 'cdkDrag');
    }
    this._dragRef.withRootElement(rootElement || element);
  }
  /** Gets the boundary element, based on the `boundaryElement` value. */
  _getBoundaryElement() {
    const boundary = this.boundaryElement;
    if (!boundary) {
      return null;
    }
    if (typeof boundary === 'string') {
      return this.element.nativeElement.closest(boundary);
    }
    return (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(boundary);
  }
  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */
  _syncInputs(ref) {
    ref.beforeStarted.subscribe(() => {
      if (!ref.isDragging()) {
        const dir = this._dir;
        const dragStartDelay = this.dragStartDelay;
        const placeholder = this._placeholderTemplate ? {
          template: this._placeholderTemplate.templateRef,
          context: this._placeholderTemplate.data,
          viewContainer: this._viewContainerRef
        } : null;
        const preview = this._previewTemplate ? {
          template: this._previewTemplate.templateRef,
          context: this._previewTemplate.data,
          matchSize: this._previewTemplate.matchSize,
          viewContainer: this._viewContainerRef
        } : null;
        ref.disabled = this.disabled;
        ref.lockAxis = this.lockAxis;
        ref.dragStartDelay = typeof dragStartDelay === 'object' && dragStartDelay ? dragStartDelay : (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceNumberProperty)(dragStartDelay);
        ref.constrainPosition = this.constrainPosition;
        ref.previewClass = this.previewClass;
        ref.withBoundaryElement(this._getBoundaryElement()).withPlaceholderTemplate(placeholder).withPreviewTemplate(preview).withPreviewContainer(this.previewContainer || 'global');
        if (dir) {
          ref.withDirection(dir.value);
        }
      }
    });
    // This only needs to be resolved once.
    ref.beforeStarted.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.take)(1)).subscribe(() => {
      // If we managed to resolve a parent through DI, use it.
      if (this._parentDrag) {
        ref.withParent(this._parentDrag._dragRef);
        return;
      }
      // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if
      // the item was projected into another item by something like `ngTemplateOutlet`.
      let parent = this.element.nativeElement.parentElement;
      while (parent) {
        if (parent.classList.contains(DRAG_HOST_CLASS)) {
          ref.withParent(CdkDrag._dragInstances.find(drag => {
            return drag.element.nativeElement === parent;
          })?._dragRef || null);
          break;
        }
        parent = parent.parentElement;
      }
    });
  }
  /** Handles the events from the underlying `DragRef`. */
  _handleEvents(ref) {
    ref.started.subscribe(startEvent => {
      this.started.emit({
        source: this,
        event: startEvent.event
      });
      // Since all of these events run outside of change detection,
      // we need to ensure that everything is marked correctly.
      this._changeDetectorRef.markForCheck();
    });
    ref.released.subscribe(releaseEvent => {
      this.released.emit({
        source: this,
        event: releaseEvent.event
      });
    });
    ref.ended.subscribe(endEvent => {
      this.ended.emit({
        source: this,
        distance: endEvent.distance,
        dropPoint: endEvent.dropPoint,
        event: endEvent.event
      });
      // Since all of these events run outside of change detection,
      // we need to ensure that everything is marked correctly.
      this._changeDetectorRef.markForCheck();
    });
    ref.entered.subscribe(enterEvent => {
      this.entered.emit({
        container: enterEvent.container.data,
        item: this,
        currentIndex: enterEvent.currentIndex
      });
    });
    ref.exited.subscribe(exitEvent => {
      this.exited.emit({
        container: exitEvent.container.data,
        item: this
      });
    });
    ref.dropped.subscribe(dropEvent => {
      this.dropped.emit({
        previousIndex: dropEvent.previousIndex,
        currentIndex: dropEvent.currentIndex,
        previousContainer: dropEvent.previousContainer.data,
        container: dropEvent.container.data,
        isPointerOverContainer: dropEvent.isPointerOverContainer,
        item: this,
        distance: dropEvent.distance,
        dropPoint: dropEvent.dropPoint,
        event: dropEvent.event
      });
    });
  }
  /** Assigns the default input values based on a provided config object. */
  _assignDefaults(config) {
    const {
      lockAxis,
      dragStartDelay,
      constrainPosition,
      previewClass,
      boundaryElement,
      draggingDisabled,
      rootElementSelector,
      previewContainer
    } = config;
    this.disabled = draggingDisabled == null ? false : draggingDisabled;
    this.dragStartDelay = dragStartDelay || 0;
    if (lockAxis) {
      this.lockAxis = lockAxis;
    }
    if (constrainPosition) {
      this.constrainPosition = constrainPosition;
    }
    if (previewClass) {
      this.previewClass = previewClass;
    }
    if (boundaryElement) {
      this.boundaryElement = boundaryElement;
    }
    if (rootElementSelector) {
      this.rootElementSelector = rootElementSelector;
    }
    if (previewContainer) {
      this.previewContainer = previewContainer;
    }
  }
  /** Sets up the listener that syncs the handles with the drag ref. */
  _setupHandlesListener() {
    // Listen for any newly-added handles.
    this._handles.changes.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.startWith)(this._handles),
    // Sync the new handles with the DragRef.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.tap)(handles => {
      const childHandleElements = handles.filter(handle => handle._parentDrag === this).map(handle => handle.element);
      // Usually handles are only allowed to be a descendant of the drag element, but if
      // the consumer defined a different drag root, we should allow the drag element
      // itself to be a handle too.
      if (this._selfHandle && this.rootElementSelector) {
        childHandleElements.push(this.element);
      }
      this._dragRef.withHandles(childHandleElements);
    }),
    // Listen if the state of any of the handles changes.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__.switchMap)(handles => {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.merge)(...handles.map(item => {
        return item._stateChanges.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.startWith)(item));
      }));
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.takeUntil)(this._destroyed)).subscribe(handleInstance => {
      // Enabled/disable the handle that changed in the DragRef.
      const dragRef = this._dragRef;
      const handle = handleInstance.element.nativeElement;
      handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);
    });
  }
}
CdkDrag._dragInstances = [];
CdkDrag.ɵfac = function CdkDrag_Factory(t) {
  return new (t || CdkDrag)(_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](CDK_DROP_LIST, 12), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](CDK_DRAG_CONFIG, 8), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_14__.Directionality, 8), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](DragDrop), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_10__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](CDK_DRAG_HANDLE, 10), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdirectiveInject"](CDK_DRAG_PARENT, 12));
};
CdkDrag.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineDirective"]({
  type: CdkDrag,
  selectors: [["", "cdkDrag", ""]],
  contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵcontentQuery"](dirIndex, CDK_DRAG_PREVIEW, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵcontentQuery"](dirIndex, CDK_DRAG_PLACEHOLDER, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵcontentQuery"](dirIndex, CDK_DRAG_HANDLE, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵloadQuery"]()) && (ctx._previewTemplate = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵloadQuery"]()) && (ctx._placeholderTemplate = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵloadQuery"]()) && (ctx._handles = _t);
    }
  },
  hostAttrs: [1, "cdk-drag"],
  hostVars: 4,
  hostBindings: function CdkDrag_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵclassProp"]("cdk-drag-disabled", ctx.disabled)("cdk-drag-dragging", ctx._dragRef.isDragging());
    }
  },
  inputs: {
    data: ["cdkDragData", "data"],
    lockAxis: ["cdkDragLockAxis", "lockAxis"],
    rootElementSelector: ["cdkDragRootElement", "rootElementSelector"],
    boundaryElement: ["cdkDragBoundary", "boundaryElement"],
    dragStartDelay: ["cdkDragStartDelay", "dragStartDelay"],
    freeDragPosition: ["cdkDragFreeDragPosition", "freeDragPosition"],
    disabled: ["cdkDragDisabled", "disabled"],
    constrainPosition: ["cdkDragConstrainPosition", "constrainPosition"],
    previewClass: ["cdkDragPreviewClass", "previewClass"],
    previewContainer: ["cdkDragPreviewContainer", "previewContainer"]
  },
  outputs: {
    started: "cdkDragStarted",
    released: "cdkDragReleased",
    ended: "cdkDragEnded",
    entered: "cdkDragEntered",
    exited: "cdkDragExited",
    dropped: "cdkDragDropped",
    moved: "cdkDragMoved"
  },
  exportAs: ["cdkDrag"],
  standalone: true,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵProvidersFeature"]([{
    provide: CDK_DRAG_PARENT,
    useExisting: CdkDrag
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](CdkDrag, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Directive,
    args: [{
      selector: '[cdkDrag]',
      exportAs: 'cdkDrag',
      standalone: true,
      host: {
        'class': DRAG_HOST_CLASS,
        '[class.cdk-drag-disabled]': 'disabled',
        '[class.cdk-drag-dragging]': '_dragRef.isDragging()'
      },
      providers: [{
        provide: CDK_DRAG_PARENT,
        useExisting: CdkDrag
      }]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.ElementRef
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [CDK_DROP_LIST]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.SkipSelf
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.NgZone
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.ViewContainerRef
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [CDK_DRAG_CONFIG]
      }]
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_14__.Directionality,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Optional
      }]
    }, {
      type: DragDrop
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.ChangeDetectorRef
    }, {
      type: CdkDragHandle,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [CDK_DRAG_HANDLE]
      }]
    }, {
      type: CdkDrag,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.SkipSelf
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Inject,
        args: [CDK_DRAG_PARENT]
      }]
    }];
  }, {
    _handles: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.ContentChildren,
      args: [CDK_DRAG_HANDLE, {
        descendants: true
      }]
    }],
    _previewTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.ContentChild,
      args: [CDK_DRAG_PREVIEW]
    }],
    _placeholderTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.ContentChild,
      args: [CDK_DRAG_PLACEHOLDER]
    }],
    data: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDragData']
    }],
    lockAxis: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDragLockAxis']
    }],
    rootElementSelector: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDragRootElement']
    }],
    boundaryElement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDragBoundary']
    }],
    dragStartDelay: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDragStartDelay']
    }],
    freeDragPosition: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDragFreeDragPosition']
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDragDisabled']
    }],
    constrainPosition: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDragConstrainPosition']
    }],
    previewClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDragPreviewClass']
    }],
    previewContainer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Input,
      args: ['cdkDragPreviewContainer']
    }],
    started: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Output,
      args: ['cdkDragStarted']
    }],
    released: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Output,
      args: ['cdkDragReleased']
    }],
    ended: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Output,
      args: ['cdkDragEnded']
    }],
    entered: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Output,
      args: ['cdkDragEntered']
    }],
    exited: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Output,
      args: ['cdkDragExited']
    }],
    dropped: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Output,
      args: ['cdkDragDropped']
    }],
    moved: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.Output,
      args: ['cdkDragMoved']
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const DRAG_DROP_DIRECTIVES = [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];
class DragDropModule {}
DragDropModule.ɵfac = function DragDropModule_Factory(t) {
  return new (t || DragDropModule)();
};
DragDropModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineNgModule"]({
  type: DragDropModule
});
DragDropModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵɵdefineInjector"]({
  providers: [DragDrop],
  imports: [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__.CdkScrollableModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_10__["ɵsetClassMetadata"](DragDropModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_10__.NgModule,
    args: [{
      imports: DRAG_DROP_DIRECTIVES,
      exports: [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__.CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],
      providers: [DragDrop]
    }]
  }], null, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 8456:
/*!*********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2020/keycodes.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A": () => (/* binding */ A),
/* harmony export */   "ALT": () => (/* binding */ ALT),
/* harmony export */   "APOSTROPHE": () => (/* binding */ APOSTROPHE),
/* harmony export */   "AT_SIGN": () => (/* binding */ AT_SIGN),
/* harmony export */   "B": () => (/* binding */ B),
/* harmony export */   "BACKSLASH": () => (/* binding */ BACKSLASH),
/* harmony export */   "BACKSPACE": () => (/* binding */ BACKSPACE),
/* harmony export */   "C": () => (/* binding */ C),
/* harmony export */   "CAPS_LOCK": () => (/* binding */ CAPS_LOCK),
/* harmony export */   "CLOSE_SQUARE_BRACKET": () => (/* binding */ CLOSE_SQUARE_BRACKET),
/* harmony export */   "COMMA": () => (/* binding */ COMMA),
/* harmony export */   "CONTEXT_MENU": () => (/* binding */ CONTEXT_MENU),
/* harmony export */   "CONTROL": () => (/* binding */ CONTROL),
/* harmony export */   "D": () => (/* binding */ D),
/* harmony export */   "DASH": () => (/* binding */ DASH),
/* harmony export */   "DELETE": () => (/* binding */ DELETE),
/* harmony export */   "DOWN_ARROW": () => (/* binding */ DOWN_ARROW),
/* harmony export */   "E": () => (/* binding */ E),
/* harmony export */   "EIGHT": () => (/* binding */ EIGHT),
/* harmony export */   "END": () => (/* binding */ END),
/* harmony export */   "ENTER": () => (/* binding */ ENTER),
/* harmony export */   "EQUALS": () => (/* binding */ EQUALS),
/* harmony export */   "ESCAPE": () => (/* binding */ ESCAPE),
/* harmony export */   "F": () => (/* binding */ F),
/* harmony export */   "F1": () => (/* binding */ F1),
/* harmony export */   "F10": () => (/* binding */ F10),
/* harmony export */   "F11": () => (/* binding */ F11),
/* harmony export */   "F12": () => (/* binding */ F12),
/* harmony export */   "F2": () => (/* binding */ F2),
/* harmony export */   "F3": () => (/* binding */ F3),
/* harmony export */   "F4": () => (/* binding */ F4),
/* harmony export */   "F5": () => (/* binding */ F5),
/* harmony export */   "F6": () => (/* binding */ F6),
/* harmony export */   "F7": () => (/* binding */ F7),
/* harmony export */   "F8": () => (/* binding */ F8),
/* harmony export */   "F9": () => (/* binding */ F9),
/* harmony export */   "FF_EQUALS": () => (/* binding */ FF_EQUALS),
/* harmony export */   "FF_MINUS": () => (/* binding */ FF_MINUS),
/* harmony export */   "FF_MUTE": () => (/* binding */ FF_MUTE),
/* harmony export */   "FF_SEMICOLON": () => (/* binding */ FF_SEMICOLON),
/* harmony export */   "FF_VOLUME_DOWN": () => (/* binding */ FF_VOLUME_DOWN),
/* harmony export */   "FF_VOLUME_UP": () => (/* binding */ FF_VOLUME_UP),
/* harmony export */   "FIRST_MEDIA": () => (/* binding */ FIRST_MEDIA),
/* harmony export */   "FIVE": () => (/* binding */ FIVE),
/* harmony export */   "FOUR": () => (/* binding */ FOUR),
/* harmony export */   "G": () => (/* binding */ G),
/* harmony export */   "H": () => (/* binding */ H),
/* harmony export */   "HOME": () => (/* binding */ HOME),
/* harmony export */   "I": () => (/* binding */ I),
/* harmony export */   "INSERT": () => (/* binding */ INSERT),
/* harmony export */   "J": () => (/* binding */ J),
/* harmony export */   "K": () => (/* binding */ K),
/* harmony export */   "L": () => (/* binding */ L),
/* harmony export */   "LAST_MEDIA": () => (/* binding */ LAST_MEDIA),
/* harmony export */   "LEFT_ARROW": () => (/* binding */ LEFT_ARROW),
/* harmony export */   "M": () => (/* binding */ M),
/* harmony export */   "MAC_ENTER": () => (/* binding */ MAC_ENTER),
/* harmony export */   "MAC_META": () => (/* binding */ MAC_META),
/* harmony export */   "MAC_WK_CMD_LEFT": () => (/* binding */ MAC_WK_CMD_LEFT),
/* harmony export */   "MAC_WK_CMD_RIGHT": () => (/* binding */ MAC_WK_CMD_RIGHT),
/* harmony export */   "META": () => (/* binding */ META),
/* harmony export */   "MUTE": () => (/* binding */ MUTE),
/* harmony export */   "N": () => (/* binding */ N),
/* harmony export */   "NINE": () => (/* binding */ NINE),
/* harmony export */   "NUMPAD_DIVIDE": () => (/* binding */ NUMPAD_DIVIDE),
/* harmony export */   "NUMPAD_EIGHT": () => (/* binding */ NUMPAD_EIGHT),
/* harmony export */   "NUMPAD_FIVE": () => (/* binding */ NUMPAD_FIVE),
/* harmony export */   "NUMPAD_FOUR": () => (/* binding */ NUMPAD_FOUR),
/* harmony export */   "NUMPAD_MINUS": () => (/* binding */ NUMPAD_MINUS),
/* harmony export */   "NUMPAD_MULTIPLY": () => (/* binding */ NUMPAD_MULTIPLY),
/* harmony export */   "NUMPAD_NINE": () => (/* binding */ NUMPAD_NINE),
/* harmony export */   "NUMPAD_ONE": () => (/* binding */ NUMPAD_ONE),
/* harmony export */   "NUMPAD_PERIOD": () => (/* binding */ NUMPAD_PERIOD),
/* harmony export */   "NUMPAD_PLUS": () => (/* binding */ NUMPAD_PLUS),
/* harmony export */   "NUMPAD_SEVEN": () => (/* binding */ NUMPAD_SEVEN),
/* harmony export */   "NUMPAD_SIX": () => (/* binding */ NUMPAD_SIX),
/* harmony export */   "NUMPAD_THREE": () => (/* binding */ NUMPAD_THREE),
/* harmony export */   "NUMPAD_TWO": () => (/* binding */ NUMPAD_TWO),
/* harmony export */   "NUMPAD_ZERO": () => (/* binding */ NUMPAD_ZERO),
/* harmony export */   "NUM_CENTER": () => (/* binding */ NUM_CENTER),
/* harmony export */   "NUM_LOCK": () => (/* binding */ NUM_LOCK),
/* harmony export */   "O": () => (/* binding */ O),
/* harmony export */   "ONE": () => (/* binding */ ONE),
/* harmony export */   "OPEN_SQUARE_BRACKET": () => (/* binding */ OPEN_SQUARE_BRACKET),
/* harmony export */   "P": () => (/* binding */ P),
/* harmony export */   "PAGE_DOWN": () => (/* binding */ PAGE_DOWN),
/* harmony export */   "PAGE_UP": () => (/* binding */ PAGE_UP),
/* harmony export */   "PAUSE": () => (/* binding */ PAUSE),
/* harmony export */   "PERIOD": () => (/* binding */ PERIOD),
/* harmony export */   "PLUS_SIGN": () => (/* binding */ PLUS_SIGN),
/* harmony export */   "PRINT_SCREEN": () => (/* binding */ PRINT_SCREEN),
/* harmony export */   "Q": () => (/* binding */ Q),
/* harmony export */   "QUESTION_MARK": () => (/* binding */ QUESTION_MARK),
/* harmony export */   "R": () => (/* binding */ R),
/* harmony export */   "RIGHT_ARROW": () => (/* binding */ RIGHT_ARROW),
/* harmony export */   "S": () => (/* binding */ S),
/* harmony export */   "SCROLL_LOCK": () => (/* binding */ SCROLL_LOCK),
/* harmony export */   "SEMICOLON": () => (/* binding */ SEMICOLON),
/* harmony export */   "SEVEN": () => (/* binding */ SEVEN),
/* harmony export */   "SHIFT": () => (/* binding */ SHIFT),
/* harmony export */   "SINGLE_QUOTE": () => (/* binding */ SINGLE_QUOTE),
/* harmony export */   "SIX": () => (/* binding */ SIX),
/* harmony export */   "SLASH": () => (/* binding */ SLASH),
/* harmony export */   "SPACE": () => (/* binding */ SPACE),
/* harmony export */   "T": () => (/* binding */ T),
/* harmony export */   "TAB": () => (/* binding */ TAB),
/* harmony export */   "THREE": () => (/* binding */ THREE),
/* harmony export */   "TILDE": () => (/* binding */ TILDE),
/* harmony export */   "TWO": () => (/* binding */ TWO),
/* harmony export */   "U": () => (/* binding */ U),
/* harmony export */   "UP_ARROW": () => (/* binding */ UP_ARROW),
/* harmony export */   "V": () => (/* binding */ V),
/* harmony export */   "VOLUME_DOWN": () => (/* binding */ VOLUME_DOWN),
/* harmony export */   "VOLUME_UP": () => (/* binding */ VOLUME_UP),
/* harmony export */   "W": () => (/* binding */ W),
/* harmony export */   "X": () => (/* binding */ X),
/* harmony export */   "Y": () => (/* binding */ Y),
/* harmony export */   "Z": () => (/* binding */ Z),
/* harmony export */   "ZERO": () => (/* binding */ ZERO),
/* harmony export */   "hasModifierKey": () => (/* binding */ hasModifierKey)
/* harmony export */ });
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const MAC_ENTER = 3;
const BACKSPACE = 8;
const TAB = 9;
const NUM_CENTER = 12;
const ENTER = 13;
const SHIFT = 16;
const CONTROL = 17;
const ALT = 18;
const PAUSE = 19;
const CAPS_LOCK = 20;
const ESCAPE = 27;
const SPACE = 32;
const PAGE_UP = 33;
const PAGE_DOWN = 34;
const END = 35;
const HOME = 36;
const LEFT_ARROW = 37;
const UP_ARROW = 38;
const RIGHT_ARROW = 39;
const DOWN_ARROW = 40;
const PLUS_SIGN = 43;
const PRINT_SCREEN = 44;
const INSERT = 45;
const DELETE = 46;
const ZERO = 48;
const ONE = 49;
const TWO = 50;
const THREE = 51;
const FOUR = 52;
const FIVE = 53;
const SIX = 54;
const SEVEN = 55;
const EIGHT = 56;
const NINE = 57;
const FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186
const FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187
const QUESTION_MARK = 63;
const AT_SIGN = 64;
const A = 65;
const B = 66;
const C = 67;
const D = 68;
const E = 69;
const F = 70;
const G = 71;
const H = 72;
const I = 73;
const J = 74;
const K = 75;
const L = 76;
const M = 77;
const N = 78;
const O = 79;
const P = 80;
const Q = 81;
const R = 82;
const S = 83;
const T = 84;
const U = 85;
const V = 86;
const W = 87;
const X = 88;
const Y = 89;
const Z = 90;
const META = 91; // WIN_KEY_LEFT
const MAC_WK_CMD_LEFT = 91;
const MAC_WK_CMD_RIGHT = 93;
const CONTEXT_MENU = 93;
const NUMPAD_ZERO = 96;
const NUMPAD_ONE = 97;
const NUMPAD_TWO = 98;
const NUMPAD_THREE = 99;
const NUMPAD_FOUR = 100;
const NUMPAD_FIVE = 101;
const NUMPAD_SIX = 102;
const NUMPAD_SEVEN = 103;
const NUMPAD_EIGHT = 104;
const NUMPAD_NINE = 105;
const NUMPAD_MULTIPLY = 106;
const NUMPAD_PLUS = 107;
const NUMPAD_MINUS = 109;
const NUMPAD_PERIOD = 110;
const NUMPAD_DIVIDE = 111;
const F1 = 112;
const F2 = 113;
const F3 = 114;
const F4 = 115;
const F5 = 116;
const F6 = 117;
const F7 = 118;
const F8 = 119;
const F9 = 120;
const F10 = 121;
const F11 = 122;
const F12 = 123;
const NUM_LOCK = 144;
const SCROLL_LOCK = 145;
const FIRST_MEDIA = 166;
const FF_MINUS = 173;
const MUTE = 173; // Firefox (Gecko) fires 181 for MUTE
const VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN
const VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP
const FF_MUTE = 181;
const FF_VOLUME_DOWN = 182;
const LAST_MEDIA = 183;
const FF_VOLUME_UP = 183;
const SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON
const EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS
const COMMA = 188;
const DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS
const PERIOD = 190;
const SLASH = 191;
const APOSTROPHE = 192;
const TILDE = 192;
const OPEN_SQUARE_BRACKET = 219;
const BACKSLASH = 220;
const CLOSE_SQUARE_BRACKET = 221;
const SINGLE_QUOTE = 222;
const MAC_META = 224;

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Checks whether a modifier key is pressed.
 * @param event Event to be checked.
 */
function hasModifierKey(event, ...modifiers) {
  if (modifiers.length) {
    return modifiers.some(modifier => event[modifier]);
  }
  return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 3278:
/*!*******************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2020/layout.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BreakpointObserver": () => (/* binding */ BreakpointObserver),
/* harmony export */   "Breakpoints": () => (/* binding */ Breakpoints),
/* harmony export */   "LayoutModule": () => (/* binding */ LayoutModule),
/* harmony export */   "MediaMatcher": () => (/* binding */ MediaMatcher)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ 8971);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 228);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 6562);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ 4240);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ 833);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ 9295);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 7260);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ 1989);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ 635);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs/operators */ 4874);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs/operators */ 8951);
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/platform */ 9107);







/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class LayoutModule {}
LayoutModule.ɵfac = function LayoutModule_Factory(t) {
  return new (t || LayoutModule)();
};
LayoutModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: LayoutModule
});
LayoutModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](LayoutModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{}]
  }], null, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Global registry for all dynamically-created, injected media queries. */
const mediaQueriesForWebkitCompatibility = new Set();
/** Style tag that holds all of the dynamically-created media queries. */
let mediaQueryStyleNode;
/** A utility for calling matchMedia queries. */
class MediaMatcher {
  constructor(_platform) {
    this._platform = _platform;
    this._matchMedia = this._platform.isBrowser && window.matchMedia ?
    // matchMedia is bound to the window scope intentionally as it is an illegal invocation to
    // call it from a different scope.
    window.matchMedia.bind(window) : noopMatchMedia;
  }
  /**
   * Evaluates the given media query and returns the native MediaQueryList from which results
   * can be retrieved.
   * Confirms the layout engine will trigger for the selector query provided and returns the
   * MediaQueryList for the query provided.
   */
  matchMedia(query) {
    if (this._platform.WEBKIT || this._platform.BLINK) {
      createEmptyStyleRule(query);
    }
    return this._matchMedia(query);
  }
}
MediaMatcher.ɵfac = function MediaMatcher_Factory(t) {
  return new (t || MediaMatcher)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform));
};
MediaMatcher.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: MediaMatcher,
  factory: MediaMatcher.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MediaMatcher, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform
    }];
  }, null);
})();
/**
 * Creates an empty stylesheet that is used to work around browser inconsistencies related to
 * `matchMedia`. At the time of writing, it handles the following cases:
 * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`
 * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.
 * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules
 * inside the `@media` match existing elements on the page. We work around it by having one rule
 * targeting the `body`. See https://github.com/angular/components/issues/23546.
 */
function createEmptyStyleRule(query) {
  if (mediaQueriesForWebkitCompatibility.has(query)) {
    return;
  }
  try {
    if (!mediaQueryStyleNode) {
      mediaQueryStyleNode = document.createElement('style');
      mediaQueryStyleNode.setAttribute('type', 'text/css');
      document.head.appendChild(mediaQueryStyleNode);
    }
    if (mediaQueryStyleNode.sheet) {
      mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);
      mediaQueriesForWebkitCompatibility.add(query);
    }
  } catch (e) {
    console.error(e);
  }
}
/** No-op matchMedia replacement for non-browser platforms. */
function noopMatchMedia(query) {
  // Use `as any` here to avoid adding additional necessary properties for
  // the noop matcher.
  return {
    matches: query === 'all' || query === '',
    media: query,
    addListener: () => {},
    removeListener: () => {}
  };
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Utility for checking the matching state of @media queries. */
class BreakpointObserver {
  constructor(_mediaMatcher, _zone) {
    this._mediaMatcher = _mediaMatcher;
    this._zone = _zone;
    /**  A map of all media queries currently being listened for. */
    this._queries = new Map();
    /** A subject for all other observables to takeUntil based on. */
    this._destroySubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
  }
  /** Completes the active subject, signalling to all other observables to complete. */
  ngOnDestroy() {
    this._destroySubject.next();
    this._destroySubject.complete();
  }
  /**
   * Whether one or more media queries match the current viewport size.
   * @param value One or more media queries to check.
   * @returns Whether any of the media queries match.
   */
  isMatched(value) {
    const queries = splitQueries((0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceArray)(value));
    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);
  }
  /**
   * Gets an observable of results for the given queries that will emit new results for any changes
   * in matching of the given queries.
   * @param value One or more media queries to check.
   * @returns A stream of matches for the given queries.
   */
  observe(value) {
    const queries = splitQueries((0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceArray)(value));
    const observables = queries.map(query => this._registerQuery(query).observable);
    let stateObservable = (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.combineLatest)(observables);
    // Emit the first state immediately, and then debounce the subsequent emissions.
    stateObservable = (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.concat)(stateObservable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.take)(1)), stateObservable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.skip)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.debounceTime)(0)));
    return stateObservable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(breakpointStates => {
      const response = {
        matches: false,
        breakpoints: {}
      };
      breakpointStates.forEach(({
        matches,
        query
      }) => {
        response.matches = response.matches || matches;
        response.breakpoints[query] = matches;
      });
      return response;
    }));
  }
  /** Registers a specific query to be listened for. */
  _registerQuery(query) {
    // Only set up a new MediaQueryList if it is not already being listened for.
    if (this._queries.has(query)) {
      return this._queries.get(query);
    }
    const mql = this._mediaMatcher.matchMedia(query);
    // Create callback for match changes and add it is as a listener.
    const queryObservable = new rxjs__WEBPACK_IMPORTED_MODULE_10__.Observable(observer => {
      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed
      // back into the zone because matchMedia is only included in Zone.js by loading the
      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not
      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js
      // patches it.
      const handler = e => this._zone.run(() => observer.next(e));
      mql.addListener(handler);
      return () => {
        mql.removeListener(handler);
      };
    }).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.startWith)(mql), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(({
      matches
    }) => ({
      query,
      matches
    })), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.takeUntil)(this._destroySubject));
    // Add the MediaQueryList to the set of queries.
    const output = {
      observable: queryObservable,
      mql
    };
    this._queries.set(query, output);
    return output;
  }
}
BreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) {
  return new (t || BreakpointObserver)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](MediaMatcher), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
};
BreakpointObserver.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: BreakpointObserver,
  factory: BreakpointObserver.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BreakpointObserver, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: MediaMatcher
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }];
  }, null);
})();
/**
 * Split each query string into separate query strings if two queries are provided as comma
 * separated.
 */
function splitQueries(queries) {
  return queries.map(query => query.split(',')).reduce((a1, a2) => a1.concat(a2)).map(query => query.trim());
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// PascalCase is being used as Breakpoints is used like an enum.
// tslint:disable-next-line:variable-name
const Breakpoints = {
  XSmall: '(max-width: 599.98px)',
  Small: '(min-width: 600px) and (max-width: 959.98px)',
  Medium: '(min-width: 960px) and (max-width: 1279.98px)',
  Large: '(min-width: 1280px) and (max-width: 1919.98px)',
  XLarge: '(min-width: 1920px)',
  Handset: '(max-width: 599.98px) and (orientation: portrait), ' + '(max-width: 959.98px) and (orientation: landscape)',
  Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',
  Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',
  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',
  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',
  WebPortrait: '(min-width: 840px) and (orientation: portrait)',
  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',
  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',
  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'
};

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 6840:
/*!********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2020/listbox.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CdkListbox": () => (/* binding */ CdkListbox),
/* harmony export */   "CdkListboxModule": () => (/* binding */ CdkListboxModule),
/* harmony export */   "CdkOption": () => (/* binding */ CdkOption)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/cdk/a11y */ 4218);
/* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/keycodes */ 8456);
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ 8971);
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/collections */ 1755);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 228);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 1954);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ 6646);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 4874);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ 2673);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ 635);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ 8951);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs/operators */ 116);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/bidi */ 2867);











/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** The next id to use for creating unique DOM IDs. */
let nextId = 0;
/**
 * An implementation of SelectionModel that internally always represents the selection as a
 * multi-selection. This is necessary so that we can recover the full selection if the user
 * switches the listbox from single-selection to multi-selection after initialization.
 *
 * This selection model may report multiple selected values, even if it is in single-selection
 * mode. It is up to the user (CdkListbox) to check for invalid selections.
 */
class ListboxSelectionModel extends _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__.SelectionModel {
  constructor(multiple = false, initiallySelectedValues, emitChanges = true, compareWith) {
    super(true, initiallySelectedValues, emitChanges, compareWith);
    this.multiple = multiple;
  }
  isMultipleSelection() {
    return this.multiple;
  }
  select(...values) {
    // The super class is always in multi-selection mode, so we need to override the behavior if
    // this selection model actually belongs to a single-selection listbox.
    if (this.multiple) {
      return super.select(...values);
    } else {
      return super.setSelection(...values);
    }
  }
}
/** A selectable option in a listbox. */
class CdkOption {
  constructor() {
    this._generatedId = `cdk-option-${nextId++}`;
    this._disabled = false;
    /** The option's host element */
    this.element = (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef).nativeElement;
    /** The parent listbox this option belongs to. */
    this.listbox = (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(CdkListbox);
    /** Emits when the option is destroyed. */
    this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** Emits when the option is clicked. */
    this._clicked = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
  }
  /** The id of the option's host element. */
  get id() {
    return this._id || this._generatedId;
  }
  set id(value) {
    this._id = value;
  }
  /** Whether this option is disabled. */
  get disabled() {
    return this.listbox.disabled || this._disabled;
  }
  set disabled(value) {
    this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceBooleanProperty)(value);
  }
  /** The tabindex of the option when it is enabled. */
  get enabledTabIndex() {
    return this._enabledTabIndex === undefined ? this.listbox.enabledTabIndex : this._enabledTabIndex;
  }
  set enabledTabIndex(value) {
    this._enabledTabIndex = value;
  }
  ngOnDestroy() {
    this.destroyed.next();
    this.destroyed.complete();
  }
  /** Whether this option is selected. */
  isSelected() {
    return this.listbox.isSelected(this);
  }
  /** Whether this option is active. */
  isActive() {
    return this.listbox.isActive(this);
  }
  /** Toggle the selected state of this option. */
  toggle() {
    this.listbox.toggle(this);
  }
  /** Select this option if it is not selected. */
  select() {
    this.listbox.select(this);
  }
  /** Deselect this option if it is selected. */
  deselect() {
    this.listbox.deselect(this);
  }
  /** Focus this option. */
  focus() {
    this.element.focus();
  }
  /** Get the label for this element which is required by the FocusableOption interface. */
  getLabel() {
    return (this.typeaheadLabel ?? this.element.textContent?.trim()) || '';
  }
  /**
   * No-op implemented as a part of `Highlightable`.
   * @docs-private
   */
  setActiveStyles() {}
  /**
   * No-op implemented as a part of `Highlightable`.
   * @docs-private
   */
  setInactiveStyles() {}
  /** Handle focus events on the option. */
  _handleFocus() {
    // Options can wind up getting focused in active descendant mode if the user clicks on them.
    // In this case, we push focus back to the parent listbox to prevent an extra tab stop when
    // the user performs a shift+tab.
    if (this.listbox.useActiveDescendant) {
      this.listbox._setActiveOption(this);
      this.listbox.focus();
    }
  }
  /** Get the tabindex for this option. */
  _getTabIndex() {
    if (this.listbox.useActiveDescendant || this.disabled) {
      return -1;
    }
    return this.isActive() ? this.enabledTabIndex : -1;
  }
}
CdkOption.ɵfac = function CdkOption_Factory(t) {
  return new (t || CdkOption)();
};
CdkOption.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
  type: CdkOption,
  selectors: [["", "cdkOption", ""]],
  hostAttrs: ["role", "option", 1, "cdk-option"],
  hostVars: 6,
  hostBindings: function CdkOption_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function CdkOption_click_HostBindingHandler($event) {
        return ctx._clicked.next($event);
      })("focus", function CdkOption_focus_HostBindingHandler() {
        return ctx._handleFocus();
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵhostProperty"]("id", ctx.id);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("aria-selected", ctx.isSelected())("tabindex", ctx._getTabIndex())("aria-disabled", ctx.disabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("cdk-option-active", ctx.isActive());
    }
  },
  inputs: {
    id: "id",
    value: ["cdkOption", "value"],
    typeaheadLabel: ["cdkOptionTypeaheadLabel", "typeaheadLabel"],
    disabled: ["cdkOptionDisabled", "disabled"],
    enabledTabIndex: ["tabindex", "enabledTabIndex"]
  },
  exportAs: ["cdkOption"],
  standalone: true
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CdkOption, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Directive,
    args: [{
      selector: '[cdkOption]',
      standalone: true,
      exportAs: 'cdkOption',
      host: {
        'role': 'option',
        'class': 'cdk-option',
        '[id]': 'id',
        '[attr.aria-selected]': 'isSelected()',
        '[attr.tabindex]': '_getTabIndex()',
        '[attr.aria-disabled]': 'disabled',
        '[class.cdk-option-active]': 'isActive()',
        '(click)': '_clicked.next($event)',
        '(focus)': '_handleFocus()'
      }
    }]
  }], null, {
    id: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['cdkOption']
    }],
    typeaheadLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['cdkOptionTypeaheadLabel']
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['cdkOptionDisabled']
    }],
    enabledTabIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['tabindex']
    }]
  });
})();
class CdkListbox {
  constructor() {
    this._generatedId = `cdk-listbox-${nextId++}`;
    this._disabled = false;
    this._useActiveDescendant = false;
    this._orientation = 'vertical';
    this._navigationWrapDisabled = false;
    this._navigateDisabledOptions = false;
    /** Emits when the selected value(s) in the listbox change. */
    this.valueChange = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** The selection model used by the listbox. */
    this.selectionModel = new ListboxSelectionModel();
    /** Emits when the listbox is destroyed. */
    this.destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
    /** The host element of the listbox. */
    this.element = (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef).nativeElement;
    /** The change detector for this listbox. */
    this.changeDetectorRef = (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_1__.ChangeDetectorRef);
    /** Whether the currently selected value in the selection model is invalid. */
    this._invalid = false;
    /** The last user-triggered option. */
    this._lastTriggered = null;
    /** Callback called when the listbox has been touched */
    this._onTouched = () => {};
    /** Callback called when the listbox value changes */
    this._onChange = () => {};
    /** Emits when an option has been clicked. */
    this._optionClicked = (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.defer)(() => this.options.changes.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.startWith)(this.options), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.switchMap)(options => (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.merge)(...options.map(option => option._clicked.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(event => ({
      option,
      event
    }))))))));
    /** The directionality of the page. */
    this._dir = (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_9__.Directionality, {
      optional: true
    });
    /** A predicate that skips disabled options. */
    this._skipDisabledPredicate = option => option.disabled;
    /** A predicate that does not skip any options. */
    this._skipNonePredicate = () => false;
    /** Whether the listbox currently has focus. */
    this._hasFocus = false;
  }
  /** The id of the option's host element. */
  get id() {
    return this._id || this._generatedId;
  }
  set id(value) {
    this._id = value;
  }
  /** The tabindex to use when the listbox is enabled. */
  get enabledTabIndex() {
    return this._enabledTabIndex === undefined ? 0 : this._enabledTabIndex;
  }
  set enabledTabIndex(value) {
    this._enabledTabIndex = value;
  }
  /** The value selected in the listbox, represented as an array of option values. */
  get value() {
    return this._invalid ? [] : this.selectionModel.selected;
  }
  set value(value) {
    this._setSelection(value);
  }
  /**
   * Whether the listbox allows multiple options to be selected. If the value switches from `true`
   * to `false`, and more than one option is selected, all options are deselected.
   */
  get multiple() {
    return this.selectionModel.multiple;
  }
  set multiple(value) {
    this.selectionModel.multiple = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceBooleanProperty)(value);
    if (this.options) {
      this._updateInternalValue();
    }
  }
  /** Whether the listbox is disabled. */
  get disabled() {
    return this._disabled;
  }
  set disabled(value) {
    this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceBooleanProperty)(value);
  }
  /** Whether the listbox will use active descendant or will move focus onto the options. */
  get useActiveDescendant() {
    return this._useActiveDescendant;
  }
  set useActiveDescendant(shouldUseActiveDescendant) {
    this._useActiveDescendant = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceBooleanProperty)(shouldUseActiveDescendant);
  }
  /** The orientation of the listbox. Only affects keyboard interaction, not visual layout. */
  get orientation() {
    return this._orientation;
  }
  set orientation(value) {
    this._orientation = value === 'horizontal' ? 'horizontal' : 'vertical';
    if (value === 'horizontal') {
      this.listKeyManager?.withHorizontalOrientation(this._dir?.value || 'ltr');
    } else {
      this.listKeyManager?.withVerticalOrientation();
    }
  }
  /** The function used to compare option values. */
  get compareWith() {
    return this.selectionModel.compareWith;
  }
  set compareWith(fn) {
    this.selectionModel.compareWith = fn;
  }
  /**
   * Whether the keyboard navigation should wrap when the user presses arrow down on the last item
   * or arrow up on the first item.
   */
  get navigationWrapDisabled() {
    return this._navigationWrapDisabled;
  }
  set navigationWrapDisabled(wrap) {
    this._navigationWrapDisabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceBooleanProperty)(wrap);
    this.listKeyManager?.withWrap(!this._navigationWrapDisabled);
  }
  /** Whether keyboard navigation should skip over disabled items. */
  get navigateDisabledOptions() {
    return this._navigateDisabledOptions;
  }
  set navigateDisabledOptions(skip) {
    this._navigateDisabledOptions = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceBooleanProperty)(skip);
    this.listKeyManager?.skipPredicate(this._navigateDisabledOptions ? this._skipNonePredicate : this._skipDisabledPredicate);
  }
  ngAfterContentInit() {
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      this._verifyNoOptionValueCollisions();
      this._verifyOptionValues();
    }
    this._initKeyManager();
    // Update the internal value whenever the options or the model value changes.
    (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.merge)(this.selectionModel.changed, this.options.changes).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.startWith)(null), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.takeUntil)(this.destroyed)).subscribe(() => this._updateInternalValue());
    this._optionClicked.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.filter)(({
      option
    }) => !option.disabled), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.takeUntil)(this.destroyed)).subscribe(({
      option,
      event
    }) => this._handleOptionClicked(option, event));
  }
  ngOnDestroy() {
    this.listKeyManager?.destroy();
    this.destroyed.next();
    this.destroyed.complete();
  }
  /**
   * Toggle the selected state of the given option.
   * @param option The option to toggle
   */
  toggle(option) {
    this.toggleValue(option.value);
  }
  /**
   * Toggle the selected state of the given value.
   * @param value The value to toggle
   */
  toggleValue(value) {
    if (this._invalid) {
      this.selectionModel.clear(false);
    }
    this.selectionModel.toggle(value);
  }
  /**
   * Select the given option.
   * @param option The option to select
   */
  select(option) {
    this.selectValue(option.value);
  }
  /**
   * Select the given value.
   * @param value The value to select
   */
  selectValue(value) {
    if (this._invalid) {
      this.selectionModel.clear(false);
    }
    this.selectionModel.select(value);
  }
  /**
   * Deselect the given option.
   * @param option The option to deselect
   */
  deselect(option) {
    this.deselectValue(option.value);
  }
  /**
   * Deselect the given value.
   * @param value The value to deselect
   */
  deselectValue(value) {
    if (this._invalid) {
      this.selectionModel.clear(false);
    }
    this.selectionModel.deselect(value);
  }
  /**
   * Set the selected state of all options.
   * @param isSelected The new selected state to set
   */
  setAllSelected(isSelected) {
    if (!isSelected) {
      this.selectionModel.clear();
    } else {
      if (this._invalid) {
        this.selectionModel.clear(false);
      }
      this.selectionModel.select(...this.options.map(option => option.value));
    }
  }
  /**
   * Get whether the given option is selected.
   * @param option The option to get the selected state of
   */
  isSelected(option) {
    return this.isValueSelected(option.value);
  }
  /**
   * Get whether the given option is active.
   * @param option The option to get the active state of
   */
  isActive(option) {
    return !!(this.listKeyManager?.activeItem === option);
  }
  /**
   * Get whether the given value is selected.
   * @param value The value to get the selected state of
   */
  isValueSelected(value) {
    if (this._invalid) {
      return false;
    }
    return this.selectionModel.isSelected(value);
  }
  /**
   * Registers a callback to be invoked when the listbox's value changes from user input.
   * @param fn The callback to register
   * @docs-private
   */
  registerOnChange(fn) {
    this._onChange = fn;
  }
  /**
   * Registers a callback to be invoked when the listbox is blurred by the user.
   * @param fn The callback to register
   * @docs-private
   */
  registerOnTouched(fn) {
    this._onTouched = fn;
  }
  /**
   * Sets the listbox's value.
   * @param value The new value of the listbox
   * @docs-private
   */
  writeValue(value) {
    this._setSelection(value);
    this._verifyOptionValues();
  }
  /**
   * Sets the disabled state of the listbox.
   * @param isDisabled The new disabled state
   * @docs-private
   */
  setDisabledState(isDisabled) {
    this.disabled = isDisabled;
  }
  /** Focus the listbox's host element. */
  focus() {
    this.element.focus();
  }
  /**
   * Triggers the given option in response to user interaction.
   * - In single selection mode: selects the option and deselects any other selected option.
   * - In multi selection mode: toggles the selected state of the option.
   * @param option The option to trigger
   */
  triggerOption(option) {
    if (option && !option.disabled) {
      this._lastTriggered = option;
      const changed = this.multiple ? this.selectionModel.toggle(option.value) : this.selectionModel.select(option.value);
      if (changed) {
        this._onChange(this.value);
        this.valueChange.next({
          value: this.value,
          listbox: this,
          option: option
        });
      }
    }
  }
  /**
   * Trigger the given range of options in response to user interaction.
   * Should only be called in multi-selection mode.
   * @param trigger The option that was triggered
   * @param from The start index of the options to toggle
   * @param to The end index of the options to toggle
   * @param on Whether to toggle the option range on
   */
  triggerRange(trigger, from, to, on) {
    if (this.disabled || trigger && trigger.disabled) {
      return;
    }
    this._lastTriggered = trigger;
    const isEqual = this.compareWith ?? Object.is;
    const updateValues = [...this.options].slice(Math.max(0, Math.min(from, to)), Math.min(this.options.length, Math.max(from, to) + 1)).filter(option => !option.disabled).map(option => option.value);
    const selected = [...this.value];
    for (const updateValue of updateValues) {
      const selectedIndex = selected.findIndex(selectedValue => isEqual(selectedValue, updateValue));
      if (on && selectedIndex === -1) {
        selected.push(updateValue);
      } else if (!on && selectedIndex !== -1) {
        selected.splice(selectedIndex, 1);
      }
    }
    let changed = this.selectionModel.setSelection(...selected);
    if (changed) {
      this._onChange(this.value);
      this.valueChange.next({
        value: this.value,
        listbox: this,
        option: trigger
      });
    }
  }
  /**
   * Sets the given option as active.
   * @param option The option to make active
   */
  _setActiveOption(option) {
    this.listKeyManager.setActiveItem(option);
  }
  /** Called when the listbox receives focus. */
  _handleFocus() {
    if (!this.useActiveDescendant) {
      if (this.selectionModel.selected.length > 0) {
        this._setNextFocusToSelectedOption();
      } else {
        this.listKeyManager.setNextItemActive();
      }
      this._focusActiveOption();
    }
  }
  /** Called when the user presses keydown on the listbox. */
  _handleKeydown(event) {
    if (this._disabled) {
      return;
    }
    const {
      keyCode
    } = event;
    const previousActiveIndex = this.listKeyManager.activeItemIndex;
    const ctrlKeys = ['ctrlKey', 'metaKey'];
    if (this.multiple && keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.A && (0,_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.hasModifierKey)(event, ...ctrlKeys)) {
      // Toggle all options off if they're all selected, otherwise toggle them all on.
      this.triggerRange(null, 0, this.options.length - 1, this.options.length !== this.value.length);
      event.preventDefault();
      return;
    }
    if (this.multiple && (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.SPACE || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.ENTER) && (0,_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.hasModifierKey)(event, 'shiftKey')) {
      if (this.listKeyManager.activeItem && this.listKeyManager.activeItemIndex != null) {
        this.triggerRange(this.listKeyManager.activeItem, this._getLastTriggeredIndex() ?? this.listKeyManager.activeItemIndex, this.listKeyManager.activeItemIndex, !this.listKeyManager.activeItem.isSelected());
      }
      event.preventDefault();
      return;
    }
    if (this.multiple && keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.HOME && (0,_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.hasModifierKey)(event, ...ctrlKeys) && (0,_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.hasModifierKey)(event, 'shiftKey')) {
      const trigger = this.listKeyManager.activeItem;
      if (trigger) {
        const from = this.listKeyManager.activeItemIndex;
        this.listKeyManager.setFirstItemActive();
        this.triggerRange(trigger, from, this.listKeyManager.activeItemIndex, !trigger.isSelected());
      }
      event.preventDefault();
      return;
    }
    if (this.multiple && keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.END && (0,_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.hasModifierKey)(event, ...ctrlKeys) && (0,_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.hasModifierKey)(event, 'shiftKey')) {
      const trigger = this.listKeyManager.activeItem;
      if (trigger) {
        const from = this.listKeyManager.activeItemIndex;
        this.listKeyManager.setLastItemActive();
        this.triggerRange(trigger, from, this.listKeyManager.activeItemIndex, !trigger.isSelected());
      }
      event.preventDefault();
      return;
    }
    if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.SPACE || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.ENTER) {
      this.triggerOption(this.listKeyManager.activeItem);
      event.preventDefault();
      return;
    }
    const isNavKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.UP_ARROW || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.DOWN_ARROW || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.LEFT_ARROW || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.RIGHT_ARROW || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.HOME || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.END;
    this.listKeyManager.onKeydown(event);
    // Will select an option if shift was pressed while navigating to the option
    if (isNavKey && event.shiftKey && previousActiveIndex !== this.listKeyManager.activeItemIndex) {
      this.triggerOption(this.listKeyManager.activeItem);
    }
  }
  /** Called when a focus moves into the listbox. */
  _handleFocusIn() {
    // Note that we use a `focusin` handler for this instead of the existing `focus` handler,
    // because focus won't land on the listbox if `useActiveDescendant` is enabled.
    this._hasFocus = true;
  }
  /**
   * Called when the focus leaves an element in the listbox.
   * @param event The focusout event
   */
  _handleFocusOut(event) {
    const otherElement = event.relatedTarget;
    if (this.element !== otherElement && !this.element.contains(otherElement)) {
      this._onTouched();
      this._hasFocus = false;
      this._setNextFocusToSelectedOption();
    }
  }
  /** Get the id of the active option if active descendant is being used. */
  _getAriaActiveDescendant() {
    return this._useActiveDescendant ? this.listKeyManager?.activeItem?.id : null;
  }
  /** Get the tabindex for the listbox. */
  _getTabIndex() {
    if (this.disabled) {
      return -1;
    }
    return this.useActiveDescendant || !this.listKeyManager.activeItem ? this.enabledTabIndex : -1;
  }
  /** Initialize the key manager. */
  _initKeyManager() {
    this.listKeyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_13__.ActiveDescendantKeyManager(this.options).withWrap(!this._navigationWrapDisabled).withTypeAhead().withHomeAndEnd().withAllowedModifierKeys(['shiftKey']).skipPredicate(this._navigateDisabledOptions ? this._skipNonePredicate : this._skipDisabledPredicate);
    if (this.orientation === 'vertical') {
      this.listKeyManager.withVerticalOrientation();
    } else {
      this.listKeyManager.withHorizontalOrientation(this._dir?.value || 'ltr');
    }
    if (this.selectionModel.selected.length) {
      Promise.resolve().then(() => this._setNextFocusToSelectedOption());
    }
    this.listKeyManager.change.subscribe(() => this._focusActiveOption());
  }
  /** Focus the active option. */
  _focusActiveOption() {
    if (!this.useActiveDescendant) {
      this.listKeyManager.activeItem?.focus();
    }
    this.changeDetectorRef.markForCheck();
  }
  /**
   * Set the selected values.
   * @param value The list of new selected values.
   */
  _setSelection(value) {
    if (this._invalid) {
      this.selectionModel.clear(false);
    }
    this.selectionModel.setSelection(...this._coerceValue(value));
    if (!this._hasFocus) {
      this._setNextFocusToSelectedOption();
    }
  }
  /** Sets the first selected option as first in the keyboard focus order. */
  _setNextFocusToSelectedOption() {
    // Null check the options since they only get defined after `ngAfterContentInit`.
    const selected = this.options?.find(option => option.isSelected());
    if (selected) {
      this.listKeyManager.updateActiveItem(selected);
    }
  }
  /** Update the internal value of the listbox based on the selection model. */
  _updateInternalValue() {
    const indexCache = new Map();
    this.selectionModel.sort((a, b) => {
      const aIndex = this._getIndexForValue(indexCache, a);
      const bIndex = this._getIndexForValue(indexCache, b);
      return aIndex - bIndex;
    });
    const selected = this.selectionModel.selected;
    this._invalid = !this.multiple && selected.length > 1 || !!this._getInvalidOptionValues(selected).length;
    this.changeDetectorRef.markForCheck();
  }
  /**
   * Gets the index of the given value in the given list of options.
   * @param cache The cache of indices found so far
   * @param value The value to find
   * @return The index of the value in the options list
   */
  _getIndexForValue(cache, value) {
    const isEqual = this.compareWith || Object.is;
    if (!cache.has(value)) {
      let index = -1;
      for (let i = 0; i < this.options.length; i++) {
        if (isEqual(value, this.options.get(i).value)) {
          index = i;
          break;
        }
      }
      cache.set(value, index);
    }
    return cache.get(value);
  }
  /**
   * Handle the user clicking an option.
   * @param option The option that was clicked.
   */
  _handleOptionClicked(option, event) {
    event.preventDefault();
    this.listKeyManager.setActiveItem(option);
    if (event.shiftKey && this.multiple) {
      this.triggerRange(option, this._getLastTriggeredIndex() ?? this.listKeyManager.activeItemIndex, this.listKeyManager.activeItemIndex, !option.isSelected());
    } else {
      this.triggerOption(option);
    }
  }
  /** Verifies that no two options represent the same value under the compareWith function. */
  _verifyNoOptionValueCollisions() {
    this.options.changes.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.startWith)(this.options), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.takeUntil)(this.destroyed)).subscribe(() => {
      const isEqual = this.compareWith ?? Object.is;
      for (let i = 0; i < this.options.length; i++) {
        const option = this.options.get(i);
        let duplicate = null;
        for (let j = i + 1; j < this.options.length; j++) {
          const other = this.options.get(j);
          if (isEqual(option.value, other.value)) {
            duplicate = other;
            break;
          }
        }
        if (duplicate) {
          // TODO(mmalerba): Link to docs about this.
          if (this.compareWith) {
            console.warn(`Found multiple CdkOption representing the same value under the given compareWith function`, {
              option1: option.element,
              option2: duplicate.element,
              compareWith: this.compareWith
            });
          } else {
            console.warn(`Found multiple CdkOption with the same value`, {
              option1: option.element,
              option2: duplicate.element
            });
          }
          return;
        }
      }
    });
  }
  /** Verifies that the option values are valid. */
  _verifyOptionValues() {
    if (this.options && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      const selected = this.selectionModel.selected;
      const invalidValues = this._getInvalidOptionValues(selected);
      if (!this.multiple && selected.length > 1) {
        throw Error('Listbox cannot have more than one selected value in multi-selection mode.');
      }
      if (invalidValues.length) {
        throw Error('Listbox has selected values that do not match any of its options.');
      }
    }
  }
  /**
   * Coerces a value into an array representing a listbox selection.
   * @param value The value to coerce
   * @return An array
   */
  _coerceValue(value) {
    return value == null ? [] : (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceArray)(value);
  }
  /**
   * Get the sublist of values that do not represent valid option values in this listbox.
   * @param values The list of values
   * @return The sublist of values that are not valid option values
   */
  _getInvalidOptionValues(values) {
    const isEqual = this.compareWith || Object.is;
    const validValues = (this.options || []).map(option => option.value);
    return values.filter(value => !validValues.some(validValue => isEqual(value, validValue)));
  }
  /** Get the index of the last triggered option. */
  _getLastTriggeredIndex() {
    const index = this.options.toArray().indexOf(this._lastTriggered);
    return index === -1 ? null : index;
  }
}
CdkListbox.ɵfac = function CdkListbox_Factory(t) {
  return new (t || CdkListbox)();
};
CdkListbox.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
  type: CdkListbox,
  selectors: [["", "cdkListbox", ""]],
  contentQueries: function CdkListbox_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, CdkOption, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.options = _t);
    }
  },
  hostAttrs: ["role", "listbox", 1, "cdk-listbox"],
  hostVars: 6,
  hostBindings: function CdkListbox_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("focus", function CdkListbox_focus_HostBindingHandler() {
        return ctx._handleFocus();
      })("keydown", function CdkListbox_keydown_HostBindingHandler($event) {
        return ctx._handleKeydown($event);
      })("focusout", function CdkListbox_focusout_HostBindingHandler($event) {
        return ctx._handleFocusOut($event);
      })("focusin", function CdkListbox_focusin_HostBindingHandler() {
        return ctx._handleFocusIn();
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵhostProperty"]("id", ctx.id);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("tabindex", ctx._getTabIndex())("aria-disabled", ctx.disabled)("aria-multiselectable", ctx.multiple)("aria-activedescendant", ctx._getAriaActiveDescendant())("aria-orientation", ctx.orientation);
    }
  },
  inputs: {
    id: "id",
    enabledTabIndex: ["tabindex", "enabledTabIndex"],
    value: ["cdkListboxValue", "value"],
    multiple: ["cdkListboxMultiple", "multiple"],
    disabled: ["cdkListboxDisabled", "disabled"],
    useActiveDescendant: ["cdkListboxUseActiveDescendant", "useActiveDescendant"],
    orientation: ["cdkListboxOrientation", "orientation"],
    compareWith: ["cdkListboxCompareWith", "compareWith"],
    navigationWrapDisabled: ["cdkListboxNavigationWrapDisabled", "navigationWrapDisabled"],
    navigateDisabledOptions: ["cdkListboxNavigatesDisabledOptions", "navigateDisabledOptions"]
  },
  outputs: {
    valueChange: "cdkListboxValueChange"
  },
  exportAs: ["cdkListbox"],
  standalone: true,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵProvidersFeature"]([{
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_14__.NG_VALUE_ACCESSOR,
    useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(() => CdkListbox),
    multi: true
  }])]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CdkListbox, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Directive,
    args: [{
      selector: '[cdkListbox]',
      standalone: true,
      exportAs: 'cdkListbox',
      host: {
        'role': 'listbox',
        'class': 'cdk-listbox',
        '[id]': 'id',
        '[attr.tabindex]': '_getTabIndex()',
        '[attr.aria-disabled]': 'disabled',
        '[attr.aria-multiselectable]': 'multiple',
        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',
        '[attr.aria-orientation]': 'orientation',
        '(focus)': '_handleFocus()',
        '(keydown)': '_handleKeydown($event)',
        '(focusout)': '_handleFocusOut($event)',
        '(focusin)': '_handleFocusIn()'
      },
      providers: [{
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_14__.NG_VALUE_ACCESSOR,
        useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(() => CdkListbox),
        multi: true
      }]
    }]
  }], null, {
    id: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input
    }],
    enabledTabIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['tabindex']
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['cdkListboxValue']
    }],
    multiple: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['cdkListboxMultiple']
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['cdkListboxDisabled']
    }],
    useActiveDescendant: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['cdkListboxUseActiveDescendant']
    }],
    orientation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['cdkListboxOrientation']
    }],
    compareWith: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['cdkListboxCompareWith']
    }],
    navigationWrapDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['cdkListboxNavigationWrapDisabled']
    }],
    navigateDisabledOptions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['cdkListboxNavigatesDisabledOptions']
    }],
    valueChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Output,
      args: ['cdkListboxValueChange']
    }],
    options: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ContentChildren,
      args: [CdkOption, {
        descendants: true
      }]
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const EXPORTED_DECLARATIONS = [CdkListbox, CdkOption];
class CdkListboxModule {}
CdkListboxModule.ɵfac = function CdkListboxModule_Factory(t) {
  return new (t || CdkListboxModule)();
};
CdkListboxModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
  type: CdkListboxModule
});
CdkListboxModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CdkListboxModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
    args: [{
      imports: [...EXPORTED_DECLARATIONS],
      exports: [...EXPORTED_DECLARATIONS]
    }]
  }], null, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 3773:
/*!**********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2020/observers.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CdkObserveContent": () => (/* binding */ CdkObserveContent),
/* harmony export */   "ContentObserver": () => (/* binding */ ContentObserver),
/* harmony export */   "MutationObserverFactory": () => (/* binding */ MutationObserverFactory),
/* harmony export */   "ObserversModule": () => (/* binding */ ObserversModule)
/* harmony export */ });
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ 8971);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 833);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 228);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ 1989);






/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.
 * @docs-private
 */
class MutationObserverFactory {
  create(callback) {
    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);
  }
}
MutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) {
  return new (t || MutationObserverFactory)();
};
MutationObserverFactory.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: MutationObserverFactory,
  factory: MutationObserverFactory.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MutationObserverFactory, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();
/** An injectable service that allows watching elements for changes to their content. */
class ContentObserver {
  constructor(_mutationObserverFactory) {
    this._mutationObserverFactory = _mutationObserverFactory;
    /** Keeps track of the existing MutationObservers so they can be reused. */
    this._observedElements = new Map();
  }
  ngOnDestroy() {
    this._observedElements.forEach((_, element) => this._cleanupObserver(element));
  }
  observe(elementOrRef) {
    const element = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceElement)(elementOrRef);
    return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(observer => {
      const stream = this._observeElement(element);
      const subscription = stream.subscribe(observer);
      return () => {
        subscription.unsubscribe();
        this._unobserveElement(element);
      };
    });
  }
  /**
   * Observes the given element by using the existing MutationObserver if available, or creating a
   * new one if not.
   */
  _observeElement(element) {
    if (!this._observedElements.has(element)) {
      const stream = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));
      if (observer) {
        observer.observe(element, {
          characterData: true,
          childList: true,
          subtree: true
        });
      }
      this._observedElements.set(element, {
        observer,
        stream,
        count: 1
      });
    } else {
      this._observedElements.get(element).count++;
    }
    return this._observedElements.get(element).stream;
  }
  /**
   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is
   * observing this element.
   */
  _unobserveElement(element) {
    if (this._observedElements.has(element)) {
      this._observedElements.get(element).count--;
      if (!this._observedElements.get(element).count) {
        this._cleanupObserver(element);
      }
    }
  }
  /** Clean up the underlying MutationObserver for the specified element. */
  _cleanupObserver(element) {
    if (this._observedElements.has(element)) {
      const {
        observer,
        stream
      } = this._observedElements.get(element);
      if (observer) {
        observer.disconnect();
      }
      stream.complete();
      this._observedElements.delete(element);
    }
  }
}
ContentObserver.ɵfac = function ContentObserver_Factory(t) {
  return new (t || ContentObserver)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](MutationObserverFactory));
};
ContentObserver.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: ContentObserver,
  factory: ContentObserver.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ContentObserver, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: MutationObserverFactory
    }];
  }, null);
})();
/**
 * Directive that triggers a callback whenever the content of
 * its associated element has changed.
 */
class CdkObserveContent {
  /**
   * Whether observing content is disabled. This option can be used
   * to disconnect the underlying MutationObserver until it is needed.
   */
  get disabled() {
    return this._disabled;
  }
  set disabled(value) {
    this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
    this._disabled ? this._unsubscribe() : this._subscribe();
  }
  /** Debounce interval for emitting the changes. */
  get debounce() {
    return this._debounce;
  }
  set debounce(value) {
    this._debounce = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceNumberProperty)(value);
    this._subscribe();
  }
  constructor(_contentObserver, _elementRef, _ngZone) {
    this._contentObserver = _contentObserver;
    this._elementRef = _elementRef;
    this._ngZone = _ngZone;
    /** Event emitted for each change in the element's content. */
    this.event = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this._disabled = false;
    this._currentSubscription = null;
  }
  ngAfterContentInit() {
    if (!this._currentSubscription && !this.disabled) {
      this._subscribe();
    }
  }
  ngOnDestroy() {
    this._unsubscribe();
  }
  _subscribe() {
    this._unsubscribe();
    const stream = this._contentObserver.observe(this._elementRef);
    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.
    // Consider brining it back inside the zone next time we're making breaking changes.
    // Bringing it back inside can cause things like infinite change detection loops and changed
    // after checked errors if people's code isn't handling it properly.
    this._ngZone.runOutsideAngular(() => {
      this._currentSubscription = (this.debounce ? stream.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.debounceTime)(this.debounce)) : stream).subscribe(this.event);
    });
  }
  _unsubscribe() {
    this._currentSubscription?.unsubscribe();
  }
}
CdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) {
  return new (t || CdkObserveContent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ContentObserver), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
};
CdkObserveContent.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CdkObserveContent,
  selectors: [["", "cdkObserveContent", ""]],
  inputs: {
    disabled: ["cdkObserveContentDisabled", "disabled"],
    debounce: "debounce"
  },
  outputs: {
    event: "cdkObserveContent"
  },
  exportAs: ["cdkObserveContent"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkObserveContent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[cdkObserveContent]',
      exportAs: 'cdkObserveContent'
    }]
  }], function () {
    return [{
      type: ContentObserver
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }];
  }, {
    event: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
      args: ['cdkObserveContent']
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['cdkObserveContentDisabled']
    }],
    debounce: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class ObserversModule {}
ObserversModule.ɵfac = function ObserversModule_Factory(t) {
  return new (t || ObserversModule)();
};
ObserversModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: ObserversModule
});
ObserversModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  providers: [MutationObserverFactory]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ObserversModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      exports: [CdkObserveContent],
      declarations: [CdkObserveContent],
      providers: [MutationObserverFactory]
    }]
  }], null, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 5895:
/*!********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2020/overlay.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BlockScrollStrategy": () => (/* binding */ BlockScrollStrategy),
/* harmony export */   "CdkConnectedOverlay": () => (/* binding */ CdkConnectedOverlay),
/* harmony export */   "CdkOverlayOrigin": () => (/* binding */ CdkOverlayOrigin),
/* harmony export */   "CdkScrollable": () => (/* reexport safe */ _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.CdkScrollable),
/* harmony export */   "CloseScrollStrategy": () => (/* binding */ CloseScrollStrategy),
/* harmony export */   "ConnectedOverlayPositionChange": () => (/* binding */ ConnectedOverlayPositionChange),
/* harmony export */   "ConnectionPositionPair": () => (/* binding */ ConnectionPositionPair),
/* harmony export */   "FlexibleConnectedPositionStrategy": () => (/* binding */ FlexibleConnectedPositionStrategy),
/* harmony export */   "FullscreenOverlayContainer": () => (/* binding */ FullscreenOverlayContainer),
/* harmony export */   "GlobalPositionStrategy": () => (/* binding */ GlobalPositionStrategy),
/* harmony export */   "NoopScrollStrategy": () => (/* binding */ NoopScrollStrategy),
/* harmony export */   "Overlay": () => (/* binding */ Overlay),
/* harmony export */   "OverlayConfig": () => (/* binding */ OverlayConfig),
/* harmony export */   "OverlayContainer": () => (/* binding */ OverlayContainer),
/* harmony export */   "OverlayKeyboardDispatcher": () => (/* binding */ OverlayKeyboardDispatcher),
/* harmony export */   "OverlayModule": () => (/* binding */ OverlayModule),
/* harmony export */   "OverlayOutsideClickDispatcher": () => (/* binding */ OverlayOutsideClickDispatcher),
/* harmony export */   "OverlayPositionBuilder": () => (/* binding */ OverlayPositionBuilder),
/* harmony export */   "OverlayRef": () => (/* binding */ OverlayRef),
/* harmony export */   "RepositionScrollStrategy": () => (/* binding */ RepositionScrollStrategy),
/* harmony export */   "STANDARD_DROPDOWN_ADJACENT_POSITIONS": () => (/* binding */ STANDARD_DROPDOWN_ADJACENT_POSITIONS),
/* harmony export */   "STANDARD_DROPDOWN_BELOW_POSITIONS": () => (/* binding */ STANDARD_DROPDOWN_BELOW_POSITIONS),
/* harmony export */   "ScrollDispatcher": () => (/* reexport safe */ _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollDispatcher),
/* harmony export */   "ScrollStrategyOptions": () => (/* binding */ ScrollStrategyOptions),
/* harmony export */   "ScrollingVisibility": () => (/* binding */ ScrollingVisibility),
/* harmony export */   "ViewportRuler": () => (/* reexport safe */ _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler),
/* harmony export */   "validateHorizontalPosition": () => (/* binding */ validateHorizontalPosition),
/* harmony export */   "validateVerticalPosition": () => (/* binding */ validateVerticalPosition)
/* harmony export */ });
/* harmony import */ var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/scrolling */ 6328);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 4666);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ 8971);
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/platform */ 9107);
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/bidi */ 2867);
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/portal */ 7520);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ 228);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ 6078);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ 6646);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 9295);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ 8951);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ 2566);
/* harmony import */ var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/keycodes */ 8456);

















/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const scrollBehaviorSupported = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.supportsScrollBehavior)();
/**
 * Strategy that will prevent the user from scrolling while the overlay is visible.
 */
class BlockScrollStrategy {
  constructor(_viewportRuler, document) {
    this._viewportRuler = _viewportRuler;
    this._previousHTMLStyles = {
      top: '',
      left: ''
    };
    this._isEnabled = false;
    this._document = document;
  }
  /** Attaches this scroll strategy to an overlay. */
  attach() {}
  /** Blocks page-level scroll while the attached overlay is open. */
  enable() {
    if (this._canBeEnabled()) {
      const root = this._document.documentElement;
      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();
      // Cache the previous inline styles in case the user had set them.
      this._previousHTMLStyles.left = root.style.left || '';
      this._previousHTMLStyles.top = root.style.top || '';
      // Note: we're using the `html` node, instead of the `body`, because the `body` may
      // have the user agent margin, whereas the `html` is guaranteed not to have one.
      root.style.left = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(-this._previousScrollPosition.left);
      root.style.top = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(-this._previousScrollPosition.top);
      root.classList.add('cdk-global-scrollblock');
      this._isEnabled = true;
    }
  }
  /** Unblocks page-level scroll while the attached overlay is open. */
  disable() {
    if (this._isEnabled) {
      const html = this._document.documentElement;
      const body = this._document.body;
      const htmlStyle = html.style;
      const bodyStyle = body.style;
      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';
      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';
      this._isEnabled = false;
      htmlStyle.left = this._previousHTMLStyles.left;
      htmlStyle.top = this._previousHTMLStyles.top;
      html.classList.remove('cdk-global-scrollblock');
      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.
      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior
      // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,
      // because it can throw off feature detections in `supportsScrollBehavior` which
      // checks for `'scrollBehavior' in documentElement.style`.
      if (scrollBehaviorSupported) {
        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';
      }
      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);
      if (scrollBehaviorSupported) {
        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;
        bodyStyle.scrollBehavior = previousBodyScrollBehavior;
      }
    }
  }
  _canBeEnabled() {
    // Since the scroll strategies can't be singletons, we have to use a global CSS class
    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global
    // scrolling multiple times.
    const html = this._document.documentElement;
    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {
      return false;
    }
    const body = this._document.body;
    const viewport = this._viewportRuler.getViewportSize();
    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.
 */
function getMatScrollStrategyAlreadyAttachedError() {
  return Error(`Scroll strategy has already been attached.`);
}

/**
 * Strategy that will close the overlay as soon as the user starts scrolling.
 */
class CloseScrollStrategy {
  constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {
    this._scrollDispatcher = _scrollDispatcher;
    this._ngZone = _ngZone;
    this._viewportRuler = _viewportRuler;
    this._config = _config;
    this._scrollSubscription = null;
    /** Detaches the overlay ref and disables the scroll strategy. */
    this._detach = () => {
      this.disable();
      if (this._overlayRef.hasAttached()) {
        this._ngZone.run(() => this._overlayRef.detach());
      }
    };
  }
  /** Attaches this scroll strategy to an overlay. */
  attach(overlayRef) {
    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw getMatScrollStrategyAlreadyAttachedError();
    }
    this._overlayRef = overlayRef;
  }
  /** Enables the closing of the attached overlay on scroll. */
  enable() {
    if (this._scrollSubscription) {
      return;
    }
    const stream = this._scrollDispatcher.scrolled(0);
    if (this._config && this._config.threshold && this._config.threshold > 1) {
      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;
      this._scrollSubscription = stream.subscribe(() => {
        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;
        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {
          this._detach();
        } else {
          this._overlayRef.updatePosition();
        }
      });
    } else {
      this._scrollSubscription = stream.subscribe(this._detach);
    }
  }
  /** Disables the closing the attached overlay on scroll. */
  disable() {
    if (this._scrollSubscription) {
      this._scrollSubscription.unsubscribe();
      this._scrollSubscription = null;
    }
  }
  detach() {
    this.disable();
    this._overlayRef = null;
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Scroll strategy that doesn't do anything. */
class NoopScrollStrategy {
  /** Does nothing, as this scroll strategy is a no-op. */
  enable() {}
  /** Does nothing, as this scroll strategy is a no-op. */
  disable() {}
  /** Does nothing, as this scroll strategy is a no-op. */
  attach() {}
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.
 * @param element Dimensions of the element (from getBoundingClientRect)
 * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
 * @returns Whether the element is scrolled out of view
 * @docs-private
 */
function isElementScrolledOutsideView(element, scrollContainers) {
  return scrollContainers.some(containerBounds => {
    const outsideAbove = element.bottom < containerBounds.top;
    const outsideBelow = element.top > containerBounds.bottom;
    const outsideLeft = element.right < containerBounds.left;
    const outsideRight = element.left > containerBounds.right;
    return outsideAbove || outsideBelow || outsideLeft || outsideRight;
  });
}
/**
 * Gets whether an element is clipped by any of its scrolling containers.
 * @param element Dimensions of the element (from getBoundingClientRect)
 * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)
 * @returns Whether the element is clipped
 * @docs-private
 */
function isElementClippedByScrolling(element, scrollContainers) {
  return scrollContainers.some(scrollContainerRect => {
    const clippedAbove = element.top < scrollContainerRect.top;
    const clippedBelow = element.bottom > scrollContainerRect.bottom;
    const clippedLeft = element.left < scrollContainerRect.left;
    const clippedRight = element.right > scrollContainerRect.right;
    return clippedAbove || clippedBelow || clippedLeft || clippedRight;
  });
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Strategy that will update the element position as the user is scrolling.
 */
class RepositionScrollStrategy {
  constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {
    this._scrollDispatcher = _scrollDispatcher;
    this._viewportRuler = _viewportRuler;
    this._ngZone = _ngZone;
    this._config = _config;
    this._scrollSubscription = null;
  }
  /** Attaches this scroll strategy to an overlay. */
  attach(overlayRef) {
    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw getMatScrollStrategyAlreadyAttachedError();
    }
    this._overlayRef = overlayRef;
  }
  /** Enables repositioning of the attached overlay on scroll. */
  enable() {
    if (!this._scrollSubscription) {
      const throttle = this._config ? this._config.scrollThrottle : 0;
      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {
        this._overlayRef.updatePosition();
        // TODO(crisbeto): make `close` on by default once all components can handle it.
        if (this._config && this._config.autoClose) {
          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();
          const {
            width,
            height
          } = this._viewportRuler.getViewportSize();
          // TODO(crisbeto): include all ancestor scroll containers here once
          // we have a way of exposing the trigger element to the scroll strategy.
          const parentRects = [{
            width,
            height,
            bottom: height,
            right: width,
            top: 0,
            left: 0
          }];
          if (isElementScrolledOutsideView(overlayRect, parentRects)) {
            this.disable();
            this._ngZone.run(() => this._overlayRef.detach());
          }
        }
      });
    }
  }
  /** Disables repositioning of the attached overlay on scroll. */
  disable() {
    if (this._scrollSubscription) {
      this._scrollSubscription.unsubscribe();
      this._scrollSubscription = null;
    }
  }
  detach() {
    this.disable();
    this._overlayRef = null;
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Options for how an overlay will handle scrolling.
 *
 * Users can provide a custom value for `ScrollStrategyOptions` to replace the default
 * behaviors. This class primarily acts as a factory for ScrollStrategy instances.
 */
class ScrollStrategyOptions {
  constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {
    this._scrollDispatcher = _scrollDispatcher;
    this._viewportRuler = _viewportRuler;
    this._ngZone = _ngZone;
    /** Do nothing on scroll. */
    this.noop = () => new NoopScrollStrategy();
    /**
     * Close the overlay as soon as the user scrolls.
     * @param config Configuration to be used inside the scroll strategy.
     */
    this.close = config => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);
    /** Block scrolling. */
    this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);
    /**
     * Update the overlay's position on scroll.
     * @param config Configuration to be used inside the scroll strategy.
     * Allows debouncing the reposition calls.
     */
    this.reposition = config => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);
    this._document = document;
  }
}
ScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {
  return new (t || ScrollStrategyOptions)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT));
};
ScrollStrategyOptions.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
  token: ScrollStrategyOptions,
  factory: ScrollStrategyOptions.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](ScrollStrategyOptions, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollDispatcher
    }, {
      type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT]
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Initial configuration used when creating an overlay. */
class OverlayConfig {
  constructor(config) {
    /** Strategy to be used when handling scroll events while the overlay is open. */
    this.scrollStrategy = new NoopScrollStrategy();
    /** Custom class to add to the overlay pane. */
    this.panelClass = '';
    /** Whether the overlay has a backdrop. */
    this.hasBackdrop = false;
    /** Custom class to add to the backdrop */
    this.backdropClass = 'cdk-overlay-dark-backdrop';
    /**
     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.
     * Note that this usually doesn't include clicking on links (unless the user is using
     * the `HashLocationStrategy`).
     */
    this.disposeOnNavigation = false;
    if (config) {
      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,
      // loses the array generic type in the `for of`. But we *also* have to use `Array` because
      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`
      const configKeys = Object.keys(config);
      for (const key of configKeys) {
        if (config[key] !== undefined) {
          // TypeScript, as of version 3.5, sees the left-hand-side of this expression
          // as "I don't know *which* key this is, so the only valid value is the intersection
          // of all the possible values." In this case, that happens to be `undefined`. TypeScript
          // is not smart enough to see that the right-hand-side is actually an access of the same
          // exact type with the same exact key, meaning that the value type must be identical.
          // So we use `any` to work around this.
          this[key] = config[key];
        }
      }
    }
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** The points of the origin element and the overlay element to connect. */
class ConnectionPositionPair {
  constructor(origin, overlay, /** Offset along the X axis. */
  offsetX, /** Offset along the Y axis. */
  offsetY, /** Class(es) to be applied to the panel while this position is active. */
  panelClass) {
    this.offsetX = offsetX;
    this.offsetY = offsetY;
    this.panelClass = panelClass;
    this.originX = origin.originX;
    this.originY = origin.originY;
    this.overlayX = overlay.overlayX;
    this.overlayY = overlay.overlayY;
  }
}
/**
 * Set of properties regarding the position of the origin and overlay relative to the viewport
 * with respect to the containing Scrollable elements.
 *
 * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the
 * bounds of any one of the strategy's Scrollable's bounding client rectangle.
 *
 * The overlay and origin are outside view if there is no overlap between their bounding client
 * rectangle and any one of the strategy's Scrollable's bounding client rectangle.
 *
 *       -----------                    -----------
 *       | outside |                    | clipped |
 *       |  view   |              --------------------------
 *       |         |              |     |         |        |
 *       ----------               |     -----------        |
 *  --------------------------    |                        |
 *  |                        |    |      Scrollable        |
 *  |                        |    |                        |
 *  |                        |     --------------------------
 *  |      Scrollable        |
 *  |                        |
 *  --------------------------
 *
 *  @docs-private
 */
class ScrollingVisibility {}
/** The change event emitted by the strategy when a fallback position is used. */
class ConnectedOverlayPositionChange {
  constructor( /** The position used as a result of this change. */
  connectionPair, /** @docs-private */
  scrollableViewProperties) {
    this.connectionPair = connectionPair;
    this.scrollableViewProperties = scrollableViewProperties;
  }
}
/**
 * Validates whether a vertical position property matches the expected values.
 * @param property Name of the property being validated.
 * @param value Value of the property being validated.
 * @docs-private
 */
function validateVerticalPosition(property, value) {
  if (value !== 'top' && value !== 'bottom' && value !== 'center') {
    throw Error(`ConnectedPosition: Invalid ${property} "${value}". ` + `Expected "top", "bottom" or "center".`);
  }
}
/**
 * Validates whether a horizontal position property matches the expected values.
 * @param property Name of the property being validated.
 * @param value Value of the property being validated.
 * @docs-private
 */
function validateHorizontalPosition(property, value) {
  if (value !== 'start' && value !== 'end' && value !== 'center') {
    throw Error(`ConnectedPosition: Invalid ${property} "${value}". ` + `Expected "start", "end" or "center".`);
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Service for dispatching events that land on the body to appropriate overlay ref,
 * if any. It maintains a list of attached overlays to determine best suited overlay based
 * on event target and order of overlay opens.
 */
class BaseOverlayDispatcher {
  constructor(document) {
    /** Currently attached overlays in the order they were attached. */
    this._attachedOverlays = [];
    this._document = document;
  }
  ngOnDestroy() {
    this.detach();
  }
  /** Add a new overlay to the list of attached overlay refs. */
  add(overlayRef) {
    // Ensure that we don't get the same overlay multiple times.
    this.remove(overlayRef);
    this._attachedOverlays.push(overlayRef);
  }
  /** Remove an overlay from the list of attached overlay refs. */
  remove(overlayRef) {
    const index = this._attachedOverlays.indexOf(overlayRef);
    if (index > -1) {
      this._attachedOverlays.splice(index, 1);
    }
    // Remove the global listener once there are no more overlays.
    if (this._attachedOverlays.length === 0) {
      this.detach();
    }
  }
}
BaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) {
  return new (t || BaseOverlayDispatcher)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT));
};
BaseOverlayDispatcher.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
  token: BaseOverlayDispatcher,
  factory: BaseOverlayDispatcher.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](BaseOverlayDispatcher, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT]
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Service for dispatching keyboard events that land on the body to appropriate overlay ref,
 * if any. It maintains a list of attached overlays to determine best suited overlay based
 * on event target and order of overlay opens.
 */
class OverlayKeyboardDispatcher extends BaseOverlayDispatcher {
  constructor(document, /** @breaking-change 14.0.0 _ngZone will be required. */
  _ngZone) {
    super(document);
    this._ngZone = _ngZone;
    /** Keyboard event listener that will be attached to the body. */
    this._keydownListener = event => {
      const overlays = this._attachedOverlays;
      for (let i = overlays.length - 1; i > -1; i--) {
        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.
        // We want to target the most recent overlay, rather than trying to match where the event came
        // from, because some components might open an overlay, but keep focus on a trigger element
        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,
        // because we don't want overlays that don't handle keyboard events to block the ones below
        // them that do.
        if (overlays[i]._keydownEvents.observers.length > 0) {
          const keydownEvents = overlays[i]._keydownEvents;
          /** @breaking-change 14.0.0 _ngZone will be required. */
          if (this._ngZone) {
            this._ngZone.run(() => keydownEvents.next(event));
          } else {
            keydownEvents.next(event);
          }
          break;
        }
      }
    };
  }
  /** Add a new overlay to the list of attached overlay refs. */
  add(overlayRef) {
    super.add(overlayRef);
    // Lazily start dispatcher once first overlay is added
    if (!this._isAttached) {
      /** @breaking-change 14.0.0 _ngZone will be required. */
      if (this._ngZone) {
        this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));
      } else {
        this._document.body.addEventListener('keydown', this._keydownListener);
      }
      this._isAttached = true;
    }
  }
  /** Detaches the global keyboard event listener. */
  detach() {
    if (this._isAttached) {
      this._document.body.removeEventListener('keydown', this._keydownListener);
      this._isAttached = false;
    }
  }
}
OverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {
  return new (t || OverlayKeyboardDispatcher)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__.NgZone, 8));
};
OverlayKeyboardDispatcher.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
  token: OverlayKeyboardDispatcher,
  factory: OverlayKeyboardDispatcher.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](OverlayKeyboardDispatcher, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.NgZone,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Optional
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Service for dispatching mouse click events that land on the body to appropriate overlay ref,
 * if any. It maintains a list of attached overlays to determine best suited overlay based
 * on event target and order of overlay opens.
 */
class OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {
  constructor(document, _platform, /** @breaking-change 14.0.0 _ngZone will be required. */
  _ngZone) {
    super(document);
    this._platform = _platform;
    this._ngZone = _ngZone;
    this._cursorStyleIsSet = false;
    /** Store pointerdown event target to track origin of click. */
    this._pointerDownListener = event => {
      this._pointerDownEventTarget = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__._getEventTarget)(event);
    };
    /** Click event listener that will be attached to the body propagate phase. */
    this._clickListener = event => {
      const target = (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__._getEventTarget)(event);
      // In case of a click event, we want to check the origin of the click
      // (e.g. in case where a user starts a click inside the overlay and
      // releases the click outside of it).
      // This is done by using the event target of the preceding pointerdown event.
      // Every click event caused by a pointer device has a preceding pointerdown
      // event, unless the click was programmatically triggered (e.g. in a unit test).
      const origin = event.type === 'click' && this._pointerDownEventTarget ? this._pointerDownEventTarget : target;
      // Reset the stored pointerdown event target, to avoid having it interfere
      // in subsequent events.
      this._pointerDownEventTarget = null;
      // We copy the array because the original may be modified asynchronously if the
      // outsidePointerEvents listener decides to detach overlays resulting in index errors inside
      // the for loop.
      const overlays = this._attachedOverlays.slice();
      // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.
      // We want to target all overlays for which the click could be considered as outside click.
      // As soon as we reach an overlay for which the click is not outside click we break off
      // the loop.
      for (let i = overlays.length - 1; i > -1; i--) {
        const overlayRef = overlays[i];
        if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {
          continue;
        }
        // If it's a click inside the overlay, just break - we should do nothing
        // If it's an outside click (both origin and target of the click) dispatch the mouse event,
        // and proceed with the next overlay
        if (overlayRef.overlayElement.contains(target) || overlayRef.overlayElement.contains(origin)) {
          break;
        }
        const outsidePointerEvents = overlayRef._outsidePointerEvents;
        /** @breaking-change 14.0.0 _ngZone will be required. */
        if (this._ngZone) {
          this._ngZone.run(() => outsidePointerEvents.next(event));
        } else {
          outsidePointerEvents.next(event);
        }
      }
    };
  }
  /** Add a new overlay to the list of attached overlay refs. */
  add(overlayRef) {
    super.add(overlayRef);
    // Safari on iOS does not generate click events for non-interactive
    // elements. However, we want to receive a click for any element outside
    // the overlay. We can force a "clickable" state by setting
    // `cursor: pointer` on the document body. See:
    // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile
    // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html
    if (!this._isAttached) {
      const body = this._document.body;
      /** @breaking-change 14.0.0 _ngZone will be required. */
      if (this._ngZone) {
        this._ngZone.runOutsideAngular(() => this._addEventListeners(body));
      } else {
        this._addEventListeners(body);
      }
      // click event is not fired on iOS. To make element "clickable" we are
      // setting the cursor to pointer
      if (this._platform.IOS && !this._cursorStyleIsSet) {
        this._cursorOriginalValue = body.style.cursor;
        body.style.cursor = 'pointer';
        this._cursorStyleIsSet = true;
      }
      this._isAttached = true;
    }
  }
  /** Detaches the global keyboard event listener. */
  detach() {
    if (this._isAttached) {
      const body = this._document.body;
      body.removeEventListener('pointerdown', this._pointerDownListener, true);
      body.removeEventListener('click', this._clickListener, true);
      body.removeEventListener('auxclick', this._clickListener, true);
      body.removeEventListener('contextmenu', this._clickListener, true);
      if (this._platform.IOS && this._cursorStyleIsSet) {
        body.style.cursor = this._cursorOriginalValue;
        this._cursorStyleIsSet = false;
      }
      this._isAttached = false;
    }
  }
  _addEventListeners(body) {
    body.addEventListener('pointerdown', this._pointerDownListener, true);
    body.addEventListener('click', this._clickListener, true);
    body.addEventListener('auxclick', this._clickListener, true);
    body.addEventListener('contextmenu', this._clickListener, true);
  }
}
OverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) {
  return new (t || OverlayOutsideClickDispatcher)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__.NgZone, 8));
};
OverlayOutsideClickDispatcher.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
  token: OverlayOutsideClickDispatcher,
  factory: OverlayOutsideClickDispatcher.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](OverlayOutsideClickDispatcher, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT]
      }]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.NgZone,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Optional
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Container inside which all overlays will render. */
class OverlayContainer {
  constructor(document, _platform) {
    this._platform = _platform;
    this._document = document;
  }
  ngOnDestroy() {
    this._containerElement?.remove();
  }
  /**
   * This method returns the overlay container element. It will lazily
   * create the element the first time it is called to facilitate using
   * the container in non-browser environments.
   * @returns the container element
   */
  getContainerElement() {
    if (!this._containerElement) {
      this._createContainer();
    }
    return this._containerElement;
  }
  /**
   * Create the overlay container element, which is simply a div
   * with the 'cdk-overlay-container' class on the document body.
   */
  _createContainer() {
    const containerClass = 'cdk-overlay-container';
    // TODO(crisbeto): remove the testing check once we have an overlay testing
    // module or Angular starts tearing down the testing `NgModule`. See:
    // https://github.com/angular/angular/issues/18831
    if (this._platform.isBrowser || (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__._isTestEnvironment)()) {
      const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform="server"], ` + `.${containerClass}[platform="test"]`);
      // Remove any old containers from the opposite platform.
      // This can happen when transitioning from the server to the client.
      for (let i = 0; i < oppositePlatformContainers.length; i++) {
        oppositePlatformContainers[i].remove();
      }
    }
    const container = this._document.createElement('div');
    container.classList.add(containerClass);
    // A long time ago we kept adding new overlay containers whenever a new app was instantiated,
    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.
    // The new logic was a little too aggressive since it was breaking some legitimate use cases.
    // To mitigate the problem we made it so that only containers from a different platform are
    // cleared, but the side-effect was that people started depending on the overly-aggressive
    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing
    // module which does the cleanup, we try to detect that we're in a test environment and we
    // always clear the container. See #17006.
    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.
    if ((0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__._isTestEnvironment)()) {
      container.setAttribute('platform', 'test');
    } else if (!this._platform.isBrowser) {
      container.setAttribute('platform', 'server');
    }
    this._document.body.appendChild(container);
    this._containerElement = container;
  }
}
OverlayContainer.ɵfac = function OverlayContainer_Factory(t) {
  return new (t || OverlayContainer)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform));
};
OverlayContainer.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
  token: OverlayContainer,
  factory: OverlayContainer.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](OverlayContainer, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT]
      }]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Reference to an overlay that has been created with the Overlay service.
 * Used to manipulate or dispose of said overlay.
 */
class OverlayRef {
  constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {
    this._portalOutlet = _portalOutlet;
    this._host = _host;
    this._pane = _pane;
    this._config = _config;
    this._ngZone = _ngZone;
    this._keyboardDispatcher = _keyboardDispatcher;
    this._document = _document;
    this._location = _location;
    this._outsideClickDispatcher = _outsideClickDispatcher;
    this._animationsDisabled = _animationsDisabled;
    this._backdropElement = null;
    this._backdropClick = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
    this._attachments = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
    this._detachments = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
    this._locationChanges = rxjs__WEBPACK_IMPORTED_MODULE_6__.Subscription.EMPTY;
    this._backdropClickHandler = event => this._backdropClick.next(event);
    this._backdropTransitionendHandler = event => {
      this._disposeBackdrop(event.target);
    };
    /** Stream of keydown events dispatched to this overlay. */
    this._keydownEvents = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
    /** Stream of mouse outside events dispatched to this overlay. */
    this._outsidePointerEvents = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
    if (_config.scrollStrategy) {
      this._scrollStrategy = _config.scrollStrategy;
      this._scrollStrategy.attach(this);
    }
    this._positionStrategy = _config.positionStrategy;
  }
  /** The overlay's HTML element */
  get overlayElement() {
    return this._pane;
  }
  /** The overlay's backdrop HTML element. */
  get backdropElement() {
    return this._backdropElement;
  }
  /**
   * Wrapper around the panel element. Can be used for advanced
   * positioning where a wrapper with specific styling is
   * required around the overlay pane.
   */
  get hostElement() {
    return this._host;
  }
  /**
   * Attaches content, given via a Portal, to the overlay.
   * If the overlay is configured to have a backdrop, it will be created.
   *
   * @param portal Portal instance to which to attach the overlay.
   * @returns The portal attachment result.
   */
  attach(portal) {
    // Insert the host into the DOM before attaching the portal, otherwise
    // the animations module will skip animations on repeat attachments.
    if (!this._host.parentElement && this._previousHostParent) {
      this._previousHostParent.appendChild(this._host);
    }
    const attachResult = this._portalOutlet.attach(portal);
    if (this._positionStrategy) {
      this._positionStrategy.attach(this);
    }
    this._updateStackingOrder();
    this._updateElementSize();
    this._updateElementDirection();
    if (this._scrollStrategy) {
      this._scrollStrategy.enable();
    }
    // Update the position once the zone is stable so that the overlay will be fully rendered
    // before attempting to position it, as the position may depend on the size of the rendered
    // content.
    this._ngZone.onStable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.take)(1)).subscribe(() => {
      // The overlay could've been detached before the zone has stabilized.
      if (this.hasAttached()) {
        this.updatePosition();
      }
    });
    // Enable pointer events for the overlay pane element.
    this._togglePointerEvents(true);
    if (this._config.hasBackdrop) {
      this._attachBackdrop();
    }
    if (this._config.panelClass) {
      this._toggleClasses(this._pane, this._config.panelClass, true);
    }
    // Only emit the `attachments` event once all other setup is done.
    this._attachments.next();
    // Track this overlay by the keyboard dispatcher
    this._keyboardDispatcher.add(this);
    if (this._config.disposeOnNavigation) {
      this._locationChanges = this._location.subscribe(() => this.dispose());
    }
    this._outsideClickDispatcher.add(this);
    // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.
    // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but
    // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.
    if (typeof attachResult?.onDestroy === 'function') {
      // In most cases we control the portal and we know when it is being detached so that
      // we can finish the disposal process. The exception is if the user passes in a custom
      // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use
      // `detach` here instead of `dispose`, because we don't know if the user intends to
      // reattach the overlay at a later point. It also has the advantage of waiting for animations.
      attachResult.onDestroy(() => {
        if (this.hasAttached()) {
          // We have to delay the `detach` call, because detaching immediately prevents
          // other destroy hooks from running. This is likely a framework bug similar to
          // https://github.com/angular/angular/issues/46119
          this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));
        }
      });
    }
    return attachResult;
  }
  /**
   * Detaches an overlay from a portal.
   * @returns The portal detachment result.
   */
  detach() {
    if (!this.hasAttached()) {
      return;
    }
    this.detachBackdrop();
    // When the overlay is detached, the pane element should disable pointer events.
    // This is necessary because otherwise the pane element will cover the page and disable
    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.
    this._togglePointerEvents(false);
    if (this._positionStrategy && this._positionStrategy.detach) {
      this._positionStrategy.detach();
    }
    if (this._scrollStrategy) {
      this._scrollStrategy.disable();
    }
    const detachmentResult = this._portalOutlet.detach();
    // Only emit after everything is detached.
    this._detachments.next();
    // Remove this overlay from keyboard dispatcher tracking.
    this._keyboardDispatcher.remove(this);
    // Keeping the host element in the DOM can cause scroll jank, because it still gets
    // rendered, even though it's transparent and unclickable which is why we remove it.
    this._detachContentWhenStable();
    this._locationChanges.unsubscribe();
    this._outsideClickDispatcher.remove(this);
    return detachmentResult;
  }
  /** Cleans up the overlay from the DOM. */
  dispose() {
    const isAttached = this.hasAttached();
    if (this._positionStrategy) {
      this._positionStrategy.dispose();
    }
    this._disposeScrollStrategy();
    this._disposeBackdrop(this._backdropElement);
    this._locationChanges.unsubscribe();
    this._keyboardDispatcher.remove(this);
    this._portalOutlet.dispose();
    this._attachments.complete();
    this._backdropClick.complete();
    this._keydownEvents.complete();
    this._outsidePointerEvents.complete();
    this._outsideClickDispatcher.remove(this);
    this._host?.remove();
    this._previousHostParent = this._pane = this._host = null;
    if (isAttached) {
      this._detachments.next();
    }
    this._detachments.complete();
  }
  /** Whether the overlay has attached content. */
  hasAttached() {
    return this._portalOutlet.hasAttached();
  }
  /** Gets an observable that emits when the backdrop has been clicked. */
  backdropClick() {
    return this._backdropClick;
  }
  /** Gets an observable that emits when the overlay has been attached. */
  attachments() {
    return this._attachments;
  }
  /** Gets an observable that emits when the overlay has been detached. */
  detachments() {
    return this._detachments;
  }
  /** Gets an observable of keydown events targeted to this overlay. */
  keydownEvents() {
    return this._keydownEvents;
  }
  /** Gets an observable of pointer events targeted outside this overlay. */
  outsidePointerEvents() {
    return this._outsidePointerEvents;
  }
  /** Gets the current overlay configuration, which is immutable. */
  getConfig() {
    return this._config;
  }
  /** Updates the position of the overlay based on the position strategy. */
  updatePosition() {
    if (this._positionStrategy) {
      this._positionStrategy.apply();
    }
  }
  /** Switches to a new position strategy and updates the overlay position. */
  updatePositionStrategy(strategy) {
    if (strategy === this._positionStrategy) {
      return;
    }
    if (this._positionStrategy) {
      this._positionStrategy.dispose();
    }
    this._positionStrategy = strategy;
    if (this.hasAttached()) {
      strategy.attach(this);
      this.updatePosition();
    }
  }
  /** Update the size properties of the overlay. */
  updateSize(sizeConfig) {
    this._config = {
      ...this._config,
      ...sizeConfig
    };
    this._updateElementSize();
  }
  /** Sets the LTR/RTL direction for the overlay. */
  setDirection(dir) {
    this._config = {
      ...this._config,
      direction: dir
    };
    this._updateElementDirection();
  }
  /** Add a CSS class or an array of classes to the overlay pane. */
  addPanelClass(classes) {
    if (this._pane) {
      this._toggleClasses(this._pane, classes, true);
    }
  }
  /** Remove a CSS class or an array of classes from the overlay pane. */
  removePanelClass(classes) {
    if (this._pane) {
      this._toggleClasses(this._pane, classes, false);
    }
  }
  /**
   * Returns the layout direction of the overlay panel.
   */
  getDirection() {
    const direction = this._config.direction;
    if (!direction) {
      return 'ltr';
    }
    return typeof direction === 'string' ? direction : direction.value;
  }
  /** Switches to a new scroll strategy. */
  updateScrollStrategy(strategy) {
    if (strategy === this._scrollStrategy) {
      return;
    }
    this._disposeScrollStrategy();
    this._scrollStrategy = strategy;
    if (this.hasAttached()) {
      strategy.attach(this);
      strategy.enable();
    }
  }
  /** Updates the text direction of the overlay panel. */
  _updateElementDirection() {
    this._host.setAttribute('dir', this.getDirection());
  }
  /** Updates the size of the overlay element based on the overlay config. */
  _updateElementSize() {
    if (!this._pane) {
      return;
    }
    const style = this._pane.style;
    style.width = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(this._config.width);
    style.height = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(this._config.height);
    style.minWidth = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(this._config.minWidth);
    style.minHeight = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(this._config.minHeight);
    style.maxWidth = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(this._config.maxWidth);
    style.maxHeight = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(this._config.maxHeight);
  }
  /** Toggles the pointer events for the overlay pane element. */
  _togglePointerEvents(enablePointer) {
    this._pane.style.pointerEvents = enablePointer ? '' : 'none';
  }
  /** Attaches a backdrop for this overlay. */
  _attachBackdrop() {
    const showingClass = 'cdk-overlay-backdrop-showing';
    this._backdropElement = this._document.createElement('div');
    this._backdropElement.classList.add('cdk-overlay-backdrop');
    if (this._animationsDisabled) {
      this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');
    }
    if (this._config.backdropClass) {
      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);
    }
    // Insert the backdrop before the pane in the DOM order,
    // in order to handle stacked overlays properly.
    this._host.parentElement.insertBefore(this._backdropElement, this._host);
    // Forward backdrop clicks such that the consumer of the overlay can perform whatever
    // action desired when such a click occurs (usually closing the overlay).
    this._backdropElement.addEventListener('click', this._backdropClickHandler);
    // Add class to fade-in the backdrop after one frame.
    if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {
      this._ngZone.runOutsideAngular(() => {
        requestAnimationFrame(() => {
          if (this._backdropElement) {
            this._backdropElement.classList.add(showingClass);
          }
        });
      });
    } else {
      this._backdropElement.classList.add(showingClass);
    }
  }
  /**
   * Updates the stacking order of the element, moving it to the top if necessary.
   * This is required in cases where one overlay was detached, while another one,
   * that should be behind it, was destroyed. The next time both of them are opened,
   * the stacking will be wrong, because the detached element's pane will still be
   * in its original DOM position.
   */
  _updateStackingOrder() {
    if (this._host.nextSibling) {
      this._host.parentNode.appendChild(this._host);
    }
  }
  /** Detaches the backdrop (if any) associated with the overlay. */
  detachBackdrop() {
    const backdropToDetach = this._backdropElement;
    if (!backdropToDetach) {
      return;
    }
    if (this._animationsDisabled) {
      this._disposeBackdrop(backdropToDetach);
      return;
    }
    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');
    this._ngZone.runOutsideAngular(() => {
      backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);
    });
    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.
    // In this case we make it unclickable and we try to remove it after a delay.
    backdropToDetach.style.pointerEvents = 'none';
    // Run this outside the Angular zone because there's nothing that Angular cares about.
    // If it were to run inside the Angular zone, every test that used Overlay would have to be
    // either async or fakeAsync.
    this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {
      this._disposeBackdrop(backdropToDetach);
    }, 500));
  }
  /** Toggles a single CSS class or an array of classes on an element. */
  _toggleClasses(element, cssClasses, isAdd) {
    const classes = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceArray)(cssClasses || []).filter(c => !!c);
    if (classes.length) {
      isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);
    }
  }
  /** Detaches the overlay content next time the zone stabilizes. */
  _detachContentWhenStable() {
    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however
    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will
    // be patched to run inside the zone, which will throw us into an infinite loop.
    this._ngZone.runOutsideAngular(() => {
      // We can't remove the host here immediately, because the overlay pane's content
      // might still be animating. This stream helps us avoid interrupting the animation
      // by waiting for the pane to become empty.
      const subscription = this._ngZone.onStable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.takeUntil)((0,rxjs__WEBPACK_IMPORTED_MODULE_9__.merge)(this._attachments, this._detachments))).subscribe(() => {
        // Needs a couple of checks for the pane and host, because
        // they may have been removed by the time the zone stabilizes.
        if (!this._pane || !this._host || this._pane.children.length === 0) {
          if (this._pane && this._config.panelClass) {
            this._toggleClasses(this._pane, this._config.panelClass, false);
          }
          if (this._host && this._host.parentElement) {
            this._previousHostParent = this._host.parentElement;
            this._host.remove();
          }
          subscription.unsubscribe();
        }
      });
    });
  }
  /** Disposes of a scroll strategy. */
  _disposeScrollStrategy() {
    const scrollStrategy = this._scrollStrategy;
    if (scrollStrategy) {
      scrollStrategy.disable();
      if (scrollStrategy.detach) {
        scrollStrategy.detach();
      }
    }
  }
  /** Removes a backdrop element from the DOM. */
  _disposeBackdrop(backdrop) {
    if (backdrop) {
      backdrop.removeEventListener('click', this._backdropClickHandler);
      backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);
      backdrop.remove();
      // It is possible that a new portal has been attached to this overlay since we started
      // removing the backdrop. If that is the case, only clear the backdrop reference if it
      // is still the same instance that we started to remove.
      if (this._backdropElement === backdrop) {
        this._backdropElement = null;
      }
    }
    if (this._backdropTimeout) {
      clearTimeout(this._backdropTimeout);
      this._backdropTimeout = undefined;
    }
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// TODO: refactor clipping detection into a separate thing (part of scrolling module)
// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.
/** Class to be added to the overlay bounding box. */
const boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';
/** Regex used to split a string on its CSS units. */
const cssUnitPattern = /([A-Za-z%]+)$/;
/**
 * A strategy for positioning overlays. Using this strategy, an overlay is given an
 * implicit position relative some origin element. The relative position is defined in terms of
 * a point on the origin element that is connected to a point on the overlay element. For example,
 * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
 * of the overlay.
 */
class FlexibleConnectedPositionStrategy {
  /** Ordered list of preferred positions, from most to least desirable. */
  get positions() {
    return this._preferredPositions;
  }
  constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {
    this._viewportRuler = _viewportRuler;
    this._document = _document;
    this._platform = _platform;
    this._overlayContainer = _overlayContainer;
    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */
    this._lastBoundingBoxSize = {
      width: 0,
      height: 0
    };
    /** Whether the overlay was pushed in a previous positioning. */
    this._isPushed = false;
    /** Whether the overlay can be pushed on-screen on the initial open. */
    this._canPush = true;
    /** Whether the overlay can grow via flexible width/height after the initial open. */
    this._growAfterOpen = false;
    /** Whether the overlay's width and height can be constrained to fit within the viewport. */
    this._hasFlexibleDimensions = true;
    /** Whether the overlay position is locked. */
    this._positionLocked = false;
    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */
    this._viewportMargin = 0;
    /** The Scrollable containers used to check scrollable view properties on position change. */
    this._scrollables = [];
    /** Ordered list of preferred positions, from most to least desirable. */
    this._preferredPositions = [];
    /** Subject that emits whenever the position changes. */
    this._positionChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
    /** Subscription to viewport size changes. */
    this._resizeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_6__.Subscription.EMPTY;
    /** Default offset for the overlay along the x axis. */
    this._offsetX = 0;
    /** Default offset for the overlay along the y axis. */
    this._offsetY = 0;
    /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */
    this._appliedPanelClasses = [];
    /** Observable sequence of position changes. */
    this.positionChanges = this._positionChanges;
    this.setOrigin(connectedTo);
  }
  /** Attaches this position strategy to an overlay. */
  attach(overlayRef) {
    if (this._overlayRef && overlayRef !== this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw Error('This position strategy is already attached to an overlay');
    }
    this._validatePositions();
    overlayRef.hostElement.classList.add(boundingBoxClass);
    this._overlayRef = overlayRef;
    this._boundingBox = overlayRef.hostElement;
    this._pane = overlayRef.overlayElement;
    this._isDisposed = false;
    this._isInitialRender = true;
    this._lastPosition = null;
    this._resizeSubscription.unsubscribe();
    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {
      // When the window is resized, we want to trigger the next reposition as if it
      // was an initial render, in order for the strategy to pick a new optimal position,
      // otherwise position locking will cause it to stay at the old one.
      this._isInitialRender = true;
      this.apply();
    });
  }
  /**
   * Updates the position of the overlay element, using whichever preferred position relative
   * to the origin best fits on-screen.
   *
   * The selection of a position goes as follows:
   *  - If any positions fit completely within the viewport as-is,
   *      choose the first position that does so.
   *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,
   *      choose the position with the greatest available size modified by the positions' weight.
   *  - If pushing is enabled, take the position that went off-screen the least and push it
   *      on-screen.
   *  - If none of the previous criteria were met, use the position that goes off-screen the least.
   * @docs-private
   */
  apply() {
    // We shouldn't do anything if the strategy was disposed or we're on the server.
    if (this._isDisposed || !this._platform.isBrowser) {
      return;
    }
    // If the position has been applied already (e.g. when the overlay was opened) and the
    // consumer opted into locking in the position, re-use the old position, in order to
    // prevent the overlay from jumping around.
    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {
      this.reapplyLastPosition();
      return;
    }
    this._clearPanelClasses();
    this._resetOverlayElementStyles();
    this._resetBoundingBoxStyles();
    // We need the bounding rects for the origin, the overlay and the container to determine how to position
    // the overlay relative to the origin.
    // We use the viewport rect to determine whether a position would go off-screen.
    this._viewportRect = this._getNarrowedViewportRect();
    this._originRect = this._getOriginRect();
    this._overlayRect = this._pane.getBoundingClientRect();
    this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();
    const originRect = this._originRect;
    const overlayRect = this._overlayRect;
    const viewportRect = this._viewportRect;
    const containerRect = this._containerRect;
    // Positions where the overlay will fit with flexible dimensions.
    const flexibleFits = [];
    // Fallback if none of the preferred positions fit within the viewport.
    let fallback;
    // Go through each of the preferred positions looking for a good fit.
    // If a good fit is found, it will be applied immediately.
    for (let pos of this._preferredPositions) {
      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.
      let originPoint = this._getOriginPoint(originRect, containerRect, pos);
      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the
      // overlay in this position. We use the top-left corner for calculations and later translate
      // this into an appropriate (top, left, bottom, right) style.
      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);
      // Calculate how well the overlay would fit into the viewport with this point.
      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);
      // If the overlay, without any further work, fits into the viewport, use this position.
      if (overlayFit.isCompletelyWithinViewport) {
        this._isPushed = false;
        this._applyPosition(pos, originPoint);
        return;
      }
      // If the overlay has flexible dimensions, we can use this position
      // so long as there's enough space for the minimum dimensions.
      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {
        // Save positions where the overlay will fit with flexible dimensions. We will use these
        // if none of the positions fit *without* flexible dimensions.
        flexibleFits.push({
          position: pos,
          origin: originPoint,
          overlayRect,
          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)
        });
        continue;
      }
      // If the current preferred position does not fit on the screen, remember the position
      // if it has more visible area on-screen than we've seen and move onto the next preferred
      // position.
      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {
        fallback = {
          overlayFit,
          overlayPoint,
          originPoint,
          position: pos,
          overlayRect
        };
      }
    }
    // If there are any positions where the overlay would fit with flexible dimensions, choose the
    // one that has the greatest area available modified by the position's weight
    if (flexibleFits.length) {
      let bestFit = null;
      let bestScore = -1;
      for (const fit of flexibleFits) {
        const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);
        if (score > bestScore) {
          bestScore = score;
          bestFit = fit;
        }
      }
      this._isPushed = false;
      this._applyPosition(bestFit.position, bestFit.origin);
      return;
    }
    // When none of the preferred positions fit within the viewport, take the position
    // that went off-screen the least and attempt to push it on-screen.
    if (this._canPush) {
      // TODO(jelbourn): after pushing, the opening "direction" of the overlay might not make sense.
      this._isPushed = true;
      this._applyPosition(fallback.position, fallback.originPoint);
      return;
    }
    // All options for getting the overlay within the viewport have been exhausted, so go with the
    // position that went off-screen the least.
    this._applyPosition(fallback.position, fallback.originPoint);
  }
  detach() {
    this._clearPanelClasses();
    this._lastPosition = null;
    this._previousPushAmount = null;
    this._resizeSubscription.unsubscribe();
  }
  /** Cleanup after the element gets destroyed. */
  dispose() {
    if (this._isDisposed) {
      return;
    }
    // We can't use `_resetBoundingBoxStyles` here, because it resets
    // some properties to zero, rather than removing them.
    if (this._boundingBox) {
      extendStyles(this._boundingBox.style, {
        top: '',
        left: '',
        right: '',
        bottom: '',
        height: '',
        width: '',
        alignItems: '',
        justifyContent: ''
      });
    }
    if (this._pane) {
      this._resetOverlayElementStyles();
    }
    if (this._overlayRef) {
      this._overlayRef.hostElement.classList.remove(boundingBoxClass);
    }
    this.detach();
    this._positionChanges.complete();
    this._overlayRef = this._boundingBox = null;
    this._isDisposed = true;
  }
  /**
   * This re-aligns the overlay element with the trigger in its last calculated position,
   * even if a position higher in the "preferred positions" list would now fit. This
   * allows one to re-align the panel without changing the orientation of the panel.
   */
  reapplyLastPosition() {
    if (this._isDisposed || !this._platform.isBrowser) {
      return;
    }
    const lastPosition = this._lastPosition;
    if (lastPosition) {
      this._originRect = this._getOriginRect();
      this._overlayRect = this._pane.getBoundingClientRect();
      this._viewportRect = this._getNarrowedViewportRect();
      this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();
      const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);
      this._applyPosition(lastPosition, originPoint);
    } else {
      this.apply();
    }
  }
  /**
   * Sets the list of Scrollable containers that host the origin element so that
   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
   * Scrollable must be an ancestor element of the strategy's origin element.
   */
  withScrollableContainers(scrollables) {
    this._scrollables = scrollables;
    return this;
  }
  /**
   * Adds new preferred positions.
   * @param positions List of positions options for this overlay.
   */
  withPositions(positions) {
    this._preferredPositions = positions;
    // If the last calculated position object isn't part of the positions anymore, clear
    // it in order to avoid it being picked up if the consumer tries to re-apply.
    if (positions.indexOf(this._lastPosition) === -1) {
      this._lastPosition = null;
    }
    this._validatePositions();
    return this;
  }
  /**
   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.
   * @param margin Required margin between the overlay and the viewport edge in pixels.
   */
  withViewportMargin(margin) {
    this._viewportMargin = margin;
    return this;
  }
  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */
  withFlexibleDimensions(flexibleDimensions = true) {
    this._hasFlexibleDimensions = flexibleDimensions;
    return this;
  }
  /** Sets whether the overlay can grow after the initial open via flexible width/height. */
  withGrowAfterOpen(growAfterOpen = true) {
    this._growAfterOpen = growAfterOpen;
    return this;
  }
  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */
  withPush(canPush = true) {
    this._canPush = canPush;
    return this;
  }
  /**
   * Sets whether the overlay's position should be locked in after it is positioned
   * initially. When an overlay is locked in, it won't attempt to reposition itself
   * when the position is re-applied (e.g. when the user scrolls away).
   * @param isLocked Whether the overlay should locked in.
   */
  withLockedPosition(isLocked = true) {
    this._positionLocked = isLocked;
    return this;
  }
  /**
   * Sets the origin, relative to which to position the overlay.
   * Using an element origin is useful for building components that need to be positioned
   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be
   * used for cases like contextual menus which open relative to the user's pointer.
   * @param origin Reference to the new origin.
   */
  setOrigin(origin) {
    this._origin = origin;
    return this;
  }
  /**
   * Sets the default offset for the overlay's connection point on the x-axis.
   * @param offset New offset in the X axis.
   */
  withDefaultOffsetX(offset) {
    this._offsetX = offset;
    return this;
  }
  /**
   * Sets the default offset for the overlay's connection point on the y-axis.
   * @param offset New offset in the Y axis.
   */
  withDefaultOffsetY(offset) {
    this._offsetY = offset;
    return this;
  }
  /**
   * Configures that the position strategy should set a `transform-origin` on some elements
   * inside the overlay, depending on the current position that is being applied. This is
   * useful for the cases where the origin of an animation can change depending on the
   * alignment of the overlay.
   * @param selector CSS selector that will be used to find the target
   *    elements onto which to set the transform origin.
   */
  withTransformOriginOn(selector) {
    this._transformOriginSelector = selector;
    return this;
  }
  /**
   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.
   */
  _getOriginPoint(originRect, containerRect, pos) {
    let x;
    if (pos.originX == 'center') {
      // Note: when centering we should always use the `left`
      // offset, otherwise the position will be wrong in RTL.
      x = originRect.left + originRect.width / 2;
    } else {
      const startX = this._isRtl() ? originRect.right : originRect.left;
      const endX = this._isRtl() ? originRect.left : originRect.right;
      x = pos.originX == 'start' ? startX : endX;
    }
    // When zooming in Safari the container rectangle contains negative values for the position
    // and we need to re-add them to the calculated coordinates.
    if (containerRect.left < 0) {
      x -= containerRect.left;
    }
    let y;
    if (pos.originY == 'center') {
      y = originRect.top + originRect.height / 2;
    } else {
      y = pos.originY == 'top' ? originRect.top : originRect.bottom;
    }
    // Normally the containerRect's top value would be zero, however when the overlay is attached to an input
    // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle
    // of the screen and to make space for the virtual keyboard. We need to account for this offset,
    // otherwise our positioning will be thrown off.
    // Additionally, when zooming in Safari this fixes the vertical position.
    if (containerRect.top < 0) {
      y -= containerRect.top;
    }
    return {
      x,
      y
    };
  }
  /**
   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and
   * origin point to which the overlay should be connected.
   */
  _getOverlayPoint(originPoint, overlayRect, pos) {
    // Calculate the (overlayStartX, overlayStartY), the start of the
    // potential overlay position relative to the origin point.
    let overlayStartX;
    if (pos.overlayX == 'center') {
      overlayStartX = -overlayRect.width / 2;
    } else if (pos.overlayX === 'start') {
      overlayStartX = this._isRtl() ? -overlayRect.width : 0;
    } else {
      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;
    }
    let overlayStartY;
    if (pos.overlayY == 'center') {
      overlayStartY = -overlayRect.height / 2;
    } else {
      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;
    }
    // The (x, y) coordinates of the overlay.
    return {
      x: originPoint.x + overlayStartX,
      y: originPoint.y + overlayStartY
    };
  }
  /** Gets how well an overlay at the given point will fit within the viewport. */
  _getOverlayFit(point, rawOverlayRect, viewport, position) {
    // Round the overlay rect when comparing against the
    // viewport, because the viewport is always rounded.
    const overlay = getRoundedBoundingClientRect(rawOverlayRect);
    let {
      x,
      y
    } = point;
    let offsetX = this._getOffset(position, 'x');
    let offsetY = this._getOffset(position, 'y');
    // Account for the offsets since they could push the overlay out of the viewport.
    if (offsetX) {
      x += offsetX;
    }
    if (offsetY) {
      y += offsetY;
    }
    // How much the overlay would overflow at this position, on each side.
    let leftOverflow = 0 - x;
    let rightOverflow = x + overlay.width - viewport.width;
    let topOverflow = 0 - y;
    let bottomOverflow = y + overlay.height - viewport.height;
    // Visible parts of the element on each axis.
    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);
    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);
    let visibleArea = visibleWidth * visibleHeight;
    return {
      visibleArea,
      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,
      fitsInViewportVertically: visibleHeight === overlay.height,
      fitsInViewportHorizontally: visibleWidth == overlay.width
    };
  }
  /**
   * Whether the overlay can fit within the viewport when it may resize either its width or height.
   * @param fit How well the overlay fits in the viewport at some position.
   * @param point The (x, y) coordinates of the overlay at some position.
   * @param viewport The geometry of the viewport.
   */
  _canFitWithFlexibleDimensions(fit, point, viewport) {
    if (this._hasFlexibleDimensions) {
      const availableHeight = viewport.bottom - point.y;
      const availableWidth = viewport.right - point.x;
      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);
      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);
      const verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;
      const horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;
      return verticalFit && horizontalFit;
    }
    return false;
  }
  /**
   * Gets the point at which the overlay can be "pushed" on-screen. If the overlay is larger than
   * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the
   * right and bottom).
   *
   * @param start Starting point from which the overlay is pushed.
   * @param rawOverlayRect Dimensions of the overlay.
   * @param scrollPosition Current viewport scroll position.
   * @returns The point at which to position the overlay after pushing. This is effectively a new
   *     originPoint.
   */
  _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {
    // If the position is locked and we've pushed the overlay already, reuse the previous push
    // amount, rather than pushing it again. If we were to continue pushing, the element would
    // remain in the viewport, which goes against the expectations when position locking is enabled.
    if (this._previousPushAmount && this._positionLocked) {
      return {
        x: start.x + this._previousPushAmount.x,
        y: start.y + this._previousPushAmount.y
      };
    }
    // Round the overlay rect when comparing against the
    // viewport, because the viewport is always rounded.
    const overlay = getRoundedBoundingClientRect(rawOverlayRect);
    const viewport = this._viewportRect;
    // Determine how much the overlay goes outside the viewport on each
    // side, which we'll use to decide which direction to push it.
    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);
    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);
    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);
    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);
    // Amount by which to push the overlay in each axis such that it remains on-screen.
    let pushX = 0;
    let pushY = 0;
    // If the overlay fits completely within the bounds of the viewport, push it from whichever
    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the
    // viewport and allow for the trailing end of the overlay to go out of bounds.
    if (overlay.width <= viewport.width) {
      pushX = overflowLeft || -overflowRight;
    } else {
      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;
    }
    if (overlay.height <= viewport.height) {
      pushY = overflowTop || -overflowBottom;
    } else {
      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;
    }
    this._previousPushAmount = {
      x: pushX,
      y: pushY
    };
    return {
      x: start.x + pushX,
      y: start.y + pushY
    };
  }
  /**
   * Applies a computed position to the overlay and emits a position change.
   * @param position The position preference
   * @param originPoint The point on the origin element where the overlay is connected.
   */
  _applyPosition(position, originPoint) {
    this._setTransformOrigin(position);
    this._setOverlayElementStyles(originPoint, position);
    this._setBoundingBoxStyles(originPoint, position);
    if (position.panelClass) {
      this._addPanelClasses(position.panelClass);
    }
    // Save the last connected position in case the position needs to be re-calculated.
    this._lastPosition = position;
    // Notify that the position has been changed along with its change properties.
    // We only emit if we've got any subscriptions, because the scroll visibility
    // calculations can be somewhat expensive.
    if (this._positionChanges.observers.length) {
      const scrollableViewProperties = this._getScrollVisibility();
      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);
      this._positionChanges.next(changeEvent);
    }
    this._isInitialRender = false;
  }
  /** Sets the transform origin based on the configured selector and the passed-in position.  */
  _setTransformOrigin(position) {
    if (!this._transformOriginSelector) {
      return;
    }
    const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);
    let xOrigin;
    let yOrigin = position.overlayY;
    if (position.overlayX === 'center') {
      xOrigin = 'center';
    } else if (this._isRtl()) {
      xOrigin = position.overlayX === 'start' ? 'right' : 'left';
    } else {
      xOrigin = position.overlayX === 'start' ? 'left' : 'right';
    }
    for (let i = 0; i < elements.length; i++) {
      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;
    }
  }
  /**
   * Gets the position and size of the overlay's sizing container.
   *
   * This method does no measuring and applies no styles so that we can cheaply compute the
   * bounds for all positions and choose the best fit based on these results.
   */
  _calculateBoundingBoxRect(origin, position) {
    const viewport = this._viewportRect;
    const isRtl = this._isRtl();
    let height, top, bottom;
    if (position.overlayY === 'top') {
      // Overlay is opening "downward" and thus is bound by the bottom viewport edge.
      top = origin.y;
      height = viewport.height - top + this._viewportMargin;
    } else if (position.overlayY === 'bottom') {
      // Overlay is opening "upward" and thus is bound by the top viewport edge. We need to add
      // the viewport margin back in, because the viewport rect is narrowed down to remove the
      // margin, whereas the `origin` position is calculated based on its `ClientRect`.
      bottom = viewport.height - origin.y + this._viewportMargin * 2;
      height = viewport.height - bottom + this._viewportMargin;
    } else {
      // If neither top nor bottom, it means that the overlay is vertically centered on the
      // origin point. Note that we want the position relative to the viewport, rather than
      // the page, which is why we don't use something like `viewport.bottom - origin.y` and
      // `origin.y - viewport.top`.
      const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);
      const previousHeight = this._lastBoundingBoxSize.height;
      height = smallestDistanceToViewportEdge * 2;
      top = origin.y - smallestDistanceToViewportEdge;
      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {
        top = origin.y - previousHeight / 2;
      }
    }
    // The overlay is opening 'right-ward' (the content flows to the right).
    const isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl;
    // The overlay is opening 'left-ward' (the content flows to the left).
    const isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;
    let width, left, right;
    if (isBoundedByLeftViewportEdge) {
      right = viewport.width - origin.x + this._viewportMargin;
      width = origin.x - this._viewportMargin;
    } else if (isBoundedByRightViewportEdge) {
      left = origin.x;
      width = viewport.right - origin.x;
    } else {
      // If neither start nor end, it means that the overlay is horizontally centered on the
      // origin point. Note that we want the position relative to the viewport, rather than
      // the page, which is why we don't use something like `viewport.right - origin.x` and
      // `origin.x - viewport.left`.
      const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);
      const previousWidth = this._lastBoundingBoxSize.width;
      width = smallestDistanceToViewportEdge * 2;
      left = origin.x - smallestDistanceToViewportEdge;
      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {
        left = origin.x - previousWidth / 2;
      }
    }
    return {
      top: top,
      left: left,
      bottom: bottom,
      right: right,
      width,
      height
    };
  }
  /**
   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the
   * origin's connection point and stretches to the bounds of the viewport.
   *
   * @param origin The point on the origin element where the overlay is connected.
   * @param position The position preference
   */
  _setBoundingBoxStyles(origin, position) {
    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);
    // It's weird if the overlay *grows* while scrolling, so we take the last size into account
    // when applying a new size.
    if (!this._isInitialRender && !this._growAfterOpen) {
      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);
      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);
    }
    const styles = {};
    if (this._hasExactPosition()) {
      styles.top = styles.left = '0';
      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';
      styles.width = styles.height = '100%';
    } else {
      const maxHeight = this._overlayRef.getConfig().maxHeight;
      const maxWidth = this._overlayRef.getConfig().maxWidth;
      styles.height = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(boundingBoxRect.height);
      styles.top = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(boundingBoxRect.top);
      styles.bottom = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(boundingBoxRect.bottom);
      styles.width = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(boundingBoxRect.width);
      styles.left = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(boundingBoxRect.left);
      styles.right = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(boundingBoxRect.right);
      // Push the pane content towards the proper direction.
      if (position.overlayX === 'center') {
        styles.alignItems = 'center';
      } else {
        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';
      }
      if (position.overlayY === 'center') {
        styles.justifyContent = 'center';
      } else {
        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';
      }
      if (maxHeight) {
        styles.maxHeight = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(maxHeight);
      }
      if (maxWidth) {
        styles.maxWidth = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(maxWidth);
      }
    }
    this._lastBoundingBoxSize = boundingBoxRect;
    extendStyles(this._boundingBox.style, styles);
  }
  /** Resets the styles for the bounding box so that a new positioning can be computed. */
  _resetBoundingBoxStyles() {
    extendStyles(this._boundingBox.style, {
      top: '0',
      left: '0',
      right: '0',
      bottom: '0',
      height: '',
      width: '',
      alignItems: '',
      justifyContent: ''
    });
  }
  /** Resets the styles for the overlay pane so that a new positioning can be computed. */
  _resetOverlayElementStyles() {
    extendStyles(this._pane.style, {
      top: '',
      left: '',
      bottom: '',
      right: '',
      position: '',
      transform: ''
    });
  }
  /** Sets positioning styles to the overlay element. */
  _setOverlayElementStyles(originPoint, position) {
    const styles = {};
    const hasExactPosition = this._hasExactPosition();
    const hasFlexibleDimensions = this._hasFlexibleDimensions;
    const config = this._overlayRef.getConfig();
    if (hasExactPosition) {
      const scrollPosition = this._viewportRuler.getViewportScrollPosition();
      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));
      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));
    } else {
      styles.position = 'static';
    }
    // Use a transform to apply the offsets. We do this because the `center` positions rely on
    // being in the normal flex flow and setting a `top` / `left` at all will completely throw
    // off the position. We also can't use margins, because they won't have an effect in some
    // cases where the element doesn't have anything to "push off of". Finally, this works
    // better both with flexible and non-flexible positioning.
    let transformString = '';
    let offsetX = this._getOffset(position, 'x');
    let offsetY = this._getOffset(position, 'y');
    if (offsetX) {
      transformString += `translateX(${offsetX}px) `;
    }
    if (offsetY) {
      transformString += `translateY(${offsetY}px)`;
    }
    styles.transform = transformString.trim();
    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because
    // we need these values to both be set to "100%" for the automatic flexible sizing to work.
    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.
    // Note that this doesn't apply when we have an exact position, in which case we do want to
    // apply them because they'll be cleared from the bounding box.
    if (config.maxHeight) {
      if (hasExactPosition) {
        styles.maxHeight = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(config.maxHeight);
      } else if (hasFlexibleDimensions) {
        styles.maxHeight = '';
      }
    }
    if (config.maxWidth) {
      if (hasExactPosition) {
        styles.maxWidth = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(config.maxWidth);
      } else if (hasFlexibleDimensions) {
        styles.maxWidth = '';
      }
    }
    extendStyles(this._pane.style, styles);
  }
  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */
  _getExactOverlayY(position, originPoint, scrollPosition) {
    // Reset any existing styles. This is necessary in case the
    // preferred position has changed since the last `apply`.
    let styles = {
      top: '',
      bottom: ''
    };
    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);
    if (this._isPushed) {
      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
    }
    // We want to set either `top` or `bottom` based on whether the overlay wants to appear
    // above or below the origin and the direction in which the element will expand.
    if (position.overlayY === 'bottom') {
      // When using `bottom`, we adjust the y position such that it is the distance
      // from the bottom of the viewport rather than the top.
      const documentHeight = this._document.documentElement.clientHeight;
      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;
    } else {
      styles.top = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(overlayPoint.y);
    }
    return styles;
  }
  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */
  _getExactOverlayX(position, originPoint, scrollPosition) {
    // Reset any existing styles. This is necessary in case the preferred position has
    // changed since the last `apply`.
    let styles = {
      left: '',
      right: ''
    };
    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);
    if (this._isPushed) {
      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
    }
    // We want to set either `left` or `right` based on whether the overlay wants to appear "before"
    // or "after" the origin, which determines the direction in which the element will expand.
    // For the horizontal axis, the meaning of "before" and "after" change based on whether the
    // page is in RTL or LTR.
    let horizontalStyleProperty;
    if (this._isRtl()) {
      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';
    } else {
      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';
    }
    // When we're setting `right`, we adjust the x position such that it is the distance
    // from the right edge of the viewport rather than the left edge.
    if (horizontalStyleProperty === 'right') {
      const documentWidth = this._document.documentElement.clientWidth;
      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;
    } else {
      styles.left = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceCssPixelValue)(overlayPoint.x);
    }
    return styles;
  }
  /**
   * Gets the view properties of the trigger and overlay, including whether they are clipped
   * or completely outside the view of any of the strategy's scrollables.
   */
  _getScrollVisibility() {
    // Note: needs fresh rects since the position could've changed.
    const originBounds = this._getOriginRect();
    const overlayBounds = this._pane.getBoundingClientRect();
    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers
    // every time, we should be able to use the scrollTop of the containers if the size of those
    // containers hasn't changed.
    const scrollContainerBounds = this._scrollables.map(scrollable => {
      return scrollable.getElementRef().nativeElement.getBoundingClientRect();
    });
    return {
      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),
      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),
      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),
      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)
    };
  }
  /** Subtracts the amount that an element is overflowing on an axis from its length. */
  _subtractOverflows(length, ...overflows) {
    return overflows.reduce((currentValue, currentOverflow) => {
      return currentValue - Math.max(currentOverflow, 0);
    }, length);
  }
  /** Narrows the given viewport rect by the current _viewportMargin. */
  _getNarrowedViewportRect() {
    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,
    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference
    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`
    // and `innerHeight` that do. This is necessary, because the overlay container uses
    // 100% `width` and `height` which don't include the scrollbar either.
    const width = this._document.documentElement.clientWidth;
    const height = this._document.documentElement.clientHeight;
    const scrollPosition = this._viewportRuler.getViewportScrollPosition();
    return {
      top: scrollPosition.top + this._viewportMargin,
      left: scrollPosition.left + this._viewportMargin,
      right: scrollPosition.left + width - this._viewportMargin,
      bottom: scrollPosition.top + height - this._viewportMargin,
      width: width - 2 * this._viewportMargin,
      height: height - 2 * this._viewportMargin
    };
  }
  /** Whether the we're dealing with an RTL context */
  _isRtl() {
    return this._overlayRef.getDirection() === 'rtl';
  }
  /** Determines whether the overlay uses exact or flexible positioning. */
  _hasExactPosition() {
    return !this._hasFlexibleDimensions || this._isPushed;
  }
  /** Retrieves the offset of a position along the x or y axis. */
  _getOffset(position, axis) {
    if (axis === 'x') {
      // We don't do something like `position['offset' + axis]` in
      // order to avoid breaking minifiers that rename properties.
      return position.offsetX == null ? this._offsetX : position.offsetX;
    }
    return position.offsetY == null ? this._offsetY : position.offsetY;
  }
  /** Validates that the current position match the expected values. */
  _validatePositions() {
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      if (!this._preferredPositions.length) {
        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');
      }
      // TODO(crisbeto): remove these once Angular's template type
      // checking is advanced enough to catch these cases.
      this._preferredPositions.forEach(pair => {
        validateHorizontalPosition('originX', pair.originX);
        validateVerticalPosition('originY', pair.originY);
        validateHorizontalPosition('overlayX', pair.overlayX);
        validateVerticalPosition('overlayY', pair.overlayY);
      });
    }
  }
  /** Adds a single CSS class or an array of classes on the overlay panel. */
  _addPanelClasses(cssClasses) {
    if (this._pane) {
      (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceArray)(cssClasses).forEach(cssClass => {
        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {
          this._appliedPanelClasses.push(cssClass);
          this._pane.classList.add(cssClass);
        }
      });
    }
  }
  /** Clears the classes that the position strategy has applied from the overlay panel. */
  _clearPanelClasses() {
    if (this._pane) {
      this._appliedPanelClasses.forEach(cssClass => {
        this._pane.classList.remove(cssClass);
      });
      this._appliedPanelClasses = [];
    }
  }
  /** Returns the ClientRect of the current origin. */
  _getOriginRect() {
    const origin = this._origin;
    if (origin instanceof _angular_core__WEBPACK_IMPORTED_MODULE_3__.ElementRef) {
      return origin.nativeElement.getBoundingClientRect();
    }
    // Check for Element so SVG elements are also supported.
    if (origin instanceof Element) {
      return origin.getBoundingClientRect();
    }
    const width = origin.width || 0;
    const height = origin.height || 0;
    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.
    return {
      top: origin.y,
      bottom: origin.y + height,
      left: origin.x,
      right: origin.x + width,
      height,
      width
    };
  }
}
/** Shallow-extends a stylesheet object with another stylesheet object. */
function extendStyles(destination, source) {
  for (let key in source) {
    if (source.hasOwnProperty(key)) {
      destination[key] = source[key];
    }
  }
  return destination;
}
/**
 * Extracts the pixel value as a number from a value, if it's a number
 * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.
 */
function getPixelValue(input) {
  if (typeof input !== 'number' && input != null) {
    const [value, units] = input.split(cssUnitPattern);
    return !units || units === 'px' ? parseFloat(value) : null;
  }
  return input || null;
}
/**
 * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to
 * the nearest pixel. This allows us to account for the cases where there may be sub-pixel
 * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage
 * size, see #21350).
 */
function getRoundedBoundingClientRect(clientRect) {
  return {
    top: Math.floor(clientRect.top),
    right: Math.floor(clientRect.right),
    bottom: Math.floor(clientRect.bottom),
    left: Math.floor(clientRect.left),
    width: Math.floor(clientRect.width),
    height: Math.floor(clientRect.height)
  };
}
const STANDARD_DROPDOWN_BELOW_POSITIONS = [{
  originX: 'start',
  originY: 'bottom',
  overlayX: 'start',
  overlayY: 'top'
}, {
  originX: 'start',
  originY: 'top',
  overlayX: 'start',
  overlayY: 'bottom'
}, {
  originX: 'end',
  originY: 'bottom',
  overlayX: 'end',
  overlayY: 'top'
}, {
  originX: 'end',
  originY: 'top',
  overlayX: 'end',
  overlayY: 'bottom'
}];
const STANDARD_DROPDOWN_ADJACENT_POSITIONS = [{
  originX: 'end',
  originY: 'top',
  overlayX: 'start',
  overlayY: 'top'
}, {
  originX: 'end',
  originY: 'bottom',
  overlayX: 'start',
  overlayY: 'bottom'
}, {
  originX: 'start',
  originY: 'top',
  overlayX: 'end',
  overlayY: 'top'
}, {
  originX: 'start',
  originY: 'bottom',
  overlayX: 'end',
  overlayY: 'bottom'
}];

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Class to be added to the overlay pane wrapper. */
const wrapperClass = 'cdk-global-overlay-wrapper';
/**
 * A strategy for positioning overlays. Using this strategy, an overlay is given an
 * explicit position relative to the browser's viewport. We use flexbox, instead of
 * transforms, in order to avoid issues with subpixel rendering which can cause the
 * element to become blurry.
 */
class GlobalPositionStrategy {
  constructor() {
    this._cssPosition = 'static';
    this._topOffset = '';
    this._bottomOffset = '';
    this._alignItems = '';
    this._xPosition = '';
    this._xOffset = '';
    this._width = '';
    this._height = '';
    this._isDisposed = false;
  }
  attach(overlayRef) {
    const config = overlayRef.getConfig();
    this._overlayRef = overlayRef;
    if (this._width && !config.width) {
      overlayRef.updateSize({
        width: this._width
      });
    }
    if (this._height && !config.height) {
      overlayRef.updateSize({
        height: this._height
      });
    }
    overlayRef.hostElement.classList.add(wrapperClass);
    this._isDisposed = false;
  }
  /**
   * Sets the top position of the overlay. Clears any previously set vertical position.
   * @param value New top offset.
   */
  top(value = '') {
    this._bottomOffset = '';
    this._topOffset = value;
    this._alignItems = 'flex-start';
    return this;
  }
  /**
   * Sets the left position of the overlay. Clears any previously set horizontal position.
   * @param value New left offset.
   */
  left(value = '') {
    this._xOffset = value;
    this._xPosition = 'left';
    return this;
  }
  /**
   * Sets the bottom position of the overlay. Clears any previously set vertical position.
   * @param value New bottom offset.
   */
  bottom(value = '') {
    this._topOffset = '';
    this._bottomOffset = value;
    this._alignItems = 'flex-end';
    return this;
  }
  /**
   * Sets the right position of the overlay. Clears any previously set horizontal position.
   * @param value New right offset.
   */
  right(value = '') {
    this._xOffset = value;
    this._xPosition = 'right';
    return this;
  }
  /**
   * Sets the overlay to the start of the viewport, depending on the overlay direction.
   * This will be to the left in LTR layouts and to the right in RTL.
   * @param offset Offset from the edge of the screen.
   */
  start(value = '') {
    this._xOffset = value;
    this._xPosition = 'start';
    return this;
  }
  /**
   * Sets the overlay to the end of the viewport, depending on the overlay direction.
   * This will be to the right in LTR layouts and to the left in RTL.
   * @param offset Offset from the edge of the screen.
   */
  end(value = '') {
    this._xOffset = value;
    this._xPosition = 'end';
    return this;
  }
  /**
   * Sets the overlay width and clears any previously set width.
   * @param value New width for the overlay
   * @deprecated Pass the `width` through the `OverlayConfig`.
   * @breaking-change 8.0.0
   */
  width(value = '') {
    if (this._overlayRef) {
      this._overlayRef.updateSize({
        width: value
      });
    } else {
      this._width = value;
    }
    return this;
  }
  /**
   * Sets the overlay height and clears any previously set height.
   * @param value New height for the overlay
   * @deprecated Pass the `height` through the `OverlayConfig`.
   * @breaking-change 8.0.0
   */
  height(value = '') {
    if (this._overlayRef) {
      this._overlayRef.updateSize({
        height: value
      });
    } else {
      this._height = value;
    }
    return this;
  }
  /**
   * Centers the overlay horizontally with an optional offset.
   * Clears any previously set horizontal position.
   *
   * @param offset Overlay offset from the horizontal center.
   */
  centerHorizontally(offset = '') {
    this.left(offset);
    this._xPosition = 'center';
    return this;
  }
  /**
   * Centers the overlay vertically with an optional offset.
   * Clears any previously set vertical position.
   *
   * @param offset Overlay offset from the vertical center.
   */
  centerVertically(offset = '') {
    this.top(offset);
    this._alignItems = 'center';
    return this;
  }
  /**
   * Apply the position to the element.
   * @docs-private
   */
  apply() {
    // Since the overlay ref applies the strategy asynchronously, it could
    // have been disposed before it ends up being applied. If that is the
    // case, we shouldn't do anything.
    if (!this._overlayRef || !this._overlayRef.hasAttached()) {
      return;
    }
    const styles = this._overlayRef.overlayElement.style;
    const parentStyles = this._overlayRef.hostElement.style;
    const config = this._overlayRef.getConfig();
    const {
      width,
      height,
      maxWidth,
      maxHeight
    } = config;
    const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') && (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');
    const shouldBeFlushVertically = (height === '100%' || height === '100vh') && (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');
    const xPosition = this._xPosition;
    const xOffset = this._xOffset;
    const isRtl = this._overlayRef.getConfig().direction === 'rtl';
    let marginLeft = '';
    let marginRight = '';
    let justifyContent = '';
    if (shouldBeFlushHorizontally) {
      justifyContent = 'flex-start';
    } else if (xPosition === 'center') {
      justifyContent = 'center';
      if (isRtl) {
        marginRight = xOffset;
      } else {
        marginLeft = xOffset;
      }
    } else if (isRtl) {
      if (xPosition === 'left' || xPosition === 'end') {
        justifyContent = 'flex-end';
        marginLeft = xOffset;
      } else if (xPosition === 'right' || xPosition === 'start') {
        justifyContent = 'flex-start';
        marginRight = xOffset;
      }
    } else if (xPosition === 'left' || xPosition === 'start') {
      justifyContent = 'flex-start';
      marginLeft = xOffset;
    } else if (xPosition === 'right' || xPosition === 'end') {
      justifyContent = 'flex-end';
      marginRight = xOffset;
    }
    styles.position = this._cssPosition;
    styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;
    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;
    styles.marginBottom = this._bottomOffset;
    styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;
    parentStyles.justifyContent = justifyContent;
    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;
  }
  /**
   * Cleans up the DOM changes from the position strategy.
   * @docs-private
   */
  dispose() {
    if (this._isDisposed || !this._overlayRef) {
      return;
    }
    const styles = this._overlayRef.overlayElement.style;
    const parent = this._overlayRef.hostElement;
    const parentStyles = parent.style;
    parent.classList.remove(wrapperClass);
    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';
    this._overlayRef = null;
    this._isDisposed = true;
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Builder for overlay position strategy. */
class OverlayPositionBuilder {
  constructor(_viewportRuler, _document, _platform, _overlayContainer) {
    this._viewportRuler = _viewportRuler;
    this._document = _document;
    this._platform = _platform;
    this._overlayContainer = _overlayContainer;
  }
  /**
   * Creates a global position strategy.
   */
  global() {
    return new GlobalPositionStrategy();
  }
  /**
   * Creates a flexible position strategy.
   * @param origin Origin relative to which to position the overlay.
   */
  flexibleConnectedTo(origin) {
    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);
  }
}
OverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {
  return new (t || OverlayPositionBuilder)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](OverlayContainer));
};
OverlayPositionBuilder.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
  token: OverlayPositionBuilder,
  factory: OverlayPositionBuilder.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](OverlayPositionBuilder, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ViewportRuler
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT]
      }]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform
    }, {
      type: OverlayContainer
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Next overlay unique ID. */
let nextUniqueId = 0;
// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver
// which needs to be different depending on where OverlayModule is imported.
/**
 * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be
 * used as a low-level building block for other components. Dialogs, tooltips, menus,
 * selects, etc. can all be built using overlays. The service should primarily be used by authors
 * of re-usable components rather than developers building end-user applications.
 *
 * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.
 */
class Overlay {
  constructor( /** Scrolling strategies that can be used when creating an overlay. */
  scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {
    this.scrollStrategies = scrollStrategies;
    this._overlayContainer = _overlayContainer;
    this._componentFactoryResolver = _componentFactoryResolver;
    this._positionBuilder = _positionBuilder;
    this._keyboardDispatcher = _keyboardDispatcher;
    this._injector = _injector;
    this._ngZone = _ngZone;
    this._document = _document;
    this._directionality = _directionality;
    this._location = _location;
    this._outsideClickDispatcher = _outsideClickDispatcher;
    this._animationsModuleType = _animationsModuleType;
  }
  /**
   * Creates an overlay.
   * @param config Configuration applied to the overlay.
   * @returns Reference to the created overlay.
   */
  create(config) {
    const host = this._createHostElement();
    const pane = this._createPaneElement(host);
    const portalOutlet = this._createPortalOutlet(pane);
    const overlayConfig = new OverlayConfig(config);
    overlayConfig.direction = overlayConfig.direction || this._directionality.value;
    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');
  }
  /**
   * Gets a position builder that can be used, via fluent API,
   * to construct and configure a position strategy.
   * @returns An overlay position builder.
   */
  position() {
    return this._positionBuilder;
  }
  /**
   * Creates the DOM element for an overlay and appends it to the overlay container.
   * @returns Newly-created pane element
   */
  _createPaneElement(host) {
    const pane = this._document.createElement('div');
    pane.id = `cdk-overlay-${nextUniqueId++}`;
    pane.classList.add('cdk-overlay-pane');
    host.appendChild(pane);
    return pane;
  }
  /**
   * Creates the host element that wraps around an overlay
   * and can be used for advanced positioning.
   * @returns Newly-create host element.
   */
  _createHostElement() {
    const host = this._document.createElement('div');
    this._overlayContainer.getContainerElement().appendChild(host);
    return host;
  }
  /**
   * Create a DomPortalOutlet into which the overlay content can be loaded.
   * @param pane The DOM element to turn into a portal outlet.
   * @returns A portal outlet for the given DOM element.
   */
  _createPortalOutlet(pane) {
    // We have to resolve the ApplicationRef later in order to allow people
    // to use overlay-based providers during app initialization.
    if (!this._appRef) {
      this._appRef = this._injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_3__.ApplicationRef);
    }
    return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_10__.DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);
  }
}
Overlay.ɵfac = function Overlay_Factory(t) {
  return new (t || Overlay)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](ScrollStrategyOptions), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](OverlayContainer), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__.ComponentFactoryResolver), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](OverlayPositionBuilder), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](OverlayKeyboardDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.Directionality), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__.Location), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](OverlayOutsideClickDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__.ANIMATION_MODULE_TYPE, 8));
};
Overlay.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
  token: Overlay,
  factory: Overlay.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](Overlay, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: ScrollStrategyOptions
    }, {
      type: OverlayContainer
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.ComponentFactoryResolver
    }, {
      type: OverlayPositionBuilder
    }, {
      type: OverlayKeyboardDispatcher
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Injector
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT]
      }]
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.Directionality
    }, {
      type: _angular_common__WEBPACK_IMPORTED_MODULE_4__.Location
    }, {
      type: OverlayOutsideClickDispatcher
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_3__.ANIMATION_MODULE_TYPE]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Optional
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Default set of positions for the overlay. Follows the behavior of a dropdown. */
const defaultPositionList = [{
  originX: 'start',
  originY: 'bottom',
  overlayX: 'start',
  overlayY: 'top'
}, {
  originX: 'start',
  originY: 'top',
  overlayX: 'start',
  overlayY: 'bottom'
}, {
  originX: 'end',
  originY: 'top',
  overlayX: 'end',
  overlayY: 'bottom'
}, {
  originX: 'end',
  originY: 'bottom',
  overlayX: 'end',
  overlayY: 'top'
}];
/** Injection token that determines the scroll handling while the connected overlay is open. */
const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.InjectionToken('cdk-connected-overlay-scroll-strategy');
/**
 * Directive applied to an element to make it usable as an origin for an Overlay using a
 * ConnectedPositionStrategy.
 */
class CdkOverlayOrigin {
  constructor( /** Reference to the element on which the directive is applied. */
  elementRef) {
    this.elementRef = elementRef;
  }
}
CdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {
  return new (t || CdkOverlayOrigin)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__.ElementRef));
};
CdkOverlayOrigin.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
  type: CdkOverlayOrigin,
  selectors: [["", "cdk-overlay-origin", ""], ["", "overlay-origin", ""], ["", "cdkOverlayOrigin", ""]],
  exportAs: ["cdkOverlayOrigin"],
  standalone: true
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkOverlayOrigin, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Directive,
    args: [{
      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',
      exportAs: 'cdkOverlayOrigin',
      standalone: true
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.ElementRef
    }];
  }, null);
})();
/**
 * Directive to facilitate declarative creation of an
 * Overlay using a FlexibleConnectedPositionStrategy.
 */
class CdkConnectedOverlay {
  /** The offset in pixels for the overlay connection point on the x-axis */
  get offsetX() {
    return this._offsetX;
  }
  set offsetX(offsetX) {
    this._offsetX = offsetX;
    if (this._position) {
      this._updatePositionStrategy(this._position);
    }
  }
  /** The offset in pixels for the overlay connection point on the y-axis */
  get offsetY() {
    return this._offsetY;
  }
  set offsetY(offsetY) {
    this._offsetY = offsetY;
    if (this._position) {
      this._updatePositionStrategy(this._position);
    }
  }
  /** Whether or not the overlay should attach a backdrop. */
  get hasBackdrop() {
    return this._hasBackdrop;
  }
  set hasBackdrop(value) {
    this._hasBackdrop = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(value);
  }
  /** Whether or not the overlay should be locked when scrolling. */
  get lockPosition() {
    return this._lockPosition;
  }
  set lockPosition(value) {
    this._lockPosition = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(value);
  }
  /** Whether the overlay's width and height can be constrained to fit within the viewport. */
  get flexibleDimensions() {
    return this._flexibleDimensions;
  }
  set flexibleDimensions(value) {
    this._flexibleDimensions = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(value);
  }
  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */
  get growAfterOpen() {
    return this._growAfterOpen;
  }
  set growAfterOpen(value) {
    this._growAfterOpen = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(value);
  }
  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */
  get push() {
    return this._push;
  }
  set push(value) {
    this._push = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(value);
  }
  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.
  constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {
    this._overlay = _overlay;
    this._dir = _dir;
    this._hasBackdrop = false;
    this._lockPosition = false;
    this._growAfterOpen = false;
    this._flexibleDimensions = false;
    this._push = false;
    this._backdropSubscription = rxjs__WEBPACK_IMPORTED_MODULE_6__.Subscription.EMPTY;
    this._attachSubscription = rxjs__WEBPACK_IMPORTED_MODULE_6__.Subscription.EMPTY;
    this._detachSubscription = rxjs__WEBPACK_IMPORTED_MODULE_6__.Subscription.EMPTY;
    this._positionSubscription = rxjs__WEBPACK_IMPORTED_MODULE_6__.Subscription.EMPTY;
    /** Margin between the overlay and the viewport edges. */
    this.viewportMargin = 0;
    /** Whether the overlay is open. */
    this.open = false;
    /** Whether the overlay can be closed by user interaction. */
    this.disableClose = false;
    /** Event emitted when the backdrop is clicked. */
    this.backdropClick = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    /** Event emitted when the position has changed. */
    this.positionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    /** Event emitted when the overlay has been attached. */
    this.attach = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    /** Event emitted when the overlay has been detached. */
    this.detach = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    /** Emits when there are keyboard events that are targeted at the overlay. */
    this.overlayKeydown = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    /** Emits when there are mouse outside click events that are targeted at the overlay. */
    this.overlayOutsideClick = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this._templatePortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_10__.TemplatePortal(templateRef, viewContainerRef);
    this._scrollStrategyFactory = scrollStrategyFactory;
    this.scrollStrategy = this._scrollStrategyFactory();
  }
  /** The associated overlay reference. */
  get overlayRef() {
    return this._overlayRef;
  }
  /** The element's layout direction. */
  get dir() {
    return this._dir ? this._dir.value : 'ltr';
  }
  ngOnDestroy() {
    this._attachSubscription.unsubscribe();
    this._detachSubscription.unsubscribe();
    this._backdropSubscription.unsubscribe();
    this._positionSubscription.unsubscribe();
    if (this._overlayRef) {
      this._overlayRef.dispose();
    }
  }
  ngOnChanges(changes) {
    if (this._position) {
      this._updatePositionStrategy(this._position);
      this._overlayRef.updateSize({
        width: this.width,
        minWidth: this.minWidth,
        height: this.height,
        minHeight: this.minHeight
      });
      if (changes['origin'] && this.open) {
        this._position.apply();
      }
    }
    if (changes['open']) {
      this.open ? this._attachOverlay() : this._detachOverlay();
    }
  }
  /** Creates an overlay */
  _createOverlay() {
    if (!this.positions || !this.positions.length) {
      this.positions = defaultPositionList;
    }
    const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());
    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());
    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());
    overlayRef.keydownEvents().subscribe(event => {
      this.overlayKeydown.next(event);
      if (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.ESCAPE && !this.disableClose && !(0,_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_12__.hasModifierKey)(event)) {
        event.preventDefault();
        this._detachOverlay();
      }
    });
    this._overlayRef.outsidePointerEvents().subscribe(event => {
      this.overlayOutsideClick.next(event);
    });
  }
  /** Builds the overlay config based on the directive's inputs */
  _buildConfig() {
    const positionStrategy = this._position = this.positionStrategy || this._createPositionStrategy();
    const overlayConfig = new OverlayConfig({
      direction: this._dir,
      positionStrategy,
      scrollStrategy: this.scrollStrategy,
      hasBackdrop: this.hasBackdrop
    });
    if (this.width || this.width === 0) {
      overlayConfig.width = this.width;
    }
    if (this.height || this.height === 0) {
      overlayConfig.height = this.height;
    }
    if (this.minWidth || this.minWidth === 0) {
      overlayConfig.minWidth = this.minWidth;
    }
    if (this.minHeight || this.minHeight === 0) {
      overlayConfig.minHeight = this.minHeight;
    }
    if (this.backdropClass) {
      overlayConfig.backdropClass = this.backdropClass;
    }
    if (this.panelClass) {
      overlayConfig.panelClass = this.panelClass;
    }
    return overlayConfig;
  }
  /** Updates the state of a position strategy, based on the values of the directive inputs. */
  _updatePositionStrategy(positionStrategy) {
    const positions = this.positions.map(currentPosition => ({
      originX: currentPosition.originX,
      originY: currentPosition.originY,
      overlayX: currentPosition.overlayX,
      overlayY: currentPosition.overlayY,
      offsetX: currentPosition.offsetX || this.offsetX,
      offsetY: currentPosition.offsetY || this.offsetY,
      panelClass: currentPosition.panelClass || undefined
    }));
    return positionStrategy.setOrigin(this._getFlexibleConnectedPositionStrategyOrigin()).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition).withTransformOriginOn(this.transformOriginSelector);
  }
  /** Returns the position strategy of the overlay to be set on the overlay config */
  _createPositionStrategy() {
    const strategy = this._overlay.position().flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());
    this._updatePositionStrategy(strategy);
    return strategy;
  }
  _getFlexibleConnectedPositionStrategyOrigin() {
    if (this.origin instanceof CdkOverlayOrigin) {
      return this.origin.elementRef;
    } else {
      return this.origin;
    }
  }
  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */
  _attachOverlay() {
    if (!this._overlayRef) {
      this._createOverlay();
    } else {
      // Update the overlay size, in case the directive's inputs have changed
      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;
    }
    if (!this._overlayRef.hasAttached()) {
      this._overlayRef.attach(this._templatePortal);
    }
    if (this.hasBackdrop) {
      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {
        this.backdropClick.emit(event);
      });
    } else {
      this._backdropSubscription.unsubscribe();
    }
    this._positionSubscription.unsubscribe();
    // Only subscribe to `positionChanges` if requested, because putting
    // together all the information for it can be expensive.
    if (this.positionChange.observers.length > 0) {
      this._positionSubscription = this._position.positionChanges.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.takeWhile)(() => this.positionChange.observers.length > 0)).subscribe(position => {
        this.positionChange.emit(position);
        if (this.positionChange.observers.length === 0) {
          this._positionSubscription.unsubscribe();
        }
      });
    }
  }
  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */
  _detachOverlay() {
    if (this._overlayRef) {
      this._overlayRef.detach();
    }
    this._backdropSubscription.unsubscribe();
    this._positionSubscription.unsubscribe();
  }
}
CdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {
  return new (t || CdkConnectedOverlay)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](Overlay), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_3__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.Directionality, 8));
};
CdkConnectedOverlay.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineDirective"]({
  type: CdkConnectedOverlay,
  selectors: [["", "cdk-connected-overlay", ""], ["", "connected-overlay", ""], ["", "cdkConnectedOverlay", ""]],
  inputs: {
    origin: ["cdkConnectedOverlayOrigin", "origin"],
    positions: ["cdkConnectedOverlayPositions", "positions"],
    positionStrategy: ["cdkConnectedOverlayPositionStrategy", "positionStrategy"],
    offsetX: ["cdkConnectedOverlayOffsetX", "offsetX"],
    offsetY: ["cdkConnectedOverlayOffsetY", "offsetY"],
    width: ["cdkConnectedOverlayWidth", "width"],
    height: ["cdkConnectedOverlayHeight", "height"],
    minWidth: ["cdkConnectedOverlayMinWidth", "minWidth"],
    minHeight: ["cdkConnectedOverlayMinHeight", "minHeight"],
    backdropClass: ["cdkConnectedOverlayBackdropClass", "backdropClass"],
    panelClass: ["cdkConnectedOverlayPanelClass", "panelClass"],
    viewportMargin: ["cdkConnectedOverlayViewportMargin", "viewportMargin"],
    scrollStrategy: ["cdkConnectedOverlayScrollStrategy", "scrollStrategy"],
    open: ["cdkConnectedOverlayOpen", "open"],
    disableClose: ["cdkConnectedOverlayDisableClose", "disableClose"],
    transformOriginSelector: ["cdkConnectedOverlayTransformOriginOn", "transformOriginSelector"],
    hasBackdrop: ["cdkConnectedOverlayHasBackdrop", "hasBackdrop"],
    lockPosition: ["cdkConnectedOverlayLockPosition", "lockPosition"],
    flexibleDimensions: ["cdkConnectedOverlayFlexibleDimensions", "flexibleDimensions"],
    growAfterOpen: ["cdkConnectedOverlayGrowAfterOpen", "growAfterOpen"],
    push: ["cdkConnectedOverlayPush", "push"]
  },
  outputs: {
    backdropClick: "backdropClick",
    positionChange: "positionChange",
    attach: "attach",
    detach: "detach",
    overlayKeydown: "overlayKeydown",
    overlayOutsideClick: "overlayOutsideClick"
  },
  exportAs: ["cdkConnectedOverlay"],
  standalone: true,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](CdkConnectedOverlay, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Directive,
    args: [{
      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',
      exportAs: 'cdkConnectedOverlay',
      standalone: true
    }]
  }], function () {
    return [{
      type: Overlay
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.TemplateRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.ViewContainerRef
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject,
        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]
      }]
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.Directionality,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Optional
      }]
    }];
  }, {
    origin: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayOrigin']
    }],
    positions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayPositions']
    }],
    positionStrategy: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayPositionStrategy']
    }],
    offsetX: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayOffsetX']
    }],
    offsetY: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayOffsetY']
    }],
    width: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayWidth']
    }],
    height: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayHeight']
    }],
    minWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayMinWidth']
    }],
    minHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayMinHeight']
    }],
    backdropClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayBackdropClass']
    }],
    panelClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayPanelClass']
    }],
    viewportMargin: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayViewportMargin']
    }],
    scrollStrategy: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayScrollStrategy']
    }],
    open: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayOpen']
    }],
    disableClose: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayDisableClose']
    }],
    transformOriginSelector: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayTransformOriginOn']
    }],
    hasBackdrop: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayHasBackdrop']
    }],
    lockPosition: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayLockPosition']
    }],
    flexibleDimensions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayFlexibleDimensions']
    }],
    growAfterOpen: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayGrowAfterOpen']
    }],
    push: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input,
      args: ['cdkConnectedOverlayPush']
    }],
    backdropClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
    }],
    positionChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
    }],
    attach: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
    }],
    detach: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
    }],
    overlayKeydown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
    }],
    overlayOutsideClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output
    }]
  });
})();
/** @docs-private */
function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
  return () => overlay.scrollStrategies.reposition();
}
/** @docs-private */
const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {
  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,
  deps: [Overlay],
  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY
};

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class OverlayModule {}
OverlayModule.ɵfac = function OverlayModule_Factory(t) {
  return new (t || OverlayModule)();
};
OverlayModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineNgModule"]({
  type: OverlayModule
});
OverlayModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjector"]({
  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],
  imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.BidiModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_10__.PortalModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollingModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollingModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](OverlayModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.NgModule,
    args: [{
      imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__.BidiModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_10__.PortalModule, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],
      exports: [CdkConnectedOverlay, CdkOverlayOrigin, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_0__.ScrollingModule],
      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]
    }]
  }], null, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Alternative to OverlayContainer that supports correct displaying of overlay elements in
 * Fullscreen mode
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen
 *
 * Should be provided in the root component.
 */
class FullscreenOverlayContainer extends OverlayContainer {
  constructor(_document, platform) {
    super(_document, platform);
  }
  ngOnDestroy() {
    super.ngOnDestroy();
    if (this._fullScreenEventName && this._fullScreenListener) {
      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);
    }
  }
  _createContainer() {
    super._createContainer();
    this._adjustParentForFullscreenChange();
    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());
  }
  _adjustParentForFullscreenChange() {
    if (!this._containerElement) {
      return;
    }
    const fullscreenElement = this.getFullscreenElement();
    const parent = fullscreenElement || this._document.body;
    parent.appendChild(this._containerElement);
  }
  _addFullscreenChangeListener(fn) {
    const eventName = this._getEventName();
    if (eventName) {
      if (this._fullScreenListener) {
        this._document.removeEventListener(eventName, this._fullScreenListener);
      }
      this._document.addEventListener(eventName, fn);
      this._fullScreenListener = fn;
    }
  }
  _getEventName() {
    if (!this._fullScreenEventName) {
      const _document = this._document;
      if (_document.fullscreenEnabled) {
        this._fullScreenEventName = 'fullscreenchange';
      } else if (_document.webkitFullscreenEnabled) {
        this._fullScreenEventName = 'webkitfullscreenchange';
      } else if (_document.mozFullScreenEnabled) {
        this._fullScreenEventName = 'mozfullscreenchange';
      } else if (_document.msFullscreenEnabled) {
        this._fullScreenEventName = 'MSFullscreenChange';
      }
    }
    return this._fullScreenEventName;
  }
  /**
   * When the page is put into fullscreen mode, a specific element is specified.
   * Only that element and its children are visible when in fullscreen mode.
   */
  getFullscreenElement() {
    const _document = this._document;
    return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;
  }
}
FullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {
  return new (t || FullscreenOverlayContainer)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform));
};
FullscreenOverlayContainer.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
  token: FullscreenOverlayContainer,
  factory: FullscreenOverlayContainer.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵsetClassMetadata"](FullscreenOverlayContainer, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.DOCUMENT]
      }]
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_1__.Platform
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 9107:
/*!*********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2020/platform.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Platform": () => (/* binding */ Platform),
/* harmony export */   "PlatformModule": () => (/* binding */ PlatformModule),
/* harmony export */   "_getEventTarget": () => (/* binding */ _getEventTarget),
/* harmony export */   "_getFocusedElementPierceShadowDom": () => (/* binding */ _getFocusedElementPierceShadowDom),
/* harmony export */   "_getShadowRoot": () => (/* binding */ _getShadowRoot),
/* harmony export */   "_isTestEnvironment": () => (/* binding */ _isTestEnvironment),
/* harmony export */   "_supportsShadowDom": () => (/* binding */ _supportsShadowDom),
/* harmony export */   "getRtlScrollAxisType": () => (/* binding */ getRtlScrollAxisType),
/* harmony export */   "getSupportedInputTypes": () => (/* binding */ getSupportedInputTypes),
/* harmony export */   "normalizePassiveListenerOptions": () => (/* binding */ normalizePassiveListenerOptions),
/* harmony export */   "supportsPassiveEventListeners": () => (/* binding */ supportsPassiveEventListeners),
/* harmony export */   "supportsScrollBehavior": () => (/* binding */ supportsScrollBehavior)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ 4666);




/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Whether the current platform supports the V8 Break Iterator. The V8 check
// is necessary to detect all Blink based browsers.
let hasV8BreakIterator;
// We need a try/catch around the reference to `Intl`, because accessing it in some cases can
// cause IE to throw. These cases are tied to particular versions of Windows and can happen if
// the consumer is providing a polyfilled `Map`. See:
// https://github.com/Microsoft/ChakraCore/issues/3189
// https://github.com/angular/components/issues/15687
try {
  hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;
} catch {
  hasV8BreakIterator = false;
}
/**
 * Service to detect the current platform by comparing the userAgent strings and
 * checking browser-specific global properties.
 */
class Platform {
  constructor(_platformId) {
    this._platformId = _platformId;
    // We want to use the Angular platform check because if the Document is shimmed
    // without the navigator, the following checks will fail. This is preferred because
    // sometimes the Document may be shimmed without the user's knowledge or intention
    /** Whether the Angular application is being rendered in the browser. */
    this.isBrowser = this._platformId ? (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__.isPlatformBrowser)(this._platformId) : typeof document === 'object' && !!document;
    /** Whether the current browser is Microsoft Edge. */
    this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);
    /** Whether the current rendering engine is Microsoft Trident. */
    this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);
    // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.
    /** Whether the current rendering engine is Blink. */
    this.BLINK = this.isBrowser && !!(window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT;
    // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to
    // ensure that Webkit runs standalone and is not used as another engine's base.
    /** Whether the current rendering engine is WebKit. */
    this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
    /** Whether the current platform is Apple iOS. */
    this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);
    // It's difficult to detect the plain Gecko engine, because most of the browsers identify
    // them self as Gecko-like browsers and modify the userAgent's according to that.
    // Since we only cover one explicit Firefox case, we can simply check for Firefox
    // instead of having an unstable check for Gecko.
    /** Whether the current browser is Firefox. */
    this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
    /** Whether the current platform is Android. */
    // Trident on mobile adds the android platform to the userAgent to trick detections.
    this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;
    // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake
    // this and just place the Safari keyword in the userAgent. To be more safe about Safari every
    // Safari browser should also use Webkit as its layout engine.
    /** Whether the current browser is Safari. */
    this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;
  }
}
Platform.ɵfac = function Platform_Factory(t) {
  return new (t || Platform)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_ID));
};
Platform.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: Platform,
  factory: Platform.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](Platform, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: Object,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_ID]
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class PlatformModule {}
PlatformModule.ɵfac = function PlatformModule_Factory(t) {
  return new (t || PlatformModule)();
};
PlatformModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
  type: PlatformModule
});
PlatformModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](PlatformModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
    args: [{}]
  }], null, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Cached result Set of input types support by the current browser. */
let supportedInputTypes;
/** Types of `<input>` that *might* be supported. */
const candidateInputTypes = [
// `color` must come first. Chrome 56 shows a warning if we change the type to `color` after
// first changing it to something else:
// The specified value "" does not conform to the required format.
// The format is "#rrggbb" where rr, gg, bb are two-digit hexadecimal numbers.
'color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];
/** @returns The input types supported by this browser. */
function getSupportedInputTypes() {
  // Result is cached.
  if (supportedInputTypes) {
    return supportedInputTypes;
  }
  // We can't check if an input type is not supported until we're on the browser, so say that
  // everything is supported when not on the browser. We don't use `Platform` here since it's
  // just a helper function and can't inject it.
  if (typeof document !== 'object' || !document) {
    supportedInputTypes = new Set(candidateInputTypes);
    return supportedInputTypes;
  }
  let featureTestInput = document.createElement('input');
  supportedInputTypes = new Set(candidateInputTypes.filter(value => {
    featureTestInput.setAttribute('type', value);
    return featureTestInput.type === value;
  }));
  return supportedInputTypes;
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Cached result of whether the user's browser supports passive event listeners. */
let supportsPassiveEvents;
/**
 * Checks whether the user's browser supports passive event listeners.
 * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
 */
function supportsPassiveEventListeners() {
  if (supportsPassiveEvents == null && typeof window !== 'undefined') {
    try {
      window.addEventListener('test', null, Object.defineProperty({}, 'passive', {
        get: () => supportsPassiveEvents = true
      }));
    } finally {
      supportsPassiveEvents = supportsPassiveEvents || false;
    }
  }
  return supportsPassiveEvents;
}
/**
 * Normalizes an `AddEventListener` object to something that can be passed
 * to `addEventListener` on any browser, no matter whether it supports the
 * `options` parameter.
 * @param options Object to be normalized.
 */
function normalizePassiveListenerOptions(options) {
  return supportsPassiveEventListeners() ? options : !!options.capture;
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */
let rtlScrollAxisType;
/** Cached result of the check that indicates whether the browser supports scroll behaviors. */
let scrollBehaviorSupported;
/** Check whether the browser supports scroll behaviors. */
function supportsScrollBehavior() {
  if (scrollBehaviorSupported == null) {
    // If we're not in the browser, it can't be supported. Also check for `Element`, because
    // some projects stub out the global `document` during SSR which can throw us off.
    if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {
      scrollBehaviorSupported = false;
      return scrollBehaviorSupported;
    }
    // If the element can have a `scrollBehavior` style, we can be sure that it's supported.
    if ('scrollBehavior' in document.documentElement.style) {
      scrollBehaviorSupported = true;
    } else {
      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's
      // supported but it doesn't handle scroll behavior, or it has been polyfilled.
      const scrollToFunction = Element.prototype.scrollTo;
      if (scrollToFunction) {
        // We can detect if the function has been polyfilled by calling `toString` on it. Native
        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get
        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider
        // polyfilled functions as supporting scroll behavior.
        scrollBehaviorSupported = !/\{\s*\[native code\]\s*\}/.test(scrollToFunction.toString());
      } else {
        scrollBehaviorSupported = false;
      }
    }
  }
  return scrollBehaviorSupported;
}
/**
 * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,
 * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.
 */
function getRtlScrollAxisType() {
  // We can't check unless we're on the browser. Just assume 'normal' if we're not.
  if (typeof document !== 'object' || !document) {
    return 0 /* RtlScrollAxisType.NORMAL */;
  }

  if (rtlScrollAxisType == null) {
    // Create a 1px wide scrolling container and a 2px wide content element.
    const scrollContainer = document.createElement('div');
    const containerStyle = scrollContainer.style;
    scrollContainer.dir = 'rtl';
    containerStyle.width = '1px';
    containerStyle.overflow = 'auto';
    containerStyle.visibility = 'hidden';
    containerStyle.pointerEvents = 'none';
    containerStyle.position = 'absolute';
    const content = document.createElement('div');
    const contentStyle = content.style;
    contentStyle.width = '2px';
    contentStyle.height = '1px';
    scrollContainer.appendChild(content);
    document.body.appendChild(scrollContainer);
    rtlScrollAxisType = 0 /* RtlScrollAxisType.NORMAL */;
    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL
    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're
    // dealing with one of the other two types of browsers.
    if (scrollContainer.scrollLeft === 0) {
      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an
      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by
      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will
      // return 0 when we read it again.
      scrollContainer.scrollLeft = 1;
      rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? 1 /* RtlScrollAxisType.NEGATED */ : 2 /* RtlScrollAxisType.INVERTED */;
    }

    scrollContainer.remove();
  }
  return rtlScrollAxisType;
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
let shadowDomIsSupported;
/** Checks whether the user's browser support Shadow DOM. */
function _supportsShadowDom() {
  if (shadowDomIsSupported == null) {
    const head = typeof document !== 'undefined' ? document.head : null;
    shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));
  }
  return shadowDomIsSupported;
}
/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */
function _getShadowRoot(element) {
  if (_supportsShadowDom()) {
    const rootNode = element.getRootNode ? element.getRootNode() : null;
    // Note that this should be caught by `_supportsShadowDom`, but some
    // teams have been able to hit this code path on unsupported browsers.
    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {
      return rootNode;
    }
  }
  return null;
}
/**
 * Gets the currently-focused element on the page while
 * also piercing through Shadow DOM boundaries.
 */
function _getFocusedElementPierceShadowDom() {
  let activeElement = typeof document !== 'undefined' && document ? document.activeElement : null;
  while (activeElement && activeElement.shadowRoot) {
    const newActiveElement = activeElement.shadowRoot.activeElement;
    if (newActiveElement === activeElement) {
      break;
    } else {
      activeElement = newActiveElement;
    }
  }
  return activeElement;
}
/** Gets the target of an event while accounting for Shadow DOM. */
function _getEventTarget(event) {
  // If an event is bound outside the Shadow DOM, the `event.target` will
  // point to the shadow root so we have to use `composedPath` instead.
  return event.composedPath ? event.composedPath()[0] : event.target;
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Gets whether the code is currently running in a test environment. */
function _isTestEnvironment() {
  // We can't use `declare const` because it causes conflicts inside Google with the real typings
  // for these symbols and we can't read them off the global object, because they don't appear to
  // be attached there for some runners like Jest.
  // (see: https://github.com/angular/components/issues/23365#issuecomment-938146643)
  return (
    // @ts-ignore
    typeof __karma__ !== 'undefined' && !!__karma__ ||
    // @ts-ignore
    typeof jasmine !== 'undefined' && !!jasmine ||
    // @ts-ignore
    typeof jest !== 'undefined' && !!jest ||
    // @ts-ignore
    typeof Mocha !== 'undefined' && !!Mocha
  );
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 7520:
/*!*******************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2020/portal.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BasePortalHost": () => (/* binding */ BasePortalHost),
/* harmony export */   "BasePortalOutlet": () => (/* binding */ BasePortalOutlet),
/* harmony export */   "CdkPortal": () => (/* binding */ CdkPortal),
/* harmony export */   "CdkPortalOutlet": () => (/* binding */ CdkPortalOutlet),
/* harmony export */   "ComponentPortal": () => (/* binding */ ComponentPortal),
/* harmony export */   "DomPortal": () => (/* binding */ DomPortal),
/* harmony export */   "DomPortalHost": () => (/* binding */ DomPortalHost),
/* harmony export */   "DomPortalOutlet": () => (/* binding */ DomPortalOutlet),
/* harmony export */   "Portal": () => (/* binding */ Portal),
/* harmony export */   "PortalHostDirective": () => (/* binding */ PortalHostDirective),
/* harmony export */   "PortalInjector": () => (/* binding */ PortalInjector),
/* harmony export */   "PortalModule": () => (/* binding */ PortalModule),
/* harmony export */   "TemplatePortal": () => (/* binding */ TemplatePortal),
/* harmony export */   "TemplatePortalDirective": () => (/* binding */ TemplatePortalDirective)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 4666);




/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Throws an exception when attempting to attach a null portal to a host.
 * @docs-private
 */
function throwNullPortalError() {
  throw Error('Must provide a portal to attach');
}
/**
 * Throws an exception when attempting to attach a portal to a host that is already attached.
 * @docs-private
 */
function throwPortalAlreadyAttachedError() {
  throw Error('Host already has a portal attached');
}
/**
 * Throws an exception when attempting to attach a portal to an already-disposed host.
 * @docs-private
 */
function throwPortalOutletAlreadyDisposedError() {
  throw Error('This PortalOutlet has already been disposed');
}
/**
 * Throws an exception when attempting to attach an unknown portal type.
 * @docs-private
 */
function throwUnknownPortalTypeError() {
  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' + 'a ComponentPortal or a TemplatePortal.');
}
/**
 * Throws an exception when attempting to attach a portal to a null host.
 * @docs-private
 */
function throwNullPortalOutletError() {
  throw Error('Attempting to attach a portal to a null PortalOutlet');
}
/**
 * Throws an exception when attempting to detach a portal that is not attached.
 * @docs-private
 */
function throwNoPortalAttachedError() {
  throw Error('Attempting to detach a portal that is not attached to a host');
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A `Portal` is something that you want to render somewhere else.
 * It can be attach to / detached from a `PortalOutlet`.
 */
class Portal {
  /** Attach this portal to a host. */
  attach(host) {
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      if (host == null) {
        throwNullPortalOutletError();
      }
      if (host.hasAttached()) {
        throwPortalAlreadyAttachedError();
      }
    }
    this._attachedHost = host;
    return host.attach(this);
  }
  /** Detach this portal from its host */
  detach() {
    let host = this._attachedHost;
    if (host != null) {
      this._attachedHost = null;
      host.detach();
    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {
      throwNoPortalAttachedError();
    }
  }
  /** Whether this portal is attached to a host. */
  get isAttached() {
    return this._attachedHost != null;
  }
  /**
   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by
   * the PortalOutlet when it is performing an `attach()` or `detach()`.
   */
  setAttachedHost(host) {
    this._attachedHost = host;
  }
}
/**
 * A `ComponentPortal` is a portal that instantiates some Component upon attachment.
 */
class ComponentPortal extends Portal {
  constructor(component, viewContainerRef, injector, componentFactoryResolver, projectableNodes) {
    super();
    this.component = component;
    this.viewContainerRef = viewContainerRef;
    this.injector = injector;
    this.componentFactoryResolver = componentFactoryResolver;
    this.projectableNodes = projectableNodes;
  }
}
/**
 * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).
 */
class TemplatePortal extends Portal {
  constructor( /** The embedded template that will be used to instantiate an embedded View in the host. */
  templateRef, /** Reference to the ViewContainer into which the template will be stamped out. */
  viewContainerRef, /** Contextual data to be passed in to the embedded view. */
  context, /** The injector to use for the embedded view. */
  injector) {
    super();
    this.templateRef = templateRef;
    this.viewContainerRef = viewContainerRef;
    this.context = context;
    this.injector = injector;
  }
  get origin() {
    return this.templateRef.elementRef;
  }
  /**
   * Attach the portal to the provided `PortalOutlet`.
   * When a context is provided it will override the `context` property of the `TemplatePortal`
   * instance.
   */
  attach(host, context = this.context) {
    this.context = context;
    return super.attach(host);
  }
  detach() {
    this.context = undefined;
    return super.detach();
  }
}
/**
 * A `DomPortal` is a portal whose DOM element will be taken from its current position
 * in the DOM and moved into a portal outlet, when it is attached. On detach, the content
 * will be restored to its original position.
 */
class DomPortal extends Portal {
  constructor(element) {
    super();
    this.element = element instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef ? element.nativeElement : element;
  }
}
/**
 * Partial implementation of PortalOutlet that handles attaching
 * ComponentPortal and TemplatePortal.
 */
class BasePortalOutlet {
  constructor() {
    /** Whether this host has already been permanently disposed. */
    this._isDisposed = false;
    // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.
    this.attachDomPortal = null;
  }
  /** Whether this host has an attached portal. */
  hasAttached() {
    return !!this._attachedPortal;
  }
  /** Attaches a portal. */
  attach(portal) {
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      if (!portal) {
        throwNullPortalError();
      }
      if (this.hasAttached()) {
        throwPortalAlreadyAttachedError();
      }
      if (this._isDisposed) {
        throwPortalOutletAlreadyDisposedError();
      }
    }
    if (portal instanceof ComponentPortal) {
      this._attachedPortal = portal;
      return this.attachComponentPortal(portal);
    } else if (portal instanceof TemplatePortal) {
      this._attachedPortal = portal;
      return this.attachTemplatePortal(portal);
      // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.
    } else if (this.attachDomPortal && portal instanceof DomPortal) {
      this._attachedPortal = portal;
      return this.attachDomPortal(portal);
    }
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      throwUnknownPortalTypeError();
    }
  }
  /** Detaches a previously attached portal. */
  detach() {
    if (this._attachedPortal) {
      this._attachedPortal.setAttachedHost(null);
      this._attachedPortal = null;
    }
    this._invokeDisposeFn();
  }
  /** Permanently dispose of this portal host. */
  dispose() {
    if (this.hasAttached()) {
      this.detach();
    }
    this._invokeDisposeFn();
    this._isDisposed = true;
  }
  /** @docs-private */
  setDisposeFn(fn) {
    this._disposeFn = fn;
  }
  _invokeDisposeFn() {
    if (this._disposeFn) {
      this._disposeFn();
      this._disposeFn = null;
    }
  }
}
/**
 * @deprecated Use `BasePortalOutlet` instead.
 * @breaking-change 9.0.0
 */
class BasePortalHost extends BasePortalOutlet {}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular
 * application context.
 */
class DomPortalOutlet extends BasePortalOutlet {
  /**
   * @param outletElement Element into which the content is projected.
   * @param _componentFactoryResolver Used to resolve the component factory.
   *   Only required when attaching component portals.
   * @param _appRef Reference to the application. Only used in component portals when there
   *   is no `ViewContainerRef` available.
   * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't
   *   have one. Only used for component portals.
   * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually
   *   become a required parameter.
   */
  constructor( /** Element into which the content is projected. */
  outletElement, _componentFactoryResolver, _appRef, _defaultInjector,
  /**
   * @deprecated `_document` Parameter to be made required.
   * @breaking-change 10.0.0
   */
  _document) {
    super();
    this.outletElement = outletElement;
    this._componentFactoryResolver = _componentFactoryResolver;
    this._appRef = _appRef;
    this._defaultInjector = _defaultInjector;
    /**
     * Attaches a DOM portal by transferring its content into the outlet.
     * @param portal Portal to be attached.
     * @deprecated To be turned into a method.
     * @breaking-change 10.0.0
     */
    this.attachDomPortal = portal => {
      // @breaking-change 10.0.0 Remove check and error once the
      // `_document` constructor parameter is required.
      if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error('Cannot attach DOM portal without _document constructor parameter');
      }
      const element = portal.element;
      if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error('DOM portal content must be attached to a parent node.');
      }
      // Anchor used to save the element's previous position so
      // that we can restore it when the portal is detached.
      const anchorNode = this._document.createComment('dom-portal');
      element.parentNode.insertBefore(anchorNode, element);
      this.outletElement.appendChild(element);
      this._attachedPortal = portal;
      super.setDisposeFn(() => {
        // We can't use `replaceWith` here because IE doesn't support it.
        if (anchorNode.parentNode) {
          anchorNode.parentNode.replaceChild(element, anchorNode);
        }
      });
    };
    this._document = _document;
  }
  /**
   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.
   * @param portal Portal to be attached
   * @returns Reference to the created component.
   */
  attachComponentPortal(portal) {
    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {
      throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');
    }
    const componentFactory = resolver.resolveComponentFactory(portal.component);
    let componentRef;
    // If the portal specifies a ViewContainerRef, we will use that as the attachment point
    // for the component (in terms of Angular's component tree, not rendering).
    // When the ViewContainerRef is missing, we use the factory to create the component directly
    // and then manually attach the view to the application.
    if (portal.viewContainerRef) {
      componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector, portal.projectableNodes || undefined);
      this.setDisposeFn(() => componentRef.destroy());
    } else {
      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {
        throw Error('Cannot attach component portal to outlet without an ApplicationRef.');
      }
      componentRef = componentFactory.create(portal.injector || this._defaultInjector || _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector.NULL);
      this._appRef.attachView(componentRef.hostView);
      this.setDisposeFn(() => {
        // Verify that the ApplicationRef has registered views before trying to detach a host view.
        // This check also protects the `detachView` from being called on a destroyed ApplicationRef.
        if (this._appRef.viewCount > 0) {
          this._appRef.detachView(componentRef.hostView);
        }
        componentRef.destroy();
      });
    }
    // At this point the component has been instantiated, so we move it to the location in the DOM
    // where we want it to be rendered.
    this.outletElement.appendChild(this._getComponentRootNode(componentRef));
    this._attachedPortal = portal;
    return componentRef;
  }
  /**
   * Attaches a template portal to the DOM as an embedded view.
   * @param portal Portal to be attached.
   * @returns Reference to the created embedded view.
   */
  attachTemplatePortal(portal) {
    let viewContainer = portal.viewContainerRef;
    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {
      injector: portal.injector
    });
    // The method `createEmbeddedView` will add the view as a child of the viewContainer.
    // But for the DomPortalOutlet the view can be added everywhere in the DOM
    // (e.g Overlay Container) To move the view to the specified host element. We just
    // re-append the existing root nodes.
    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));
    // Note that we want to detect changes after the nodes have been moved so that
    // any directives inside the portal that are looking at the DOM inside a lifecycle
    // hook won't be invoked too early.
    viewRef.detectChanges();
    this.setDisposeFn(() => {
      let index = viewContainer.indexOf(viewRef);
      if (index !== -1) {
        viewContainer.remove(index);
      }
    });
    this._attachedPortal = portal;
    // TODO(jelbourn): Return locals from view.
    return viewRef;
  }
  /**
   * Clears out a portal from the DOM.
   */
  dispose() {
    super.dispose();
    this.outletElement.remove();
  }
  /** Gets the root HTMLElement for an instantiated component. */
  _getComponentRootNode(componentRef) {
    return componentRef.hostView.rootNodes[0];
  }
}
/**
 * @deprecated Use `DomPortalOutlet` instead.
 * @breaking-change 9.0.0
 */
class DomPortalHost extends DomPortalOutlet {}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,
 * the directive instance itself can be attached to a host, enabling declarative use of portals.
 */
class CdkPortal extends TemplatePortal {
  constructor(templateRef, viewContainerRef) {
    super(templateRef, viewContainerRef);
  }
}
CdkPortal.ɵfac = function CdkPortal_Factory(t) {
  return new (t || CdkPortal)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef));
};
CdkPortal.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CdkPortal,
  selectors: [["", "cdkPortal", ""]],
  exportAs: ["cdkPortal"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkPortal, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[cdkPortal]',
      exportAs: 'cdkPortal'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
    }];
  }, null);
})();
/**
 * @deprecated Use `CdkPortal` instead.
 * @breaking-change 9.0.0
 */
class TemplatePortalDirective extends CdkPortal {}
TemplatePortalDirective.ɵfac = /* @__PURE__ */function () {
  let ɵTemplatePortalDirective_BaseFactory;
  return function TemplatePortalDirective_Factory(t) {
    return (ɵTemplatePortalDirective_BaseFactory || (ɵTemplatePortalDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](TemplatePortalDirective)))(t || TemplatePortalDirective);
  };
}();
TemplatePortalDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: TemplatePortalDirective,
  selectors: [["", "cdk-portal", ""], ["", "portal", ""]],
  exportAs: ["cdkPortal"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: CdkPortal,
    useExisting: TemplatePortalDirective
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TemplatePortalDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[cdk-portal], [portal]',
      exportAs: 'cdkPortal',
      providers: [{
        provide: CdkPortal,
        useExisting: TemplatePortalDirective
      }]
    }]
  }], null, null);
})();
/**
 * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be
 * directly attached to it, enabling declarative use.
 *
 * Usage:
 * `<ng-template [cdkPortalOutlet]="greeting"></ng-template>`
 */
class CdkPortalOutlet extends BasePortalOutlet {
  constructor(_componentFactoryResolver, _viewContainerRef,
  /**
   * @deprecated `_document` parameter to be made required.
   * @breaking-change 9.0.0
   */
  _document) {
    super();
    this._componentFactoryResolver = _componentFactoryResolver;
    this._viewContainerRef = _viewContainerRef;
    /** Whether the portal component is initialized. */
    this._isInitialized = false;
    /** Emits when a portal is attached to the outlet. */
    this.attached = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.
     * @param portal Portal to be attached.
     * @deprecated To be turned into a method.
     * @breaking-change 10.0.0
     */
    this.attachDomPortal = portal => {
      // @breaking-change 9.0.0 Remove check and error once the
      // `_document` constructor parameter is required.
      if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error('Cannot attach DOM portal without _document constructor parameter');
      }
      const element = portal.element;
      if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw Error('DOM portal content must be attached to a parent node.');
      }
      // Anchor used to save the element's previous position so
      // that we can restore it when the portal is detached.
      const anchorNode = this._document.createComment('dom-portal');
      portal.setAttachedHost(this);
      element.parentNode.insertBefore(anchorNode, element);
      this._getRootNode().appendChild(element);
      this._attachedPortal = portal;
      super.setDisposeFn(() => {
        if (anchorNode.parentNode) {
          anchorNode.parentNode.replaceChild(element, anchorNode);
        }
      });
    };
    this._document = _document;
  }
  /** Portal associated with the Portal outlet. */
  get portal() {
    return this._attachedPortal;
  }
  set portal(portal) {
    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have
    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`
    // and attach a portal programmatically in the parent component. When Angular does the first CD
    // round, it will fire the setter with empty string, causing the user's content to be cleared.
    if (this.hasAttached() && !portal && !this._isInitialized) {
      return;
    }
    if (this.hasAttached()) {
      super.detach();
    }
    if (portal) {
      super.attach(portal);
    }
    this._attachedPortal = portal || null;
  }
  /** Component or view reference that is attached to the portal. */
  get attachedRef() {
    return this._attachedRef;
  }
  ngOnInit() {
    this._isInitialized = true;
  }
  ngOnDestroy() {
    super.dispose();
    this._attachedRef = this._attachedPortal = null;
  }
  /**
   * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.
   *
   * @param portal Portal to be attached to the portal outlet.
   * @returns Reference to the created component.
   */
  attachComponentPortal(portal) {
    portal.setAttachedHost(this);
    // If the portal specifies an origin, use that as the logical location of the component
    // in the application tree. Otherwise use the location of this PortalOutlet.
    const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;
    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
    const componentFactory = resolver.resolveComponentFactory(portal.component);
    const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector, portal.projectableNodes || undefined);
    // If we're using a view container that's different from the injected one (e.g. when the portal
    // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered
    // inside of the alternate view container.
    if (viewContainerRef !== this._viewContainerRef) {
      this._getRootNode().appendChild(ref.hostView.rootNodes[0]);
    }
    super.setDisposeFn(() => ref.destroy());
    this._attachedPortal = portal;
    this._attachedRef = ref;
    this.attached.emit(ref);
    return ref;
  }
  /**
   * Attach the given TemplatePortal to this PortalHost as an embedded View.
   * @param portal Portal to be attached.
   * @returns Reference to the created embedded view.
   */
  attachTemplatePortal(portal) {
    portal.setAttachedHost(this);
    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {
      injector: portal.injector
    });
    super.setDisposeFn(() => this._viewContainerRef.clear());
    this._attachedPortal = portal;
    this._attachedRef = viewRef;
    this.attached.emit(viewRef);
    return viewRef;
  }
  /** Gets the root node of the portal outlet. */
  _getRootNode() {
    const nativeElement = this._viewContainerRef.element.nativeElement;
    // The directive could be set on a template which will result in a comment
    // node being the root. Use the comment's parent node if that is the case.
    return nativeElement.nodeType === nativeElement.ELEMENT_NODE ? nativeElement : nativeElement.parentNode;
  }
}
CdkPortalOutlet.ɵfac = function CdkPortalOutlet_Factory(t) {
  return new (t || CdkPortalOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
};
CdkPortalOutlet.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CdkPortalOutlet,
  selectors: [["", "cdkPortalOutlet", ""]],
  inputs: {
    portal: ["cdkPortalOutlet", "portal"]
  },
  outputs: {
    attached: "attached"
  },
  exportAs: ["cdkPortalOutlet"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkPortalOutlet, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[cdkPortalOutlet]',
      exportAs: 'cdkPortalOutlet',
      inputs: ['portal: cdkPortalOutlet']
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
      }]
    }];
  }, {
    attached: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
/**
 * @deprecated Use `CdkPortalOutlet` instead.
 * @breaking-change 9.0.0
 */
class PortalHostDirective extends CdkPortalOutlet {}
PortalHostDirective.ɵfac = /* @__PURE__ */function () {
  let ɵPortalHostDirective_BaseFactory;
  return function PortalHostDirective_Factory(t) {
    return (ɵPortalHostDirective_BaseFactory || (ɵPortalHostDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](PortalHostDirective)))(t || PortalHostDirective);
  };
}();
PortalHostDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: PortalHostDirective,
  selectors: [["", "cdkPortalHost", ""], ["", "portalHost", ""]],
  inputs: {
    portal: ["cdkPortalHost", "portal"]
  },
  exportAs: ["cdkPortalHost"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: CdkPortalOutlet,
    useExisting: PortalHostDirective
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PortalHostDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[cdkPortalHost], [portalHost]',
      exportAs: 'cdkPortalHost',
      inputs: ['portal: cdkPortalHost'],
      providers: [{
        provide: CdkPortalOutlet,
        useExisting: PortalHostDirective
      }]
    }]
  }], null, null);
})();
class PortalModule {}
PortalModule.ɵfac = function PortalModule_Factory(t) {
  return new (t || PortalModule)();
};
PortalModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: PortalModule
});
PortalModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PortalModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],
      declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]
    }]
  }], null, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Custom injector to be used when providing custom
 * injection tokens to components inside a portal.
 * @docs-private
 * @deprecated Use `Injector.create` instead.
 * @breaking-change 11.0.0
 */
class PortalInjector {
  constructor(_parentInjector, _customTokens) {
    this._parentInjector = _parentInjector;
    this._customTokens = _customTokens;
  }
  get(token, notFoundValue) {
    const value = this._customTokens.get(token);
    if (typeof value !== 'undefined') {
      return value;
    }
    return this._parentInjector.get(token, notFoundValue);
  }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 6328:
/*!**********************************************************!*\
  !*** ./node_modules/@angular/cdk/fesm2020/scrolling.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CdkFixedSizeVirtualScroll": () => (/* binding */ CdkFixedSizeVirtualScroll),
/* harmony export */   "CdkScrollable": () => (/* binding */ CdkScrollable),
/* harmony export */   "CdkScrollableModule": () => (/* binding */ CdkScrollableModule),
/* harmony export */   "CdkVirtualForOf": () => (/* binding */ CdkVirtualForOf),
/* harmony export */   "CdkVirtualScrollViewport": () => (/* binding */ CdkVirtualScrollViewport),
/* harmony export */   "CdkVirtualScrollable": () => (/* binding */ CdkVirtualScrollable),
/* harmony export */   "CdkVirtualScrollableElement": () => (/* binding */ CdkVirtualScrollableElement),
/* harmony export */   "CdkVirtualScrollableWindow": () => (/* binding */ CdkVirtualScrollableWindow),
/* harmony export */   "DEFAULT_RESIZE_TIME": () => (/* binding */ DEFAULT_RESIZE_TIME),
/* harmony export */   "DEFAULT_SCROLL_TIME": () => (/* binding */ DEFAULT_SCROLL_TIME),
/* harmony export */   "FixedSizeVirtualScrollStrategy": () => (/* binding */ FixedSizeVirtualScrollStrategy),
/* harmony export */   "ScrollDispatcher": () => (/* binding */ ScrollDispatcher),
/* harmony export */   "ScrollingModule": () => (/* binding */ ScrollingModule),
/* harmony export */   "VIRTUAL_SCROLLABLE": () => (/* binding */ VIRTUAL_SCROLLABLE),
/* harmony export */   "VIRTUAL_SCROLL_STRATEGY": () => (/* binding */ VIRTUAL_SCROLL_STRATEGY),
/* harmony export */   "ViewportRuler": () => (/* binding */ ViewportRuler),
/* harmony export */   "_fixedSizeVirtualScrollStrategyFactory": () => (/* binding */ _fixedSizeVirtualScrollStrategyFactory)
/* harmony export */ });
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ 8971);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ 228);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 745);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ 833);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ 3280);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ 8184);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ 9672);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ 6078);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs */ 4437);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ 8977);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ 998);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 116);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs/operators */ 8951);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs/operators */ 4874);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs/operators */ 679);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! rxjs/operators */ 2673);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! rxjs/operators */ 9196);
/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/platform */ 9107);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/common */ 4666);
/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/bidi */ 2867);
/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/cdk/collections */ 1755);













/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** The injection token used to specify the virtual scrolling strategy. */
const _c0 = ["contentWrapper"];
const _c1 = ["*"];
const VIRTUAL_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('VIRTUAL_SCROLL_STRATEGY');

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Virtual scrolling strategy for lists with items of known fixed size. */
class FixedSizeVirtualScrollStrategy {
  /**
   * @param itemSize The size of the items in the virtually scrolling list.
   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more
   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.
   */
  constructor(itemSize, minBufferPx, maxBufferPx) {
    this._scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
    /** @docs-private Implemented as part of VirtualScrollStrategy. */
    this.scrolledIndexChange = this._scrolledIndexChange.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.distinctUntilChanged)());
    /** The attached viewport. */
    this._viewport = null;
    this._itemSize = itemSize;
    this._minBufferPx = minBufferPx;
    this._maxBufferPx = maxBufferPx;
  }
  /**
   * Attaches this scroll strategy to a viewport.
   * @param viewport The viewport to attach this strategy to.
   */
  attach(viewport) {
    this._viewport = viewport;
    this._updateTotalContentSize();
    this._updateRenderedRange();
  }
  /** Detaches this scroll strategy from the currently attached viewport. */
  detach() {
    this._scrolledIndexChange.complete();
    this._viewport = null;
  }
  /**
   * Update the item size and buffer size.
   * @param itemSize The size of the items in the virtually scrolling list.
   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more
   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.
   */
  updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {
    if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');
    }
    this._itemSize = itemSize;
    this._minBufferPx = minBufferPx;
    this._maxBufferPx = maxBufferPx;
    this._updateTotalContentSize();
    this._updateRenderedRange();
  }
  /** @docs-private Implemented as part of VirtualScrollStrategy. */
  onContentScrolled() {
    this._updateRenderedRange();
  }
  /** @docs-private Implemented as part of VirtualScrollStrategy. */
  onDataLengthChanged() {
    this._updateTotalContentSize();
    this._updateRenderedRange();
  }
  /** @docs-private Implemented as part of VirtualScrollStrategy. */
  onContentRendered() {
    /* no-op */
  }
  /** @docs-private Implemented as part of VirtualScrollStrategy. */
  onRenderedOffsetChanged() {
    /* no-op */
  }
  /**
   * Scroll to the offset for the given index.
   * @param index The index of the element to scroll to.
   * @param behavior The ScrollBehavior to use when scrolling.
   */
  scrollToIndex(index, behavior) {
    if (this._viewport) {
      this._viewport.scrollToOffset(index * this._itemSize, behavior);
    }
  }
  /** Update the viewport's total content size. */
  _updateTotalContentSize() {
    if (!this._viewport) {
      return;
    }
    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);
  }
  /** Update the viewport's rendered range. */
  _updateRenderedRange() {
    if (!this._viewport) {
      return;
    }
    const renderedRange = this._viewport.getRenderedRange();
    const newRange = {
      start: renderedRange.start,
      end: renderedRange.end
    };
    const viewportSize = this._viewport.getViewportSize();
    const dataLength = this._viewport.getDataLength();
    let scrollOffset = this._viewport.measureScrollOffset();
    // Prevent NaN as result when dividing by zero.
    let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;
    // If user scrolls to the bottom of the list and data changes to a smaller list
    if (newRange.end > dataLength) {
      // We have to recalculate the first visible index based on new data length and viewport size.
      const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);
      const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));
      // If first visible index changed we must update scroll offset to handle start/end buffers
      // Current range must also be adjusted to cover the new position (bottom of new list).
      if (firstVisibleIndex != newVisibleIndex) {
        firstVisibleIndex = newVisibleIndex;
        scrollOffset = newVisibleIndex * this._itemSize;
        newRange.start = Math.floor(firstVisibleIndex);
      }
      newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));
    }
    const startBuffer = scrollOffset - newRange.start * this._itemSize;
    if (startBuffer < this._minBufferPx && newRange.start != 0) {
      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);
      newRange.start = Math.max(0, newRange.start - expandStart);
      newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));
    } else {
      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);
      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {
        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);
        if (expandEnd > 0) {
          newRange.end = Math.min(dataLength, newRange.end + expandEnd);
          newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));
        }
      }
    }
    this._viewport.setRenderedRange(newRange);
    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);
    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));
  }
}
/**
 * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created
 * `FixedSizeVirtualScrollStrategy` from the given directive.
 * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the
 *     `FixedSizeVirtualScrollStrategy` from.
 */
function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {
  return fixedSizeDir._scrollStrategy;
}
/** A virtual scroll strategy that supports fixed-size items. */
class CdkFixedSizeVirtualScroll {
  constructor() {
    this._itemSize = 20;
    this._minBufferPx = 100;
    this._maxBufferPx = 200;
    /** The scroll strategy used by this directive. */
    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);
  }
  /** The size of the items in the list (in pixels). */
  get itemSize() {
    return this._itemSize;
  }
  set itemSize(value) {
    this._itemSize = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceNumberProperty)(value);
  }
  /**
   * The minimum amount of buffer rendered beyond the viewport (in pixels).
   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
   */
  get minBufferPx() {
    return this._minBufferPx;
  }
  set minBufferPx(value) {
    this._minBufferPx = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceNumberProperty)(value);
  }
  /**
   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
   */
  get maxBufferPx() {
    return this._maxBufferPx;
  }
  set maxBufferPx(value) {
    this._maxBufferPx = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceNumberProperty)(value);
  }
  ngOnChanges() {
    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);
  }
}
CdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {
  return new (t || CdkFixedSizeVirtualScroll)();
};
CdkFixedSizeVirtualScroll.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CdkFixedSizeVirtualScroll,
  selectors: [["cdk-virtual-scroll-viewport", "itemSize", ""]],
  inputs: {
    itemSize: "itemSize",
    minBufferPx: "minBufferPx",
    maxBufferPx: "maxBufferPx"
  },
  standalone: true,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: VIRTUAL_SCROLL_STRATEGY,
    useFactory: _fixedSizeVirtualScrollStrategyFactory,
    deps: [(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => CdkFixedSizeVirtualScroll)]
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkFixedSizeVirtualScroll, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'cdk-virtual-scroll-viewport[itemSize]',
      standalone: true,
      providers: [{
        provide: VIRTUAL_SCROLL_STRATEGY,
        useFactory: _fixedSizeVirtualScrollStrategyFactory,
        deps: [(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => CdkFixedSizeVirtualScroll)]
      }]
    }]
  }], null, {
    itemSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    minBufferPx: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    maxBufferPx: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Time in ms to throttle the scrolling events by default. */
const DEFAULT_SCROLL_TIME = 20;
/**
 * Service contained all registered Scrollable references and emits an event when any one of the
 * Scrollable references emit a scrolled event.
 */
class ScrollDispatcher {
  constructor(_ngZone, _platform, document) {
    this._ngZone = _ngZone;
    this._platform = _platform;
    /** Subject for notifying that a registered scrollable reference element has been scrolled. */
    this._scrolled = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
    /** Keeps track of the global `scroll` and `resize` subscriptions. */
    this._globalSubscription = null;
    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */
    this._scrolledCount = 0;
    /**
     * Map of all the scrollable references that are registered with the service and their
     * scroll event subscriptions.
     */
    this.scrollContainers = new Map();
    this._document = document;
  }
  /**
   * Registers a scrollable instance with the service and listens for its scrolled events. When the
   * scrollable is scrolled, the service emits the event to its scrolled observable.
   * @param scrollable Scrollable instance to be registered.
   */
  register(scrollable) {
    if (!this.scrollContainers.has(scrollable)) {
      this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));
    }
  }
  /**
   * De-registers a Scrollable reference and unsubscribes from its scroll event observable.
   * @param scrollable Scrollable instance to be deregistered.
   */
  deregister(scrollable) {
    const scrollableReference = this.scrollContainers.get(scrollable);
    if (scrollableReference) {
      scrollableReference.unsubscribe();
      this.scrollContainers.delete(scrollable);
    }
  }
  /**
   * Returns an observable that emits an event whenever any of the registered Scrollable
   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms
   * to override the default "throttle" time.
   *
   * **Note:** in order to avoid hitting change detection for every scroll event,
   * all of the events emitted from this stream will be run outside the Angular zone.
   * If you need to update any data bindings as a result of a scroll event, you have
   * to run the callback using `NgZone.run`.
   */
  scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {
    if (!this._platform.isBrowser) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)();
    }
    return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable(observer => {
      if (!this._globalSubscription) {
        this._addGlobalListener();
      }
      // In the case of a 0ms delay, use an observable without auditTime
      // since it does add a perceptible delay in processing overhead.
      const subscription = auditTimeInMs > 0 ? this._scrolled.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.auditTime)(auditTimeInMs)).subscribe(observer) : this._scrolled.subscribe(observer);
      this._scrolledCount++;
      return () => {
        subscription.unsubscribe();
        this._scrolledCount--;
        if (!this._scrolledCount) {
          this._removeGlobalListener();
        }
      };
    });
  }
  ngOnDestroy() {
    this._removeGlobalListener();
    this.scrollContainers.forEach((_, container) => this.deregister(container));
    this._scrolled.complete();
  }
  /**
   * Returns an observable that emits whenever any of the
   * scrollable ancestors of an element are scrolled.
   * @param elementOrElementRef Element whose ancestors to listen for.
   * @param auditTimeInMs Time to throttle the scroll events.
   */
  ancestorScrolled(elementOrElementRef, auditTimeInMs) {
    const ancestors = this.getAncestorScrollContainers(elementOrElementRef);
    return this.scrolled(auditTimeInMs).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.filter)(target => {
      return !target || ancestors.indexOf(target) > -1;
    }));
  }
  /** Returns all registered Scrollables that contain the provided element. */
  getAncestorScrollContainers(elementOrElementRef) {
    const scrollingContainers = [];
    this.scrollContainers.forEach((_subscription, scrollable) => {
      if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {
        scrollingContainers.push(scrollable);
      }
    });
    return scrollingContainers;
  }
  /** Use defaultView of injected document if available or fallback to global window reference */
  _getWindow() {
    return this._document.defaultView || window;
  }
  /** Returns true if the element is contained within the provided Scrollable. */
  _scrollableContainsElement(scrollable, elementOrElementRef) {
    let element = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceElement)(elementOrElementRef);
    let scrollableElement = scrollable.getElementRef().nativeElement;
    // Traverse through the element parents until we reach null, checking if any of the elements
    // are the scrollable's element.
    do {
      if (element == scrollableElement) {
        return true;
      }
    } while (element = element.parentElement);
    return false;
  }
  /** Sets up the global scroll listeners. */
  _addGlobalListener() {
    this._globalSubscription = this._ngZone.runOutsideAngular(() => {
      const window = this._getWindow();
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.fromEvent)(window.document, 'scroll').subscribe(() => this._scrolled.next());
    });
  }
  /** Cleans up the global scroll listener. */
  _removeGlobalListener() {
    if (this._globalSubscription) {
      this._globalSubscription.unsubscribe();
      this._globalSubscription = null;
    }
  }
}
ScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {
  return new (t || ScrollDispatcher)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_10__.DOCUMENT, 8));
};
ScrollDispatcher.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: ScrollDispatcher,
  factory: ScrollDispatcher.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ScrollDispatcher, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_10__.DOCUMENT]
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Sends an event when the directive's element is scrolled. Registers itself with the
 * ScrollDispatcher service to include itself as part of its collection of scrolling events that it
 * can be listened to through the service.
 */
class CdkScrollable {
  constructor(elementRef, scrollDispatcher, ngZone, dir) {
    this.elementRef = elementRef;
    this.scrollDispatcher = scrollDispatcher;
    this.ngZone = ngZone;
    this.dir = dir;
    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
    this._elementScrolled = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable(observer => this.ngZone.runOutsideAngular(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.fromEvent)(this.elementRef.nativeElement, 'scroll').pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.takeUntil)(this._destroyed)).subscribe(observer)));
  }
  ngOnInit() {
    this.scrollDispatcher.register(this);
  }
  ngOnDestroy() {
    this.scrollDispatcher.deregister(this);
    this._destroyed.next();
    this._destroyed.complete();
  }
  /** Returns observable that emits when a scroll event is fired on the host element. */
  elementScrolled() {
    return this._elementScrolled;
  }
  /** Gets the ElementRef for the viewport. */
  getElementRef() {
    return this.elementRef;
  }
  /**
   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
   * left and right always refer to the left and right side of the scrolling container irrespective
   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
   * in an RTL context.
   * @param options specified the offsets to scroll to.
   */
  scrollTo(options) {
    const el = this.elementRef.nativeElement;
    const isRtl = this.dir && this.dir.value == 'rtl';
    // Rewrite start & end offsets as right or left offsets.
    if (options.left == null) {
      options.left = isRtl ? options.end : options.start;
    }
    if (options.right == null) {
      options.right = isRtl ? options.start : options.end;
    }
    // Rewrite the bottom offset as a top offset.
    if (options.bottom != null) {
      options.top = el.scrollHeight - el.clientHeight - options.bottom;
    }
    // Rewrite the right offset as a left offset.
    if (isRtl && (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.getRtlScrollAxisType)() != 0 /* RtlScrollAxisType.NORMAL */) {
      if (options.left != null) {
        options.right = el.scrollWidth - el.clientWidth - options.left;
      }
      if ((0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.getRtlScrollAxisType)() == 2 /* RtlScrollAxisType.INVERTED */) {
        options.left = options.right;
      } else if ((0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.getRtlScrollAxisType)() == 1 /* RtlScrollAxisType.NEGATED */) {
        options.left = options.right ? -options.right : options.right;
      }
    } else {
      if (options.right != null) {
        options.left = el.scrollWidth - el.clientWidth - options.right;
      }
    }
    this._applyScrollToOptions(options);
  }
  _applyScrollToOptions(options) {
    const el = this.elementRef.nativeElement;
    if ((0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.supportsScrollBehavior)()) {
      el.scrollTo(options);
    } else {
      if (options.top != null) {
        el.scrollTop = options.top;
      }
      if (options.left != null) {
        el.scrollLeft = options.left;
      }
    }
  }
  /**
   * Measures the scroll offset relative to the specified edge of the viewport. This method can be
   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent
   * about what scrollLeft means in RTL. The values returned by this method are normalized such that
   * left and right always refer to the left and right side of the scrolling container irrespective
   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
   * in an RTL context.
   * @param from The edge to measure from.
   */
  measureScrollOffset(from) {
    const LEFT = 'left';
    const RIGHT = 'right';
    const el = this.elementRef.nativeElement;
    if (from == 'top') {
      return el.scrollTop;
    }
    if (from == 'bottom') {
      return el.scrollHeight - el.clientHeight - el.scrollTop;
    }
    // Rewrite start & end as left or right offsets.
    const isRtl = this.dir && this.dir.value == 'rtl';
    if (from == 'start') {
      from = isRtl ? RIGHT : LEFT;
    } else if (from == 'end') {
      from = isRtl ? LEFT : RIGHT;
    }
    if (isRtl && (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.getRtlScrollAxisType)() == 2 /* RtlScrollAxisType.INVERTED */) {
      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and
      // 0 when scrolled all the way right.
      if (from == LEFT) {
        return el.scrollWidth - el.clientWidth - el.scrollLeft;
      } else {
        return el.scrollLeft;
      }
    } else if (isRtl && (0,_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.getRtlScrollAxisType)() == 1 /* RtlScrollAxisType.NEGATED */) {
      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and
      // 0 when scrolled all the way right.
      if (from == LEFT) {
        return el.scrollLeft + el.scrollWidth - el.clientWidth;
      } else {
        return -el.scrollLeft;
      }
    } else {
      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and
      // (scrollWidth - clientWidth) when scrolled all the way right.
      if (from == LEFT) {
        return el.scrollLeft;
      } else {
        return el.scrollWidth - el.clientWidth - el.scrollLeft;
      }
    }
  }
}
CdkScrollable.ɵfac = function CdkScrollable_Factory(t) {
  return new (t || CdkScrollable)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality, 8));
};
CdkScrollable.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CdkScrollable,
  selectors: [["", "cdk-scrollable", ""], ["", "cdkScrollable", ""]],
  standalone: true
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkScrollable, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[cdk-scrollable], [cdkScrollable]',
      standalone: true
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: ScrollDispatcher
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Time in ms to throttle the resize events by default. */
const DEFAULT_RESIZE_TIME = 20;
/**
 * Simple utility for getting the bounds of the browser viewport.
 * @docs-private
 */
class ViewportRuler {
  constructor(_platform, ngZone, document) {
    this._platform = _platform;
    /** Stream of viewport change events. */
    this._change = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
    /** Event listener that will be used to handle the viewport change events. */
    this._changeListener = event => {
      this._change.next(event);
    };
    this._document = document;
    ngZone.runOutsideAngular(() => {
      if (_platform.isBrowser) {
        const window = this._getWindow();
        // Note that bind the events ourselves, rather than going through something like RxJS's
        // `fromEvent` so that we can ensure that they're bound outside of the NgZone.
        window.addEventListener('resize', this._changeListener);
        window.addEventListener('orientationchange', this._changeListener);
      }
      // Clear the cached position so that the viewport is re-measured next time it is required.
      // We don't need to keep track of the subscription, because it is completed on destroy.
      this.change().subscribe(() => this._viewportSize = null);
    });
  }
  ngOnDestroy() {
    if (this._platform.isBrowser) {
      const window = this._getWindow();
      window.removeEventListener('resize', this._changeListener);
      window.removeEventListener('orientationchange', this._changeListener);
    }
    this._change.complete();
  }
  /** Returns the viewport's width and height. */
  getViewportSize() {
    if (!this._viewportSize) {
      this._updateViewportSize();
    }
    const output = {
      width: this._viewportSize.width,
      height: this._viewportSize.height
    };
    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.
    if (!this._platform.isBrowser) {
      this._viewportSize = null;
    }
    return output;
  }
  /** Gets a ClientRect for the viewport's bounds. */
  getViewportRect() {
    // Use the document element's bounding rect rather than the window scroll properties
    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll
    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different
    // conceptual viewports. Under most circumstances these viewports are equivalent, but they
    // can disagree when the page is pinch-zoomed (on devices that support touch).
    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4
    // We use the documentElement instead of the body because, by default (without a css reset)
    // browsers typically give the document body an 8px margin, which is not included in
    // getBoundingClientRect().
    const scrollPosition = this.getViewportScrollPosition();
    const {
      width,
      height
    } = this.getViewportSize();
    return {
      top: scrollPosition.top,
      left: scrollPosition.left,
      bottom: scrollPosition.top + height,
      right: scrollPosition.left + width,
      height,
      width
    };
  }
  /** Gets the (top, left) scroll position of the viewport. */
  getViewportScrollPosition() {
    // While we can get a reference to the fake document
    // during SSR, it doesn't have getBoundingClientRect.
    if (!this._platform.isBrowser) {
      return {
        top: 0,
        left: 0
      };
    }
    // The top-left-corner of the viewport is determined by the scroll position of the document
    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about
    // whether `document.body` or `document.documentElement` is the scrolled element, so reading
    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of
    // `document.documentElement` works consistently, where the `top` and `left` values will
    // equal negative the scroll position.
    const document = this._document;
    const window = this._getWindow();
    const documentElement = document.documentElement;
    const documentRect = documentElement.getBoundingClientRect();
    const top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;
    const left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;
    return {
      top,
      left
    };
  }
  /**
   * Returns a stream that emits whenever the size of the viewport changes.
   * This stream emits outside of the Angular zone.
   * @param throttleTime Time in milliseconds to throttle the stream.
   */
  change(throttleTime = DEFAULT_RESIZE_TIME) {
    return throttleTime > 0 ? this._change.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.auditTime)(throttleTime)) : this._change;
  }
  /** Use defaultView of injected document if available or fallback to global window reference */
  _getWindow() {
    return this._document.defaultView || window;
  }
  /** Updates the cached viewport size. */
  _updateViewportSize() {
    const window = this._getWindow();
    this._viewportSize = this._platform.isBrowser ? {
      width: window.innerWidth,
      height: window.innerHeight
    } : {
      width: 0,
      height: 0
    };
  }
}
ViewportRuler.ɵfac = function ViewportRuler_Factory(t) {
  return new (t || ViewportRuler)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_10__.DOCUMENT, 8));
};
ViewportRuler.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: ViewportRuler,
  factory: ViewportRuler.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ViewportRuler, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_10__.DOCUMENT]
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const VIRTUAL_SCROLLABLE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('VIRTUAL_SCROLLABLE');
/**
 * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.
 */
class CdkVirtualScrollable extends CdkScrollable {
  constructor(elementRef, scrollDispatcher, ngZone, dir) {
    super(elementRef, scrollDispatcher, ngZone, dir);
  }
  /**
   * Measure the viewport size for the provided orientation.
   *
   * @param orientation The orientation to measure the size from.
   */
  measureViewportSize(orientation) {
    const viewportEl = this.elementRef.nativeElement;
    return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;
  }
}
CdkVirtualScrollable.ɵfac = function CdkVirtualScrollable_Factory(t) {
  return new (t || CdkVirtualScrollable)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality, 8));
};
CdkVirtualScrollable.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CdkVirtualScrollable,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkVirtualScrollable, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: ScrollDispatcher
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Checks if the given ranges are equal. */
function rangesEqual(r1, r2) {
  return r1.start == r2.start && r1.end == r2.end;
}
/**
 * Scheduler to be used for scroll events. Needs to fall back to
 * something that doesn't rely on requestAnimationFrame on environments
 * that don't support it (e.g. server-side rendering).
 */
const SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? rxjs__WEBPACK_IMPORTED_MODULE_13__.animationFrameScheduler : rxjs__WEBPACK_IMPORTED_MODULE_14__.asapScheduler;
/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */
class CdkVirtualScrollViewport extends CdkVirtualScrollable {
  /** The direction the viewport scrolls. */
  get orientation() {
    return this._orientation;
  }
  set orientation(orientation) {
    if (this._orientation !== orientation) {
      this._orientation = orientation;
      this._calculateSpacerSize();
    }
  }
  /**
   * Whether rendered items should persist in the DOM after scrolling out of view. By default, items
   * will be removed.
   */
  get appendOnly() {
    return this._appendOnly;
  }
  set appendOnly(value) {
    this._appendOnly = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceBooleanProperty)(value);
  }
  constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {
    super(elementRef, scrollDispatcher, ngZone, dir);
    this.elementRef = elementRef;
    this._changeDetectorRef = _changeDetectorRef;
    this._scrollStrategy = _scrollStrategy;
    this.scrollable = scrollable;
    this._platform = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__.Platform);
    /** Emits when the viewport is detached from a CdkVirtualForOf. */
    this._detachedSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
    /** Emits when the rendered range changes. */
    this._renderedRangeSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
    this._orientation = 'vertical';
    this._appendOnly = false;
    // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll
    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because
    // depending on how the strategy calculates the scrolled index, it may come at a cost to
    // performance.
    /** Emits when the index of the first element visible in the viewport changes. */
    this.scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable(observer => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));
    /** A stream that emits whenever the rendered range changes. */
    this.renderedRangeStream = this._renderedRangeSubject;
    /**
     * The total size of all content (in pixels), including content that is not currently rendered.
     */
    this._totalContentSize = 0;
    /** A string representing the `style.width` property value to be used for the spacer element. */
    this._totalContentWidth = '';
    /** A string representing the `style.height` property value to be used for the spacer element. */
    this._totalContentHeight = '';
    /** The currently rendered range of indices. */
    this._renderedRange = {
      start: 0,
      end: 0
    };
    /** The length of the data bound to this viewport (in number of items). */
    this._dataLength = 0;
    /** The size of the viewport (in pixels). */
    this._viewportSize = 0;
    /** The last rendered content offset that was set. */
    this._renderedContentOffset = 0;
    /**
     * Whether the last rendered content offset was to the end of the content (and therefore needs to
     * be rewritten as an offset to the start of the content).
     */
    this._renderedContentOffsetNeedsRewrite = false;
    /** Whether there is a pending change detection cycle. */
    this._isChangeDetectionPending = false;
    /** A list of functions to run after the next change detection cycle. */
    this._runAfterChangeDetection = [];
    /** Subscription to changes in the viewport size. */
    this._viewportChanges = rxjs__WEBPACK_IMPORTED_MODULE_15__.Subscription.EMPTY;
    if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw Error('Error: cdk-virtual-scroll-viewport requires the "itemSize" property to be set.');
    }
    this._viewportChanges = viewportRuler.change().subscribe(() => {
      this.checkViewportSize();
    });
    if (!this.scrollable) {
      // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable
      this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');
      this.scrollable = this;
    }
  }
  ngOnInit() {
    // Scrolling depends on the element dimensions which we can't get during SSR.
    if (!this._platform.isBrowser) {
      return;
    }
    if (this.scrollable === this) {
      super.ngOnInit();
    }
    // It's still too early to measure the viewport at this point. Deferring with a promise allows
    // the Viewport to be rendered with the correct size before we measure. We run this outside the
    // zone to avoid causing more change detection cycles. We handle the change detection loop
    // ourselves instead.
    this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {
      this._measureViewportSize();
      this._scrollStrategy.attach(this);
      this.scrollable.elementScrolled().pipe(
      // Start off with a fake scroll event so we properly detect our initial position.
      (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.startWith)(null),
      // Collect multiple events into one until the next animation frame. This way if
      // there are multiple scroll events in the same frame we only need to recheck
      // our layout once.
      (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.auditTime)(0, SCROLL_SCHEDULER)).subscribe(() => this._scrollStrategy.onContentScrolled());
      this._markChangeDetectionNeeded();
    }));
  }
  ngOnDestroy() {
    this.detach();
    this._scrollStrategy.detach();
    // Complete all subjects
    this._renderedRangeSubject.complete();
    this._detachedSubject.complete();
    this._viewportChanges.unsubscribe();
    super.ngOnDestroy();
  }
  /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */
  attach(forOf) {
    if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw Error('CdkVirtualScrollViewport is already attached.');
    }
    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length
    // changes. Run outside the zone to avoid triggering change detection, since we're managing the
    // change detection loop ourselves.
    this.ngZone.runOutsideAngular(() => {
      this._forOf = forOf;
      this._forOf.dataStream.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.takeUntil)(this._detachedSubject)).subscribe(data => {
        const newLength = data.length;
        if (newLength !== this._dataLength) {
          this._dataLength = newLength;
          this._scrollStrategy.onDataLengthChanged();
        }
        this._doChangeDetection();
      });
    });
  }
  /** Detaches the current `CdkVirtualForOf`. */
  detach() {
    this._forOf = null;
    this._detachedSubject.next();
  }
  /** Gets the length of the data bound to this viewport (in number of items). */
  getDataLength() {
    return this._dataLength;
  }
  /** Gets the size of the viewport (in pixels). */
  getViewportSize() {
    return this._viewportSize;
  }
  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render
  // cycle happens. I'm being careful to only call it after the render cycle is complete and before
  // setting it to something else, but its error prone and should probably be split into
  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.
  /** Get the current rendered range of items. */
  getRenderedRange() {
    return this._renderedRange;
  }
  measureBoundingClientRectWithScrollOffset(from) {
    return this.getElementRef().nativeElement.getBoundingClientRect()[from];
  }
  /**
   * Sets the total size of all content (in pixels), including content that is not currently
   * rendered.
   */
  setTotalContentSize(size) {
    if (this._totalContentSize !== size) {
      this._totalContentSize = size;
      this._calculateSpacerSize();
      this._markChangeDetectionNeeded();
    }
  }
  /** Sets the currently rendered range of indices. */
  setRenderedRange(range) {
    if (!rangesEqual(this._renderedRange, range)) {
      if (this.appendOnly) {
        range = {
          start: 0,
          end: Math.max(this._renderedRange.end, range.end)
        };
      }
      this._renderedRangeSubject.next(this._renderedRange = range);
      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());
    }
  }
  /**
   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).
   */
  getOffsetToRenderedContentStart() {
    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;
  }
  /**
   * Sets the offset from the start of the viewport to either the start or end of the rendered data
   * (in pixels).
   */
  setRenderedContentOffset(offset, to = 'to-start') {
    // In appendOnly, we always start from the top
    offset = this.appendOnly && to === 'to-start' ? 0 : offset;
    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis
    // in the negative direction.
    const isRtl = this.dir && this.dir.value == 'rtl';
    const isHorizontal = this.orientation == 'horizontal';
    const axis = isHorizontal ? 'X' : 'Y';
    const axisDirection = isHorizontal && isRtl ? -1 : 1;
    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;
    this._renderedContentOffset = offset;
    if (to === 'to-end') {
      transform += ` translate${axis}(-100%)`;
      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise
      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would
      // expand upward).
      this._renderedContentOffsetNeedsRewrite = true;
    }
    if (this._renderedContentTransform != transform) {
      // We know this value is safe because we parse `offset` with `Number()` before passing it
      // into the string.
      this._renderedContentTransform = transform;
      this._markChangeDetectionNeeded(() => {
        if (this._renderedContentOffsetNeedsRewrite) {
          this._renderedContentOffset -= this.measureRenderedContentSize();
          this._renderedContentOffsetNeedsRewrite = false;
          this.setRenderedContentOffset(this._renderedContentOffset);
        } else {
          this._scrollStrategy.onRenderedOffsetChanged();
        }
      });
    }
  }
  /**
   * Scrolls to the given offset from the start of the viewport. Please note that this is not always
   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left
   * direction, this would be the equivalent of setting a fictional `scrollRight` property.
   * @param offset The offset to scroll to.
   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
   */
  scrollToOffset(offset, behavior = 'auto') {
    const options = {
      behavior
    };
    if (this.orientation === 'horizontal') {
      options.start = offset;
    } else {
      options.top = offset;
    }
    this.scrollable.scrollTo(options);
  }
  /**
   * Scrolls to the offset for the given index.
   * @param index The index of the element to scroll to.
   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
   */
  scrollToIndex(index, behavior = 'auto') {
    this._scrollStrategy.scrollToIndex(index, behavior);
  }
  /**
   * Gets the current scroll offset from the start of the scrollable (in pixels).
   * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'
   *     in horizontal mode.
   */
  measureScrollOffset(from) {
    // This is to break the call cycle
    let measureScrollOffset;
    if (this.scrollable == this) {
      measureScrollOffset = _from => super.measureScrollOffset(_from);
    } else {
      measureScrollOffset = _from => this.scrollable.measureScrollOffset(_from);
    }
    return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) - this.measureViewportOffset());
  }
  /**
   * Measures the offset of the viewport from the scrolling container
   * @param from The edge to measure from.
   */
  measureViewportOffset(from) {
    let fromRect;
    const LEFT = 'left';
    const RIGHT = 'right';
    const isRtl = this.dir?.value == 'rtl';
    if (from == 'start') {
      fromRect = isRtl ? RIGHT : LEFT;
    } else if (from == 'end') {
      fromRect = isRtl ? LEFT : RIGHT;
    } else if (from) {
      fromRect = from;
    } else {
      fromRect = this.orientation === 'horizontal' ? 'left' : 'top';
    }
    const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);
    const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];
    return viewportClientRect - scrollerClientRect;
  }
  /** Measure the combined size of all of the rendered items. */
  measureRenderedContentSize() {
    const contentEl = this._contentWrapper.nativeElement;
    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;
  }
  /**
   * Measure the total combined size of the given range. Throws if the range includes items that are
   * not rendered.
   */
  measureRangeSize(range) {
    if (!this._forOf) {
      return 0;
    }
    return this._forOf.measureRangeSize(range, this.orientation);
  }
  /** Update the viewport dimensions and re-render. */
  checkViewportSize() {
    // TODO: Cleanup later when add logic for handling content resize
    this._measureViewportSize();
    this._scrollStrategy.onDataLengthChanged();
  }
  /** Measure the viewport size. */
  _measureViewportSize() {
    this._viewportSize = this.scrollable.measureViewportSize(this.orientation);
  }
  /** Queue up change detection to run. */
  _markChangeDetectionNeeded(runAfter) {
    if (runAfter) {
      this._runAfterChangeDetection.push(runAfter);
    }
    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of
    // properties sequentially we only have to run `_doChangeDetection` once at the end.
    if (!this._isChangeDetectionPending) {
      this._isChangeDetectionPending = true;
      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {
        this._doChangeDetection();
      }));
    }
  }
  /** Run change detection. */
  _doChangeDetection() {
    this._isChangeDetectionPending = false;
    // Apply the content transform. The transform can't be set via an Angular binding because
    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of
    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through
    // the `Number` function first to coerce it to a numeric value.
    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;
    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection
    // from the root, since the repeated items are content projected in. Calling `detectChanges`
    // instead does not properly check the projected content.
    this.ngZone.run(() => this._changeDetectorRef.markForCheck());
    const runAfterChangeDetection = this._runAfterChangeDetection;
    this._runAfterChangeDetection = [];
    for (const fn of runAfterChangeDetection) {
      fn();
    }
  }
  /** Calculates the `style.width` and `style.height` for the spacer element. */
  _calculateSpacerSize() {
    this._totalContentHeight = this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;
    this._totalContentWidth = this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';
  }
}
CdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {
  return new (t || CdkVirtualScrollViewport)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](VIRTUAL_SCROLL_STRATEGY, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ViewportRuler), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](VIRTUAL_SCROLLABLE, 8));
};
CdkVirtualScrollViewport.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: CdkVirtualScrollViewport,
  selectors: [["cdk-virtual-scroll-viewport"]],
  viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c0, 7);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._contentWrapper = _t.first);
    }
  },
  hostAttrs: [1, "cdk-virtual-scroll-viewport"],
  hostVars: 4,
  hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("cdk-virtual-scroll-orientation-horizontal", ctx.orientation === "horizontal")("cdk-virtual-scroll-orientation-vertical", ctx.orientation !== "horizontal");
    }
  },
  inputs: {
    orientation: "orientation",
    appendOnly: "appendOnly"
  },
  outputs: {
    scrolledIndexChange: "scrolledIndexChange"
  },
  standalone: true,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: CdkScrollable,
    useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,
    deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport]
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵStandaloneFeature"]],
  ngContentSelectors: _c1,
  decls: 4,
  vars: 4,
  consts: [[1, "cdk-virtual-scroll-content-wrapper"], ["contentWrapper", ""], [1, "cdk-virtual-scroll-spacer"]],
  template: function CdkVirtualScrollViewport_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "div", 2);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("width", ctx._totalContentWidth)("height", ctx._totalContentHeight);
    }
  },
  styles: ["cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}"],
  encapsulation: 2,
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkVirtualScrollViewport, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'cdk-virtual-scroll-viewport',
      host: {
        'class': 'cdk-virtual-scroll-viewport',
        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === "horizontal"',
        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== "horizontal"'
      },
      encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewEncapsulation.None,
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      standalone: true,
      providers: [{
        provide: CdkScrollable,
        useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,
        deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport]
      }],
      template: "<!--\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\n  position.\n-->\n<div #contentWrapper class=\"cdk-virtual-scroll-content-wrapper\">\n  <ng-content></ng-content>\n</div>\n<!--\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\n  so that the scrollbar captures the size of the entire data set.\n-->\n<div class=\"cdk-virtual-scroll-spacer\"\n     [style.width]=\"_totalContentWidth\" [style.height]=\"_totalContentHeight\"></div>\n",
      styles: ["cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [VIRTUAL_SCROLL_STRATEGY]
      }]
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }, {
      type: ScrollDispatcher
    }, {
      type: ViewportRuler
    }, {
      type: CdkVirtualScrollable,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [VIRTUAL_SCROLLABLE]
      }]
    }];
  }, {
    orientation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    appendOnly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    scrolledIndexChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    _contentWrapper: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['contentWrapper', {
        static: true
      }]
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Helper to extract the offset of a DOM Node in a certain direction. */
function getOffset(orientation, direction, node) {
  const el = node;
  if (!el.getBoundingClientRect) {
    return 0;
  }
  const rect = el.getBoundingClientRect();
  if (orientation === 'horizontal') {
    return direction === 'start' ? rect.left : rect.right;
  }
  return direction === 'start' ? rect.top : rect.bottom;
}
/**
 * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling
 * container.
 */
class CdkVirtualForOf {
  /** The DataSource to display. */
  get cdkVirtualForOf() {
    return this._cdkVirtualForOf;
  }
  set cdkVirtualForOf(value) {
    this._cdkVirtualForOf = value;
    if ((0,_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_17__.isDataSource)(value)) {
      this._dataSourceChanges.next(value);
    } else {
      // If value is an an NgIterable, convert it to an array.
      this._dataSourceChanges.next(new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_17__.ArrayDataSource((0,rxjs__WEBPACK_IMPORTED_MODULE_18__.isObservable)(value) ? value : Array.from(value || [])));
    }
  }
  /**
   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and
   * the item and produces a value to be used as the item's identity when tracking changes.
   */
  get cdkVirtualForTrackBy() {
    return this._cdkVirtualForTrackBy;
  }
  set cdkVirtualForTrackBy(fn) {
    this._needsUpdate = true;
    this._cdkVirtualForTrackBy = fn ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) : undefined;
  }
  /** The template used to stamp out new elements. */
  set cdkVirtualForTemplate(value) {
    if (value) {
      this._needsUpdate = true;
      this._template = value;
    }
  }
  /**
   * The size of the cache used to store templates that are not being used for re-use later.
   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.
   */
  get cdkVirtualForTemplateCacheSize() {
    return this._viewRepeater.viewCacheSize;
  }
  set cdkVirtualForTemplateCacheSize(size) {
    this._viewRepeater.viewCacheSize = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceNumberProperty)(size);
  }
  constructor( /** The view container to add items to. */
  _viewContainerRef, /** The template to use when stamping out new items. */
  _template, /** The set of available differs. */
  _differs, /** The strategy used to render items in the virtual scroll viewport. */
  _viewRepeater, /** The virtual scrolling viewport that these items are being rendered in. */
  _viewport, ngZone) {
    this._viewContainerRef = _viewContainerRef;
    this._template = _template;
    this._differs = _differs;
    this._viewRepeater = _viewRepeater;
    this._viewport = _viewport;
    /** Emits when the rendered view of the data changes. */
    this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
    /** Subject that emits when a new DataSource instance is given. */
    this._dataSourceChanges = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
    /** Emits whenever the data in the current DataSource changes. */
    this.dataStream = this._dataSourceChanges.pipe(
    // Start off with null `DataSource`.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.startWith)(null),
    // Bundle up the previous and current data sources so we can work with both.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.pairwise)(),
    // Use `_changeDataSource` to disconnect from the previous data source and connect to the
    // new one, passing back a stream of data changes which we run through `switchMap` to give
    // us a data stream that emits the latest data from whatever the current `DataSource` is.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_20__.switchMap)(([prev, cur]) => this._changeDataSource(prev, cur)),
    // Replay the last emitted data when someone subscribes.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.shareReplay)(1));
    /** The differ used to calculate changes to the data. */
    this._differ = null;
    /** Whether the rendered data should be updated during the next ngDoCheck cycle. */
    this._needsUpdate = false;
    this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
    this.dataStream.subscribe(data => {
      this._data = data;
      this._onRenderedDataChange();
    });
    this._viewport.renderedRangeStream.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.takeUntil)(this._destroyed)).subscribe(range => {
      this._renderedRange = range;
      if (this.viewChange.observers.length) {
        ngZone.run(() => this.viewChange.next(this._renderedRange));
      }
      this._onRenderedDataChange();
    });
    this._viewport.attach(this);
  }
  /**
   * Measures the combined size (width for horizontal orientation, height for vertical) of all items
   * in the specified range. Throws an error if the range includes items that are not currently
   * rendered.
   */
  measureRangeSize(range, orientation) {
    if (range.start >= range.end) {
      return 0;
    }
    if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw Error(`Error: attempted to measure an item that isn't rendered.`);
    }
    // The index into the list of rendered views for the first item in the range.
    const renderedStartIndex = range.start - this._renderedRange.start;
    // The length of the range we're measuring.
    const rangeLen = range.end - range.start;
    // Loop over all the views, find the first and land node and compute the size by subtracting
    // the top of the first node from the bottom of the last one.
    let firstNode;
    let lastNode;
    // Find the first node by starting from the beginning and going forwards.
    for (let i = 0; i < rangeLen; i++) {
      const view = this._viewContainerRef.get(i + renderedStartIndex);
      if (view && view.rootNodes.length) {
        firstNode = lastNode = view.rootNodes[0];
        break;
      }
    }
    // Find the last node by starting from the end and going backwards.
    for (let i = rangeLen - 1; i > -1; i--) {
      const view = this._viewContainerRef.get(i + renderedStartIndex);
      if (view && view.rootNodes.length) {
        lastNode = view.rootNodes[view.rootNodes.length - 1];
        break;
      }
    }
    return firstNode && lastNode ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;
  }
  ngDoCheck() {
    if (this._differ && this._needsUpdate) {
      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of
      // this list being rendered (can use simpler algorithm) vs needs update due to data actually
      // changing (need to do this diff).
      const changes = this._differ.diff(this._renderedItems);
      if (!changes) {
        this._updateContext();
      } else {
        this._applyChanges(changes);
      }
      this._needsUpdate = false;
    }
  }
  ngOnDestroy() {
    this._viewport.detach();
    this._dataSourceChanges.next(undefined);
    this._dataSourceChanges.complete();
    this.viewChange.complete();
    this._destroyed.next();
    this._destroyed.complete();
    this._viewRepeater.detach();
  }
  /** React to scroll state changes in the viewport. */
  _onRenderedDataChange() {
    if (!this._renderedRange) {
      return;
    }
    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);
    if (!this._differ) {
      // Use a wrapper function for the `trackBy` so any new values are
      // picked up automatically without having to recreate the differ.
      this._differ = this._differs.find(this._renderedItems).create((index, item) => {
        return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;
      });
    }
    this._needsUpdate = true;
  }
  /** Swap out one `DataSource` for another. */
  _changeDataSource(oldDs, newDs) {
    if (oldDs) {
      oldDs.disconnect(this);
    }
    this._needsUpdate = true;
    return newDs ? newDs.connect(this) : (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)();
  }
  /** Update the `CdkVirtualForOfContext` for all views. */
  _updateContext() {
    const count = this._data.length;
    let i = this._viewContainerRef.length;
    while (i--) {
      const view = this._viewContainerRef.get(i);
      view.context.index = this._renderedRange.start + i;
      view.context.count = count;
      this._updateComputedContextProperties(view.context);
      view.detectChanges();
    }
  }
  /** Apply changes to the DOM. */
  _applyChanges(changes) {
    this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);
    // Update $implicit for any items that had an identity change.
    changes.forEachIdentityChange(record => {
      const view = this._viewContainerRef.get(record.currentIndex);
      view.context.$implicit = record.item;
    });
    // Update the context variables on all items.
    const count = this._data.length;
    let i = this._viewContainerRef.length;
    while (i--) {
      const view = this._viewContainerRef.get(i);
      view.context.index = this._renderedRange.start + i;
      view.context.count = count;
      this._updateComputedContextProperties(view.context);
    }
  }
  /** Update the computed properties on the `CdkVirtualForOfContext`. */
  _updateComputedContextProperties(context) {
    context.first = context.index === 0;
    context.last = context.index === context.count - 1;
    context.even = context.index % 2 === 0;
    context.odd = !context.even;
  }
  _getEmbeddedViewArgs(record, index) {
    // Note that it's important that we insert the item directly at the proper index,
    // rather than inserting it and the moving it in place, because if there's a directive
    // on the same node that injects the `ViewContainerRef`, Angular will insert another
    // comment node which can throw off the move when it's being repeated for all items.
    return {
      templateRef: this._template,
      context: {
        $implicit: record.item,
        // It's guaranteed that the iterable is not "undefined" or "null" because we only
        // generate views for elements if the "cdkVirtualForOf" iterable has elements.
        cdkVirtualForOf: this._cdkVirtualForOf,
        index: -1,
        count: -1,
        first: false,
        last: false,
        odd: false,
        even: false
      },
      index
    };
  }
}
CdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {
  return new (t || CdkVirtualForOf)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_17__._VIEW_REPEATER_STRATEGY), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CdkVirtualScrollViewport, 4), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
};
CdkVirtualForOf.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CdkVirtualForOf,
  selectors: [["", "cdkVirtualFor", "", "cdkVirtualForOf", ""]],
  inputs: {
    cdkVirtualForOf: "cdkVirtualForOf",
    cdkVirtualForTrackBy: "cdkVirtualForTrackBy",
    cdkVirtualForTemplate: "cdkVirtualForTemplate",
    cdkVirtualForTemplateCacheSize: "cdkVirtualForTemplateCacheSize"
  },
  standalone: true,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_17__._VIEW_REPEATER_STRATEGY,
    useClass: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_17__._RecycleViewRepeaterStrategy
  }])]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkVirtualForOf, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[cdkVirtualFor][cdkVirtualForOf]',
      providers: [{
        provide: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_17__._VIEW_REPEATER_STRATEGY,
        useClass: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_17__._RecycleViewRepeaterStrategy
      }],
      standalone: true
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers
    }, {
      type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_17__._RecycleViewRepeaterStrategy,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_17__._VIEW_REPEATER_STRATEGY]
      }]
    }, {
      type: CdkVirtualScrollViewport,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }];
  }, {
    cdkVirtualForOf: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    cdkVirtualForTrackBy: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    cdkVirtualForTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    cdkVirtualForTemplateCacheSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Provides a virtual scrollable for the element it is attached to.
 */
class CdkVirtualScrollableElement extends CdkVirtualScrollable {
  constructor(elementRef, scrollDispatcher, ngZone, dir) {
    super(elementRef, scrollDispatcher, ngZone, dir);
  }
  measureBoundingClientRectWithScrollOffset(from) {
    return this.getElementRef().nativeElement.getBoundingClientRect()[from] - this.measureScrollOffset(from);
  }
}
CdkVirtualScrollableElement.ɵfac = function CdkVirtualScrollableElement_Factory(t) {
  return new (t || CdkVirtualScrollableElement)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality, 8));
};
CdkVirtualScrollableElement.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CdkVirtualScrollableElement,
  selectors: [["", "cdkVirtualScrollingElement", ""]],
  hostAttrs: [1, "cdk-virtual-scrollable"],
  standalone: true,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: VIRTUAL_SCROLLABLE,
    useExisting: CdkVirtualScrollableElement
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkVirtualScrollableElement, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[cdkVirtualScrollingElement]',
      providers: [{
        provide: VIRTUAL_SCROLLABLE,
        useExisting: CdkVirtualScrollableElement
      }],
      standalone: true,
      host: {
        'class': 'cdk-virtual-scrollable'
      }
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: ScrollDispatcher
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Provides as virtual scrollable for the global / window scrollbar.
 */
class CdkVirtualScrollableWindow extends CdkVirtualScrollable {
  constructor(scrollDispatcher, ngZone, dir) {
    super(new _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);
    this._elementScrolled = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable(observer => this.ngZone.runOutsideAngular(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.fromEvent)(document, 'scroll').pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.takeUntil)(this._destroyed)).subscribe(observer)));
  }
  measureBoundingClientRectWithScrollOffset(from) {
    return this.getElementRef().nativeElement.getBoundingClientRect()[from];
  }
}
CdkVirtualScrollableWindow.ɵfac = function CdkVirtualScrollableWindow_Factory(t) {
  return new (t || CdkVirtualScrollableWindow)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ScrollDispatcher), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality, 8));
};
CdkVirtualScrollableWindow.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CdkVirtualScrollableWindow,
  selectors: [["cdk-virtual-scroll-viewport", "scrollWindow", ""]],
  standalone: true,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: VIRTUAL_SCROLLABLE,
    useExisting: CdkVirtualScrollableWindow
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkVirtualScrollableWindow, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'cdk-virtual-scroll-viewport[scrollWindow]',
      providers: [{
        provide: VIRTUAL_SCROLLABLE,
        useExisting: CdkVirtualScrollableWindow
      }],
      standalone: true
    }]
  }], function () {
    return [{
      type: ScrollDispatcher
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.Directionality,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }];
  }, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
class CdkScrollableModule {}
CdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t) {
  return new (t || CdkScrollableModule)();
};
CdkScrollableModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: CdkScrollableModule
});
CdkScrollableModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkScrollableModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      exports: [CdkScrollable],
      imports: [CdkScrollable]
    }]
  }], null, null);
})();
/**
 * @docs-primary-export
 */
class ScrollingModule {}
ScrollingModule.ɵfac = function ScrollingModule_Factory(t) {
  return new (t || ScrollingModule)();
};
ScrollingModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: ScrollingModule
});
ScrollingModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.BidiModule, CdkScrollableModule, CdkVirtualScrollViewport, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.BidiModule, CdkScrollableModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ScrollingModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.BidiModule, CdkScrollableModule, CdkVirtualScrollViewport, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollableWindow, CdkVirtualScrollableElement],
      exports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__.BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollableWindow, CdkVirtualScrollableElement]
    }]
  }], null, null);
})();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 8987:
/*!********************************************************!*\
  !*** ./node_modules/@angular/common/fesm2020/http.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTTP_INTERCEPTORS": () => (/* binding */ HTTP_INTERCEPTORS),
/* harmony export */   "HttpBackend": () => (/* binding */ HttpBackend),
/* harmony export */   "HttpClient": () => (/* binding */ HttpClient),
/* harmony export */   "HttpClientJsonpModule": () => (/* binding */ HttpClientJsonpModule),
/* harmony export */   "HttpClientModule": () => (/* binding */ HttpClientModule),
/* harmony export */   "HttpClientXsrfModule": () => (/* binding */ HttpClientXsrfModule),
/* harmony export */   "HttpContext": () => (/* binding */ HttpContext),
/* harmony export */   "HttpContextToken": () => (/* binding */ HttpContextToken),
/* harmony export */   "HttpErrorResponse": () => (/* binding */ HttpErrorResponse),
/* harmony export */   "HttpEventType": () => (/* binding */ HttpEventType),
/* harmony export */   "HttpFeatureKind": () => (/* binding */ HttpFeatureKind),
/* harmony export */   "HttpHandler": () => (/* binding */ HttpHandler),
/* harmony export */   "HttpHeaderResponse": () => (/* binding */ HttpHeaderResponse),
/* harmony export */   "HttpHeaders": () => (/* binding */ HttpHeaders),
/* harmony export */   "HttpParams": () => (/* binding */ HttpParams),
/* harmony export */   "HttpRequest": () => (/* binding */ HttpRequest),
/* harmony export */   "HttpResponse": () => (/* binding */ HttpResponse),
/* harmony export */   "HttpResponseBase": () => (/* binding */ HttpResponseBase),
/* harmony export */   "HttpUrlEncodingCodec": () => (/* binding */ HttpUrlEncodingCodec),
/* harmony export */   "HttpXhrBackend": () => (/* binding */ HttpXhrBackend),
/* harmony export */   "HttpXsrfTokenExtractor": () => (/* binding */ HttpXsrfTokenExtractor),
/* harmony export */   "JsonpClientBackend": () => (/* binding */ JsonpClientBackend),
/* harmony export */   "JsonpInterceptor": () => (/* binding */ JsonpInterceptor),
/* harmony export */   "XhrFactory": () => (/* binding */ XhrFactory),
/* harmony export */   "provideHttpClient": () => (/* binding */ provideHttpClient),
/* harmony export */   "withInterceptors": () => (/* binding */ withInterceptors),
/* harmony export */   "withInterceptorsFromDi": () => (/* binding */ withInterceptorsFromDi),
/* harmony export */   "withJsonpSupport": () => (/* binding */ withJsonpSupport),
/* harmony export */   "withNoXsrfProtection": () => (/* binding */ withNoXsrfProtection),
/* harmony export */   "withRequestsMadeViaParent": () => (/* binding */ withRequestsMadeViaParent),
/* harmony export */   "withXsrfConfiguration": () => (/* binding */ withXsrfConfiguration),
/* harmony export */   "ɵHttpInterceptingHandler": () => (/* binding */ HttpInterceptorHandler),
/* harmony export */   "ɵHttpInterceptorHandler": () => (/* binding */ HttpInterceptorHandler)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 4666);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ 745);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ 833);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ 3853);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ 116);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ 635);
/**
 * @license Angular v15.2.4
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */








/**
 * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a
 * `HttpResponse`.
 *
 * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the
 * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the
 * `HttpBackend`.
 *
 * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.
 *
 * @publicApi
 */
class HttpHandler {}
/**
 * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.
 *
 * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.
 *
 * When injected, `HttpBackend` dispatches requests directly to the backend, without going
 * through the interceptor chain.
 *
 * @publicApi
 */
class HttpBackend {}

/**
 * Represents the header configuration options for an HTTP request.
 * Instances are immutable. Modifying methods return a cloned
 * instance with the change. The original object is never changed.
 *
 * @publicApi
 */
class HttpHeaders {
  /**  Constructs a new HTTP header object with the given values.*/
  constructor(headers) {
    /**
     * Internal map of lowercased header names to the normalized
     * form of the name (the form seen first).
     */
    this.normalizedNames = new Map();
    /**
     * Queued updates to be materialized the next initialization.
     */
    this.lazyUpdate = null;
    if (!headers) {
      this.headers = new Map();
    } else if (typeof headers === 'string') {
      this.lazyInit = () => {
        this.headers = new Map();
        headers.split('\n').forEach(line => {
          const index = line.indexOf(':');
          if (index > 0) {
            const name = line.slice(0, index);
            const key = name.toLowerCase();
            const value = line.slice(index + 1).trim();
            this.maybeSetNormalizedName(name, key);
            if (this.headers.has(key)) {
              this.headers.get(key).push(value);
            } else {
              this.headers.set(key, [value]);
            }
          }
        });
      };
    } else {
      this.lazyInit = () => {
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          assertValidHeaders(headers);
        }
        this.headers = new Map();
        Object.keys(headers).forEach(name => {
          let values = headers[name];
          const key = name.toLowerCase();
          if (typeof values === 'string') {
            values = [values];
          }
          if (values.length > 0) {
            this.headers.set(key, values);
            this.maybeSetNormalizedName(name, key);
          }
        });
      };
    }
  }
  /**
   * Checks for existence of a given header.
   *
   * @param name The header name to check for existence.
   *
   * @returns True if the header exists, false otherwise.
   */
  has(name) {
    this.init();
    return this.headers.has(name.toLowerCase());
  }
  /**
   * Retrieves the first value of a given header.
   *
   * @param name The header name.
   *
   * @returns The value string if the header exists, null otherwise
   */
  get(name) {
    this.init();
    const values = this.headers.get(name.toLowerCase());
    return values && values.length > 0 ? values[0] : null;
  }
  /**
   * Retrieves the names of the headers.
   *
   * @returns A list of header names.
   */
  keys() {
    this.init();
    return Array.from(this.normalizedNames.values());
  }
  /**
   * Retrieves a list of values for a given header.
   *
   * @param name The header name from which to retrieve values.
   *
   * @returns A string of values if the header exists, null otherwise.
   */
  getAll(name) {
    this.init();
    return this.headers.get(name.toLowerCase()) || null;
  }
  /**
   * Appends a new value to the existing set of values for a header
   * and returns them in a clone of the original instance.
   *
   * @param name The header name for which to append the values.
   * @param value The value to append.
   *
   * @returns A clone of the HTTP headers object with the value appended to the given header.
   */
  append(name, value) {
    return this.clone({
      name,
      value,
      op: 'a'
    });
  }
  /**
   * Sets or modifies a value for a given header in a clone of the original instance.
   * If the header already exists, its value is replaced with the given value
   * in the returned object.
   *
   * @param name The header name.
   * @param value The value or values to set or override for the given header.
   *
   * @returns A clone of the HTTP headers object with the newly set header value.
   */
  set(name, value) {
    return this.clone({
      name,
      value,
      op: 's'
    });
  }
  /**
   * Deletes values for a given header in a clone of the original instance.
   *
   * @param name The header name.
   * @param value The value or values to delete for the given header.
   *
   * @returns A clone of the HTTP headers object with the given value deleted.
   */
  delete(name, value) {
    return this.clone({
      name,
      value,
      op: 'd'
    });
  }
  maybeSetNormalizedName(name, lcName) {
    if (!this.normalizedNames.has(lcName)) {
      this.normalizedNames.set(lcName, name);
    }
  }
  init() {
    if (!!this.lazyInit) {
      if (this.lazyInit instanceof HttpHeaders) {
        this.copyFrom(this.lazyInit);
      } else {
        this.lazyInit();
      }
      this.lazyInit = null;
      if (!!this.lazyUpdate) {
        this.lazyUpdate.forEach(update => this.applyUpdate(update));
        this.lazyUpdate = null;
      }
    }
  }
  copyFrom(other) {
    other.init();
    Array.from(other.headers.keys()).forEach(key => {
      this.headers.set(key, other.headers.get(key));
      this.normalizedNames.set(key, other.normalizedNames.get(key));
    });
  }
  clone(update) {
    const clone = new HttpHeaders();
    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;
    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);
    return clone;
  }
  applyUpdate(update) {
    const key = update.name.toLowerCase();
    switch (update.op) {
      case 'a':
      case 's':
        let value = update.value;
        if (typeof value === 'string') {
          value = [value];
        }
        if (value.length === 0) {
          return;
        }
        this.maybeSetNormalizedName(update.name, key);
        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];
        base.push(...value);
        this.headers.set(key, base);
        break;
      case 'd':
        const toDelete = update.value;
        if (!toDelete) {
          this.headers.delete(key);
          this.normalizedNames.delete(key);
        } else {
          let existing = this.headers.get(key);
          if (!existing) {
            return;
          }
          existing = existing.filter(value => toDelete.indexOf(value) === -1);
          if (existing.length === 0) {
            this.headers.delete(key);
            this.normalizedNames.delete(key);
          } else {
            this.headers.set(key, existing);
          }
        }
        break;
    }
  }
  /**
   * @internal
   */
  forEach(fn) {
    this.init();
    Array.from(this.normalizedNames.keys()).forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));
  }
}
/**
 * Verifies that the headers object has the right shape: the values
 * must be either strings or arrays. Throws an error if an invalid
 * header value is present.
 */
function assertValidHeaders(headers) {
  for (const [key, value] of Object.entries(headers)) {
    if (typeof value !== 'string' && !Array.isArray(value)) {
      throw new Error(`Unexpected value of the \`${key}\` header provided. ` + `Expecting either a string or an array, but got: \`${value}\`.`);
    }
  }
}

/**
 * Provides encoding and decoding of URL parameter and query-string values.
 *
 * Serializes and parses URL parameter keys and values to encode and decode them.
 * If you pass URL query parameters without encoding,
 * the query parameters can be misinterpreted at the receiving end.
 *
 *
 * @publicApi
 */
class HttpUrlEncodingCodec {
  /**
   * Encodes a key name for a URL parameter or query-string.
   * @param key The key name.
   * @returns The encoded key name.
   */
  encodeKey(key) {
    return standardEncoding(key);
  }
  /**
   * Encodes the value of a URL parameter or query-string.
   * @param value The value.
   * @returns The encoded value.
   */
  encodeValue(value) {
    return standardEncoding(value);
  }
  /**
   * Decodes an encoded URL parameter or query-string key.
   * @param key The encoded key name.
   * @returns The decoded key name.
   */
  decodeKey(key) {
    return decodeURIComponent(key);
  }
  /**
   * Decodes an encoded URL parameter or query-string value.
   * @param value The encoded value.
   * @returns The decoded value.
   */
  decodeValue(value) {
    return decodeURIComponent(value);
  }
}
function paramParser(rawParams, codec) {
  const map = new Map();
  if (rawParams.length > 0) {
    // The `window.location.search` can be used while creating an instance of the `HttpParams` class
    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`
    // may start with the `?` char, so we strip it if it's present.
    const params = rawParams.replace(/^\?/, '').split('&');
    params.forEach(param => {
      const eqIdx = param.indexOf('=');
      const [key, val] = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];
      const list = map.get(key) || [];
      list.push(val);
      map.set(key, list);
    });
  }
  return map;
}
/**
 * Encode input string with standard encodeURIComponent and then un-encode specific characters.
 */
const STANDARD_ENCODING_REGEX = /%(\d[a-f0-9])/gi;
const STANDARD_ENCODING_REPLACEMENTS = {
  '40': '@',
  '3A': ':',
  '24': '$',
  '2C': ',',
  '3B': ';',
  '3D': '=',
  '3F': '?',
  '2F': '/'
};
function standardEncoding(v) {
  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);
}
function valueToString(value) {
  return `${value}`;
}
/**
 * An HTTP request/response body that represents serialized parameters,
 * per the MIME type `application/x-www-form-urlencoded`.
 *
 * This class is immutable; all mutation operations return a new instance.
 *
 * @publicApi
 */
class HttpParams {
  constructor(options = {}) {
    this.updates = null;
    this.cloneFrom = null;
    this.encoder = options.encoder || new HttpUrlEncodingCodec();
    if (!!options.fromString) {
      if (!!options.fromObject) {
        throw new Error(`Cannot specify both fromString and fromObject.`);
      }
      this.map = paramParser(options.fromString, this.encoder);
    } else if (!!options.fromObject) {
      this.map = new Map();
      Object.keys(options.fromObject).forEach(key => {
        const value = options.fromObject[key];
        // convert the values to strings
        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];
        this.map.set(key, values);
      });
    } else {
      this.map = null;
    }
  }
  /**
   * Reports whether the body includes one or more values for a given parameter.
   * @param param The parameter name.
   * @returns True if the parameter has one or more values,
   * false if it has no value or is not present.
   */
  has(param) {
    this.init();
    return this.map.has(param);
  }
  /**
   * Retrieves the first value for a parameter.
   * @param param The parameter name.
   * @returns The first value of the given parameter,
   * or `null` if the parameter is not present.
   */
  get(param) {
    this.init();
    const res = this.map.get(param);
    return !!res ? res[0] : null;
  }
  /**
   * Retrieves all values for a  parameter.
   * @param param The parameter name.
   * @returns All values in a string array,
   * or `null` if the parameter not present.
   */
  getAll(param) {
    this.init();
    return this.map.get(param) || null;
  }
  /**
   * Retrieves all the parameters for this body.
   * @returns The parameter names in a string array.
   */
  keys() {
    this.init();
    return Array.from(this.map.keys());
  }
  /**
   * Appends a new value to existing values for a parameter.
   * @param param The parameter name.
   * @param value The new value to add.
   * @return A new body with the appended value.
   */
  append(param, value) {
    return this.clone({
      param,
      value,
      op: 'a'
    });
  }
  /**
   * Constructs a new body with appended values for the given parameter name.
   * @param params parameters and values
   * @return A new body with the new value.
   */
  appendAll(params) {
    const updates = [];
    Object.keys(params).forEach(param => {
      const value = params[param];
      if (Array.isArray(value)) {
        value.forEach(_value => {
          updates.push({
            param,
            value: _value,
            op: 'a'
          });
        });
      } else {
        updates.push({
          param,
          value: value,
          op: 'a'
        });
      }
    });
    return this.clone(updates);
  }
  /**
   * Replaces the value for a parameter.
   * @param param The parameter name.
   * @param value The new value.
   * @return A new body with the new value.
   */
  set(param, value) {
    return this.clone({
      param,
      value,
      op: 's'
    });
  }
  /**
   * Removes a given value or all values from a parameter.
   * @param param The parameter name.
   * @param value The value to remove, if provided.
   * @return A new body with the given value removed, or with all values
   * removed if no value is specified.
   */
  delete(param, value) {
    return this.clone({
      param,
      value,
      op: 'd'
    });
  }
  /**
   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are
   * separated by `&`s.
   */
  toString() {
    this.init();
    return this.keys().map(key => {
      const eKey = this.encoder.encodeKey(key);
      // `a: ['1']` produces `'a=1'`
      // `b: []` produces `''`
      // `c: ['1', '2']` produces `'c=1&c=2'`
      return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value)).join('&');
    })
    // filter out empty values because `b: []` produces `''`
    // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't
    .filter(param => param !== '').join('&');
  }
  clone(update) {
    const clone = new HttpParams({
      encoder: this.encoder
    });
    clone.cloneFrom = this.cloneFrom || this;
    clone.updates = (this.updates || []).concat(update);
    return clone;
  }
  init() {
    if (this.map === null) {
      this.map = new Map();
    }
    if (this.cloneFrom !== null) {
      this.cloneFrom.init();
      this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));
      this.updates.forEach(update => {
        switch (update.op) {
          case 'a':
          case 's':
            const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];
            base.push(valueToString(update.value));
            this.map.set(update.param, base);
            break;
          case 'd':
            if (update.value !== undefined) {
              let base = this.map.get(update.param) || [];
              const idx = base.indexOf(valueToString(update.value));
              if (idx !== -1) {
                base.splice(idx, 1);
              }
              if (base.length > 0) {
                this.map.set(update.param, base);
              } else {
                this.map.delete(update.param);
              }
            } else {
              this.map.delete(update.param);
              break;
            }
        }
      });
      this.cloneFrom = this.updates = null;
    }
  }
}

/**
 * A token used to manipulate and access values stored in `HttpContext`.
 *
 * @publicApi
 */
class HttpContextToken {
  constructor(defaultValue) {
    this.defaultValue = defaultValue;
  }
}
/**
 * Http context stores arbitrary user defined values and ensures type safety without
 * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.
 *
 * This context is mutable and is shared between cloned requests unless explicitly specified.
 *
 * @usageNotes
 *
 * ### Usage Example
 *
 * ```typescript
 * // inside cache.interceptors.ts
 * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);
 *
 * export class CacheInterceptor implements HttpInterceptor {
 *
 *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {
 *     if (req.context.get(IS_CACHE_ENABLED) === true) {
 *       return ...;
 *     }
 *     return delegate.handle(req);
 *   }
 * }
 *
 * // inside a service
 *
 * this.httpClient.get('/api/weather', {
 *   context: new HttpContext().set(IS_CACHE_ENABLED, true)
 * }).subscribe(...);
 * ```
 *
 * @publicApi
 */
class HttpContext {
  constructor() {
    this.map = new Map();
  }
  /**
   * Store a value in the context. If a value is already present it will be overwritten.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   * @param value The value to store.
   *
   * @returns A reference to itself for easy chaining.
   */
  set(token, value) {
    this.map.set(token, value);
    return this;
  }
  /**
   * Retrieve the value associated with the given token.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   *
   * @returns The stored value or default if one is defined.
   */
  get(token) {
    if (!this.map.has(token)) {
      this.map.set(token, token.defaultValue());
    }
    return this.map.get(token);
  }
  /**
   * Delete the value associated with the given token.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   *
   * @returns A reference to itself for easy chaining.
   */
  delete(token) {
    this.map.delete(token);
    return this;
  }
  /**
   * Checks for existence of a given token.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   *
   * @returns True if the token exists, false otherwise.
   */
  has(token) {
    return this.map.has(token);
  }
  /**
   * @returns a list of tokens currently stored in the context.
   */
  keys() {
    return this.map.keys();
  }
}

/**
 * Determine whether the given HTTP method may include a body.
 */
function mightHaveBody(method) {
  switch (method) {
    case 'DELETE':
    case 'GET':
    case 'HEAD':
    case 'OPTIONS':
    case 'JSONP':
      return false;
    default:
      return true;
  }
}
/**
 * Safely assert whether the given value is an ArrayBuffer.
 *
 * In some execution environments ArrayBuffer is not defined.
 */
function isArrayBuffer(value) {
  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;
}
/**
 * Safely assert whether the given value is a Blob.
 *
 * In some execution environments Blob is not defined.
 */
function isBlob(value) {
  return typeof Blob !== 'undefined' && value instanceof Blob;
}
/**
 * Safely assert whether the given value is a FormData instance.
 *
 * In some execution environments FormData is not defined.
 */
function isFormData(value) {
  return typeof FormData !== 'undefined' && value instanceof FormData;
}
/**
 * Safely assert whether the given value is a URLSearchParams instance.
 *
 * In some execution environments URLSearchParams is not defined.
 */
function isUrlSearchParams(value) {
  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;
}
/**
 * An outgoing HTTP request with an optional typed body.
 *
 * `HttpRequest` represents an outgoing request, including URL, method,
 * headers, body, and other request configuration options. Instances should be
 * assumed to be immutable. To modify a `HttpRequest`, the `clone`
 * method should be used.
 *
 * @publicApi
 */
class HttpRequest {
  constructor(method, url, third, fourth) {
    this.url = url;
    /**
     * The request body, or `null` if one isn't set.
     *
     * Bodies are not enforced to be immutable, as they can include a reference to any
     * user-defined data type. However, interceptors should take care to preserve
     * idempotence by treating them as such.
     */
    this.body = null;
    /**
     * Whether this request should be made in a way that exposes progress events.
     *
     * Progress events are expensive (change detection runs on each event) and so
     * they should only be requested if the consumer intends to monitor them.
     */
    this.reportProgress = false;
    /**
     * Whether this request should be sent with outgoing credentials (cookies).
     */
    this.withCredentials = false;
    /**
     * The expected response type of the server.
     *
     * This is used to parse the response appropriately before returning it to
     * the requestee.
     */
    this.responseType = 'json';
    this.method = method.toUpperCase();
    // Next, need to figure out which argument holds the HttpRequestInit
    // options, if any.
    let options;
    // Check whether a body argument is expected. The only valid way to omit
    // the body argument is to use a known no-body method like GET.
    if (mightHaveBody(this.method) || !!fourth) {
      // Body is the third argument, options are the fourth.
      this.body = third !== undefined ? third : null;
      options = fourth;
    } else {
      // No body required, options are the third argument. The body stays null.
      options = third;
    }
    // If options have been passed, interpret them.
    if (options) {
      // Normalize reportProgress and withCredentials.
      this.reportProgress = !!options.reportProgress;
      this.withCredentials = !!options.withCredentials;
      // Override default response type of 'json' if one is provided.
      if (!!options.responseType) {
        this.responseType = options.responseType;
      }
      // Override headers if they're provided.
      if (!!options.headers) {
        this.headers = options.headers;
      }
      if (!!options.context) {
        this.context = options.context;
      }
      if (!!options.params) {
        this.params = options.params;
      }
    }
    // If no headers have been passed in, construct a new HttpHeaders instance.
    if (!this.headers) {
      this.headers = new HttpHeaders();
    }
    // If no context have been passed in, construct a new HttpContext instance.
    if (!this.context) {
      this.context = new HttpContext();
    }
    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.
    if (!this.params) {
      this.params = new HttpParams();
      this.urlWithParams = url;
    } else {
      // Encode the parameters to a string in preparation for inclusion in the URL.
      const params = this.params.toString();
      if (params.length === 0) {
        // No parameters, the visible URL is just the URL given at creation time.
        this.urlWithParams = url;
      } else {
        // Does the URL already have query parameters? Look for '?'.
        const qIdx = url.indexOf('?');
        // There are 3 cases to handle:
        // 1) No existing parameters -> append '?' followed by params.
        // 2) '?' exists and is followed by existing query string ->
        //    append '&' followed by params.
        // 3) '?' exists at the end of the url -> append params directly.
        // This basically amounts to determining the character, if any, with
        // which to join the URL and parameters.
        const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';
        this.urlWithParams = url + sep + params;
      }
    }
  }
  /**
   * Transform the free-form body into a serialized format suitable for
   * transmission to the server.
   */
  serializeBody() {
    // If no body is present, no need to serialize it.
    if (this.body === null) {
      return null;
    }
    // Check whether the body is already in a serialized form. If so,
    // it can just be returned directly.
    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body) || typeof this.body === 'string') {
      return this.body;
    }
    // Check whether the body is an instance of HttpUrlEncodedParams.
    if (this.body instanceof HttpParams) {
      return this.body.toString();
    }
    // Check whether the body is an object or array, and serialize with JSON if so.
    if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {
      return JSON.stringify(this.body);
    }
    // Fall back on toString() for everything else.
    return this.body.toString();
  }
  /**
   * Examine the body and attempt to infer an appropriate MIME type
   * for it.
   *
   * If no such type can be inferred, this method will return `null`.
   */
  detectContentTypeHeader() {
    // An empty body has no content type.
    if (this.body === null) {
      return null;
    }
    // FormData bodies rely on the browser's content type assignment.
    if (isFormData(this.body)) {
      return null;
    }
    // Blobs usually have their own content type. If it doesn't, then
    // no type can be inferred.
    if (isBlob(this.body)) {
      return this.body.type || null;
    }
    // Array buffers have unknown contents and thus no type can be inferred.
    if (isArrayBuffer(this.body)) {
      return null;
    }
    // Technically, strings could be a form of JSON data, but it's safe enough
    // to assume they're plain strings.
    if (typeof this.body === 'string') {
      return 'text/plain';
    }
    // `HttpUrlEncodedParams` has its own content-type.
    if (this.body instanceof HttpParams) {
      return 'application/x-www-form-urlencoded;charset=UTF-8';
    }
    // Arrays, objects, boolean and numbers will be encoded as JSON.
    if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {
      return 'application/json';
    }
    // No type could be inferred.
    return null;
  }
  clone(update = {}) {
    // For method, url, and responseType, take the current value unless
    // it is overridden in the update hash.
    const method = update.method || this.method;
    const url = update.url || this.url;
    const responseType = update.responseType || this.responseType;
    // The body is somewhat special - a `null` value in update.body means
    // whatever current body is present is being overridden with an empty
    // body, whereas an `undefined` value in update.body implies no
    // override.
    const body = update.body !== undefined ? update.body : this.body;
    // Carefully handle the boolean options to differentiate between
    // `false` and `undefined` in the update args.
    const withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;
    const reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress;
    // Headers and params may be appended to if `setHeaders` or
    // `setParams` are used.
    let headers = update.headers || this.headers;
    let params = update.params || this.params;
    // Pass on context if needed
    const context = update.context ?? this.context;
    // Check whether the caller has asked to add headers.
    if (update.setHeaders !== undefined) {
      // Set every requested header.
      headers = Object.keys(update.setHeaders).reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);
    }
    // Check whether the caller has asked to set params.
    if (update.setParams) {
      // Set every requested param.
      params = Object.keys(update.setParams).reduce((params, param) => params.set(param, update.setParams[param]), params);
    }
    // Finally, construct the new HttpRequest using the pieces from above.
    return new HttpRequest(method, url, body, {
      params,
      headers,
      context,
      reportProgress,
      responseType,
      withCredentials
    });
  }
}

/**
 * Type enumeration for the different kinds of `HttpEvent`.
 *
 * @publicApi
 */
var HttpEventType;
(function (HttpEventType) {
  /**
   * The request was sent out over the wire.
   */
  HttpEventType[HttpEventType["Sent"] = 0] = "Sent";
  /**
   * An upload progress event was received.
   */
  HttpEventType[HttpEventType["UploadProgress"] = 1] = "UploadProgress";
  /**
   * The response status code and headers were received.
   */
  HttpEventType[HttpEventType["ResponseHeader"] = 2] = "ResponseHeader";
  /**
   * A download progress event was received.
   */
  HttpEventType[HttpEventType["DownloadProgress"] = 3] = "DownloadProgress";
  /**
   * The full response including the body was received.
   */
  HttpEventType[HttpEventType["Response"] = 4] = "Response";
  /**
   * A custom event from an interceptor or a backend.
   */
  HttpEventType[HttpEventType["User"] = 5] = "User";
})(HttpEventType || (HttpEventType = {}));
/**
 * Base class for both `HttpResponse` and `HttpHeaderResponse`.
 *
 * @publicApi
 */
class HttpResponseBase {
  /**
   * Super-constructor for all responses.
   *
   * The single parameter accepted is an initialization hash. Any properties
   * of the response passed there will override the default values.
   */
  constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {
    // If the hash has values passed, use them to initialize the response.
    // Otherwise use the default values.
    this.headers = init.headers || new HttpHeaders();
    this.status = init.status !== undefined ? init.status : defaultStatus;
    this.statusText = init.statusText || defaultStatusText;
    this.url = init.url || null;
    // Cache the ok value to avoid defining a getter.
    this.ok = this.status >= 200 && this.status < 300;
  }
}
/**
 * A partial HTTP response which only includes the status and header data,
 * but no response body.
 *
 * `HttpHeaderResponse` is a `HttpEvent` available on the response
 * event stream, only when progress events are requested.
 *
 * @publicApi
 */
class HttpHeaderResponse extends HttpResponseBase {
  /**
   * Create a new `HttpHeaderResponse` with the given parameters.
   */
  constructor(init = {}) {
    super(init);
    this.type = HttpEventType.ResponseHeader;
  }
  /**
   * Copy this `HttpHeaderResponse`, overriding its contents with the
   * given parameter hash.
   */
  clone(update = {}) {
    // Perform a straightforward initialization of the new HttpHeaderResponse,
    // overriding the current parameters with new ones if given.
    return new HttpHeaderResponse({
      headers: update.headers || this.headers,
      status: update.status !== undefined ? update.status : this.status,
      statusText: update.statusText || this.statusText,
      url: update.url || this.url || undefined
    });
  }
}
/**
 * A full HTTP response, including a typed response body (which may be `null`
 * if one was not returned).
 *
 * `HttpResponse` is a `HttpEvent` available on the response event
 * stream.
 *
 * @publicApi
 */
class HttpResponse extends HttpResponseBase {
  /**
   * Construct a new `HttpResponse`.
   */
  constructor(init = {}) {
    super(init);
    this.type = HttpEventType.Response;
    this.body = init.body !== undefined ? init.body : null;
  }
  clone(update = {}) {
    return new HttpResponse({
      body: update.body !== undefined ? update.body : this.body,
      headers: update.headers || this.headers,
      status: update.status !== undefined ? update.status : this.status,
      statusText: update.statusText || this.statusText,
      url: update.url || this.url || undefined
    });
  }
}
/**
 * A response that represents an error or failure, either from a
 * non-successful HTTP status, an error while executing the request,
 * or some other failure which occurred during the parsing of the response.
 *
 * Any error returned on the `Observable` response stream will be
 * wrapped in an `HttpErrorResponse` to provide additional context about
 * the state of the HTTP layer when the error occurred. The error property
 * will contain either a wrapped Error object or the error response returned
 * from the server.
 *
 * @publicApi
 */
class HttpErrorResponse extends HttpResponseBase {
  constructor(init) {
    // Initialize with a default status of 0 / Unknown Error.
    super(init, 0, 'Unknown Error');
    this.name = 'HttpErrorResponse';
    /**
     * Errors are never okay, even when the status code is in the 2xx success range.
     */
    this.ok = false;
    // If the response was successful, then this was a parse error. Otherwise, it was
    // a protocol-level failure of some sort. Either the request failed in transit
    // or the server returned an unsuccessful status code.
    if (this.status >= 200 && this.status < 300) {
      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;
    } else {
      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;
    }
    this.error = init.error || null;
  }
}

/**
 * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and
 * the given `body`. This function clones the object and adds the body.
 *
 * Note that the `responseType` *options* value is a String that identifies the
 * single data type of the response.
 * A single overload version of the method handles each response type.
 * The value of `responseType` cannot be a union, as the combined signature could imply.
 *
 */
function addBody(options, body) {
  return {
    body,
    headers: options.headers,
    context: options.context,
    observe: options.observe,
    params: options.params,
    reportProgress: options.reportProgress,
    responseType: options.responseType,
    withCredentials: options.withCredentials
  };
}
/**
 * Performs HTTP requests.
 * This service is available as an injectable class, with methods to perform HTTP requests.
 * Each request method has multiple signatures, and the return type varies based on
 * the signature that is called (mainly the values of `observe` and `responseType`).
 *
 * Note that the `responseType` *options* value is a String that identifies the
 * single data type of the response.
 * A single overload version of the method handles each response type.
 * The value of `responseType` cannot be a union, as the combined signature could imply.

 *
 * @usageNotes
 * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.
 *
 * ### HTTP Request Example
 *
 * ```
 *  // GET heroes whose name contains search term
 * searchHeroes(term: string): observable<Hero[]>{
 *
 *  const params = new HttpParams({fromString: 'name=term'});
 *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});
 * }
 * ```
 *
 * Alternatively, the parameter string can be used without invoking HttpParams
 * by directly joining to the URL.
 * ```
 * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});
 * ```
 *
 *
 * ### JSONP Example
 * ```
 * requestJsonp(url, callback = 'callback') {
 *  return this.httpClient.jsonp(this.heroesURL, callback);
 * }
 * ```
 *
 * ### PATCH Example
 * ```
 * // PATCH one of the heroes' name
 * patchHero (id: number, heroName: string): Observable<{}> {
 * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42
 *  return this.httpClient.patch(url, {name: heroName}, httpOptions)
 *    .pipe(catchError(this.handleError('patchHero')));
 * }
 * ```
 *
 * @see [HTTP Guide](guide/http)
 * @see [HTTP Request](api/common/http/HttpRequest)
 *
 * @publicApi
 */
class HttpClient {
  constructor(handler) {
    this.handler = handler;
  }
  /**
   * Constructs an observable for a generic HTTP request that, when subscribed,
   * fires the request through the chain of registered interceptors and on to the
   * server.
   *
   * You can pass an `HttpRequest` directly as the only parameter. In this case,
   * the call returns an observable of the raw `HttpEvent` stream.
   *
   * Alternatively you can pass an HTTP method as the first parameter,
   * a URL string as the second, and an options hash containing the request body as the third.
   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the
   * type of returned observable.
   *   * The `responseType` value determines how a successful response body is parsed.
   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting
   * object as a type parameter to the call.
   *
   * The `observe` value determines the return type, according to what you are interested in
   * observing.
   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including
   * progress events by default.
   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,
   * where the `T` parameter depends on the `responseType` and any optionally provided type
   * parameter.
   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.
   *
   */
  request(first, url, options = {}) {
    let req;
    // First, check whether the primary argument is an instance of `HttpRequest`.
    if (first instanceof HttpRequest) {
      // It is. The other arguments must be undefined (per the signatures) and can be
      // ignored.
      req = first;
    } else {
      // It's a string, so it represents a URL. Construct a request based on it,
      // and incorporate the remaining arguments (assuming `GET` unless a method is
      // provided.
      // Figure out the headers.
      let headers = undefined;
      if (options.headers instanceof HttpHeaders) {
        headers = options.headers;
      } else {
        headers = new HttpHeaders(options.headers);
      }
      // Sort out parameters.
      let params = undefined;
      if (!!options.params) {
        if (options.params instanceof HttpParams) {
          params = options.params;
        } else {
          params = new HttpParams({
            fromObject: options.params
          });
        }
      }
      // Construct the request.
      req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {
        headers,
        context: options.context,
        params,
        reportProgress: options.reportProgress,
        // By default, JSON is assumed to be returned for all calls.
        responseType: options.responseType || 'json',
        withCredentials: options.withCredentials
      });
    }
    // Start with an Observable.of() the initial request, and run the handler (which
    // includes all interceptors) inside a concatMap(). This way, the handler runs
    // inside an Observable chain, which causes interceptors to be re-run on every
    // subscription (this also makes retries re-run the handler, including interceptors).
    const events$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_0__.of)(req).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.concatMap)(req => this.handler.handle(req)));
    // If coming via the API signature which accepts a previously constructed HttpRequest,
    // the only option is to get the event stream. Otherwise, return the event stream if
    // that is what was requested.
    if (first instanceof HttpRequest || options.observe === 'events') {
      return events$;
    }
    // The requested stream contains either the full response or the body. In either
    // case, the first step is to filter the event stream to extract a stream of
    // responses(s).
    const res$ = events$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.filter)(event => event instanceof HttpResponse));
    // Decide which stream to return.
    switch (options.observe || 'body') {
      case 'body':
        // The requested stream is the body. Map the response stream to the response
        // body. This could be done more simply, but a misbehaving interceptor might
        // transform the response body into a different format and ignore the requested
        // responseType. Guard against this by validating that the response is of the
        // requested type.
        switch (req.responseType) {
          case 'arraybuffer':
            return res$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(res => {
              // Validate that the body is an ArrayBuffer.
              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
                throw new Error('Response is not an ArrayBuffer.');
              }
              return res.body;
            }));
          case 'blob':
            return res$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(res => {
              // Validate that the body is a Blob.
              if (res.body !== null && !(res.body instanceof Blob)) {
                throw new Error('Response is not a Blob.');
              }
              return res.body;
            }));
          case 'text':
            return res$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(res => {
              // Validate that the body is a string.
              if (res.body !== null && typeof res.body !== 'string') {
                throw new Error('Response is not a string.');
              }
              return res.body;
            }));
          case 'json':
          default:
            // No validation needed for JSON responses, as they can be of any type.
            return res$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(res => res.body));
        }
      case 'response':
        // The response stream was requested directly, so return it.
        return res$;
      default:
        // Guard against new future observe types being added.
        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);
    }
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `DELETE` request to execute on the server. See the individual overloads for
   * details on the return type.
   *
   * @param url     The endpoint URL.
   * @param options The HTTP options to send with the request.
   *
   */
  delete(url, options = {}) {
    return this.request('DELETE', url, options);
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `GET` request to execute on the server. See the individual overloads for
   * details on the return type.
   */
  get(url, options = {}) {
    return this.request('GET', url, options);
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `HEAD` request to execute on the server. The `HEAD` method returns
   * meta information about the resource without transferring the
   * resource itself. See the individual overloads for
   * details on the return type.
   */
  head(url, options = {}) {
    return this.request('HEAD', url, options);
  }
  /**
   * Constructs an `Observable` that, when subscribed, causes a request with the special method
   * `JSONP` to be dispatched via the interceptor pipeline.
   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain
   * API endpoints that don't support newer,
   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.
   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the
   * requests even if the API endpoint is not located on the same domain (origin) as the client-side
   * application making the request.
   * The endpoint API must support JSONP callback for JSONP requests to work.
   * The resource API returns the JSON response wrapped in a callback function.
   * You can pass the callback function name as one of the query parameters.
   * Note that JSONP requests can only be used with `GET` requests.
   *
   * @param url The resource URL.
   * @param callbackParam The callback function name.
   *
   */
  jsonp(url, callbackParam) {
    return this.request('JSONP', url, {
      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),
      observe: 'body',
      responseType: 'json'
    });
  }
  /**
   * Constructs an `Observable` that, when subscribed, causes the configured
   * `OPTIONS` request to execute on the server. This method allows the client
   * to determine the supported HTTP methods and other capabilities of an endpoint,
   * without implying a resource action. See the individual overloads for
   * details on the return type.
   */
  options(url, options = {}) {
    return this.request('OPTIONS', url, options);
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `PATCH` request to execute on the server. See the individual overloads for
   * details on the return type.
   */
  patch(url, body, options = {}) {
    return this.request('PATCH', url, addBody(options, body));
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `POST` request to execute on the server. The server responds with the location of
   * the replaced resource. See the individual overloads for
   * details on the return type.
   */
  post(url, body, options = {}) {
    return this.request('POST', url, addBody(options, body));
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource
   * with a new set of values.
   * See the individual overloads for details on the return type.
   */
  put(url, body, options = {}) {
    return this.request('PUT', url, addBody(options, body));
  }
}
HttpClient.ɵfac = function HttpClient_Factory(t) {
  return new (t || HttpClient)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](HttpHandler));
};
HttpClient.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
  token: HttpClient,
  factory: HttpClient.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](HttpClient, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
  }], function () {
    return [{
      type: HttpHandler
    }];
  }, null);
})();
function interceptorChainEndFn(req, finalHandlerFn) {
  return finalHandlerFn(req);
}
/**
 * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the
 * `ChainedInterceptorFn` interface.
 */
function adaptLegacyInterceptorToChain(chainTailFn, interceptor) {
  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {
    handle: downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)
  });
}
/**
 * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given
 * injector.
 */
function chainedInterceptorFn(chainTailFn, interceptorFn, injector) {
  // clang-format off
  return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));
  // clang-format on
}
/**
 * A multi-provider token that represents the array of registered
 * `HttpInterceptor` objects.
 *
 * @publicApi
 */
const HTTP_INTERCEPTORS = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.InjectionToken('HTTP_INTERCEPTORS');
/**
 * A multi-provided token of `HttpInterceptorFn`s.
 */
const HTTP_INTERCEPTOR_FNS = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.InjectionToken('HTTP_INTERCEPTOR_FNS');
/**
 * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy
 * class-based interceptors and runs the request through it.
 */
function legacyInterceptorFnFactory() {
  let chain = null;
  return (req, handler) => {
    if (chain === null) {
      const interceptors = (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.inject)(HTTP_INTERCEPTORS, {
        optional: true
      }) ?? [];
      // Note: interceptors are wrapped right-to-left so that final execution order is
      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to
      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside
      // out.
      chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);
    }
    return chain(req, handler);
  };
}
class HttpInterceptorHandler extends HttpHandler {
  constructor(backend, injector) {
    super();
    this.backend = backend;
    this.injector = injector;
    this.chain = null;
  }
  handle(initialRequest) {
    if (this.chain === null) {
      const dedupedInterceptorFns = Array.from(new Set(this.injector.get(HTTP_INTERCEPTOR_FNS)));
      // Note: interceptors are wrapped right-to-left so that final execution order is
      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to
      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside
      // out.
      this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);
    }
    return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest));
  }
}
HttpInterceptorHandler.ɵfac = function HttpInterceptorHandler_Factory(t) {
  return new (t || HttpInterceptorHandler)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](HttpBackend), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.EnvironmentInjector));
};
HttpInterceptorHandler.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
  token: HttpInterceptorHandler,
  factory: HttpInterceptorHandler.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](HttpInterceptorHandler, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
  }], function () {
    return [{
      type: HttpBackend
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.EnvironmentInjector
    }];
  }, null);
})();

// Every request made through JSONP needs a callback name that's unique across the
// whole page. Each request is assigned an id and the callback name is constructed
// from that. The next id to be assigned is tracked in a global variable here that
// is shared among all applications on the page.
let nextRequestId = 0;
/**
 * When a pending <script> is unsubscribed we'll move it to this document, so it won't be
 * executed.
 */
let foreignDocument;
// Error text given when a JSONP script is injected, but doesn't invoke the callback
// passed in its URL.
const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
// Error text given when a request is passed to the JsonpClientBackend that doesn't
// have a request method JSONP.
const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';
const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';
// Error text given when a request is passed to the JsonpClientBackend that has
// headers set
const JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';
/**
 * DI token/abstract type representing a map of JSONP callbacks.
 *
 * In the browser, this should always be the `window` object.
 *
 *
 */
class JsonpCallbackContext {}
/**
 * Factory function that determines where to store JSONP callbacks.
 *
 * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist
 * in test environments. In that case, callbacks are stored on an anonymous object instead.
 *
 *
 */
function jsonpCallbackContext() {
  if (typeof window === 'object') {
    return window;
  }
  return {};
}
/**
 * Processes an `HttpRequest` with the JSONP method,
 * by performing JSONP style requests.
 * @see `HttpHandler`
 * @see `HttpXhrBackend`
 *
 * @publicApi
 */
class JsonpClientBackend {
  constructor(callbackMap, document) {
    this.callbackMap = callbackMap;
    this.document = document;
    /**
     * A resolved promise that can be used to schedule microtasks in the event handlers.
     */
    this.resolvedPromise = Promise.resolve();
  }
  /**
   * Get the name of the next callback method, by incrementing the global `nextRequestId`.
   */
  nextCallback() {
    return `ng_jsonp_callback_${nextRequestId++}`;
  }
  /**
   * Processes a JSONP request and returns an event stream of the results.
   * @param req The request object.
   * @returns An observable of the response events.
   *
   */
  handle(req) {
    // Firstly, check both the method and response type. If either doesn't match
    // then the request was improperly routed here and cannot be handled.
    if (req.method !== 'JSONP') {
      throw new Error(JSONP_ERR_WRONG_METHOD);
    } else if (req.responseType !== 'json') {
      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);
    }
    // Check the request headers. JSONP doesn't support headers and
    // cannot set any that were supplied.
    if (req.headers.keys().length > 0) {
      throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);
    }
    // Everything else happens inside the Observable boundary.
    return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable(observer => {
      // The first step to make a request is to generate the callback name, and replace the
      // callback placeholder in the URL with the name. Care has to be taken here to ensure
      // a trailing &, if matched, gets inserted back into the URL in the correct place.
      const callback = this.nextCallback();
      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);
      // Construct the <script> tag and point it at the URL.
      const node = this.document.createElement('script');
      node.src = url;
      // A JSONP request requires waiting for multiple callbacks. These variables
      // are closed over and track state across those callbacks.
      // The response object, if one has been received, or null otherwise.
      let body = null;
      // Whether the response callback has been called.
      let finished = false;
      // Set the response callback in this.callbackMap (which will be the window
      // object in the browser. The script being loaded via the <script> tag will
      // eventually call this callback.
      this.callbackMap[callback] = data => {
        // Data has been received from the JSONP script. Firstly, delete this callback.
        delete this.callbackMap[callback];
        // Set state to indicate data was received.
        body = data;
        finished = true;
      };
      // cleanup() is a utility closure that removes the <script> from the page and
      // the response callback from the window. This logic is used in both the
      // success, error, and cancellation paths, so it's extracted out for convenience.
      const cleanup = () => {
        // Remove the <script> tag if it's still on the page.
        if (node.parentNode) {
          node.parentNode.removeChild(node);
        }
        // Remove the response callback from the callbackMap (window object in the
        // browser).
        delete this.callbackMap[callback];
      };
      // onLoad() is the success callback which runs after the response callback
      // if the JSONP script loads successfully. The event itself is unimportant.
      // If something went wrong, onLoad() may run without the response callback
      // having been invoked.
      const onLoad = event => {
        // We wrap it in an extra Promise, to ensure the microtask
        // is scheduled after the loaded endpoint has executed any potential microtask itself,
        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496
        this.resolvedPromise.then(() => {
          // Cleanup the page.
          cleanup();
          // Check whether the response callback has run.
          if (!finished) {
            // It hasn't, something went wrong with the request. Return an error via
            // the Observable error path. All JSONP errors have status 0.
            observer.error(new HttpErrorResponse({
              url,
              status: 0,
              statusText: 'JSONP Error',
              error: new Error(JSONP_ERR_NO_CALLBACK)
            }));
            return;
          }
          // Success. body either contains the response body or null if none was
          // returned.
          observer.next(new HttpResponse({
            body,
            status: 200 /* HttpStatusCode.Ok */,
            statusText: 'OK',
            url
          }));
          // Complete the stream, the response is over.
          observer.complete();
        });
      };
      // onError() is the error callback, which runs if the script returned generates
      // a Javascript error. It emits the error via the Observable error channel as
      // a HttpErrorResponse.
      const onError = error => {
        cleanup();
        // Wrap the error in a HttpErrorResponse.
        observer.error(new HttpErrorResponse({
          error,
          status: 0,
          statusText: 'JSONP Error',
          url
        }));
      };
      // Subscribe to both the success (load) and error events on the <script> tag,
      // and add it to the page.
      node.addEventListener('load', onLoad);
      node.addEventListener('error', onError);
      this.document.body.appendChild(node);
      // The request has now been successfully sent.
      observer.next({
        type: HttpEventType.Sent
      });
      // Cancellation handler.
      return () => {
        if (!finished) {
          this.removeListeners(node);
        }
        // And finally, clean up the page.
        cleanup();
      };
    });
  }
  removeListeners(script) {
    // Issue #34818
    // Changing <script>'s ownerDocument will prevent it from execution.
    // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block
    if (!foreignDocument) {
      foreignDocument = this.document.implementation.createHTMLDocument();
    }
    foreignDocument.adoptNode(script);
  }
}
JsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) {
  return new (t || JsonpClientBackend)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](JsonpCallbackContext), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT));
};
JsonpClientBackend.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
  token: JsonpClientBackend,
  factory: JsonpClientBackend.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](JsonpClientBackend, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
  }], function () {
    return [{
      type: JsonpCallbackContext
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
      }]
    }];
  }, null);
})();
/**
 * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.
 */
function jsonpInterceptorFn(req, next) {
  if (req.method === 'JSONP') {
    return (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.inject)(JsonpClientBackend).handle(req);
  }
  // Fall through for normal HTTP requests.
  return next(req);
}
/**
 * Identifies requests with the method JSONP and
 * shifts them to the `JsonpClientBackend`.
 *
 * @see `HttpInterceptor`
 *
 * @publicApi
 */
class JsonpInterceptor {
  constructor(injector) {
    this.injector = injector;
  }
  /**
   * Identifies and handles a given JSONP request.
   * @param initialRequest The outgoing request object to handle.
   * @param next The next interceptor in the chain, or the backend
   * if no interceptors remain in the chain.
   * @returns An observable of the event stream.
   */
  intercept(initialRequest, next) {
    return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));
  }
}
JsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) {
  return new (t || JsonpInterceptor)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.EnvironmentInjector));
};
JsonpInterceptor.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
  token: JsonpInterceptor,
  factory: JsonpInterceptor.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](JsonpInterceptor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.EnvironmentInjector
    }];
  }, null);
})();
const XSSI_PREFIX = /^\)\]\}',?\n/;
/**
 * Determine an appropriate URL for the response, by checking either
 * XMLHttpRequest.responseURL or the X-Request-URL header.
 */
function getResponseUrl(xhr) {
  if ('responseURL' in xhr && xhr.responseURL) {
    return xhr.responseURL;
  }
  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
    return xhr.getResponseHeader('X-Request-URL');
  }
  return null;
}
/**
 * Uses `XMLHttpRequest` to send requests to a backend server.
 * @see `HttpHandler`
 * @see `JsonpClientBackend`
 *
 * @publicApi
 */
class HttpXhrBackend {
  constructor(xhrFactory) {
    this.xhrFactory = xhrFactory;
  }
  /**
   * Processes a request and returns a stream of response events.
   * @param req The request object.
   * @returns An observable of the response events.
   */
  handle(req) {
    // Quick check to give a better error message when a user attempts to use
    // HttpClient.jsonp() without installing the HttpClientJsonpModule
    if (req.method === 'JSONP') {
      throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);
    }
    // Everything happens on Observable subscription.
    return new rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable(observer => {
      // Start by setting up the XHR object with request method, URL, and withCredentials flag.
      const xhr = this.xhrFactory.build();
      xhr.open(req.method, req.urlWithParams);
      if (!!req.withCredentials) {
        xhr.withCredentials = true;
      }
      // Add all the requested headers.
      req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));
      // Add an Accept header if one isn't present already.
      if (!req.headers.has('Accept')) {
        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');
      }
      // Auto-detect the Content-Type header if one isn't present already.
      if (!req.headers.has('Content-Type')) {
        const detectedType = req.detectContentTypeHeader();
        // Sometimes Content-Type detection fails.
        if (detectedType !== null) {
          xhr.setRequestHeader('Content-Type', detectedType);
        }
      }
      // Set the responseType if one was requested.
      if (req.responseType) {
        const responseType = req.responseType.toLowerCase();
        // JSON responses need to be processed as text. This is because if the server
        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,
        // xhr.response will be null, and xhr.responseText cannot be accessed to
        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON
        // is parsed by first requesting text and then applying JSON.parse.
        xhr.responseType = responseType !== 'json' ? responseType : 'text';
      }
      // Serialize the request body if one is present. If not, this will be set to null.
      const reqBody = req.serializeBody();
      // If progress events are enabled, response headers will be delivered
      // in two events - the HttpHeaderResponse event and the full HttpResponse
      // event. However, since response headers don't change in between these
      // two events, it doesn't make sense to parse them twice. So headerResponse
      // caches the data extracted from the response whenever it's first parsed,
      // to ensure parsing isn't duplicated.
      let headerResponse = null;
      // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest
      // state, and memoizes it into headerResponse.
      const partialFromXhr = () => {
        if (headerResponse !== null) {
          return headerResponse;
        }
        const statusText = xhr.statusText || 'OK';
        // Parse headers from XMLHttpRequest - this step is lazy.
        const headers = new HttpHeaders(xhr.getAllResponseHeaders());
        // Read the response URL from the XMLHttpResponse instance and fall back on the
        // request URL.
        const url = getResponseUrl(xhr) || req.url;
        // Construct the HttpHeaderResponse and memoize it.
        headerResponse = new HttpHeaderResponse({
          headers,
          status: xhr.status,
          statusText,
          url
        });
        return headerResponse;
      };
      // Next, a few closures are defined for the various events which XMLHttpRequest can
      // emit. This allows them to be unregistered as event listeners later.
      // First up is the load event, which represents a response being fully available.
      const onLoad = () => {
        // Read response state from the memoized partial data.
        let {
          headers,
          status,
          statusText,
          url
        } = partialFromXhr();
        // The body will be read out if present.
        let body = null;
        if (status !== 204 /* HttpStatusCode.NoContent */) {
          // Use XMLHttpRequest.response if set, responseText otherwise.
          body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;
        }
        // Normalize another potential bug (this one comes from CORS).
        if (status === 0) {
          status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;
        }
        // ok determines whether the response will be transmitted on the event or
        // error channel. Unsuccessful status codes (not 2xx) will always be errors,
        // but a successful status code can still result in an error if the user
        // asked for JSON data and the body cannot be parsed as such.
        let ok = status >= 200 && status < 300;
        // Check whether the body needs to be parsed as JSON (in many cases the browser
        // will have done that already).
        if (req.responseType === 'json' && typeof body === 'string') {
          // Save the original body, before attempting XSSI prefix stripping.
          const originalBody = body;
          body = body.replace(XSSI_PREFIX, '');
          try {
            // Attempt the parse. If it fails, a parse error should be delivered to the user.
            body = body !== '' ? JSON.parse(body) : null;
          } catch (error) {
            // Since the JSON.parse failed, it's reasonable to assume this might not have been a
            // JSON response. Restore the original body (including any XSSI prefix) to deliver
            // a better error response.
            body = originalBody;
            // If this was an error request to begin with, leave it as a string, it probably
            // just isn't JSON. Otherwise, deliver the parsing error to the user.
            if (ok) {
              // Even though the response status was 2xx, this is still an error.
              ok = false;
              // The parse error contains the text of the body that failed to parse.
              body = {
                error,
                text: body
              };
            }
          }
        }
        if (ok) {
          // A successful response is delivered on the event stream.
          observer.next(new HttpResponse({
            body,
            headers,
            status,
            statusText,
            url: url || undefined
          }));
          // The full body has been received and delivered, no further events
          // are possible. This request is complete.
          observer.complete();
        } else {
          // An unsuccessful request is delivered on the error channel.
          observer.error(new HttpErrorResponse({
            // The error in this case is the response body (error from the server).
            error: body,
            headers,
            status,
            statusText,
            url: url || undefined
          }));
        }
      };
      // The onError callback is called when something goes wrong at the network level.
      // Connection timeout, DNS error, offline, etc. These are actual errors, and are
      // transmitted on the error channel.
      const onError = error => {
        const {
          url
        } = partialFromXhr();
        const res = new HttpErrorResponse({
          error,
          status: xhr.status || 0,
          statusText: xhr.statusText || 'Unknown Error',
          url: url || undefined
        });
        observer.error(res);
      };
      // The sentHeaders flag tracks whether the HttpResponseHeaders event
      // has been sent on the stream. This is necessary to track if progress
      // is enabled since the event will be sent on only the first download
      // progress event.
      let sentHeaders = false;
      // The download progress event handler, which is only registered if
      // progress events are enabled.
      const onDownProgress = event => {
        // Send the HttpResponseHeaders event if it hasn't been sent already.
        if (!sentHeaders) {
          observer.next(partialFromXhr());
          sentHeaders = true;
        }
        // Start building the download progress event to deliver on the response
        // event stream.
        let progressEvent = {
          type: HttpEventType.DownloadProgress,
          loaded: event.loaded
        };
        // Set the total number of bytes in the event if it's available.
        if (event.lengthComputable) {
          progressEvent.total = event.total;
        }
        // If the request was for text content and a partial response is
        // available on XMLHttpRequest, include it in the progress event
        // to allow for streaming reads.
        if (req.responseType === 'text' && !!xhr.responseText) {
          progressEvent.partialText = xhr.responseText;
        }
        // Finally, fire the event.
        observer.next(progressEvent);
      };
      // The upload progress event handler, which is only registered if
      // progress events are enabled.
      const onUpProgress = event => {
        // Upload progress events are simpler. Begin building the progress
        // event.
        let progress = {
          type: HttpEventType.UploadProgress,
          loaded: event.loaded
        };
        // If the total number of bytes being uploaded is available, include
        // it.
        if (event.lengthComputable) {
          progress.total = event.total;
        }
        // Send the event.
        observer.next(progress);
      };
      // By default, register for load and error events.
      xhr.addEventListener('load', onLoad);
      xhr.addEventListener('error', onError);
      xhr.addEventListener('timeout', onError);
      xhr.addEventListener('abort', onError);
      // Progress events are only enabled if requested.
      if (req.reportProgress) {
        // Download progress is always enabled if requested.
        xhr.addEventListener('progress', onDownProgress);
        // Upload progress depends on whether there is a body to upload.
        if (reqBody !== null && xhr.upload) {
          xhr.upload.addEventListener('progress', onUpProgress);
        }
      }
      // Fire the request, and notify the event stream that it was fired.
      xhr.send(reqBody);
      observer.next({
        type: HttpEventType.Sent
      });
      // This is the return from the Observable function, which is the
      // request cancellation handler.
      return () => {
        // On a cancellation, remove all registered event listeners.
        xhr.removeEventListener('error', onError);
        xhr.removeEventListener('abort', onError);
        xhr.removeEventListener('load', onLoad);
        xhr.removeEventListener('timeout', onError);
        if (req.reportProgress) {
          xhr.removeEventListener('progress', onDownProgress);
          if (reqBody !== null && xhr.upload) {
            xhr.upload.removeEventListener('progress', onUpProgress);
          }
        }
        // Finally, abort the in-flight request.
        if (xhr.readyState !== xhr.DONE) {
          xhr.abort();
        }
      };
    });
  }
}
HttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) {
  return new (t || HttpXhrBackend)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.XhrFactory));
};
HttpXhrBackend.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
  token: HttpXhrBackend,
  factory: HttpXhrBackend.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](HttpXhrBackend, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
  }], function () {
    return [{
      type: _angular_common__WEBPACK_IMPORTED_MODULE_6__.XhrFactory
    }];
  }, null);
})();
const XSRF_ENABLED = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.InjectionToken('XSRF_ENABLED');
const XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';
const XSRF_COOKIE_NAME = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.InjectionToken('XSRF_COOKIE_NAME', {
  providedIn: 'root',
  factory: () => XSRF_DEFAULT_COOKIE_NAME
});
const XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';
const XSRF_HEADER_NAME = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.InjectionToken('XSRF_HEADER_NAME', {
  providedIn: 'root',
  factory: () => XSRF_DEFAULT_HEADER_NAME
});
/**
 * Retrieves the current XSRF token to use with the next outgoing request.
 *
 * @publicApi
 */
class HttpXsrfTokenExtractor {}
/**
 * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.
 */
class HttpXsrfCookieExtractor {
  constructor(doc, platform, cookieName) {
    this.doc = doc;
    this.platform = platform;
    this.cookieName = cookieName;
    this.lastCookieString = '';
    this.lastToken = null;
    /**
     * @internal for testing
     */
    this.parseCount = 0;
  }
  getToken() {
    if (this.platform === 'server') {
      return null;
    }
    const cookieString = this.doc.cookie || '';
    if (cookieString !== this.lastCookieString) {
      this.parseCount++;
      this.lastToken = (0,_angular_common__WEBPACK_IMPORTED_MODULE_6__["ɵparseCookieValue"])(cookieString, this.cookieName);
      this.lastCookieString = cookieString;
    }
    return this.lastToken;
  }
}
HttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) {
  return new (t || HttpXsrfCookieExtractor)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.PLATFORM_ID), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](XSRF_COOKIE_NAME));
};
HttpXsrfCookieExtractor.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
  token: HttpXsrfCookieExtractor,
  factory: HttpXsrfCookieExtractor.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](HttpXsrfCookieExtractor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.DOCUMENT]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_4__.PLATFORM_ID]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Inject,
        args: [XSRF_COOKIE_NAME]
      }]
    }];
  }, null);
})();
function xsrfInterceptorFn(req, next) {
  const lcUrl = req.url.toLowerCase();
  // Skip both non-mutating requests and absolute URLs.
  // Non-mutating requests don't require a token, and absolute URLs require special handling
  // anyway as the cookie set
  // on our origin is not the same as the token expected by another origin.
  if (!(0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.inject)(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {
    return next(req);
  }
  const token = (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.inject)(HttpXsrfTokenExtractor).getToken();
  const headerName = (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.inject)(XSRF_HEADER_NAME);
  // Be careful not to overwrite an existing header of the same name.
  if (token != null && !req.headers.has(headerName)) {
    req = req.clone({
      headers: req.headers.set(headerName, token)
    });
  }
  return next(req);
}
/**
 * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.
 */
class HttpXsrfInterceptor {
  constructor(injector) {
    this.injector = injector;
  }
  intercept(initialRequest, next) {
    return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));
  }
}
HttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) {
  return new (t || HttpXsrfInterceptor)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.EnvironmentInjector));
};
HttpXsrfInterceptor.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({
  token: HttpXsrfInterceptor,
  factory: HttpXsrfInterceptor.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](HttpXsrfInterceptor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.EnvironmentInjector
    }];
  }, null);
})();

/**
 * Identifies a particular kind of `HttpFeature`.
 *
 * @publicApi
 */
var HttpFeatureKind;
(function (HttpFeatureKind) {
  HttpFeatureKind[HttpFeatureKind["Interceptors"] = 0] = "Interceptors";
  HttpFeatureKind[HttpFeatureKind["LegacyInterceptors"] = 1] = "LegacyInterceptors";
  HttpFeatureKind[HttpFeatureKind["CustomXsrfConfiguration"] = 2] = "CustomXsrfConfiguration";
  HttpFeatureKind[HttpFeatureKind["NoXsrfProtection"] = 3] = "NoXsrfProtection";
  HttpFeatureKind[HttpFeatureKind["JsonpSupport"] = 4] = "JsonpSupport";
  HttpFeatureKind[HttpFeatureKind["RequestsMadeViaParent"] = 5] = "RequestsMadeViaParent";
})(HttpFeatureKind || (HttpFeatureKind = {}));
function makeHttpFeature(kind, providers) {
  return {
    ɵkind: kind,
    ɵproviders: providers
  };
}
/**
 * Configures Angular's `HttpClient` service to be available for injection.
 *
 * By default, `HttpClient` will be configured for injection with its default options for XSRF
 * protection of outgoing requests. Additional configuration options can be provided by passing
 * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the
 * `withInterceptors(...)` feature.
 *
 * @see withInterceptors
 * @see withInterceptorsFromDi
 * @see withXsrfConfiguration
 * @see withNoXsrfProtection
 * @see withJsonpSupport
 * @see withRequestsMadeViaParent
 */
function provideHttpClient(...features) {
  if (ngDevMode) {
    const featureKinds = new Set(features.map(f => f.ɵkind));
    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) && featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {
      throw new Error(ngDevMode ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` : '');
    }
  }
  const providers = [HttpClient, HttpXhrBackend, HttpInterceptorHandler, {
    provide: HttpHandler,
    useExisting: HttpInterceptorHandler
  }, {
    provide: HttpBackend,
    useExisting: HttpXhrBackend
  }, {
    provide: HTTP_INTERCEPTOR_FNS,
    useValue: xsrfInterceptorFn,
    multi: true
  }, {
    provide: XSRF_ENABLED,
    useValue: true
  }, {
    provide: HttpXsrfTokenExtractor,
    useClass: HttpXsrfCookieExtractor
  }];
  for (const feature of features) {
    providers.push(...feature.ɵproviders);
  }
  return (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.makeEnvironmentProviders)(providers);
}
/**
 * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`
 * instance.
 *
 * @see HttpInterceptorFn
 * @see provideHttpClient
 * @publicApi
 */
function withInterceptors(interceptorFns) {
  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {
    return {
      provide: HTTP_INTERCEPTOR_FNS,
      useValue: interceptorFn,
      multi: true
    };
  }));
}
const LEGACY_INTERCEPTOR_FN = new _angular_core__WEBPACK_IMPORTED_MODULE_4__.InjectionToken('LEGACY_INTERCEPTOR_FN');
/**
 * Includes class-based interceptors configured using a multi-provider in the current injector into
 * the configured `HttpClient` instance.
 *
 * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided
 * interceptors may be phased out in a later release.
 *
 * @see HttpInterceptor
 * @see HTTP_INTERCEPTORS
 * @see provideHttpClient
 */
function withInterceptorsFromDi() {
  // Note: the legacy interceptor function is provided here via an intermediate token
  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are
  // included multiple times, all of the multi-provider entries will have the same instance of the
  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy
  // interceptors will not run multiple times.
  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [{
    provide: LEGACY_INTERCEPTOR_FN,
    useFactory: legacyInterceptorFnFactory
  }, {
    provide: HTTP_INTERCEPTOR_FNS,
    useExisting: LEGACY_INTERCEPTOR_FN,
    multi: true
  }]);
}
/**
 * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.
 *
 * This feature is incompatible with the `withNoXsrfProtection` feature.
 *
 * @see provideHttpClient
 */
function withXsrfConfiguration({
  cookieName,
  headerName
}) {
  const providers = [];
  if (cookieName !== undefined) {
    providers.push({
      provide: XSRF_COOKIE_NAME,
      useValue: cookieName
    });
  }
  if (headerName !== undefined) {
    providers.push({
      provide: XSRF_HEADER_NAME,
      useValue: headerName
    });
  }
  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);
}
/**
 * Disables XSRF protection in the configuration of the current `HttpClient` instance.
 *
 * This feature is incompatible with the `withXsrfConfiguration` feature.
 *
 * @see provideHttpClient
 */
function withNoXsrfProtection() {
  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [{
    provide: XSRF_ENABLED,
    useValue: false
  }]);
}
/**
 * Add JSONP support to the configuration of the current `HttpClient` instance.
 *
 * @see provideHttpClient
 */
function withJsonpSupport() {
  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [JsonpClientBackend, {
    provide: JsonpCallbackContext,
    useFactory: jsonpCallbackContext
  }, {
    provide: HTTP_INTERCEPTOR_FNS,
    useValue: jsonpInterceptorFn,
    multi: true
  }]);
}
/**
 * Configures the current `HttpClient` instance to make requests via the parent injector's
 * `HttpClient` instead of directly.
 *
 * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent
 * instance. For example, even if `HttpClient` is configured in the parent injector with
 * one or more interceptors, they will not intercept requests made via this instance.
 *
 * With this option enabled, once the request has passed through the current injector's
 * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of
 * dispatched directly, and interceptors in the parent configuration will be applied to the request.
 *
 * If there are several `HttpClient` instances in the injector hierarchy, it's possible for
 * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to
 * "bubble up" until either reaching the root level or an `HttpClient` which was not configured with
 * this option.
 *
 * @see provideHttpClient
 * @developerPreview
 */
function withRequestsMadeViaParent() {
  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [{
    provide: HttpBackend,
    useFactory: () => {
      const handlerFromParent = (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.inject)(HttpHandler, {
        skipSelf: true,
        optional: true
      });
      if (ngDevMode && handlerFromParent === null) {
        throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');
      }
      return handlerFromParent;
    }
  }]);
}

/**
 * Configures XSRF protection support for outgoing requests.
 *
 * For a server that supports a cookie-based XSRF protection system,
 * use directly to configure XSRF protection with the correct
 * cookie and header names.
 *
 * If no names are supplied, the default cookie name is `XSRF-TOKEN`
 * and the default header name is `X-XSRF-TOKEN`.
 *
 * @publicApi
 */
class HttpClientXsrfModule {
  /**
   * Disable the default XSRF protection.
   */
  static disable() {
    return {
      ngModule: HttpClientXsrfModule,
      providers: [withNoXsrfProtection().ɵproviders]
    };
  }
  /**
   * Configure XSRF protection.
   * @param options An object that can specify either or both
   * cookie name or header name.
   * - Cookie name default is `XSRF-TOKEN`.
   * - Header name default is `X-XSRF-TOKEN`.
   *
   */
  static withOptions(options = {}) {
    return {
      ngModule: HttpClientXsrfModule,
      providers: withXsrfConfiguration(options).ɵproviders
    };
  }
}
HttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) {
  return new (t || HttpClientXsrfModule)();
};
HttpClientXsrfModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineNgModule"]({
  type: HttpClientXsrfModule
});
HttpClientXsrfModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjector"]({
  providers: [HttpXsrfInterceptor, {
    provide: HTTP_INTERCEPTORS,
    useExisting: HttpXsrfInterceptor,
    multi: true
  }, {
    provide: HttpXsrfTokenExtractor,
    useClass: HttpXsrfCookieExtractor
  }, withXsrfConfiguration({
    cookieName: XSRF_DEFAULT_COOKIE_NAME,
    headerName: XSRF_DEFAULT_HEADER_NAME
  }).ɵproviders, {
    provide: XSRF_ENABLED,
    useValue: true
  }]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](HttpClientXsrfModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.NgModule,
    args: [{
      providers: [HttpXsrfInterceptor, {
        provide: HTTP_INTERCEPTORS,
        useExisting: HttpXsrfInterceptor,
        multi: true
      }, {
        provide: HttpXsrfTokenExtractor,
        useClass: HttpXsrfCookieExtractor
      }, withXsrfConfiguration({
        cookieName: XSRF_DEFAULT_COOKIE_NAME,
        headerName: XSRF_DEFAULT_HEADER_NAME
      }).ɵproviders, {
        provide: XSRF_ENABLED,
        useValue: true
      }]
    }]
  }], null, null);
})();
/**
 * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
 * with supporting services for XSRF. Automatically imported by `HttpClientModule`.
 *
 * You can add interceptors to the chain behind `HttpClient` by binding them to the
 * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.
 *
 * @publicApi
 */
class HttpClientModule {}
HttpClientModule.ɵfac = function HttpClientModule_Factory(t) {
  return new (t || HttpClientModule)();
};
HttpClientModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineNgModule"]({
  type: HttpClientModule
});
HttpClientModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjector"]({
  providers: [provideHttpClient(withInterceptorsFromDi())]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](HttpClientModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.NgModule,
    args: [{
      /**
       * Configures the [dependency injector](guide/glossary#injector) where it is imported
       * with supporting services for HTTP communications.
       */
      providers: [provideHttpClient(withInterceptorsFromDi())]
    }]
  }], null, null);
})();
/**
 * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
 * with supporting services for JSONP.
 * Without this module, Jsonp requests reach the backend
 * with method JSONP, where they are rejected.
 *
 * @publicApi
 */
class HttpClientJsonpModule {}
HttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) {
  return new (t || HttpClientJsonpModule)();
};
HttpClientJsonpModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineNgModule"]({
  type: HttpClientJsonpModule
});
HttpClientJsonpModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjector"]({
  providers: [withJsonpSupport().ɵproviders]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵsetClassMetadata"](HttpClientJsonpModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.NgModule,
    args: [{
      providers: [withJsonpSupport().ɵproviders]
    }]
  }], null, null);
})();

/**
 * A wrapper around the `XMLHttpRequest` constructor.
 *
 * @publicApi
 * @see `XhrFactory`
 * @deprecated
 * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.
 */
const XhrFactory = _angular_common__WEBPACK_IMPORTED_MODULE_6__.XhrFactory;

// This file is not used to build this module. It is only used during editing

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 2508:
/*!********************************************************!*\
  !*** ./node_modules/@angular/forms/fesm2020/forms.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AbstractControl": () => (/* binding */ AbstractControl),
/* harmony export */   "AbstractControlDirective": () => (/* binding */ AbstractControlDirective),
/* harmony export */   "AbstractFormGroupDirective": () => (/* binding */ AbstractFormGroupDirective),
/* harmony export */   "COMPOSITION_BUFFER_MODE": () => (/* binding */ COMPOSITION_BUFFER_MODE),
/* harmony export */   "CheckboxControlValueAccessor": () => (/* binding */ CheckboxControlValueAccessor),
/* harmony export */   "CheckboxRequiredValidator": () => (/* binding */ CheckboxRequiredValidator),
/* harmony export */   "ControlContainer": () => (/* binding */ ControlContainer),
/* harmony export */   "DefaultValueAccessor": () => (/* binding */ DefaultValueAccessor),
/* harmony export */   "EmailValidator": () => (/* binding */ EmailValidator),
/* harmony export */   "FormArray": () => (/* binding */ FormArray),
/* harmony export */   "FormArrayName": () => (/* binding */ FormArrayName),
/* harmony export */   "FormBuilder": () => (/* binding */ FormBuilder),
/* harmony export */   "FormControl": () => (/* binding */ FormControl),
/* harmony export */   "FormControlDirective": () => (/* binding */ FormControlDirective),
/* harmony export */   "FormControlName": () => (/* binding */ FormControlName),
/* harmony export */   "FormGroup": () => (/* binding */ FormGroup),
/* harmony export */   "FormGroupDirective": () => (/* binding */ FormGroupDirective),
/* harmony export */   "FormGroupName": () => (/* binding */ FormGroupName),
/* harmony export */   "FormRecord": () => (/* binding */ FormRecord),
/* harmony export */   "FormsModule": () => (/* binding */ FormsModule),
/* harmony export */   "MaxLengthValidator": () => (/* binding */ MaxLengthValidator),
/* harmony export */   "MaxValidator": () => (/* binding */ MaxValidator),
/* harmony export */   "MinLengthValidator": () => (/* binding */ MinLengthValidator),
/* harmony export */   "MinValidator": () => (/* binding */ MinValidator),
/* harmony export */   "NG_ASYNC_VALIDATORS": () => (/* binding */ NG_ASYNC_VALIDATORS),
/* harmony export */   "NG_VALIDATORS": () => (/* binding */ NG_VALIDATORS),
/* harmony export */   "NG_VALUE_ACCESSOR": () => (/* binding */ NG_VALUE_ACCESSOR),
/* harmony export */   "NgControl": () => (/* binding */ NgControl),
/* harmony export */   "NgControlStatus": () => (/* binding */ NgControlStatus),
/* harmony export */   "NgControlStatusGroup": () => (/* binding */ NgControlStatusGroup),
/* harmony export */   "NgForm": () => (/* binding */ NgForm),
/* harmony export */   "NgModel": () => (/* binding */ NgModel),
/* harmony export */   "NgModelGroup": () => (/* binding */ NgModelGroup),
/* harmony export */   "NgSelectOption": () => (/* binding */ NgSelectOption),
/* harmony export */   "NonNullableFormBuilder": () => (/* binding */ NonNullableFormBuilder),
/* harmony export */   "NumberValueAccessor": () => (/* binding */ NumberValueAccessor),
/* harmony export */   "PatternValidator": () => (/* binding */ PatternValidator),
/* harmony export */   "RadioControlValueAccessor": () => (/* binding */ RadioControlValueAccessor),
/* harmony export */   "RangeValueAccessor": () => (/* binding */ RangeValueAccessor),
/* harmony export */   "ReactiveFormsModule": () => (/* binding */ ReactiveFormsModule),
/* harmony export */   "RequiredValidator": () => (/* binding */ RequiredValidator),
/* harmony export */   "SelectControlValueAccessor": () => (/* binding */ SelectControlValueAccessor),
/* harmony export */   "SelectMultipleControlValueAccessor": () => (/* binding */ SelectMultipleControlValueAccessor),
/* harmony export */   "UntypedFormArray": () => (/* binding */ UntypedFormArray),
/* harmony export */   "UntypedFormBuilder": () => (/* binding */ UntypedFormBuilder),
/* harmony export */   "UntypedFormControl": () => (/* binding */ UntypedFormControl),
/* harmony export */   "UntypedFormGroup": () => (/* binding */ UntypedFormGroup),
/* harmony export */   "VERSION": () => (/* binding */ VERSION),
/* harmony export */   "Validators": () => (/* binding */ Validators),
/* harmony export */   "isFormArray": () => (/* binding */ isFormArray),
/* harmony export */   "isFormControl": () => (/* binding */ isFormControl),
/* harmony export */   "isFormGroup": () => (/* binding */ isFormGroup),
/* harmony export */   "isFormRecord": () => (/* binding */ isFormRecord),
/* harmony export */   "ɵInternalFormsSharedModule": () => (/* binding */ ɵInternalFormsSharedModule),
/* harmony export */   "ɵNgNoValidate": () => (/* binding */ ɵNgNoValidate),
/* harmony export */   "ɵNgSelectMultipleOption": () => (/* binding */ ɵNgSelectMultipleOption)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 4666);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 9346);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 1640);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ 635);
/**
 * @license Angular v15.2.4
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */







/**
 * Base class for all ControlValueAccessor classes defined in Forms package.
 * Contains common logic and utility functions.
 *
 * Note: this is an *internal-only* class and should not be extended or used directly in
 * applications code.
 */
class BaseControlValueAccessor {
  constructor(_renderer, _elementRef) {
    this._renderer = _renderer;
    this._elementRef = _elementRef;
    /**
     * The registered callback function called when a change or input event occurs on the input
     * element.
     * @nodoc
     */
    this.onChange = _ => {};
    /**
     * The registered callback function called when a blur event occurs on the input element.
     * @nodoc
     */
    this.onTouched = () => {};
  }
  /**
   * Helper method that sets a property on a target element using the current Renderer
   * implementation.
   * @nodoc
   */
  setProperty(key, value) {
    this._renderer.setProperty(this._elementRef.nativeElement, key, value);
  }
  /**
   * Registers a function called when the control is touched.
   * @nodoc
   */
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  /**
   * Registers a function called when the control value changes.
   * @nodoc
   */
  registerOnChange(fn) {
    this.onChange = fn;
  }
  /**
   * Sets the "disabled" property on the range input element.
   * @nodoc
   */
  setDisabledState(isDisabled) {
    this.setProperty('disabled', isDisabled);
  }
}
BaseControlValueAccessor.ɵfac = function BaseControlValueAccessor_Factory(t) {
  return new (t || BaseControlValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
};
BaseControlValueAccessor.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: BaseControlValueAccessor
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BaseControlValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }];
  }, null);
})();
/**
 * Base class for all built-in ControlValueAccessor classes (except DefaultValueAccessor, which is
 * used in case no other CVAs can be found). We use this class to distinguish between default CVA,
 * built-in CVAs and custom CVAs, so that Forms logic can recognize built-in CVAs and treat custom
 * ones with higher priority (when both built-in and custom CVAs are present).
 *
 * Note: this is an *internal-only* class and should not be extended or used directly in
 * applications code.
 */
class BuiltInControlValueAccessor extends BaseControlValueAccessor {}
BuiltInControlValueAccessor.ɵfac = /* @__PURE__ */function () {
  let ɵBuiltInControlValueAccessor_BaseFactory;
  return function BuiltInControlValueAccessor_Factory(t) {
    return (ɵBuiltInControlValueAccessor_BaseFactory || (ɵBuiltInControlValueAccessor_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](BuiltInControlValueAccessor)))(t || BuiltInControlValueAccessor);
  };
}();
BuiltInControlValueAccessor.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: BuiltInControlValueAccessor,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BuiltInControlValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive
  }], null, null);
})();
/**
 * Used to provide a `ControlValueAccessor` for form controls.
 *
 * See `DefaultValueAccessor` for how to implement one.
 *
 * @publicApi
 */
const NG_VALUE_ACCESSOR = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('NgValueAccessor');
const CHECKBOX_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => CheckboxControlValueAccessor),
  multi: true
};
/**
 * @description
 * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input
 * element.
 *
 * @usageNotes
 *
 * ### Using a checkbox with a reactive form.
 *
 * The following example shows how to use a checkbox with a reactive form.
 *
 * ```ts
 * const rememberLoginControl = new FormControl();
 * ```
 *
 * ```
 * <input type="checkbox" [formControl]="rememberLoginControl">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class CheckboxControlValueAccessor extends BuiltInControlValueAccessor {
  /**
   * Sets the "checked" property on the input element.
   * @nodoc
   */
  writeValue(value) {
    this.setProperty('checked', value);
  }
}
CheckboxControlValueAccessor.ɵfac = /* @__PURE__ */function () {
  let ɵCheckboxControlValueAccessor_BaseFactory;
  return function CheckboxControlValueAccessor_Factory(t) {
    return (ɵCheckboxControlValueAccessor_BaseFactory || (ɵCheckboxControlValueAccessor_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](CheckboxControlValueAccessor)))(t || CheckboxControlValueAccessor);
  };
}();
CheckboxControlValueAccessor.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CheckboxControlValueAccessor,
  selectors: [["input", "type", "checkbox", "formControlName", ""], ["input", "type", "checkbox", "formControl", ""], ["input", "type", "checkbox", "ngModel", ""]],
  hostBindings: function CheckboxControlValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function CheckboxControlValueAccessor_change_HostBindingHandler($event) {
        return ctx.onChange($event.target.checked);
      })("blur", function CheckboxControlValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([CHECKBOX_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CheckboxControlValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
      host: {
        '(change)': 'onChange($event.target.checked)',
        '(blur)': 'onTouched()'
      },
      providers: [CHECKBOX_VALUE_ACCESSOR]
    }]
  }], null, null);
})();
const DEFAULT_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => DefaultValueAccessor),
  multi: true
};
/**
 * We must check whether the agent is Android because composition events
 * behave differently between iOS and Android.
 */
function _isAndroid() {
  const userAgent = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__["ɵgetDOM"])() ? (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__["ɵgetDOM"])().getUserAgent() : '';
  return /android (\d+)/.test(userAgent.toLowerCase());
}
/**
 * @description
 * Provide this token to control if form directives buffer IME input until
 * the "compositionend" event occurs.
 * @publicApi
 */
const COMPOSITION_BUFFER_MODE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('CompositionEventMode');
/**
 * The default `ControlValueAccessor` for writing a value and listening to changes on input
 * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and
 * `NgModel` directives.
 *
 * {@searchKeywords ngDefaultControl}
 *
 * @usageNotes
 *
 * ### Using the default value accessor
 *
 * The following example shows how to use an input element that activates the default value accessor
 * (in this case, a text field).
 *
 * ```ts
 * const firstNameControl = new FormControl();
 * ```
 *
 * ```
 * <input type="text" [formControl]="firstNameControl">
 * ```
 *
 * This value accessor is used by default for `<input type="text">` and `<textarea>` elements, but
 * you could also use it for custom components that have similar behavior and do not require special
 * processing. In order to attach the default value accessor to a custom element, add the
 * `ngDefaultControl` attribute as shown below.
 *
 * ```
 * <custom-input-component ngDefaultControl [(ngModel)]="value"></custom-input-component>
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class DefaultValueAccessor extends BaseControlValueAccessor {
  constructor(renderer, elementRef, _compositionMode) {
    super(renderer, elementRef);
    this._compositionMode = _compositionMode;
    /** Whether the user is creating a composition string (IME events). */
    this._composing = false;
    if (this._compositionMode == null) {
      this._compositionMode = !_isAndroid();
    }
  }
  /**
   * Sets the "value" property on the input element.
   * @nodoc
   */
  writeValue(value) {
    const normalizedValue = value == null ? '' : value;
    this.setProperty('value', normalizedValue);
  }
  /** @internal */
  _handleInput(value) {
    if (!this._compositionMode || this._compositionMode && !this._composing) {
      this.onChange(value);
    }
  }
  /** @internal */
  _compositionStart() {
    this._composing = true;
  }
  /** @internal */
  _compositionEnd(value) {
    this._composing = false;
    this._compositionMode && this.onChange(value);
  }
}
DefaultValueAccessor.ɵfac = function DefaultValueAccessor_Factory(t) {
  return new (t || DefaultValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](COMPOSITION_BUFFER_MODE, 8));
};
DefaultValueAccessor.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: DefaultValueAccessor,
  selectors: [["input", "formControlName", "", 3, "type", "checkbox"], ["textarea", "formControlName", ""], ["input", "formControl", "", 3, "type", "checkbox"], ["textarea", "formControl", ""], ["input", "ngModel", "", 3, "type", "checkbox"], ["textarea", "ngModel", ""], ["", "ngDefaultControl", ""]],
  hostBindings: function DefaultValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("input", function DefaultValueAccessor_input_HostBindingHandler($event) {
        return ctx._handleInput($event.target.value);
      })("blur", function DefaultValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      })("compositionstart", function DefaultValueAccessor_compositionstart_HostBindingHandler() {
        return ctx._compositionStart();
      })("compositionend", function DefaultValueAccessor_compositionend_HostBindingHandler($event) {
        return ctx._compositionEnd($event.target.value);
      });
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([DEFAULT_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DefaultValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
      // TODO: vsavkin replace the above selector with the one below it once
      // https://github.com/angular/angular/issues/3011 is implemented
      // selector: '[ngModel],[formControl],[formControlName]',
      host: {
        '(input)': '$any(this)._handleInput($event.target.value)',
        '(blur)': 'onTouched()',
        '(compositionstart)': '$any(this)._compositionStart()',
        '(compositionend)': '$any(this)._compositionEnd($event.target.value)'
      },
      providers: [DEFAULT_VALUE_ACCESSOR]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [COMPOSITION_BUFFER_MODE]
      }]
    }];
  }, null);
})();
const NG_DEV_MODE$1 = typeof ngDevMode === 'undefined' || !!ngDevMode;
function isEmptyInputValue(value) {
  /**
   * Check if the object is a string or array before evaluating the length attribute.
   * This avoids falsely rejecting objects that contain a custom length attribute.
   * For example, the object {id: 1, length: 0, width: 0} should not be returned as empty.
   */
  return value == null || (typeof value === 'string' || Array.isArray(value)) && value.length === 0;
}
function hasValidLength(value) {
  // non-strict comparison is intentional, to check for both `null` and `undefined` values
  return value != null && typeof value.length === 'number';
}
/**
 * @description
 * An `InjectionToken` for registering additional synchronous validators used with
 * `AbstractControl`s.
 *
 * @see `NG_ASYNC_VALIDATORS`
 *
 * @usageNotes
 *
 * ### Providing a custom validator
 *
 * The following example registers a custom validator directive. Adding the validator to the
 * existing collection of validators requires the `multi: true` option.
 *
 * ```typescript
 * @Directive({
 *   selector: '[customValidator]',
 *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]
 * })
 * class CustomValidatorDirective implements Validator {
 *   validate(control: AbstractControl): ValidationErrors | null {
 *     return { 'custom': true };
 *   }
 * }
 * ```
 *
 * @publicApi
 */
const NG_VALIDATORS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('NgValidators');
/**
 * @description
 * An `InjectionToken` for registering additional asynchronous validators used with
 * `AbstractControl`s.
 *
 * @see `NG_VALIDATORS`
 *
 * @usageNotes
 *
 * ### Provide a custom async validator directive
 *
 * The following example implements the `AsyncValidator` interface to create an
 * async validator directive with a custom error key.
 *
 * ```typescript
 * @Directive({
 *   selector: '[customAsyncValidator]',
 *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:
 * true}]
 * })
 * class CustomAsyncValidatorDirective implements AsyncValidator {
 *   validate(control: AbstractControl): Promise<ValidationErrors|null> {
 *     return Promise.resolve({'custom': true});
 *   }
 * }
 * ```
 *
 * @publicApi
 */
const NG_ASYNC_VALIDATORS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('NgAsyncValidators');
/**
 * A regular expression that matches valid e-mail addresses.
 *
 * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:
 * - `local-part` consists of one or more of the allowed characters (alphanumeric and some
 *   punctuation symbols).
 * - `local-part` cannot begin or end with a period (`.`).
 * - `local-part` cannot be longer than 64 characters.
 * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or
 *   `foo.com`.
 * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and
 *   periods (`.`)).
 * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).
 * - A `label` cannot be longer than 63 characters.
 * - The whole address cannot be longer than 254 characters.
 *
 * ## Implementation background
 *
 * This regexp was ported over from AngularJS (see there for git history):
 * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27
 * It is based on the
 * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with
 * some enhancements to incorporate more RFC rules (such as rules related to domain names and the
 * lengths of different parts of the address). The main differences from the WHATWG version are:
 *   - Disallow `local-part` to begin or end with a period (`.`).
 *   - Disallow `local-part` length to exceed 64 characters.
 *   - Disallow total address length to exceed 254 characters.
 *
 * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.
 */
const EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
/**
 * @description
 * Provides a set of built-in validators that can be used by form controls.
 *
 * A validator is a function that processes a `FormControl` or collection of
 * controls and returns an error map or null. A null map means that validation has passed.
 *
 * @see [Form Validation](/guide/form-validation)
 *
 * @publicApi
 */
class Validators {
  /**
   * @description
   * Validator that requires the control's value to be greater than or equal to the provided number.
   *
   * @usageNotes
   *
   * ### Validate against a minimum of 3
   *
   * ```typescript
   * const control = new FormControl(2, Validators.min(3));
   *
   * console.log(control.errors); // {min: {min: 3, actual: 2}}
   * ```
   *
   * @returns A validator function that returns an error map with the
   * `min` property if the validation check fails, otherwise `null`.
   *
   * @see `updateValueAndValidity()`
   *
   */
  static min(min) {
    return minValidator(min);
  }
  /**
   * @description
   * Validator that requires the control's value to be less than or equal to the provided number.
   *
   * @usageNotes
   *
   * ### Validate against a maximum of 15
   *
   * ```typescript
   * const control = new FormControl(16, Validators.max(15));
   *
   * console.log(control.errors); // {max: {max: 15, actual: 16}}
   * ```
   *
   * @returns A validator function that returns an error map with the
   * `max` property if the validation check fails, otherwise `null`.
   *
   * @see `updateValueAndValidity()`
   *
   */
  static max(max) {
    return maxValidator(max);
  }
  /**
   * @description
   * Validator that requires the control have a non-empty value.
   *
   * @usageNotes
   *
   * ### Validate that the field is non-empty
   *
   * ```typescript
   * const control = new FormControl('', Validators.required);
   *
   * console.log(control.errors); // {required: true}
   * ```
   *
   * @returns An error map with the `required` property
   * if the validation check fails, otherwise `null`.
   *
   * @see `updateValueAndValidity()`
   *
   */
  static required(control) {
    return requiredValidator(control);
  }
  /**
   * @description
   * Validator that requires the control's value be true. This validator is commonly
   * used for required checkboxes.
   *
   * @usageNotes
   *
   * ### Validate that the field value is true
   *
   * ```typescript
   * const control = new FormControl('some value', Validators.requiredTrue);
   *
   * console.log(control.errors); // {required: true}
   * ```
   *
   * @returns An error map that contains the `required` property
   * set to `true` if the validation check fails, otherwise `null`.
   *
   * @see `updateValueAndValidity()`
   *
   */
  static requiredTrue(control) {
    return requiredTrueValidator(control);
  }
  /**
   * @description
   * Validator that requires the control's value pass an email validation test.
   *
   * Tests the value using a [regular
   * expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)
   * pattern suitable for common use cases. The pattern is based on the definition of a valid email
   * address in the [WHATWG HTML
   * specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with
   * some enhancements to incorporate more RFC rules (such as rules related to domain names and the
   * lengths of different parts of the address).
   *
   * The differences from the WHATWG version include:
   * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).
   * - Disallow `local-part` to be longer than 64 characters.
   * - Disallow the whole address to be longer than 254 characters.
   *
   * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to
   * validate the value against a different pattern.
   *
   * @usageNotes
   *
   * ### Validate that the field matches a valid email pattern
   *
   * ```typescript
   * const control = new FormControl('bad@', Validators.email);
   *
   * console.log(control.errors); // {email: true}
   * ```
   *
   * @returns An error map with the `email` property
   * if the validation check fails, otherwise `null`.
   *
   * @see `updateValueAndValidity()`
   *
   */
  static email(control) {
    return emailValidator(control);
  }
  /**
   * @description
   * Validator that requires the length of the control's value to be greater than or equal
   * to the provided minimum length. This validator is also provided by default if you use the
   * the HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used
   * only for types that have a numeric `length` property, such as strings or arrays. The
   * `minLength` validator logic is also not invoked for values when their `length` property is 0
   * (for example in case of an empty string or an empty array), to support optional controls. You
   * can use the standard `required` validator if empty values should not be considered valid.
   *
   * @usageNotes
   *
   * ### Validate that the field has a minimum of 3 characters
   *
   * ```typescript
   * const control = new FormControl('ng', Validators.minLength(3));
   *
   * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}
   * ```
   *
   * ```html
   * <input minlength="5">
   * ```
   *
   * @returns A validator function that returns an error map with the
   * `minlength` property if the validation check fails, otherwise `null`.
   *
   * @see `updateValueAndValidity()`
   *
   */
  static minLength(minLength) {
    return minLengthValidator(minLength);
  }
  /**
   * @description
   * Validator that requires the length of the control's value to be less than or equal
   * to the provided maximum length. This validator is also provided by default if you use the
   * the HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used
   * only for types that have a numeric `length` property, such as strings or arrays.
   *
   * @usageNotes
   *
   * ### Validate that the field has maximum of 5 characters
   *
   * ```typescript
   * const control = new FormControl('Angular', Validators.maxLength(5));
   *
   * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}
   * ```
   *
   * ```html
   * <input maxlength="5">
   * ```
   *
   * @returns A validator function that returns an error map with the
   * `maxlength` property if the validation check fails, otherwise `null`.
   *
   * @see `updateValueAndValidity()`
   *
   */
  static maxLength(maxLength) {
    return maxLengthValidator(maxLength);
  }
  /**
   * @description
   * Validator that requires the control's value to match a regex pattern. This validator is also
   * provided by default if you use the HTML5 `pattern` attribute.
   *
   * @usageNotes
   *
   * ### Validate that the field only contains letters or spaces
   *
   * ```typescript
   * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));
   *
   * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}
   * ```
   *
   * ```html
   * <input pattern="[a-zA-Z ]*">
   * ```
   *
   * ### Pattern matching with the global or sticky flag
   *
   * `RegExp` objects created with the `g` or `y` flags that are passed into `Validators.pattern`
   * can produce different results on the same input when validations are run consecutively. This is
   * due to how the behavior of `RegExp.prototype.test` is
   * specified in [ECMA-262](https://tc39.es/ecma262/#sec-regexpbuiltinexec)
   * (`RegExp` preserves the index of the last match when the global or sticky flag is used).
   * Due to this behavior, it is recommended that when using
   * `Validators.pattern` you **do not** pass in a `RegExp` object with either the global or sticky
   * flag enabled.
   *
   * ```typescript
   * // Not recommended (since the `g` flag is used)
   * const controlOne = new FormControl('1', Validators.pattern(/foo/g));
   *
   * // Good
   * const controlTwo = new FormControl('1', Validators.pattern(/foo/));
   * ```
   *
   * @param pattern A regular expression to be used as is to test the values, or a string.
   * If a string is passed, the `^` character is prepended and the `$` character is
   * appended to the provided string (if not already present), and the resulting regular
   * expression is used to test the values.
   *
   * @returns A validator function that returns an error map with the
   * `pattern` property if the validation check fails, otherwise `null`.
   *
   * @see `updateValueAndValidity()`
   *
   */
  static pattern(pattern) {
    return patternValidator(pattern);
  }
  /**
   * @description
   * Validator that performs no operation.
   *
   * @see `updateValueAndValidity()`
   *
   */
  static nullValidator(control) {
    return nullValidator(control);
  }
  static compose(validators) {
    return compose(validators);
  }
  /**
   * @description
   * Compose multiple async validators into a single function that returns the union
   * of the individual error objects for the provided control.
   *
   * @returns A validator function that returns an error map with the
   * merged error objects of the async validators if the validation check fails, otherwise `null`.
   *
   * @see `updateValueAndValidity()`
   *
   */
  static composeAsync(validators) {
    return composeAsync(validators);
  }
}
/**
 * Validator that requires the control's value to be greater than or equal to the provided number.
 * See `Validators.min` for additional information.
 */
function minValidator(min) {
  return control => {
    if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {
      return null; // don't validate empty values to allow optional controls
    }

    const value = parseFloat(control.value);
    // Controls with NaN values after parsing should be treated as not having a
    // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min
    return !isNaN(value) && value < min ? {
      'min': {
        'min': min,
        'actual': control.value
      }
    } : null;
  };
}
/**
 * Validator that requires the control's value to be less than or equal to the provided number.
 * See `Validators.max` for additional information.
 */
function maxValidator(max) {
  return control => {
    if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {
      return null; // don't validate empty values to allow optional controls
    }

    const value = parseFloat(control.value);
    // Controls with NaN values after parsing should be treated as not having a
    // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max
    return !isNaN(value) && value > max ? {
      'max': {
        'max': max,
        'actual': control.value
      }
    } : null;
  };
}
/**
 * Validator that requires the control have a non-empty value.
 * See `Validators.required` for additional information.
 */
function requiredValidator(control) {
  return isEmptyInputValue(control.value) ? {
    'required': true
  } : null;
}
/**
 * Validator that requires the control's value be true. This validator is commonly
 * used for required checkboxes.
 * See `Validators.requiredTrue` for additional information.
 */
function requiredTrueValidator(control) {
  return control.value === true ? null : {
    'required': true
  };
}
/**
 * Validator that requires the control's value pass an email validation test.
 * See `Validators.email` for additional information.
 */
function emailValidator(control) {
  if (isEmptyInputValue(control.value)) {
    return null; // don't validate empty values to allow optional controls
  }

  return EMAIL_REGEXP.test(control.value) ? null : {
    'email': true
  };
}
/**
 * Validator that requires the length of the control's value to be greater than or equal
 * to the provided minimum length. See `Validators.minLength` for additional information.
 */
function minLengthValidator(minLength) {
  return control => {
    if (isEmptyInputValue(control.value) || !hasValidLength(control.value)) {
      // don't validate empty values to allow optional controls
      // don't validate values without `length` property
      return null;
    }
    return control.value.length < minLength ? {
      'minlength': {
        'requiredLength': minLength,
        'actualLength': control.value.length
      }
    } : null;
  };
}
/**
 * Validator that requires the length of the control's value to be less than or equal
 * to the provided maximum length. See `Validators.maxLength` for additional information.
 */
function maxLengthValidator(maxLength) {
  return control => {
    return hasValidLength(control.value) && control.value.length > maxLength ? {
      'maxlength': {
        'requiredLength': maxLength,
        'actualLength': control.value.length
      }
    } : null;
  };
}
/**
 * Validator that requires the control's value to match a regex pattern.
 * See `Validators.pattern` for additional information.
 */
function patternValidator(pattern) {
  if (!pattern) return nullValidator;
  let regex;
  let regexStr;
  if (typeof pattern === 'string') {
    regexStr = '';
    if (pattern.charAt(0) !== '^') regexStr += '^';
    regexStr += pattern;
    if (pattern.charAt(pattern.length - 1) !== '$') regexStr += '$';
    regex = new RegExp(regexStr);
  } else {
    regexStr = pattern.toString();
    regex = pattern;
  }
  return control => {
    if (isEmptyInputValue(control.value)) {
      return null; // don't validate empty values to allow optional controls
    }

    const value = control.value;
    return regex.test(value) ? null : {
      'pattern': {
        'requiredPattern': regexStr,
        'actualValue': value
      }
    };
  };
}
/**
 * Function that has `ValidatorFn` shape, but performs no operation.
 */
function nullValidator(control) {
  return null;
}
function isPresent(o) {
  return o != null;
}
function toObservable(value) {
  const obs = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisPromise"])(value) ? (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.from)(value) : value;
  if (NG_DEV_MODE$1 && !(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisObservable"])(obs)) {
    let errorMessage = `Expected async validator to return Promise or Observable.`;
    // A synchronous validator will return object or null.
    if (typeof value === 'object') {
      errorMessage += ' Are you using a synchronous validator where an async validator is expected?';
    }
    throw new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](-1101 /* RuntimeErrorCode.WRONG_VALIDATOR_RETURN_TYPE */, errorMessage);
  }
  return obs;
}
function mergeErrors(arrayOfErrors) {
  let res = {};
  arrayOfErrors.forEach(errors => {
    res = errors != null ? {
      ...res,
      ...errors
    } : res;
  });
  return Object.keys(res).length === 0 ? null : res;
}
function executeValidators(control, validators) {
  return validators.map(validator => validator(control));
}
function isValidatorFn(validator) {
  return !validator.validate;
}
/**
 * Given the list of validators that may contain both functions as well as classes, return the list
 * of validator functions (convert validator classes into validator functions). This is needed to
 * have consistent structure in validators list before composing them.
 *
 * @param validators The set of validators that may contain validators both in plain function form
 *     as well as represented as a validator class.
 */
function normalizeValidators(validators) {
  return validators.map(validator => {
    return isValidatorFn(validator) ? validator : c => validator.validate(c);
  });
}
/**
 * Merges synchronous validators into a single validator function.
 * See `Validators.compose` for additional information.
 */
function compose(validators) {
  if (!validators) return null;
  const presentValidators = validators.filter(isPresent);
  if (presentValidators.length == 0) return null;
  return function (control) {
    return mergeErrors(executeValidators(control, presentValidators));
  };
}
/**
 * Accepts a list of validators of different possible shapes (`Validator` and `ValidatorFn`),
 * normalizes the list (converts everything to `ValidatorFn`) and merges them into a single
 * validator function.
 */
function composeValidators(validators) {
  return validators != null ? compose(normalizeValidators(validators)) : null;
}
/**
 * Merges asynchronous validators into a single validator function.
 * See `Validators.composeAsync` for additional information.
 */
function composeAsync(validators) {
  if (!validators) return null;
  const presentValidators = validators.filter(isPresent);
  if (presentValidators.length == 0) return null;
  return function (control) {
    const observables = executeValidators(control, presentValidators).map(toObservable);
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.forkJoin)(observables).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(mergeErrors));
  };
}
/**
 * Accepts a list of async validators of different possible shapes (`AsyncValidator` and
 * `AsyncValidatorFn`), normalizes the list (converts everything to `AsyncValidatorFn`) and merges
 * them into a single validator function.
 */
function composeAsyncValidators(validators) {
  return validators != null ? composeAsync(normalizeValidators(validators)) : null;
}
/**
 * Merges raw control validators with a given directive validator and returns the combined list of
 * validators as an array.
 */
function mergeValidators(controlValidators, dirValidator) {
  if (controlValidators === null) return [dirValidator];
  return Array.isArray(controlValidators) ? [...controlValidators, dirValidator] : [controlValidators, dirValidator];
}
/**
 * Retrieves the list of raw synchronous validators attached to a given control.
 */
function getControlValidators(control) {
  return control._rawValidators;
}
/**
 * Retrieves the list of raw asynchronous validators attached to a given control.
 */
function getControlAsyncValidators(control) {
  return control._rawAsyncValidators;
}
/**
 * Accepts a singleton validator, an array, or null, and returns an array type with the provided
 * validators.
 *
 * @param validators A validator, validators, or null.
 * @returns A validators array.
 */
function makeValidatorsArray(validators) {
  if (!validators) return [];
  return Array.isArray(validators) ? validators : [validators];
}
/**
 * Determines whether a validator or validators array has a given validator.
 *
 * @param validators The validator or validators to compare against.
 * @param validator The validator to check.
 * @returns Whether the validator is present.
 */
function hasValidator(validators, validator) {
  return Array.isArray(validators) ? validators.includes(validator) : validators === validator;
}
/**
 * Combines two arrays of validators into one. If duplicates are provided, only one will be added.
 *
 * @param validators The new validators.
 * @param currentValidators The base array of current validators.
 * @returns An array of validators.
 */
function addValidators(validators, currentValidators) {
  const current = makeValidatorsArray(currentValidators);
  const validatorsToAdd = makeValidatorsArray(validators);
  validatorsToAdd.forEach(v => {
    // Note: if there are duplicate entries in the new validators array,
    // only the first one would be added to the current list of validators.
    // Duplicate ones would be ignored since `hasValidator` would detect
    // the presence of a validator function and we update the current list in place.
    if (!hasValidator(current, v)) {
      current.push(v);
    }
  });
  return current;
}
function removeValidators(validators, currentValidators) {
  return makeValidatorsArray(currentValidators).filter(v => !hasValidator(validators, v));
}

/**
 * @description
 * Base class for control directives.
 *
 * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.
 *
 * @publicApi
 */
class AbstractControlDirective {
  constructor() {
    /**
     * Set of synchronous validators as they were provided while calling `setValidators` function.
     * @internal
     */
    this._rawValidators = [];
    /**
     * Set of asynchronous validators as they were provided while calling `setAsyncValidators`
     * function.
     * @internal
     */
    this._rawAsyncValidators = [];
    /*
     * The set of callbacks to be invoked when directive instance is being destroyed.
     */
    this._onDestroyCallbacks = [];
  }
  /**
   * @description
   * Reports the value of the control if it is present, otherwise null.
   */
  get value() {
    return this.control ? this.control.value : null;
  }
  /**
   * @description
   * Reports whether the control is valid. A control is considered valid if no
   * validation errors exist with the current value.
   * If the control is not present, null is returned.
   */
  get valid() {
    return this.control ? this.control.valid : null;
  }
  /**
   * @description
   * Reports whether the control is invalid, meaning that an error exists in the input value.
   * If the control is not present, null is returned.
   */
  get invalid() {
    return this.control ? this.control.invalid : null;
  }
  /**
   * @description
   * Reports whether a control is pending, meaning that that async validation is occurring and
   * errors are not yet available for the input value. If the control is not present, null is
   * returned.
   */
  get pending() {
    return this.control ? this.control.pending : null;
  }
  /**
   * @description
   * Reports whether the control is disabled, meaning that the control is disabled
   * in the UI and is exempt from validation checks and excluded from aggregate
   * values of ancestor controls. If the control is not present, null is returned.
   */
  get disabled() {
    return this.control ? this.control.disabled : null;
  }
  /**
   * @description
   * Reports whether the control is enabled, meaning that the control is included in ancestor
   * calculations of validity or value. If the control is not present, null is returned.
   */
  get enabled() {
    return this.control ? this.control.enabled : null;
  }
  /**
   * @description
   * Reports the control's validation errors. If the control is not present, null is returned.
   */
  get errors() {
    return this.control ? this.control.errors : null;
  }
  /**
   * @description
   * Reports whether the control is pristine, meaning that the user has not yet changed
   * the value in the UI. If the control is not present, null is returned.
   */
  get pristine() {
    return this.control ? this.control.pristine : null;
  }
  /**
   * @description
   * Reports whether the control is dirty, meaning that the user has changed
   * the value in the UI. If the control is not present, null is returned.
   */
  get dirty() {
    return this.control ? this.control.dirty : null;
  }
  /**
   * @description
   * Reports whether the control is touched, meaning that the user has triggered
   * a `blur` event on it. If the control is not present, null is returned.
   */
  get touched() {
    return this.control ? this.control.touched : null;
  }
  /**
   * @description
   * Reports the validation status of the control. Possible values include:
   * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.
   * If the control is not present, null is returned.
   */
  get status() {
    return this.control ? this.control.status : null;
  }
  /**
   * @description
   * Reports whether the control is untouched, meaning that the user has not yet triggered
   * a `blur` event on it. If the control is not present, null is returned.
   */
  get untouched() {
    return this.control ? this.control.untouched : null;
  }
  /**
   * @description
   * Returns a multicasting observable that emits a validation status whenever it is
   * calculated for the control. If the control is not present, null is returned.
   */
  get statusChanges() {
    return this.control ? this.control.statusChanges : null;
  }
  /**
   * @description
   * Returns a multicasting observable of value changes for the control that emits every time the
   * value of the control changes in the UI or programmatically.
   * If the control is not present, null is returned.
   */
  get valueChanges() {
    return this.control ? this.control.valueChanges : null;
  }
  /**
   * @description
   * Returns an array that represents the path from the top-level form to this control.
   * Each index is the string name of the control on that level.
   */
  get path() {
    return null;
  }
  /**
   * Sets synchronous validators for this directive.
   * @internal
   */
  _setValidators(validators) {
    this._rawValidators = validators || [];
    this._composedValidatorFn = composeValidators(this._rawValidators);
  }
  /**
   * Sets asynchronous validators for this directive.
   * @internal
   */
  _setAsyncValidators(validators) {
    this._rawAsyncValidators = validators || [];
    this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);
  }
  /**
   * @description
   * Synchronous validator function composed of all the synchronous validators registered with this
   * directive.
   */
  get validator() {
    return this._composedValidatorFn || null;
  }
  /**
   * @description
   * Asynchronous validator function composed of all the asynchronous validators registered with
   * this directive.
   */
  get asyncValidator() {
    return this._composedAsyncValidatorFn || null;
  }
  /**
   * Internal function to register callbacks that should be invoked
   * when directive instance is being destroyed.
   * @internal
   */
  _registerOnDestroy(fn) {
    this._onDestroyCallbacks.push(fn);
  }
  /**
   * Internal function to invoke all registered "on destroy" callbacks.
   * Note: calling this function also clears the list of callbacks.
   * @internal
   */
  _invokeOnDestroyCallbacks() {
    this._onDestroyCallbacks.forEach(fn => fn());
    this._onDestroyCallbacks = [];
  }
  /**
   * @description
   * Resets the control with the provided value if the control is present.
   */
  reset(value = undefined) {
    if (this.control) this.control.reset(value);
  }
  /**
   * @description
   * Reports whether the control with the given path has the error specified.
   *
   * @param errorCode The code of the error to check
   * @param path A list of control names that designates how to move from the current control
   * to the control that should be queried for errors.
   *
   * @usageNotes
   * For example, for the following `FormGroup`:
   *
   * ```
   * form = new FormGroup({
   *   address: new FormGroup({ street: new FormControl() })
   * });
   * ```
   *
   * The path to the 'street' control from the root form would be 'address' -> 'street'.
   *
   * It can be provided to this method in one of two formats:
   *
   * 1. An array of string control names, e.g. `['address', 'street']`
   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
   *
   * If no path is given, this method checks for the error on the current control.
   *
   * @returns whether the given error is present in the control at the given path.
   *
   * If the control is not present, false is returned.
   */
  hasError(errorCode, path) {
    return this.control ? this.control.hasError(errorCode, path) : false;
  }
  /**
   * @description
   * Reports error data for the control with the given path.
   *
   * @param errorCode The code of the error to check
   * @param path A list of control names that designates how to move from the current control
   * to the control that should be queried for errors.
   *
   * @usageNotes
   * For example, for the following `FormGroup`:
   *
   * ```
   * form = new FormGroup({
   *   address: new FormGroup({ street: new FormControl() })
   * });
   * ```
   *
   * The path to the 'street' control from the root form would be 'address' -> 'street'.
   *
   * It can be provided to this method in one of two formats:
   *
   * 1. An array of string control names, e.g. `['address', 'street']`
   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
   *
   * @returns error data for that particular error. If the control or error is not present,
   * null is returned.
   */
  getError(errorCode, path) {
    return this.control ? this.control.getError(errorCode, path) : null;
  }
}

/**
 * @description
 * A base class for directives that contain multiple registered instances of `NgControl`.
 * Only used by the forms module.
 *
 * @publicApi
 */
class ControlContainer extends AbstractControlDirective {
  /**
   * @description
   * The top-level form directive for the control.
   */
  get formDirective() {
    return null;
  }
  /**
   * @description
   * The path to this group.
   */
  get path() {
    return null;
  }
}

/**
 * @description
 * A base class that all `FormControl`-based directives extend. It binds a `FormControl`
 * object to a DOM element.
 *
 * @publicApi
 */
class NgControl extends AbstractControlDirective {
  constructor() {
    super(...arguments);
    /**
     * @description
     * The parent form for the control.
     *
     * @internal
     */
    this._parent = null;
    /**
     * @description
     * The name for the control
     */
    this.name = null;
    /**
     * @description
     * The value accessor for the control
     */
    this.valueAccessor = null;
  }
}

// DO NOT REFACTOR!
// Each status is represented by a separate function to make sure that
// advanced Closure Compiler optimizations related to property renaming
// can work correctly.
class AbstractControlStatus {
  constructor(cd) {
    this._cd = cd;
  }
  get isTouched() {
    return !!this._cd?.control?.touched;
  }
  get isUntouched() {
    return !!this._cd?.control?.untouched;
  }
  get isPristine() {
    return !!this._cd?.control?.pristine;
  }
  get isDirty() {
    return !!this._cd?.control?.dirty;
  }
  get isValid() {
    return !!this._cd?.control?.valid;
  }
  get isInvalid() {
    return !!this._cd?.control?.invalid;
  }
  get isPending() {
    return !!this._cd?.control?.pending;
  }
  get isSubmitted() {
    // We check for the `submitted` field from `NgForm` and `FormGroupDirective` classes, but
    // we avoid instanceof checks to prevent non-tree-shakable references to those types.
    return !!this._cd?.submitted;
  }
}
const ngControlStatusHost = {
  '[class.ng-untouched]': 'isUntouched',
  '[class.ng-touched]': 'isTouched',
  '[class.ng-pristine]': 'isPristine',
  '[class.ng-dirty]': 'isDirty',
  '[class.ng-valid]': 'isValid',
  '[class.ng-invalid]': 'isInvalid',
  '[class.ng-pending]': 'isPending'
};
const ngGroupStatusHost = {
  ...ngControlStatusHost,
  '[class.ng-submitted]': 'isSubmitted'
};
/**
 * @description
 * Directive automatically applied to Angular form controls that sets CSS classes
 * based on control status.
 *
 * @usageNotes
 *
 * ### CSS classes applied
 *
 * The following classes are applied as the properties become true:
 *
 * * ng-valid
 * * ng-invalid
 * * ng-pending
 * * ng-pristine
 * * ng-dirty
 * * ng-untouched
 * * ng-touched
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class NgControlStatus extends AbstractControlStatus {
  constructor(cd) {
    super(cd);
  }
}
NgControlStatus.ɵfac = function NgControlStatus_Factory(t) {
  return new (t || NgControlStatus)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgControl, 2));
};
NgControlStatus.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: NgControlStatus,
  selectors: [["", "formControlName", ""], ["", "ngModel", ""], ["", "formControl", ""]],
  hostVars: 14,
  hostBindings: function NgControlStatus_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("ng-untouched", ctx.isUntouched)("ng-touched", ctx.isTouched)("ng-pristine", ctx.isPristine)("ng-dirty", ctx.isDirty)("ng-valid", ctx.isValid)("ng-invalid", ctx.isInvalid)("ng-pending", ctx.isPending);
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgControlStatus, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[formControlName],[ngModel],[formControl]',
      host: ngControlStatusHost
    }]
  }], function () {
    return [{
      type: NgControl,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }]
    }];
  }, null);
})();
/**
 * @description
 * Directive automatically applied to Angular form groups that sets CSS classes
 * based on control status (valid/invalid/dirty/etc). On groups, this includes the additional
 * class ng-submitted.
 *
 * @see `NgControlStatus`
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class NgControlStatusGroup extends AbstractControlStatus {
  constructor(cd) {
    super(cd);
  }
}
NgControlStatusGroup.ɵfac = function NgControlStatusGroup_Factory(t) {
  return new (t || NgControlStatusGroup)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 10));
};
NgControlStatusGroup.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: NgControlStatusGroup,
  selectors: [["", "formGroupName", ""], ["", "formArrayName", ""], ["", "ngModelGroup", ""], ["", "formGroup", ""], ["form", 3, "ngNoForm", ""], ["", "ngForm", ""]],
  hostVars: 16,
  hostBindings: function NgControlStatusGroup_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("ng-untouched", ctx.isUntouched)("ng-touched", ctx.isTouched)("ng-pristine", ctx.isPristine)("ng-dirty", ctx.isDirty)("ng-valid", ctx.isValid)("ng-invalid", ctx.isInvalid)("ng-pending", ctx.isPending)("ng-submitted", ctx.isSubmitted);
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgControlStatusGroup, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
      host: ngGroupStatusHost
    }]
  }], function () {
    return [{
      type: ControlContainer,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }]
    }];
  }, null);
})();
const formControlNameExample = `
  <div [formGroup]="myGroup">
    <input formControlName="firstName">
  </div>

  In your class:

  this.myGroup = new FormGroup({
      firstName: new FormControl()
  });`;
const formGroupNameExample = `
  <div [formGroup]="myGroup">
      <div formGroupName="person">
        <input formControlName="firstName">
      </div>
  </div>

  In your class:

  this.myGroup = new FormGroup({
      person: new FormGroup({ firstName: new FormControl() })
  });`;
const formArrayNameExample = `
  <div [formGroup]="myGroup">
    <div formArrayName="cities">
      <div *ngFor="let city of cityArray.controls; index as i">
        <input [formControlName]="i">
      </div>
    </div>
  </div>

  In your class:

  this.cityArray = new FormArray([new FormControl('SF')]);
  this.myGroup = new FormGroup({
    cities: this.cityArray
  });`;
const ngModelGroupExample = `
  <form>
      <div ngModelGroup="person">
        <input [(ngModel)]="person.name" name="firstName">
      </div>
  </form>`;
const ngModelWithFormGroupExample = `
  <div [formGroup]="myGroup">
      <input formControlName="firstName">
      <input [(ngModel)]="showMoreControls" [ngModelOptions]="{standalone: true}">
  </div>
`;
function controlParentException() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1050 /* RuntimeErrorCode.FORM_CONTROL_NAME_MISSING_PARENT */, `formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup
      directive and pass it an existing FormGroup instance (you can create one in your class).

    Example:

    ${formControlNameExample}`);
}
function ngModelGroupException() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1051 /* RuntimeErrorCode.FORM_CONTROL_NAME_INSIDE_MODEL_GROUP */, `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents
      that also have a "form" prefix: formGroupName, formArrayName, or formGroup.

      Option 1:  Update the parent to be formGroupName (reactive form strategy)

      ${formGroupNameExample}

      Option 2: Use ngModel instead of formControlName (template-driven strategy)

      ${ngModelGroupExample}`);
}
function missingFormException() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1052 /* RuntimeErrorCode.FORM_GROUP_MISSING_INSTANCE */, `formGroup expects a FormGroup instance. Please pass one in.

      Example:

      ${formControlNameExample}`);
}
function groupParentException() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1053 /* RuntimeErrorCode.FORM_GROUP_NAME_MISSING_PARENT */, `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup
    directive and pass it an existing FormGroup instance (you can create one in your class).

    Example:

    ${formGroupNameExample}`);
}
function arrayParentException() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1054 /* RuntimeErrorCode.FORM_ARRAY_NAME_MISSING_PARENT */, `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup
      directive and pass it an existing FormGroup instance (you can create one in your class).

      Example:

      ${formArrayNameExample}`);
}
const disabledAttrWarning = `
  It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true
  when you set up this control in your component class, the disabled attribute will actually be set in the DOM for
  you. We recommend using this approach to avoid 'changed after checked' errors.

  Example:
  // Specify the \`disabled\` property at control creation time:
  form = new FormGroup({
    first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),
    last: new FormControl('Drew', Validators.required)
  });

  // Controls can also be enabled/disabled after creation:
  form.get('first')?.enable();
  form.get('last')?.disable();
`;
const asyncValidatorsDroppedWithOptsWarning = `
  It looks like you're constructing using a FormControl with both an options argument and an
  async validators argument. Mixing these arguments will cause your async validators to be dropped.
  You should either put all your validators in the options object, or in separate validators
  arguments. For example:

  // Using validators arguments
  fc = new FormControl(42, Validators.required, myAsyncValidator);

  // Using AbstractControlOptions
  fc = new FormControl(42, {validators: Validators.required, asyncValidators: myAV});

  // Do NOT mix them: async validators will be dropped!
  fc = new FormControl(42, {validators: Validators.required}, /* Oops! */ myAsyncValidator);
`;
function ngModelWarning(directiveName) {
  return `
  It looks like you're using ngModel on the same form field as ${directiveName}.
  Support for using the ngModel input property and ngModelChange event with
  reactive form directives has been deprecated in Angular v6 and will be removed
  in a future version of Angular.

  For more information on this, see our API docs here:
  https://angular.io/api/forms/${directiveName === 'formControl' ? 'FormControlDirective' : 'FormControlName'}#use-with-ngmodel
  `;
}
function describeKey(isFormGroup, key) {
  return isFormGroup ? `with name: '${key}'` : `at index: ${key}`;
}
function noControlsError(isFormGroup) {
  return `
    There are no form controls registered with this ${isFormGroup ? 'group' : 'array'} yet. If you're using ngModel,
    you may want to check next tick (e.g. use setTimeout).
  `;
}
function missingControlError(isFormGroup, key) {
  return `Cannot find form control ${describeKey(isFormGroup, key)}`;
}
function missingControlValueError(isFormGroup, key) {
  return `Must supply a value for form control ${describeKey(isFormGroup, key)}`;
}
const NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;
/**
 * Reports that a control is valid, meaning that no errors exist in the input value.
 *
 * @see `status`
 */
const VALID = 'VALID';
/**
 * Reports that a control is invalid, meaning that an error exists in the input value.
 *
 * @see `status`
 */
const INVALID = 'INVALID';
/**
 * Reports that a control is pending, meaning that that async validation is occurring and
 * errors are not yet available for the input value.
 *
 * @see `markAsPending`
 * @see `status`
 */
const PENDING = 'PENDING';
/**
 * Reports that a control is disabled, meaning that the control is exempt from ancestor
 * calculations of validity or value.
 *
 * @see `markAsDisabled`
 * @see `status`
 */
const DISABLED = 'DISABLED';
/**
 * Gets validators from either an options object or given validators.
 */
function pickValidators(validatorOrOpts) {
  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;
}
/**
 * Creates validator function by combining provided validators.
 */
function coerceToValidator(validator) {
  return Array.isArray(validator) ? composeValidators(validator) : validator || null;
}
/**
 * Gets async validators from either an options object or given validators.
 */
function pickAsyncValidators(asyncValidator, validatorOrOpts) {
  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    if (isOptionsObj(validatorOrOpts) && asyncValidator) {
      console.warn(asyncValidatorsDroppedWithOptsWarning);
    }
  }
  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;
}
/**
 * Creates async validator function by combining provided async validators.
 */
function coerceToAsyncValidator(asyncValidator) {
  return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator || null;
}
function isOptionsObj(validatorOrOpts) {
  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && typeof validatorOrOpts === 'object';
}
function assertControlPresent(parent, isGroup, key) {
  const controls = parent.controls;
  const collection = isGroup ? Object.keys(controls) : controls;
  if (!collection.length) {
    throw new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1000 /* RuntimeErrorCode.NO_CONTROLS */, NG_DEV_MODE ? noControlsError(isGroup) : '');
  }
  if (!controls[key]) {
    throw new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1001 /* RuntimeErrorCode.MISSING_CONTROL */, NG_DEV_MODE ? missingControlError(isGroup, key) : '');
  }
}
function assertAllValuesPresent(control, isGroup, value) {
  control._forEachChild((_, key) => {
    if (value[key] === undefined) {
      throw new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1002 /* RuntimeErrorCode.MISSING_CONTROL_VALUE */, NG_DEV_MODE ? missingControlValueError(isGroup, key) : '');
    }
  });
}
// clang-format on
/**
 * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.
 *
 * It provides some of the shared behavior that all controls and groups of controls have, like
 * running validators, calculating status, and resetting state. It also defines the properties
 * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be
 * instantiated directly.
 *
 * The first type parameter TValue represents the value type of the control (`control.value`).
 * The optional type parameter TRawValue  represents the raw value type (`control.getRawValue()`).
 *
 * @see [Forms Guide](/guide/forms)
 * @see [Reactive Forms Guide](/guide/reactive-forms)
 * @see [Dynamic Forms Guide](/guide/dynamic-form)
 *
 * @publicApi
 */
class AbstractControl {
  /**
   * Initialize the AbstractControl instance.
   *
   * @param validators The function or array of functions that is used to determine the validity of
   *     this control synchronously.
   * @param asyncValidators The function or array of functions that is used to determine validity of
   *     this control asynchronously.
   */
  constructor(validators, asyncValidators) {
    /** @internal */
    this._pendingDirty = false;
    /**
     * Indicates that a control has its own pending asynchronous validation in progress.
     *
     * @internal
     */
    this._hasOwnPendingAsyncValidator = false;
    /** @internal */
    this._pendingTouched = false;
    /** @internal */
    this._onCollectionChange = () => {};
    this._parent = null;
    /**
     * A control is `pristine` if the user has not yet changed
     * the value in the UI.
     *
     * @returns True if the user has not yet changed the value in the UI; compare `dirty`.
     * Programmatic changes to a control's value do not mark it dirty.
     */
    this.pristine = true;
    /**
     * True if the control is marked as `touched`.
     *
     * A control is marked `touched` once the user has triggered
     * a `blur` event on it.
     */
    this.touched = false;
    /** @internal */
    this._onDisabledChange = [];
    this._assignValidators(validators);
    this._assignAsyncValidators(asyncValidators);
  }
  /**
   * Returns the function that is used to determine the validity of this control synchronously.
   * If multiple validators have been added, this will be a single composed function.
   * See `Validators.compose()` for additional information.
   */
  get validator() {
    return this._composedValidatorFn;
  }
  set validator(validatorFn) {
    this._rawValidators = this._composedValidatorFn = validatorFn;
  }
  /**
   * Returns the function that is used to determine the validity of this control asynchronously.
   * If multiple validators have been added, this will be a single composed function.
   * See `Validators.compose()` for additional information.
   */
  get asyncValidator() {
    return this._composedAsyncValidatorFn;
  }
  set asyncValidator(asyncValidatorFn) {
    this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;
  }
  /**
   * The parent control.
   */
  get parent() {
    return this._parent;
  }
  /**
   * A control is `valid` when its `status` is `VALID`.
   *
   * @see {@link AbstractControl.status}
   *
   * @returns True if the control has passed all of its validation tests,
   * false otherwise.
   */
  get valid() {
    return this.status === VALID;
  }
  /**
   * A control is `invalid` when its `status` is `INVALID`.
   *
   * @see {@link AbstractControl.status}
   *
   * @returns True if this control has failed one or more of its validation checks,
   * false otherwise.
   */
  get invalid() {
    return this.status === INVALID;
  }
  /**
   * A control is `pending` when its `status` is `PENDING`.
   *
   * @see {@link AbstractControl.status}
   *
   * @returns True if this control is in the process of conducting a validation check,
   * false otherwise.
   */
  get pending() {
    return this.status == PENDING;
  }
  /**
   * A control is `disabled` when its `status` is `DISABLED`.
   *
   * Disabled controls are exempt from validation checks and
   * are not included in the aggregate value of their ancestor
   * controls.
   *
   * @see {@link AbstractControl.status}
   *
   * @returns True if the control is disabled, false otherwise.
   */
  get disabled() {
    return this.status === DISABLED;
  }
  /**
   * A control is `enabled` as long as its `status` is not `DISABLED`.
   *
   * @returns True if the control has any status other than 'DISABLED',
   * false if the status is 'DISABLED'.
   *
   * @see {@link AbstractControl.status}
   *
   */
  get enabled() {
    return this.status !== DISABLED;
  }
  /**
   * A control is `dirty` if the user has changed the value
   * in the UI.
   *
   * @returns True if the user has changed the value of this control in the UI; compare `pristine`.
   * Programmatic changes to a control's value do not mark it dirty.
   */
  get dirty() {
    return !this.pristine;
  }
  /**
   * True if the control has not been marked as touched
   *
   * A control is `untouched` if the user has not yet triggered
   * a `blur` event on it.
   */
  get untouched() {
    return !this.touched;
  }
  /**
   * Reports the update strategy of the `AbstractControl` (meaning
   * the event on which the control updates itself).
   * Possible values: `'change'` | `'blur'` | `'submit'`
   * Default value: `'change'`
   */
  get updateOn() {
    return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : 'change';
  }
  /**
   * Sets the synchronous validators that are active on this control.  Calling
   * this overwrites any existing synchronous validators.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * If you want to add a new validator without affecting existing ones, consider
   * using `addValidators()` method instead.
   */
  setValidators(validators) {
    this._assignValidators(validators);
  }
  /**
   * Sets the asynchronous validators that are active on this control. Calling this
   * overwrites any existing asynchronous validators.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * If you want to add a new validator without affecting existing ones, consider
   * using `addAsyncValidators()` method instead.
   */
  setAsyncValidators(validators) {
    this._assignAsyncValidators(validators);
  }
  /**
   * Add a synchronous validator or validators to this control, without affecting other validators.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * Adding a validator that already exists will have no effect. If duplicate validator functions
   * are present in the `validators` array, only the first instance would be added to a form
   * control.
   *
   * @param validators The new validator function or functions to add to this control.
   */
  addValidators(validators) {
    this.setValidators(addValidators(validators, this._rawValidators));
  }
  /**
   * Add an asynchronous validator or validators to this control, without affecting other
   * validators.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * Adding a validator that already exists will have no effect.
   *
   * @param validators The new asynchronous validator function or functions to add to this control.
   */
  addAsyncValidators(validators) {
    this.setAsyncValidators(addValidators(validators, this._rawAsyncValidators));
  }
  /**
   * Remove a synchronous validator from this control, without affecting other validators.
   * Validators are compared by function reference; you must pass a reference to the exact same
   * validator function as the one that was originally set. If a provided validator is not found,
   * it is ignored.
   *
   * @usageNotes
   *
   * ### Reference to a ValidatorFn
   *
   * ```
   * // Reference to the RequiredValidator
   * const ctrl = new FormControl<string | null>('', Validators.required);
   * ctrl.removeValidators(Validators.required);
   *
   * // Reference to anonymous function inside MinValidator
   * const minValidator = Validators.min(3);
   * const ctrl = new FormControl<string | null>('', minValidator);
   * expect(ctrl.hasValidator(minValidator)).toEqual(true)
   * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)
   *
   * ctrl.removeValidators(minValidator);
   * ```
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * @param validators The validator or validators to remove.
   */
  removeValidators(validators) {
    this.setValidators(removeValidators(validators, this._rawValidators));
  }
  /**
   * Remove an asynchronous validator from this control, without affecting other validators.
   * Validators are compared by function reference; you must pass a reference to the exact same
   * validator function as the one that was originally set. If a provided validator is not found, it
   * is ignored.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * @param validators The asynchronous validator or validators to remove.
   */
  removeAsyncValidators(validators) {
    this.setAsyncValidators(removeValidators(validators, this._rawAsyncValidators));
  }
  /**
   * Check whether a synchronous validator function is present on this control. The provided
   * validator must be a reference to the exact same function that was provided.
   *
   * @usageNotes
   *
   * ### Reference to a ValidatorFn
   *
   * ```
   * // Reference to the RequiredValidator
   * const ctrl = new FormControl<number | null>(0, Validators.required);
   * expect(ctrl.hasValidator(Validators.required)).toEqual(true)
   *
   * // Reference to anonymous function inside MinValidator
   * const minValidator = Validators.min(3);
   * const ctrl = new FormControl<number | null>(0, minValidator);
   * expect(ctrl.hasValidator(minValidator)).toEqual(true)
   * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)
   * ```
   *
   * @param validator The validator to check for presence. Compared by function reference.
   * @returns Whether the provided validator was found on this control.
   */
  hasValidator(validator) {
    return hasValidator(this._rawValidators, validator);
  }
  /**
   * Check whether an asynchronous validator function is present on this control. The provided
   * validator must be a reference to the exact same function that was provided.
   *
   * @param validator The asynchronous validator to check for presence. Compared by function
   *     reference.
   * @returns Whether the provided asynchronous validator was found on this control.
   */
  hasAsyncValidator(validator) {
    return hasValidator(this._rawAsyncValidators, validator);
  }
  /**
   * Empties out the synchronous validator list.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   */
  clearValidators() {
    this.validator = null;
  }
  /**
   * Empties out the async validator list.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   */
  clearAsyncValidators() {
    this.asyncValidator = null;
  }
  /**
   * Marks the control as `touched`. A control is touched by focus and
   * blur events that do not change the value.
   *
   * @see `markAsUntouched()`
   * @see `markAsDirty()`
   * @see `markAsPristine()`
   *
   * @param opts Configuration options that determine how the control propagates changes
   * and emits events after marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   */
  markAsTouched(opts = {}) {
    this.touched = true;
    if (this._parent && !opts.onlySelf) {
      this._parent.markAsTouched(opts);
    }
  }
  /**
   * Marks the control and all its descendant controls as `touched`.
   * @see `markAsTouched()`
   */
  markAllAsTouched() {
    this.markAsTouched({
      onlySelf: true
    });
    this._forEachChild(control => control.markAllAsTouched());
  }
  /**
   * Marks the control as `untouched`.
   *
   * If the control has any children, also marks all children as `untouched`
   * and recalculates the `touched` status of all parent controls.
   *
   * @see `markAsTouched()`
   * @see `markAsDirty()`
   * @see `markAsPristine()`
   *
   * @param opts Configuration options that determine how the control propagates changes
   * and emits events after the marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   */
  markAsUntouched(opts = {}) {
    this.touched = false;
    this._pendingTouched = false;
    this._forEachChild(control => {
      control.markAsUntouched({
        onlySelf: true
      });
    });
    if (this._parent && !opts.onlySelf) {
      this._parent._updateTouched(opts);
    }
  }
  /**
   * Marks the control as `dirty`. A control becomes dirty when
   * the control's value is changed through the UI; compare `markAsTouched`.
   *
   * @see `markAsTouched()`
   * @see `markAsUntouched()`
   * @see `markAsPristine()`
   *
   * @param opts Configuration options that determine how the control propagates changes
   * and emits events after marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   */
  markAsDirty(opts = {}) {
    this.pristine = false;
    if (this._parent && !opts.onlySelf) {
      this._parent.markAsDirty(opts);
    }
  }
  /**
   * Marks the control as `pristine`.
   *
   * If the control has any children, marks all children as `pristine`,
   * and recalculates the `pristine` status of all parent
   * controls.
   *
   * @see `markAsTouched()`
   * @see `markAsUntouched()`
   * @see `markAsDirty()`
   *
   * @param opts Configuration options that determine how the control emits events after
   * marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   */
  markAsPristine(opts = {}) {
    this.pristine = true;
    this._pendingDirty = false;
    this._forEachChild(control => {
      control.markAsPristine({
        onlySelf: true
      });
    });
    if (this._parent && !opts.onlySelf) {
      this._parent._updatePristine(opts);
    }
  }
  /**
   * Marks the control as `pending`.
   *
   * A control is pending while the control performs async validation.
   *
   * @see {@link AbstractControl.status}
   *
   * @param opts Configuration options that determine how the control propagates changes and
   * emits events after marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`
   * observable emits an event with the latest status the control is marked pending.
   * When false, no events are emitted.
   *
   */
  markAsPending(opts = {}) {
    this.status = PENDING;
    if (opts.emitEvent !== false) {
      this.statusChanges.emit(this.status);
    }
    if (this._parent && !opts.onlySelf) {
      this._parent.markAsPending(opts);
    }
  }
  /**
   * Disables the control. This means the control is exempt from validation checks and
   * excluded from the aggregate value of any parent. Its status is `DISABLED`.
   *
   * If the control has children, all children are also disabled.
   *
   * @see {@link AbstractControl.status}
   *
   * @param opts Configuration options that determine how the control propagates
   * changes and emits events after the control is disabled.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is disabled.
   * When false, no events are emitted.
   */
  disable(opts = {}) {
    // If parent has been marked artificially dirty we don't want to re-calculate the
    // parent's dirtiness based on the children.
    const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
    this.status = DISABLED;
    this.errors = null;
    this._forEachChild(control => {
      control.disable({
        ...opts,
        onlySelf: true
      });
    });
    this._updateValue();
    if (opts.emitEvent !== false) {
      this.valueChanges.emit(this.value);
      this.statusChanges.emit(this.status);
    }
    this._updateAncestors({
      ...opts,
      skipPristineCheck
    });
    this._onDisabledChange.forEach(changeFn => changeFn(true));
  }
  /**
   * Enables the control. This means the control is included in validation checks and
   * the aggregate value of its parent. Its status recalculates based on its value and
   * its validators.
   *
   * By default, if the control has children, all children are enabled.
   *
   * @see {@link AbstractControl.status}
   *
   * @param opts Configure options that control how the control propagates changes and
   * emits events when marked as untouched
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is enabled.
   * When false, no events are emitted.
   */
  enable(opts = {}) {
    // If parent has been marked artificially dirty we don't want to re-calculate the
    // parent's dirtiness based on the children.
    const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
    this.status = VALID;
    this._forEachChild(control => {
      control.enable({
        ...opts,
        onlySelf: true
      });
    });
    this.updateValueAndValidity({
      onlySelf: true,
      emitEvent: opts.emitEvent
    });
    this._updateAncestors({
      ...opts,
      skipPristineCheck
    });
    this._onDisabledChange.forEach(changeFn => changeFn(false));
  }
  _updateAncestors(opts) {
    if (this._parent && !opts.onlySelf) {
      this._parent.updateValueAndValidity(opts);
      if (!opts.skipPristineCheck) {
        this._parent._updatePristine();
      }
      this._parent._updateTouched();
    }
  }
  /**
   * Sets the parent of the control
   *
   * @param parent The new parent.
   */
  setParent(parent) {
    this._parent = parent;
  }
  /**
   * The raw value of this control. For most control implementations, the raw value will include
   * disabled children.
   */
  getRawValue() {
    return this.value;
  }
  /**
   * Recalculates the value and validation status of the control.
   *
   * By default, it also updates the value and validity of its ancestors.
   *
   * @param opts Configuration options determine how the control propagates changes and emits events
   * after updates and validity checks are applied.
   * * `onlySelf`: When true, only update this control. When false or not supplied,
   * update all direct ancestors. Default is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is updated.
   * When false, no events are emitted.
   */
  updateValueAndValidity(opts = {}) {
    this._setInitialStatus();
    this._updateValue();
    if (this.enabled) {
      this._cancelExistingSubscription();
      this.errors = this._runValidator();
      this.status = this._calculateStatus();
      if (this.status === VALID || this.status === PENDING) {
        this._runAsyncValidator(opts.emitEvent);
      }
    }
    if (opts.emitEvent !== false) {
      this.valueChanges.emit(this.value);
      this.statusChanges.emit(this.status);
    }
    if (this._parent && !opts.onlySelf) {
      this._parent.updateValueAndValidity(opts);
    }
  }
  /** @internal */
  _updateTreeValidity(opts = {
    emitEvent: true
  }) {
    this._forEachChild(ctrl => ctrl._updateTreeValidity(opts));
    this.updateValueAndValidity({
      onlySelf: true,
      emitEvent: opts.emitEvent
    });
  }
  _setInitialStatus() {
    this.status = this._allControlsDisabled() ? DISABLED : VALID;
  }
  _runValidator() {
    return this.validator ? this.validator(this) : null;
  }
  _runAsyncValidator(emitEvent) {
    if (this.asyncValidator) {
      this.status = PENDING;
      this._hasOwnPendingAsyncValidator = true;
      const obs = toObservable(this.asyncValidator(this));
      this._asyncValidationSubscription = obs.subscribe(errors => {
        this._hasOwnPendingAsyncValidator = false;
        // This will trigger the recalculation of the validation status, which depends on
        // the state of the asynchronous validation (whether it is in progress or not). So, it is
        // necessary that we have updated the `_hasOwnPendingAsyncValidator` boolean flag first.
        this.setErrors(errors, {
          emitEvent
        });
      });
    }
  }
  _cancelExistingSubscription() {
    if (this._asyncValidationSubscription) {
      this._asyncValidationSubscription.unsubscribe();
      this._hasOwnPendingAsyncValidator = false;
    }
  }
  /**
   * Sets errors on a form control when running validations manually, rather than automatically.
   *
   * Calling `setErrors` also updates the validity of the parent control.
   *
   * @param opts Configuration options that determine how the control propagates
   * changes and emits events after the control errors are set.
   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`
   * observable emits an event after the errors are set.
   *
   * @usageNotes
   *
   * ### Manually set the errors for a control
   *
   * ```
   * const login = new FormControl('someLogin');
   * login.setErrors({
   *   notUnique: true
   * });
   *
   * expect(login.valid).toEqual(false);
   * expect(login.errors).toEqual({ notUnique: true });
   *
   * login.setValue('someOtherLogin');
   *
   * expect(login.valid).toEqual(true);
   * ```
   */
  setErrors(errors, opts = {}) {
    this.errors = errors;
    this._updateControlsErrors(opts.emitEvent !== false);
  }
  /**
   * Retrieves a child control given the control's name or path.
   *
   * @param path A dot-delimited string or array of string/number values that define the path to the
   * control. If a string is provided, passing it as a string literal will result in improved type
   * information. Likewise, if an array is provided, passing it `as const` will cause improved type
   * information to be available.
   *
   * @usageNotes
   * ### Retrieve a nested control
   *
   * For example, to get a `name` control nested within a `person` sub-group:
   *
   * * `this.form.get('person.name');`
   *
   * -OR-
   *
   * * `this.form.get(['person', 'name'] as const);` // `as const` gives improved typings
   *
   * ### Retrieve a control in a FormArray
   *
   * When accessing an element inside a FormArray, you can use an element index.
   * For example, to get a `price` control from the first element in an `items` array you can use:
   *
   * * `this.form.get('items.0.price');`
   *
   * -OR-
   *
   * * `this.form.get(['items', 0, 'price']);`
   */
  get(path) {
    let currPath = path;
    if (currPath == null) return null;
    if (!Array.isArray(currPath)) currPath = currPath.split('.');
    if (currPath.length === 0) return null;
    return currPath.reduce((control, name) => control && control._find(name), this);
  }
  /**
   * @description
   * Reports error data for the control with the given path.
   *
   * @param errorCode The code of the error to check
   * @param path A list of control names that designates how to move from the current control
   * to the control that should be queried for errors.
   *
   * @usageNotes
   * For example, for the following `FormGroup`:
   *
   * ```
   * form = new FormGroup({
   *   address: new FormGroup({ street: new FormControl() })
   * });
   * ```
   *
   * The path to the 'street' control from the root form would be 'address' -> 'street'.
   *
   * It can be provided to this method in one of two formats:
   *
   * 1. An array of string control names, e.g. `['address', 'street']`
   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
   *
   * @returns error data for that particular error. If the control or error is not present,
   * null is returned.
   */
  getError(errorCode, path) {
    const control = path ? this.get(path) : this;
    return control && control.errors ? control.errors[errorCode] : null;
  }
  /**
   * @description
   * Reports whether the control with the given path has the error specified.
   *
   * @param errorCode The code of the error to check
   * @param path A list of control names that designates how to move from the current control
   * to the control that should be queried for errors.
   *
   * @usageNotes
   * For example, for the following `FormGroup`:
   *
   * ```
   * form = new FormGroup({
   *   address: new FormGroup({ street: new FormControl() })
   * });
   * ```
   *
   * The path to the 'street' control from the root form would be 'address' -> 'street'.
   *
   * It can be provided to this method in one of two formats:
   *
   * 1. An array of string control names, e.g. `['address', 'street']`
   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
   *
   * If no path is given, this method checks for the error on the current control.
   *
   * @returns whether the given error is present in the control at the given path.
   *
   * If the control is not present, false is returned.
   */
  hasError(errorCode, path) {
    return !!this.getError(errorCode, path);
  }
  /**
   * Retrieves the top-level ancestor of this control.
   */
  get root() {
    let x = this;
    while (x._parent) {
      x = x._parent;
    }
    return x;
  }
  /** @internal */
  _updateControlsErrors(emitEvent) {
    this.status = this._calculateStatus();
    if (emitEvent) {
      this.statusChanges.emit(this.status);
    }
    if (this._parent) {
      this._parent._updateControlsErrors(emitEvent);
    }
  }
  /** @internal */
  _initObservables() {
    this.valueChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.statusChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  _calculateStatus() {
    if (this._allControlsDisabled()) return DISABLED;
    if (this.errors) return INVALID;
    if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING)) return PENDING;
    if (this._anyControlsHaveStatus(INVALID)) return INVALID;
    return VALID;
  }
  /** @internal */
  _anyControlsHaveStatus(status) {
    return this._anyControls(control => control.status === status);
  }
  /** @internal */
  _anyControlsDirty() {
    return this._anyControls(control => control.dirty);
  }
  /** @internal */
  _anyControlsTouched() {
    return this._anyControls(control => control.touched);
  }
  /** @internal */
  _updatePristine(opts = {}) {
    this.pristine = !this._anyControlsDirty();
    if (this._parent && !opts.onlySelf) {
      this._parent._updatePristine(opts);
    }
  }
  /** @internal */
  _updateTouched(opts = {}) {
    this.touched = this._anyControlsTouched();
    if (this._parent && !opts.onlySelf) {
      this._parent._updateTouched(opts);
    }
  }
  /** @internal */
  _registerOnCollectionChange(fn) {
    this._onCollectionChange = fn;
  }
  /** @internal */
  _setUpdateStrategy(opts) {
    if (isOptionsObj(opts) && opts.updateOn != null) {
      this._updateOn = opts.updateOn;
    }
  }
  /**
   * Check to see if parent has been marked artificially dirty.
   *
   * @internal
   */
  _parentMarkedDirty(onlySelf) {
    const parentDirty = this._parent && this._parent.dirty;
    return !onlySelf && !!parentDirty && !this._parent._anyControlsDirty();
  }
  /** @internal */
  _find(name) {
    return null;
  }
  /**
   * Internal implementation of the `setValidators` method. Needs to be separated out into a
   * different method, because it is called in the constructor and it can break cases where
   * a control is extended.
   */
  _assignValidators(validators) {
    this._rawValidators = Array.isArray(validators) ? validators.slice() : validators;
    this._composedValidatorFn = coerceToValidator(this._rawValidators);
  }
  /**
   * Internal implementation of the `setAsyncValidators` method. Needs to be separated out into a
   * different method, because it is called in the constructor and it can break cases where
   * a control is extended.
   */
  _assignAsyncValidators(validators) {
    this._rawAsyncValidators = Array.isArray(validators) ? validators.slice() : validators;
    this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);
  }
}

/**
 * Tracks the value and validity state of a group of `FormControl` instances.
 *
 * A `FormGroup` aggregates the values of each child `FormControl` into one object,
 * with each control name as the key.  It calculates its status by reducing the status values
 * of its children. For example, if one of the controls in a group is invalid, the entire
 * group becomes invalid.
 *
 * `FormGroup` is one of the four fundamental building blocks used to define forms in Angular,
 * along with `FormControl`, `FormArray`, and `FormRecord`.
 *
 * When instantiating a `FormGroup`, pass in a collection of child controls as the first
 * argument. The key for each child registers the name for the control.
 *
 * `FormGroup` is intended for use cases where the keys are known ahead of time.
 * If you need to dynamically add and remove controls, use {@link FormRecord} instead.
 *
 * `FormGroup` accepts an optional type parameter `TControl`, which is an object type with inner
 * control types as values.
 *
 * @usageNotes
 *
 * ### Create a form group with 2 controls
 *
 * ```
 * const form = new FormGroup({
 *   first: new FormControl('Nancy', Validators.minLength(2)),
 *   last: new FormControl('Drew'),
 * });
 *
 * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}
 * console.log(form.status);  // 'VALID'
 * ```
 *
 * ### The type argument, and optional controls
 *
 * `FormGroup` accepts one generic argument, which is an object containing its inner controls.
 * This type will usually be inferred automatically, but you can always specify it explicitly if you
 * wish.
 *
 * If you have controls that are optional (i.e. they can be removed, you can use the `?` in the
 * type):
 *
 * ```
 * const form = new FormGroup<{
 *   first: FormControl<string|null>,
 *   middle?: FormControl<string|null>, // Middle name is optional.
 *   last: FormControl<string|null>,
 * }>({
 *   first: new FormControl('Nancy'),
 *   last: new FormControl('Drew'),
 * });
 * ```
 *
 * ### Create a form group with a group-level validator
 *
 * You include group-level validators as the second arg, or group-level async
 * validators as the third arg. These come in handy when you want to perform validation
 * that considers the value of more than one child control.
 *
 * ```
 * const form = new FormGroup({
 *   password: new FormControl('', Validators.minLength(2)),
 *   passwordConfirm: new FormControl('', Validators.minLength(2)),
 * }, passwordMatchValidator);
 *
 *
 * function passwordMatchValidator(g: FormGroup) {
 *    return g.get('password').value === g.get('passwordConfirm').value
 *       ? null : {'mismatch': true};
 * }
 * ```
 *
 * Like `FormControl` instances, you choose to pass in
 * validators and async validators as part of an options object.
 *
 * ```
 * const form = new FormGroup({
 *   password: new FormControl('')
 *   passwordConfirm: new FormControl('')
 * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });
 * ```
 *
 * ### Set the updateOn property for all controls in a form group
 *
 * The options object is used to set a default value for each child
 * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
 * group level, all child controls default to 'blur', unless the child
 * has explicitly specified a different `updateOn` value.
 *
 * ```ts
 * const c = new FormGroup({
 *   one: new FormControl()
 * }, { updateOn: 'blur' });
 * ```
 *
 * ### Using a FormGroup with optional controls
 *
 * It is possible to have optional controls in a FormGroup. An optional control can be removed later
 * using `removeControl`, and can be omitted when calling `reset`. Optional controls must be
 * declared optional in the group's type.
 *
 * ```ts
 * const c = new FormGroup<{one?: FormControl<string>}>({
 *   one: new FormControl('')
 * });
 * ```
 *
 * Notice that `c.value.one` has type `string|null|undefined`. This is because calling `c.reset({})`
 * without providing the optional key `one` will cause it to become `null`.
 *
 * @publicApi
 */
class FormGroup extends AbstractControl {
  /**
   * Creates a new `FormGroup` instance.
   *
   * @param controls A collection of child controls. The key for each child is the name
   * under which it is registered.
   *
   * @param validatorOrOpts A synchronous validator function, or an array of
   * such functions, or an `AbstractControlOptions` object that contains validation functions
   * and a validation trigger.
   *
   * @param asyncValidator A single async validator or array of async validator functions
   *
   */
  constructor(controls, validatorOrOpts, asyncValidator) {
    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
    this.controls = controls;
    this._initObservables();
    this._setUpdateStrategy(validatorOrOpts);
    this._setUpControls();
    this.updateValueAndValidity({
      onlySelf: true,
      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
      // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,
      // so we set `emitEvent` to `true` to allow that during the control creation process.
      emitEvent: !!this.asyncValidator
    });
  }
  registerControl(name, control) {
    if (this.controls[name]) return this.controls[name];
    this.controls[name] = control;
    control.setParent(this);
    control._registerOnCollectionChange(this._onCollectionChange);
    return control;
  }
  addControl(name, control, options = {}) {
    this.registerControl(name, control);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  /**
   * Remove a control from this group. In a strongly-typed group, required controls cannot be
   * removed.
   *
   * This method also updates the value and validity of the control.
   *
   * @param name The control name to remove from the collection
   * @param options Specifies whether this FormGroup instance should emit events after a
   *     control is removed.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * removed. When false, no events are emitted.
   */
  removeControl(name, options = {}) {
    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});
    delete this.controls[name];
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  setControl(name, control, options = {}) {
    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});
    delete this.controls[name];
    if (control) this.registerControl(name, control);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  contains(controlName) {
    return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
  }
  /**
   * Sets the value of the `FormGroup`. It accepts an object that matches
   * the structure of the group, with control names as keys.
   *
   * @usageNotes
   * ### Set the complete value for the form group
   *
   * ```
   * const form = new FormGroup({
   *   first: new FormControl(),
   *   last: new FormControl()
   * });
   *
   * console.log(form.value);   // {first: null, last: null}
   *
   * form.setValue({first: 'Nancy', last: 'Drew'});
   * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
   * ```
   *
   * @throws When strict checks fail, such as setting the value of a control
   * that doesn't exist or if you exclude a value of a control that does exist.
   *
   * @param value The new value for the control that matches the structure of the group.
   * @param options Configuration options that determine how the control propagates changes
   * and emits events after the value changes.
   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
   * updateValueAndValidity} method.
   *
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
   * false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control value is updated.
   * When false, no events are emitted.
   */
  setValue(value, options = {}) {
    assertAllValuesPresent(this, true, value);
    Object.keys(value).forEach(name => {
      assertControlPresent(this, true, name);
      this.controls[name].setValue(value[name], {
        onlySelf: true,
        emitEvent: options.emitEvent
      });
    });
    this.updateValueAndValidity(options);
  }
  /**
   * Patches the value of the `FormGroup`. It accepts an object with control
   * names as keys, and does its best to match the values to the correct controls
   * in the group.
   *
   * It accepts both super-sets and sub-sets of the group without throwing an error.
   *
   * @usageNotes
   * ### Patch the value for a form group
   *
   * ```
   * const form = new FormGroup({
   *    first: new FormControl(),
   *    last: new FormControl()
   * });
   * console.log(form.value);   // {first: null, last: null}
   *
   * form.patchValue({first: 'Nancy'});
   * console.log(form.value);   // {first: 'Nancy', last: null}
   * ```
   *
   * @param value The object that matches the structure of the group.
   * @param options Configuration options that determine how the control propagates changes and
   * emits events after the value is patched.
   * * `onlySelf`: When true, each change only affects this control and not its parent. Default is
   * true.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control value
   * is updated. When false, no events are emitted. The configuration options are passed to
   * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
   */
  patchValue(value, options = {}) {
    // Even though the `value` argument type doesn't allow `null` and `undefined` values, the
    // `patchValue` can be called recursively and inner data structures might have these values, so
    // we just ignore such cases when a field containing FormGroup instance receives `null` or
    // `undefined` as a value.
    if (value == null /* both `null` and `undefined` */) return;
    Object.keys(value).forEach(name => {
      // The compiler cannot see through the uninstantiated conditional type of `this.controls`, so
      // `as any` is required.
      const control = this.controls[name];
      if (control) {
        control.patchValue( /* Guaranteed to be present, due to the outer forEach. */value[name], {
          onlySelf: true,
          emitEvent: options.emitEvent
        });
      }
    });
    this.updateValueAndValidity(options);
  }
  /**
   * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets
   * the value of all descendants to their default values, or null if no defaults were provided.
   *
   * You reset to a specific form state by passing in a map of states
   * that matches the structure of your form, with control names as keys. The state
   * is a standalone value or a form state object with both a value and a disabled
   * status.
   *
   * @param value Resets the control with an initial value,
   * or an object that defines the initial value and disabled state.
   *
   * @param options Configuration options that determine how the control propagates changes
   * and emits events when the group is reset.
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
   * false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is reset.
   * When false, no events are emitted.
   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
   * updateValueAndValidity} method.
   *
   * @usageNotes
   *
   * ### Reset the form group values
   *
   * ```ts
   * const form = new FormGroup({
   *   first: new FormControl('first name'),
   *   last: new FormControl('last name')
   * });
   *
   * console.log(form.value);  // {first: 'first name', last: 'last name'}
   *
   * form.reset({ first: 'name', last: 'last name' });
   *
   * console.log(form.value);  // {first: 'name', last: 'last name'}
   * ```
   *
   * ### Reset the form group values and disabled status
   *
   * ```
   * const form = new FormGroup({
   *   first: new FormControl('first name'),
   *   last: new FormControl('last name')
   * });
   *
   * form.reset({
   *   first: {value: 'name', disabled: true},
   *   last: 'last'
   * });
   *
   * console.log(form.value);  // {last: 'last'}
   * console.log(form.get('first').status);  // 'DISABLED'
   * ```
   */
  reset(value = {}, options = {}) {
    this._forEachChild((control, name) => {
      control.reset(value[name], {
        onlySelf: true,
        emitEvent: options.emitEvent
      });
    });
    this._updatePristine(options);
    this._updateTouched(options);
    this.updateValueAndValidity(options);
  }
  /**
   * The aggregate value of the `FormGroup`, including any disabled controls.
   *
   * Retrieves all values regardless of disabled status.
   */
  getRawValue() {
    return this._reduceChildren({}, (acc, control, name) => {
      acc[name] = control.getRawValue();
      return acc;
    });
  }
  /** @internal */
  _syncPendingControls() {
    let subtreeUpdated = this._reduceChildren(false, (updated, child) => {
      return child._syncPendingControls() ? true : updated;
    });
    if (subtreeUpdated) this.updateValueAndValidity({
      onlySelf: true
    });
    return subtreeUpdated;
  }
  /** @internal */
  _forEachChild(cb) {
    Object.keys(this.controls).forEach(key => {
      // The list of controls can change (for ex. controls might be removed) while the loop
      // is running (as a result of invoking Forms API in `valueChanges` subscription), so we
      // have to null check before invoking the callback.
      const control = this.controls[key];
      control && cb(control, key);
    });
  }
  /** @internal */
  _setUpControls() {
    this._forEachChild(control => {
      control.setParent(this);
      control._registerOnCollectionChange(this._onCollectionChange);
    });
  }
  /** @internal */
  _updateValue() {
    this.value = this._reduceValue();
  }
  /** @internal */
  _anyControls(condition) {
    for (const [controlName, control] of Object.entries(this.controls)) {
      if (this.contains(controlName) && condition(control)) {
        return true;
      }
    }
    return false;
  }
  /** @internal */
  _reduceValue() {
    let acc = {};
    return this._reduceChildren(acc, (acc, control, name) => {
      if (control.enabled || this.disabled) {
        acc[name] = control.value;
      }
      return acc;
    });
  }
  /** @internal */
  _reduceChildren(initValue, fn) {
    let res = initValue;
    this._forEachChild((control, name) => {
      res = fn(res, control, name);
    });
    return res;
  }
  /** @internal */
  _allControlsDisabled() {
    for (const controlName of Object.keys(this.controls)) {
      if (this.controls[controlName].enabled) {
        return false;
      }
    }
    return Object.keys(this.controls).length > 0 || this.disabled;
  }
  /** @internal */
  _find(name) {
    return this.controls.hasOwnProperty(name) ? this.controls[name] : null;
  }
}
const UntypedFormGroup = FormGroup;
/**
 * @description
 * Asserts that the given control is an instance of `FormGroup`
 *
 * @publicApi
 */
const isFormGroup = control => control instanceof FormGroup;
/**
 * Tracks the value and validity state of a collection of `FormControl` instances, each of which has
 * the same value type.
 *
 * `FormRecord` is very similar to {@link FormGroup}, except it can be used with a dynamic keys,
 * with controls added and removed as needed.
 *
 * `FormRecord` accepts one generic argument, which describes the type of the controls it contains.
 *
 * @usageNotes
 *
 * ```
 * let numbers = new FormRecord({bill: new FormControl('415-123-456')});
 * numbers.addControl('bob', new FormControl('415-234-567'));
 * numbers.removeControl('bill');
 * ```
 *
 * @publicApi
 */
class FormRecord extends FormGroup {}
/**
 * @description
 * Asserts that the given control is an instance of `FormRecord`
 *
 * @publicApi
 */
const isFormRecord = control => control instanceof FormRecord;

/**
 * Token to provide to allow SetDisabledState to always be called when a CVA is added, regardless of
 * whether the control is disabled or enabled.
 *
 * @see `FormsModule.withConfig`
 */
const CALL_SET_DISABLED_STATE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('CallSetDisabledState', {
  providedIn: 'root',
  factory: () => setDisabledStateDefault
});
/**
 * Whether to use the fixed setDisabledState behavior by default.
 */
const setDisabledStateDefault = 'always';
function controlPath(name, parent) {
  return [...parent.path, name];
}
/**
 * Links a Form control and a Form directive by setting up callbacks (such as `onChange`) on both
 * instances. This function is typically invoked when form directive is being initialized.
 *
 * @param control Form control instance that should be linked.
 * @param dir Directive that should be linked with a given control.
 */
function setUpControl(control, dir, callSetDisabledState = setDisabledStateDefault) {
  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    if (!control) _throwError(dir, 'Cannot find control with');
    if (!dir.valueAccessor) _throwMissingValueAccessorError(dir);
  }
  setUpValidators(control, dir);
  dir.valueAccessor.writeValue(control.value);
  // The legacy behavior only calls the CVA's `setDisabledState` if the control is disabled.
  // If the `callSetDisabledState` option is set to `always`, then this bug is fixed and
  // the method is always called.
  if (control.disabled || callSetDisabledState === 'always') {
    dir.valueAccessor.setDisabledState?.(control.disabled);
  }
  setUpViewChangePipeline(control, dir);
  setUpModelChangePipeline(control, dir);
  setUpBlurPipeline(control, dir);
  setUpDisabledChangeHandler(control, dir);
}
/**
 * Reverts configuration performed by the `setUpControl` control function.
 * Effectively disconnects form control with a given form directive.
 * This function is typically invoked when corresponding form directive is being destroyed.
 *
 * @param control Form control which should be cleaned up.
 * @param dir Directive that should be disconnected from a given control.
 * @param validateControlPresenceOnChange Flag that indicates whether onChange handler should
 *     contain asserts to verify that it's not called once directive is destroyed. We need this flag
 *     to avoid potentially breaking changes caused by better control cleanup introduced in #39235.
 */
function cleanUpControl(control, dir, validateControlPresenceOnChange = true) {
  const noop = () => {
    if (validateControlPresenceOnChange && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      _noControlError(dir);
    }
  };
  // The `valueAccessor` field is typically defined on FromControl and FormControlName directive
  // instances and there is a logic in `selectValueAccessor` function that throws if it's not the
  // case. We still check the presence of `valueAccessor` before invoking its methods to make sure
  // that cleanup works correctly if app code or tests are setup to ignore the error thrown from
  // `selectValueAccessor`. See https://github.com/angular/angular/issues/40521.
  if (dir.valueAccessor) {
    dir.valueAccessor.registerOnChange(noop);
    dir.valueAccessor.registerOnTouched(noop);
  }
  cleanUpValidators(control, dir);
  if (control) {
    dir._invokeOnDestroyCallbacks();
    control._registerOnCollectionChange(() => {});
  }
}
function registerOnValidatorChange(validators, onChange) {
  validators.forEach(validator => {
    if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(onChange);
  });
}
/**
 * Sets up disabled change handler function on a given form control if ControlValueAccessor
 * associated with a given directive instance supports the `setDisabledState` call.
 *
 * @param control Form control where disabled change handler should be setup.
 * @param dir Corresponding directive instance associated with this control.
 */
function setUpDisabledChangeHandler(control, dir) {
  if (dir.valueAccessor.setDisabledState) {
    const onDisabledChange = isDisabled => {
      dir.valueAccessor.setDisabledState(isDisabled);
    };
    control.registerOnDisabledChange(onDisabledChange);
    // Register a callback function to cleanup disabled change handler
    // from a control instance when a directive is destroyed.
    dir._registerOnDestroy(() => {
      control._unregisterOnDisabledChange(onDisabledChange);
    });
  }
}
/**
 * Sets up sync and async directive validators on provided form control.
 * This function merges validators from the directive into the validators of the control.
 *
 * @param control Form control where directive validators should be setup.
 * @param dir Directive instance that contains validators to be setup.
 */
function setUpValidators(control, dir) {
  const validators = getControlValidators(control);
  if (dir.validator !== null) {
    control.setValidators(mergeValidators(validators, dir.validator));
  } else if (typeof validators === 'function') {
    // If sync validators are represented by a single validator function, we force the
    // `Validators.compose` call to happen by executing the `setValidators` function with
    // an array that contains that function. We need this to avoid possible discrepancies in
    // validators behavior, so sync validators are always processed by the `Validators.compose`.
    // Note: we should consider moving this logic inside the `setValidators` function itself, so we
    // have consistent behavior on AbstractControl API level. The same applies to the async
    // validators logic below.
    control.setValidators([validators]);
  }
  const asyncValidators = getControlAsyncValidators(control);
  if (dir.asyncValidator !== null) {
    control.setAsyncValidators(mergeValidators(asyncValidators, dir.asyncValidator));
  } else if (typeof asyncValidators === 'function') {
    control.setAsyncValidators([asyncValidators]);
  }
  // Re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4
  const onValidatorChange = () => control.updateValueAndValidity();
  registerOnValidatorChange(dir._rawValidators, onValidatorChange);
  registerOnValidatorChange(dir._rawAsyncValidators, onValidatorChange);
}
/**
 * Cleans up sync and async directive validators on provided form control.
 * This function reverts the setup performed by the `setUpValidators` function, i.e.
 * removes directive-specific validators from a given control instance.
 *
 * @param control Form control from where directive validators should be removed.
 * @param dir Directive instance that contains validators to be removed.
 * @returns true if a control was updated as a result of this action.
 */
function cleanUpValidators(control, dir) {
  let isControlUpdated = false;
  if (control !== null) {
    if (dir.validator !== null) {
      const validators = getControlValidators(control);
      if (Array.isArray(validators) && validators.length > 0) {
        // Filter out directive validator function.
        const updatedValidators = validators.filter(validator => validator !== dir.validator);
        if (updatedValidators.length !== validators.length) {
          isControlUpdated = true;
          control.setValidators(updatedValidators);
        }
      }
    }
    if (dir.asyncValidator !== null) {
      const asyncValidators = getControlAsyncValidators(control);
      if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {
        // Filter out directive async validator function.
        const updatedAsyncValidators = asyncValidators.filter(asyncValidator => asyncValidator !== dir.asyncValidator);
        if (updatedAsyncValidators.length !== asyncValidators.length) {
          isControlUpdated = true;
          control.setAsyncValidators(updatedAsyncValidators);
        }
      }
    }
  }
  // Clear onValidatorChange callbacks by providing a noop function.
  const noop = () => {};
  registerOnValidatorChange(dir._rawValidators, noop);
  registerOnValidatorChange(dir._rawAsyncValidators, noop);
  return isControlUpdated;
}
function setUpViewChangePipeline(control, dir) {
  dir.valueAccessor.registerOnChange(newValue => {
    control._pendingValue = newValue;
    control._pendingChange = true;
    control._pendingDirty = true;
    if (control.updateOn === 'change') updateControl(control, dir);
  });
}
function setUpBlurPipeline(control, dir) {
  dir.valueAccessor.registerOnTouched(() => {
    control._pendingTouched = true;
    if (control.updateOn === 'blur' && control._pendingChange) updateControl(control, dir);
    if (control.updateOn !== 'submit') control.markAsTouched();
  });
}
function updateControl(control, dir) {
  if (control._pendingDirty) control.markAsDirty();
  control.setValue(control._pendingValue, {
    emitModelToViewChange: false
  });
  dir.viewToModelUpdate(control._pendingValue);
  control._pendingChange = false;
}
function setUpModelChangePipeline(control, dir) {
  const onChange = (newValue, emitModelEvent) => {
    // control -> view
    dir.valueAccessor.writeValue(newValue);
    // control -> ngModel
    if (emitModelEvent) dir.viewToModelUpdate(newValue);
  };
  control.registerOnChange(onChange);
  // Register a callback function to cleanup onChange handler
  // from a control instance when a directive is destroyed.
  dir._registerOnDestroy(() => {
    control._unregisterOnChange(onChange);
  });
}
/**
 * Links a FormGroup or FormArray instance and corresponding Form directive by setting up validators
 * present in the view.
 *
 * @param control FormGroup or FormArray instance that should be linked.
 * @param dir Directive that provides view validators.
 */
function setUpFormContainer(control, dir) {
  if (control == null && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'Cannot find control with');
  setUpValidators(control, dir);
}
/**
 * Reverts the setup performed by the `setUpFormContainer` function.
 *
 * @param control FormGroup or FormArray instance that should be cleaned up.
 * @param dir Directive that provided view validators.
 * @returns true if a control was updated as a result of this action.
 */
function cleanUpFormContainer(control, dir) {
  return cleanUpValidators(control, dir);
}
function _noControlError(dir) {
  return _throwError(dir, 'There is no FormControl instance attached to form control element with');
}
function _throwError(dir, message) {
  const messageEnd = _describeControlLocation(dir);
  throw new Error(`${message} ${messageEnd}`);
}
function _describeControlLocation(dir) {
  const path = dir.path;
  if (path && path.length > 1) return `path: '${path.join(' -> ')}'`;
  if (path?.[0]) return `name: '${path}'`;
  return 'unspecified name attribute';
}
function _throwMissingValueAccessorError(dir) {
  const loc = _describeControlLocation(dir);
  throw new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](-1203 /* RuntimeErrorCode.NG_MISSING_VALUE_ACCESSOR */, `No value accessor for form control ${loc}.`);
}
function _throwInvalidValueAccessorError(dir) {
  const loc = _describeControlLocation(dir);
  throw new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1200 /* RuntimeErrorCode.NG_VALUE_ACCESSOR_NOT_PROVIDED */, `Value accessor was not provided as an array for form control with ${loc}. ` + `Check that the \`NG_VALUE_ACCESSOR\` token is configured as a \`multi: true\` provider.`);
}
function isPropertyUpdated(changes, viewModel) {
  if (!changes.hasOwnProperty('model')) return false;
  const change = changes['model'];
  if (change.isFirstChange()) return true;
  return !Object.is(viewModel, change.currentValue);
}
function isBuiltInAccessor(valueAccessor) {
  // Check if a given value accessor is an instance of a class that directly extends
  // `BuiltInControlValueAccessor` one.
  return Object.getPrototypeOf(valueAccessor.constructor) === BuiltInControlValueAccessor;
}
function syncPendingControls(form, directives) {
  form._syncPendingControls();
  directives.forEach(dir => {
    const control = dir.control;
    if (control.updateOn === 'submit' && control._pendingChange) {
      dir.viewToModelUpdate(control._pendingValue);
      control._pendingChange = false;
    }
  });
}
// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented
function selectValueAccessor(dir, valueAccessors) {
  if (!valueAccessors) return null;
  if (!Array.isArray(valueAccessors) && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwInvalidValueAccessorError(dir);
  let defaultAccessor = undefined;
  let builtinAccessor = undefined;
  let customAccessor = undefined;
  valueAccessors.forEach(v => {
    if (v.constructor === DefaultValueAccessor) {
      defaultAccessor = v;
    } else if (isBuiltInAccessor(v)) {
      if (builtinAccessor && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'More than one built-in value accessor matches form control with');
      builtinAccessor = v;
    } else {
      if (customAccessor && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'More than one custom value accessor matches form control with');
      customAccessor = v;
    }
  });
  if (customAccessor) return customAccessor;
  if (builtinAccessor) return builtinAccessor;
  if (defaultAccessor) return defaultAccessor;
  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    _throwError(dir, 'No valid value accessor for form control with');
  }
  return null;
}
function removeListItem$1(list, el) {
  const index = list.indexOf(el);
  if (index > -1) list.splice(index, 1);
}
// TODO(kara): remove after deprecation period
function _ngModelWarning(name, type, instance, warningConfig) {
  if (warningConfig === 'never') return;
  if ((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce || warningConfig === 'always' && !instance._ngModelWarningSent) {
    console.warn(ngModelWarning(name));
    type._ngModelWarningSentOnce = true;
    instance._ngModelWarningSent = true;
  }
}
const formDirectiveProvider$1 = {
  provide: ControlContainer,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => NgForm)
};
const resolvedPromise$1 = (() => Promise.resolve())();
/**
 * @description
 * Creates a top-level `FormGroup` instance and binds it to a form
 * to track aggregate form value and validation status.
 *
 * As soon as you import the `FormsModule`, this directive becomes active by default on
 * all `<form>` tags.  You don't need to add a special selector.
 *
 * You optionally export the directive into a local template variable using `ngForm` as the key
 * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
 * `FormGroup` instance are duplicated on the directive itself, so a reference to it
 * gives you access to the aggregate value and validity status of the form, as well as
 * user interaction properties like `dirty` and `touched`.
 *
 * To register child controls with the form, use `NgModel` with a `name`
 * attribute. You may use `NgModelGroup` to create sub-groups within the form.
 *
 * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has
 * triggered a form submission. The `ngSubmit` event emits the original form
 * submission event.
 *
 * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.
 * To import the `FormsModule` but skip its usage in some forms,
 * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`
 * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is
 * unnecessary because the `<form>` tags are inert. In that case, you would
 * refrain from using the `formGroup` directive.
 *
 * @usageNotes
 *
 * ### Listening for form submission
 *
 * The following example shows how to capture the form values from the "ngSubmit" event.
 *
 * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
 *
 * ### Setting the update options
 *
 * The following example shows you how to change the "updateOn" option from its default using
 * ngFormOptions.
 *
 * ```html
 * <form [ngFormOptions]="{updateOn: 'blur'}">
 *    <input name="one" ngModel>  <!-- this ngModel will update on blur -->
 * </form>
 * ```
 *
 * ### Native DOM validation UI
 *
 * In order to prevent the native DOM form validation UI from interfering with Angular's form
 * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever
 * `FormModule` or `ReactiveFormModule` are imported into the application.
 * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the
 * `ngNativeValidate` attribute to the `<form>` element:
 *
 * ```html
 * <form ngNativeValidate>
 *   ...
 * </form>
 * ```
 *
 * @ngModule FormsModule
 * @publicApi
 */
class NgForm extends ControlContainer {
  constructor(validators, asyncValidators, callSetDisabledState) {
    super();
    this.callSetDisabledState = callSetDisabledState;
    /**
     * @description
     * Returns whether the form submission has been triggered.
     */
    this.submitted = false;
    this._directives = new Set();
    /**
     * @description
     * Event emitter for the "ngSubmit" event
     */
    this.ngSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
  }
  /** @nodoc */
  ngAfterViewInit() {
    this._setUpdateStrategy();
  }
  /**
   * @description
   * The directive instance.
   */
  get formDirective() {
    return this;
  }
  /**
   * @description
   * The internal `FormGroup` instance.
   */
  get control() {
    return this.form;
  }
  /**
   * @description
   * Returns an array representing the path to this group. Because this directive
   * always lives at the top level of a form, it is always an empty array.
   */
  get path() {
    return [];
  }
  /**
   * @description
   * Returns a map of the controls in this group.
   */
  get controls() {
    return this.form.controls;
  }
  /**
   * @description
   * Method that sets up the control directive in this group, re-calculates its value
   * and validity, and adds the instance to the internal list of directives.
   *
   * @param dir The `NgModel` directive instance.
   */
  addControl(dir) {
    resolvedPromise$1.then(() => {
      const container = this._findContainer(dir.path);
      dir.control = container.registerControl(dir.name, dir.control);
      setUpControl(dir.control, dir, this.callSetDisabledState);
      dir.control.updateValueAndValidity({
        emitEvent: false
      });
      this._directives.add(dir);
    });
  }
  /**
   * @description
   * Retrieves the `FormControl` instance from the provided `NgModel` directive.
   *
   * @param dir The `NgModel` directive instance.
   */
  getControl(dir) {
    return this.form.get(dir.path);
  }
  /**
   * @description
   * Removes the `NgModel` instance from the internal list of directives
   *
   * @param dir The `NgModel` directive instance.
   */
  removeControl(dir) {
    resolvedPromise$1.then(() => {
      const container = this._findContainer(dir.path);
      if (container) {
        container.removeControl(dir.name);
      }
      this._directives.delete(dir);
    });
  }
  /**
   * @description
   * Adds a new `NgModelGroup` directive instance to the form.
   *
   * @param dir The `NgModelGroup` directive instance.
   */
  addFormGroup(dir) {
    resolvedPromise$1.then(() => {
      const container = this._findContainer(dir.path);
      const group = new FormGroup({});
      setUpFormContainer(group, dir);
      container.registerControl(dir.name, group);
      group.updateValueAndValidity({
        emitEvent: false
      });
    });
  }
  /**
   * @description
   * Removes the `NgModelGroup` directive instance from the form.
   *
   * @param dir The `NgModelGroup` directive instance.
   */
  removeFormGroup(dir) {
    resolvedPromise$1.then(() => {
      const container = this._findContainer(dir.path);
      if (container) {
        container.removeControl(dir.name);
      }
    });
  }
  /**
   * @description
   * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance
   *
   * @param dir The `NgModelGroup` directive instance.
   */
  getFormGroup(dir) {
    return this.form.get(dir.path);
  }
  /**
   * Sets the new value for the provided `NgControl` directive.
   *
   * @param dir The `NgControl` directive instance.
   * @param value The new value for the directive's control.
   */
  updateModel(dir, value) {
    resolvedPromise$1.then(() => {
      const ctrl = this.form.get(dir.path);
      ctrl.setValue(value);
    });
  }
  /**
   * @description
   * Sets the value for this `FormGroup`.
   *
   * @param value The new value
   */
  setValue(value) {
    this.control.setValue(value);
  }
  /**
   * @description
   * Method called when the "submit" event is triggered on the form.
   * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
   *
   * @param $event The "submit" event object
   */
  onSubmit($event) {
    this.submitted = true;
    syncPendingControls(this.form, this._directives);
    this.ngSubmit.emit($event);
    // Forms with `method="dialog"` have some special behavior
    // that won't reload the page and that shouldn't be prevented.
    return $event?.target?.method === 'dialog';
  }
  /**
   * @description
   * Method called when the "reset" event is triggered on the form.
   */
  onReset() {
    this.resetForm();
  }
  /**
   * @description
   * Resets the form to an initial value and resets its submitted status.
   *
   * @param value The new value for the form.
   */
  resetForm(value = undefined) {
    this.form.reset(value);
    this.submitted = false;
  }
  _setUpdateStrategy() {
    if (this.options && this.options.updateOn != null) {
      this.form._updateOn = this.options.updateOn;
    }
  }
  _findContainer(path) {
    path.pop();
    return path.length ? this.form.get(path) : this.form;
  }
}
NgForm.ɵfac = function NgForm_Factory(t) {
  return new (t || NgForm)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CALL_SET_DISABLED_STATE, 8));
};
NgForm.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: NgForm,
  selectors: [["form", 3, "ngNoForm", "", 3, "formGroup", ""], ["ng-form"], ["", "ngForm", ""]],
  hostBindings: function NgForm_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("submit", function NgForm_submit_HostBindingHandler($event) {
        return ctx.onSubmit($event);
      })("reset", function NgForm_reset_HostBindingHandler() {
        return ctx.onReset();
      });
    }
  },
  inputs: {
    options: ["ngFormOptions", "options"]
  },
  outputs: {
    ngSubmit: "ngSubmit"
  },
  exportAs: ["ngForm"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formDirectiveProvider$1]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgForm, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]',
      providers: [formDirectiveProvider$1],
      host: {
        '(submit)': 'onSubmit($event)',
        '(reset)': 'onReset()'
      },
      outputs: ['ngSubmit'],
      exportAs: 'ngForm'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [CALL_SET_DISABLED_STATE]
      }]
    }];
  }, {
    options: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['ngFormOptions']
    }]
  });
})();
function removeListItem(list, el) {
  const index = list.indexOf(el);
  if (index > -1) list.splice(index, 1);
}
function isFormControlState(formState) {
  return typeof formState === 'object' && formState !== null && Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
}
const FormControl = class FormControl extends AbstractControl {
  constructor(
  // formState and defaultValue will only be null if T is nullable
  formState = null, validatorOrOpts, asyncValidator) {
    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
    /** @publicApi */
    this.defaultValue = null;
    /** @internal */
    this._onChange = [];
    /** @internal */
    this._pendingChange = false;
    this._applyFormState(formState);
    this._setUpdateStrategy(validatorOrOpts);
    this._initObservables();
    this.updateValueAndValidity({
      onlySelf: true,
      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
      // `VALID` or `INVALID`.
      // The status should be broadcasted via the `statusChanges` observable, so we set
      // `emitEvent` to `true` to allow that during the control creation process.
      emitEvent: !!this.asyncValidator
    });
    if (isOptionsObj(validatorOrOpts) && (validatorOrOpts.nonNullable || validatorOrOpts.initialValueIsDefault)) {
      if (isFormControlState(formState)) {
        this.defaultValue = formState.value;
      } else {
        this.defaultValue = formState;
      }
    }
  }
  setValue(value, options = {}) {
    this.value = this._pendingValue = value;
    if (this._onChange.length && options.emitModelToViewChange !== false) {
      this._onChange.forEach(changeFn => changeFn(this.value, options.emitViewToModelChange !== false));
    }
    this.updateValueAndValidity(options);
  }
  patchValue(value, options = {}) {
    this.setValue(value, options);
  }
  reset(formState = this.defaultValue, options = {}) {
    this._applyFormState(formState);
    this.markAsPristine(options);
    this.markAsUntouched(options);
    this.setValue(this.value, options);
    this._pendingChange = false;
  }
  /**  @internal */
  _updateValue() {}
  /**  @internal */
  _anyControls(condition) {
    return false;
  }
  /**  @internal */
  _allControlsDisabled() {
    return this.disabled;
  }
  registerOnChange(fn) {
    this._onChange.push(fn);
  }
  /** @internal */
  _unregisterOnChange(fn) {
    removeListItem(this._onChange, fn);
  }
  registerOnDisabledChange(fn) {
    this._onDisabledChange.push(fn);
  }
  /** @internal */
  _unregisterOnDisabledChange(fn) {
    removeListItem(this._onDisabledChange, fn);
  }
  /** @internal */
  _forEachChild(cb) {}
  /** @internal */
  _syncPendingControls() {
    if (this.updateOn === 'submit') {
      if (this._pendingDirty) this.markAsDirty();
      if (this._pendingTouched) this.markAsTouched();
      if (this._pendingChange) {
        this.setValue(this._pendingValue, {
          onlySelf: true,
          emitModelToViewChange: false
        });
        return true;
      }
    }
    return false;
  }
  _applyFormState(formState) {
    if (isFormControlState(formState)) {
      this.value = this._pendingValue = formState.value;
      formState.disabled ? this.disable({
        onlySelf: true,
        emitEvent: false
      }) : this.enable({
        onlySelf: true,
        emitEvent: false
      });
    } else {
      this.value = this._pendingValue = formState;
    }
  }
};
const UntypedFormControl = FormControl;
/**
 * @description
 * Asserts that the given control is an instance of `FormControl`
 *
 * @publicApi
 */
const isFormControl = control => control instanceof FormControl;

/**
 * @description
 * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.
 *
 * @publicApi
 */
class AbstractFormGroupDirective extends ControlContainer {
  /** @nodoc */
  ngOnInit() {
    this._checkParentType();
    // Register the group with its parent group.
    this.formDirective.addFormGroup(this);
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.formDirective) {
      // Remove the group from its parent group.
      this.formDirective.removeFormGroup(this);
    }
  }
  /**
   * @description
   * The `FormGroup` bound to this directive.
   */
  get control() {
    return this.formDirective.getFormGroup(this);
  }
  /**
   * @description
   * The path to this group from the top-level directive.
   */
  get path() {
    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
  }
  /**
   * @description
   * The top-level directive for this group if present, otherwise null.
   */
  get formDirective() {
    return this._parent ? this._parent.formDirective : null;
  }
  /** @internal */
  _checkParentType() {}
}
AbstractFormGroupDirective.ɵfac = /* @__PURE__ */function () {
  let ɵAbstractFormGroupDirective_BaseFactory;
  return function AbstractFormGroupDirective_Factory(t) {
    return (ɵAbstractFormGroupDirective_BaseFactory || (ɵAbstractFormGroupDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](AbstractFormGroupDirective)))(t || AbstractFormGroupDirective);
  };
}();
AbstractFormGroupDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: AbstractFormGroupDirective,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AbstractFormGroupDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive
  }], null, null);
})();
function modelParentException() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1350 /* RuntimeErrorCode.NGMODEL_IN_FORM_GROUP */, `
    ngModel cannot be used to register form controls with a parent formGroup directive.  Try using
    formGroup's partner directive "formControlName" instead.  Example:

    ${formControlNameExample}

    Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:

    Example:

    ${ngModelWithFormGroupExample}`);
}
function formGroupNameException() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1351 /* RuntimeErrorCode.NGMODEL_IN_FORM_GROUP_NAME */, `
    ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.

    Option 1: Use formControlName instead of ngModel (reactive strategy):

    ${formGroupNameExample}

    Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):

    ${ngModelGroupExample}`);
}
function missingNameException() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1352 /* RuntimeErrorCode.NGMODEL_WITHOUT_NAME */, `If ngModel is used within a form tag, either the name attribute must be set or the form
    control must be defined as 'standalone' in ngModelOptions.

    Example 1: <input [(ngModel)]="person.firstName" name="first">
    Example 2: <input [(ngModel)]="person.firstName" [ngModelOptions]="{standalone: true}">`);
}
function modelGroupParentException() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1353 /* RuntimeErrorCode.NGMODELGROUP_IN_FORM_GROUP */, `
    ngModelGroup cannot be used with a parent formGroup directive.

    Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):

    ${formGroupNameExample}

    Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):

    ${ngModelGroupExample}`);
}
const modelGroupProvider = {
  provide: ControlContainer,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => NgModelGroup)
};
/**
 * @description
 * Creates and binds a `FormGroup` instance to a DOM element.
 *
 * This directive can only be used as a child of `NgForm` (within `<form>` tags).
 *
 * Use this directive to validate a sub-group of your form separately from the
 * rest of your form, or if some values in your domain model make more sense
 * to consume together in a nested object.
 *
 * Provide a name for the sub-group and it will become the key
 * for the sub-group in the form's full value. If you need direct access, export the directive into
 * a local template variable using `ngModelGroup` (ex: `#myGroup="ngModelGroup"`).
 *
 * @usageNotes
 *
 * ### Consuming controls in a grouping
 *
 * The following example shows you how to combine controls together in a sub-group
 * of the form.
 *
 * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}
 *
 * @ngModule FormsModule
 * @publicApi
 */
class NgModelGroup extends AbstractFormGroupDirective {
  constructor(parent, validators, asyncValidators) {
    super();
    this._parent = parent;
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
  }
  /** @internal */
  _checkParentType() {
    if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw modelGroupParentException();
    }
  }
}
NgModelGroup.ɵfac = function NgModelGroup_Factory(t) {
  return new (t || NgModelGroup)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 5), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
};
NgModelGroup.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: NgModelGroup,
  selectors: [["", "ngModelGroup", ""]],
  inputs: {
    name: ["ngModelGroup", "name"]
  },
  exportAs: ["ngModelGroup"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([modelGroupProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgModelGroup, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[ngModelGroup]',
      providers: [modelGroupProvider],
      exportAs: 'ngModelGroup'
    }]
  }], function () {
    return [{
      type: ControlContainer,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }];
  }, {
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['ngModelGroup']
    }]
  });
})();
const formControlBinding$1 = {
  provide: NgControl,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => NgModel)
};
/**
 * `ngModel` forces an additional change detection run when its inputs change:
 * E.g.:
 * ```
 * <div>{{myModel.valid}}</div>
 * <input [(ngModel)]="myValue" #myModel="ngModel">
 * ```
 * I.e. `ngModel` can export itself on the element and then be used in the template.
 * Normally, this would result in expressions before the `input` that use the exported directive
 * to have an old value as they have been
 * dirty checked before. As this is a very common case for `ngModel`, we added this second change
 * detection run.
 *
 * Notes:
 * - this is just one extra run no matter how many `ngModel`s have been changed.
 * - this is a general problem when using `exportAs` for directives!
 */
const resolvedPromise = (() => Promise.resolve())();
/**
 * @description
 * Creates a `FormControl` instance from a domain model and binds it
 * to a form control element.
 *
 * The `FormControl` instance tracks the value, user interaction, and
 * validation status of the control and keeps the view synced with the model. If used
 * within a parent form, the directive also registers itself with the form as a child
 * control.
 *
 * This directive is used by itself or as part of a larger form. Use the
 * `ngModel` selector to activate it.
 *
 * It accepts a domain model as an optional `Input`. If you have a one-way binding
 * to `ngModel` with `[]` syntax, changing the domain model's value in the component
 * class sets the value in the view. If you have a two-way binding with `[()]` syntax
 * (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to
 * the domain model in your class.
 *
 * To inspect the properties of the associated `FormControl` (like the validity state),
 * export the directive into a local template variable using `ngModel` as the key (ex:
 * `#myVar="ngModel"`). You can then access the control using the directive's `control` property.
 * However, the most commonly used properties (like `valid` and `dirty`) also exist on the control
 * for direct access. See a full list of properties directly available in
 * `AbstractControlDirective`.
 *
 * @see `RadioControlValueAccessor`
 * @see `SelectControlValueAccessor`
 *
 * @usageNotes
 *
 * ### Using ngModel on a standalone control
 *
 * The following examples show a simple standalone control using `ngModel`:
 *
 * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}
 *
 * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute
 * so that the control can be registered with the parent form under that name.
 *
 * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,
 * as the parent form syncs the value for you. You access its properties by exporting it into a
 * local template variable using `ngForm` such as (`#f="ngForm"`). Use the variable where
 * needed on form submission.
 *
 * If you do need to populate initial values into your form, using a one-way binding for
 * `ngModel` tends to be sufficient as long as you use the exported form's value rather
 * than the domain model's value on submit.
 *
 * ### Using ngModel within a form
 *
 * The following example shows controls using `ngModel` within a form:
 *
 * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
 *
 * ### Using a standalone ngModel within a group
 *
 * The following example shows you how to use a standalone ngModel control
 * within a form. This controls the display of the form, but doesn't contain form data.
 *
 * ```html
 * <form>
 *   <input name="login" ngModel placeholder="Login">
 *   <input type="checkbox" ngModel [ngModelOptions]="{standalone: true}"> Show more options?
 * </form>
 * <!-- form value: {login: ''} -->
 * ```
 *
 * ### Setting the ngModel `name` attribute through options
 *
 * The following example shows you an alternate way to set the name attribute. Here,
 * an attribute identified as name is used within a custom form control component. To still be able
 * to specify the NgModel's name, you must specify it using the `ngModelOptions` input instead.
 *
 * ```html
 * <form>
 *   <my-custom-form-control name="Nancy" ngModel [ngModelOptions]="{name: 'user'}">
 *   </my-custom-form-control>
 * </form>
 * <!-- form value: {user: ''} -->
 * ```
 *
 * @ngModule FormsModule
 * @publicApi
 */
class NgModel extends NgControl {
  constructor(parent, validators, asyncValidators, valueAccessors, _changeDetectorRef, callSetDisabledState) {
    super();
    this._changeDetectorRef = _changeDetectorRef;
    this.callSetDisabledState = callSetDisabledState;
    this.control = new FormControl();
    /** @internal */
    this._registered = false;
    /**
     * @description
     * Event emitter for producing the `ngModelChange` event after
     * the view model updates.
     */
    this.update = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this._parent = parent;
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
    this.valueAccessor = selectValueAccessor(this, valueAccessors);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    this._checkForErrors();
    if (!this._registered || 'name' in changes) {
      if (this._registered) {
        this._checkName();
        if (this.formDirective) {
          // We can't call `formDirective.removeControl(this)`, because the `name` has already been
          // changed. We also can't reset the name temporarily since the logic in `removeControl`
          // is inside a promise and it won't run immediately. We work around it by giving it an
          // object with the same shape instead.
          const oldName = changes['name'].previousValue;
          this.formDirective.removeControl({
            name: oldName,
            path: this._getPath(oldName)
          });
        }
      }
      this._setUpControl();
    }
    if ('isDisabled' in changes) {
      this._updateDisabled(changes);
    }
    if (isPropertyUpdated(changes, this.viewModel)) {
      this._updateValue(this.model);
      this.viewModel = this.model;
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    this.formDirective && this.formDirective.removeControl(this);
  }
  /**
   * @description
   * Returns an array that represents the path from the top-level form to this control.
   * Each index is the string name of the control on that level.
   */
  get path() {
    return this._getPath(this.name);
  }
  /**
   * @description
   * The top-level directive for this control if present, otherwise null.
   */
  get formDirective() {
    return this._parent ? this._parent.formDirective : null;
  }
  /**
   * @description
   * Sets the new value for the view model and emits an `ngModelChange` event.
   *
   * @param newValue The new value emitted by `ngModelChange`.
   */
  viewToModelUpdate(newValue) {
    this.viewModel = newValue;
    this.update.emit(newValue);
  }
  _setUpControl() {
    this._setUpdateStrategy();
    this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
    this._registered = true;
  }
  _setUpdateStrategy() {
    if (this.options && this.options.updateOn != null) {
      this.control._updateOn = this.options.updateOn;
    }
  }
  _isStandalone() {
    return !this._parent || !!(this.options && this.options.standalone);
  }
  _setUpStandalone() {
    setUpControl(this.control, this, this.callSetDisabledState);
    this.control.updateValueAndValidity({
      emitEvent: false
    });
  }
  _checkForErrors() {
    if (!this._isStandalone()) {
      this._checkParentType();
    }
    this._checkName();
  }
  _checkParentType() {
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
        throw formGroupNameException();
      } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
        throw modelParentException();
      }
    }
  }
  _checkName() {
    if (this.options && this.options.name) this.name = this.options.name;
    if (!this._isStandalone() && !this.name && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw missingNameException();
    }
  }
  _updateValue(value) {
    resolvedPromise.then(() => {
      this.control.setValue(value, {
        emitViewToModelChange: false
      });
      this._changeDetectorRef?.markForCheck();
    });
  }
  _updateDisabled(changes) {
    const disabledValue = changes['isDisabled'].currentValue;
    // checking for 0 to avoid breaking change
    const isDisabled = disabledValue !== 0 && (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcoerceToBoolean"])(disabledValue);
    resolvedPromise.then(() => {
      if (isDisabled && !this.control.disabled) {
        this.control.disable();
      } else if (!isDisabled && this.control.disabled) {
        this.control.enable();
      }
      this._changeDetectorRef?.markForCheck();
    });
  }
  _getPath(controlName) {
    return this._parent ? controlPath(controlName, this._parent) : [controlName];
  }
}
NgModel.ɵfac = function NgModel_Factory(t) {
  return new (t || NgModel)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 9), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CALL_SET_DISABLED_STATE, 8));
};
NgModel.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: NgModel,
  selectors: [["", "ngModel", "", 3, "formControlName", "", 3, "formControl", ""]],
  inputs: {
    name: "name",
    isDisabled: ["disabled", "isDisabled"],
    model: ["ngModel", "model"],
    options: ["ngModelOptions", "options"]
  },
  outputs: {
    update: "ngModelChange"
  },
  exportAs: ["ngModel"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formControlBinding$1]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgModel, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[ngModel]:not([formControlName]):not([formControl])',
      providers: [formControlBinding$1],
      exportAs: 'ngModel'
    }]
  }], function () {
    return [{
      type: ControlContainer,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_VALUE_ACCESSOR]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [CALL_SET_DISABLED_STATE]
      }]
    }];
  }, {
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    isDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['disabled']
    }],
    model: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['ngModel']
    }],
    options: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['ngModelOptions']
    }],
    update: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
      args: ['ngModelChange']
    }]
  });
})();

/**
 * @description
 *
 * Adds `novalidate` attribute to all forms by default.
 *
 * `novalidate` is used to disable browser's native form validation.
 *
 * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:
 *
 * ```
 * <form ngNativeValidate></form>
 * ```
 *
 * @publicApi
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 */
class ɵNgNoValidate {}
ɵNgNoValidate.ɵfac = function ɵNgNoValidate_Factory(t) {
  return new (t || ɵNgNoValidate)();
};
ɵNgNoValidate.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: ɵNgNoValidate,
  selectors: [["form", 3, "ngNoForm", "", 3, "ngNativeValidate", ""]],
  hostAttrs: ["novalidate", ""]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ɵNgNoValidate, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'form:not([ngNoForm]):not([ngNativeValidate])',
      host: {
        'novalidate': ''
      }
    }]
  }], null, null);
})();
const NUMBER_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => NumberValueAccessor),
  multi: true
};
/**
 * @description
 * The `ControlValueAccessor` for writing a number value and listening to number input changes.
 * The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`
 * directives.
 *
 * @usageNotes
 *
 * ### Using a number input with a reactive form.
 *
 * The following example shows how to use a number input with a reactive form.
 *
 * ```ts
 * const totalCountControl = new FormControl();
 * ```
 *
 * ```
 * <input type="number" [formControl]="totalCountControl">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class NumberValueAccessor extends BuiltInControlValueAccessor {
  /**
   * Sets the "value" property on the input element.
   * @nodoc
   */
  writeValue(value) {
    // The value needs to be normalized for IE9, otherwise it is set to 'null' when null
    const normalizedValue = value == null ? '' : value;
    this.setProperty('value', normalizedValue);
  }
  /**
   * Registers a function called when the control value changes.
   * @nodoc
   */
  registerOnChange(fn) {
    this.onChange = value => {
      fn(value == '' ? null : parseFloat(value));
    };
  }
}
NumberValueAccessor.ɵfac = /* @__PURE__ */function () {
  let ɵNumberValueAccessor_BaseFactory;
  return function NumberValueAccessor_Factory(t) {
    return (ɵNumberValueAccessor_BaseFactory || (ɵNumberValueAccessor_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](NumberValueAccessor)))(t || NumberValueAccessor);
  };
}();
NumberValueAccessor.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: NumberValueAccessor,
  selectors: [["input", "type", "number", "formControlName", ""], ["input", "type", "number", "formControl", ""], ["input", "type", "number", "ngModel", ""]],
  hostBindings: function NumberValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("input", function NumberValueAccessor_input_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("blur", function NumberValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([NUMBER_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NumberValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
      host: {
        '(input)': 'onChange($event.target.value)',
        '(blur)': 'onTouched()'
      },
      providers: [NUMBER_VALUE_ACCESSOR]
    }]
  }], null, null);
})();
const RADIO_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => RadioControlValueAccessor),
  multi: true
};
function throwNameError() {
  throw new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1202 /* RuntimeErrorCode.NAME_AND_FORM_CONTROL_NAME_MUST_MATCH */, `
      If you define both a name and a formControlName attribute on your radio button, their values
      must match. Ex: <input type="radio" formControlName="food" name="food">
    `);
}
/**
 * Internal-only NgModule that works as a host for the `RadioControlRegistry` tree-shakable
 * provider. Note: the `InternalFormsSharedModule` can not be used here directly, since it's
 * declared *after* the `RadioControlRegistry` class and the `providedIn` doesn't support
 * `forwardRef` logic.
 */
class RadioControlRegistryModule {}
RadioControlRegistryModule.ɵfac = function RadioControlRegistryModule_Factory(t) {
  return new (t || RadioControlRegistryModule)();
};
RadioControlRegistryModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: RadioControlRegistryModule
});
RadioControlRegistryModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RadioControlRegistryModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule
  }], null, null);
})();
/**
 * @description
 * Class used by Angular to track radio buttons. For internal use only.
 */
class RadioControlRegistry {
  constructor() {
    this._accessors = [];
  }
  /**
   * @description
   * Adds a control to the internal registry. For internal use only.
   */
  add(control, accessor) {
    this._accessors.push([control, accessor]);
  }
  /**
   * @description
   * Removes a control from the internal registry. For internal use only.
   */
  remove(accessor) {
    for (let i = this._accessors.length - 1; i >= 0; --i) {
      if (this._accessors[i][1] === accessor) {
        this._accessors.splice(i, 1);
        return;
      }
    }
  }
  /**
   * @description
   * Selects a radio button. For internal use only.
   */
  select(accessor) {
    this._accessors.forEach(c => {
      if (this._isSameGroup(c, accessor) && c[1] !== accessor) {
        c[1].fireUncheck(accessor.value);
      }
    });
  }
  _isSameGroup(controlPair, accessor) {
    if (!controlPair[0].control) return false;
    return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
  }
}
RadioControlRegistry.ɵfac = function RadioControlRegistry_Factory(t) {
  return new (t || RadioControlRegistry)();
};
RadioControlRegistry.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: RadioControlRegistry,
  factory: RadioControlRegistry.ɵfac,
  providedIn: RadioControlRegistryModule
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RadioControlRegistry, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: RadioControlRegistryModule
    }]
  }], null, null);
})();
/**
 * @description
 * The `ControlValueAccessor` for writing radio control values and listening to radio control
 * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
 * `NgModel` directives.
 *
 * @usageNotes
 *
 * ### Using radio buttons with reactive form directives
 *
 * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in
 * a reactive form, radio buttons in the same group should have the same `formControlName`.
 * Providing a `name` attribute is optional.
 *
 * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class RadioControlValueAccessor extends BuiltInControlValueAccessor {
  constructor(renderer, elementRef, _registry, _injector) {
    super(renderer, elementRef);
    this._registry = _registry;
    this._injector = _injector;
    this.setDisabledStateFired = false;
    /**
     * The registered callback function called when a change event occurs on the input element.
     * Note: we declare `onChange` here (also used as host listener) as a function with no arguments
     * to override the `onChange` function (which expects 1 argument) in the parent
     * `BaseControlValueAccessor` class.
     * @nodoc
     */
    this.onChange = () => {};
    this.callSetDisabledState = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(CALL_SET_DISABLED_STATE, {
      optional: true
    }) ?? setDisabledStateDefault;
  }
  /** @nodoc */
  ngOnInit() {
    this._control = this._injector.get(NgControl);
    this._checkName();
    this._registry.add(this._control, this);
  }
  /** @nodoc */
  ngOnDestroy() {
    this._registry.remove(this);
  }
  /**
   * Sets the "checked" property value on the radio input element.
   * @nodoc
   */
  writeValue(value) {
    this._state = value === this.value;
    this.setProperty('checked', this._state);
  }
  /**
   * Registers a function called when the control value changes.
   * @nodoc
   */
  registerOnChange(fn) {
    this._fn = fn;
    this.onChange = () => {
      fn(this.value);
      this._registry.select(this);
    };
  }
  /** @nodoc */
  setDisabledState(isDisabled) {
    /**
     * `setDisabledState` is supposed to be called whenever the disabled state of a control changes,
     * including upon control creation. However, a longstanding bug caused the method to not fire
     * when an *enabled* control was attached. This bug was fixed in v15 in #47576.
     *
     * This had a side effect: previously, it was possible to instantiate a reactive form control
     * with `[attr.disabled]=true`, even though the the corresponding control was enabled in the
     * model. This resulted in a mismatch between the model and the DOM. Now, because
     * `setDisabledState` is always called, the value in the DOM will be immediately overwritten
     * with the "correct" enabled value.
     *
     * However, the fix also created an exceptional case: radio buttons. Because Reactive Forms
     * models the entire group of radio buttons as a single `FormControl`, there is no way to
     * control the disabled state for individual radios, so they can no longer be configured as
     * disabled. Thus, we keep the old behavior for radio buttons, so that `[attr.disabled]`
     * continues to work. Specifically, we drop the first call to `setDisabledState` if `disabled`
     * is `false`, and we are not in legacy mode.
     */
    if (this.setDisabledStateFired || isDisabled || this.callSetDisabledState === 'whenDisabledForLegacyCode') {
      this.setProperty('disabled', isDisabled);
    }
    this.setDisabledStateFired = true;
  }
  /**
   * Sets the "value" on the radio input element and unchecks it.
   *
   * @param value
   */
  fireUncheck(value) {
    this.writeValue(value);
  }
  _checkName() {
    if (this.name && this.formControlName && this.name !== this.formControlName && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throwNameError();
    }
    if (!this.name && this.formControlName) this.name = this.formControlName;
  }
}
RadioControlValueAccessor.ɵfac = function RadioControlValueAccessor_Factory(t) {
  return new (t || RadioControlValueAccessor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](RadioControlRegistry), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector));
};
RadioControlValueAccessor.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: RadioControlValueAccessor,
  selectors: [["input", "type", "radio", "formControlName", ""], ["input", "type", "radio", "formControl", ""], ["input", "type", "radio", "ngModel", ""]],
  hostBindings: function RadioControlValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function RadioControlValueAccessor_change_HostBindingHandler() {
        return ctx.onChange();
      })("blur", function RadioControlValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  inputs: {
    name: "name",
    formControlName: "formControlName",
    value: "value"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([RADIO_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RadioControlValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
      host: {
        '(change)': 'onChange()',
        '(blur)': 'onTouched()'
      },
      providers: [RADIO_VALUE_ACCESSOR]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: RadioControlRegistry
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector
    }];
  }, {
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    formControlName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
const RANGE_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => RangeValueAccessor),
  multi: true
};
/**
 * @description
 * The `ControlValueAccessor` for writing a range value and listening to range input changes.
 * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`
 * directives.
 *
 * @usageNotes
 *
 * ### Using a range input with a reactive form
 *
 * The following example shows how to use a range input with a reactive form.
 *
 * ```ts
 * const ageControl = new FormControl();
 * ```
 *
 * ```
 * <input type="range" [formControl]="ageControl">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class RangeValueAccessor extends BuiltInControlValueAccessor {
  /**
   * Sets the "value" property on the input element.
   * @nodoc
   */
  writeValue(value) {
    this.setProperty('value', parseFloat(value));
  }
  /**
   * Registers a function called when the control value changes.
   * @nodoc
   */
  registerOnChange(fn) {
    this.onChange = value => {
      fn(value == '' ? null : parseFloat(value));
    };
  }
}
RangeValueAccessor.ɵfac = /* @__PURE__ */function () {
  let ɵRangeValueAccessor_BaseFactory;
  return function RangeValueAccessor_Factory(t) {
    return (ɵRangeValueAccessor_BaseFactory || (ɵRangeValueAccessor_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](RangeValueAccessor)))(t || RangeValueAccessor);
  };
}();
RangeValueAccessor.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: RangeValueAccessor,
  selectors: [["input", "type", "range", "formControlName", ""], ["input", "type", "range", "formControl", ""], ["input", "type", "range", "ngModel", ""]],
  hostBindings: function RangeValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function RangeValueAccessor_change_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("input", function RangeValueAccessor_input_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("blur", function RangeValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([RANGE_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RangeValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
      host: {
        '(change)': 'onChange($event.target.value)',
        '(input)': 'onChange($event.target.value)',
        '(blur)': 'onTouched()'
      },
      providers: [RANGE_VALUE_ACCESSOR]
    }]
  }], null, null);
})();

/**
 * Token to provide to turn off the ngModel warning on formControl and formControlName.
 */
const NG_MODEL_WITH_FORM_CONTROL_WARNING = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('NgModelWithFormControlWarning');
const formControlBinding = {
  provide: NgControl,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => FormControlDirective)
};
/**
 * @description
 * Synchronizes a standalone `FormControl` instance to a form control element.
 *
 * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive
 * form directives was deprecated in Angular v6 and is scheduled for removal in
 * a future version of Angular.
 * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 * @see `FormControl`
 * @see `AbstractControl`
 *
 * @usageNotes
 *
 * The following example shows how to register a standalone control and set its value.
 *
 * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */
class FormControlDirective extends NgControl {
  /**
   * @description
   * Triggers a warning in dev mode that this input should not be used with reactive forms.
   */
  set isDisabled(isDisabled) {
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      console.warn(disabledAttrWarning);
    }
  }
  constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig, callSetDisabledState) {
    super();
    this._ngModelWarningConfig = _ngModelWarningConfig;
    this.callSetDisabledState = callSetDisabledState;
    /** @deprecated as of v6 */
    this.update = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * @description
     * Instance property used to track whether an ngModel warning has been sent out for this
     * particular `FormControlDirective` instance. Used to support warning config of "always".
     *
     * @internal
     */
    this._ngModelWarningSent = false;
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
    this.valueAccessor = selectValueAccessor(this, valueAccessors);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (this._isControlChanged(changes)) {
      const previousForm = changes['form'].previousValue;
      if (previousForm) {
        cleanUpControl(previousForm, this, /* validateControlPresenceOnChange */false);
      }
      setUpControl(this.form, this, this.callSetDisabledState);
      this.form.updateValueAndValidity({
        emitEvent: false
      });
    }
    if (isPropertyUpdated(changes, this.viewModel)) {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);
      }
      this.form.setValue(this.model);
      this.viewModel = this.model;
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.form) {
      cleanUpControl(this.form, this, /* validateControlPresenceOnChange */false);
    }
  }
  /**
   * @description
   * Returns an array that represents the path from the top-level form to this control.
   * Each index is the string name of the control on that level.
   */
  get path() {
    return [];
  }
  /**
   * @description
   * The `FormControl` bound to this directive.
   */
  get control() {
    return this.form;
  }
  /**
   * @description
   * Sets the new value for the view model and emits an `ngModelChange` event.
   *
   * @param newValue The new value for the view model.
   */
  viewToModelUpdate(newValue) {
    this.viewModel = newValue;
    this.update.emit(newValue);
  }
  _isControlChanged(changes) {
    return changes.hasOwnProperty('form');
  }
}
/**
 * @description
 * Static property used to track whether any ngModel warnings have been sent across
 * all instances of FormControlDirective. Used to support warning config of "once".
 *
 * @internal
 */
FormControlDirective._ngModelWarningSentOnce = false;
FormControlDirective.ɵfac = function FormControlDirective_Factory(t) {
  return new (t || FormControlDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_MODEL_WITH_FORM_CONTROL_WARNING, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CALL_SET_DISABLED_STATE, 8));
};
FormControlDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: FormControlDirective,
  selectors: [["", "formControl", ""]],
  inputs: {
    form: ["formControl", "form"],
    isDisabled: ["disabled", "isDisabled"],
    model: ["ngModel", "model"]
  },
  outputs: {
    update: "ngModelChange"
  },
  exportAs: ["ngForm"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formControlBinding]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormControlDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[formControl]',
      providers: [formControlBinding],
      exportAs: 'ngForm'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_VALUE_ACCESSOR]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [CALL_SET_DISABLED_STATE]
      }]
    }];
  }, {
    form: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['formControl']
    }],
    isDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['disabled']
    }],
    model: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['ngModel']
    }],
    update: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
      args: ['ngModelChange']
    }]
  });
})();
const formDirectiveProvider = {
  provide: ControlContainer,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => FormGroupDirective)
};
/**
 * @description
 *
 * Binds an existing `FormGroup` or `FormRecord` to a DOM element.
 *
 * This directive accepts an existing `FormGroup` instance. It will then use this
 * `FormGroup` instance to match any child `FormControl`, `FormGroup`/`FormRecord`,
 * and `FormArray` instances to child `FormControlName`, `FormGroupName`,
 * and `FormArrayName` directives.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 * @see `AbstractControl`
 *
 * @usageNotes
 * ### Register Form Group
 *
 * The following example registers a `FormGroup` with first name and last name controls,
 * and listens for the *ngSubmit* event when the button is clicked.
 *
 * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */
class FormGroupDirective extends ControlContainer {
  constructor(validators, asyncValidators, callSetDisabledState) {
    super();
    this.callSetDisabledState = callSetDisabledState;
    /**
     * @description
     * Reports whether the form submission has been triggered.
     */
    this.submitted = false;
    /**
     * Callback that should be invoked when controls in FormGroup or FormArray collection change
     * (added or removed). This callback triggers corresponding DOM updates.
     */
    this._onCollectionChange = () => this._updateDomValue();
    /**
     * @description
     * Tracks the list of added `FormControlName` instances
     */
    this.directives = [];
    /**
     * @description
     * Tracks the `FormGroup` bound to this directive.
     */
    this.form = null;
    /**
     * @description
     * Emits an event when the form submission has been triggered.
     */
    this.ngSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    this._checkFormPresent();
    if (changes.hasOwnProperty('form')) {
      this._updateValidators();
      this._updateDomValue();
      this._updateRegistrations();
      this._oldForm = this.form;
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.form) {
      cleanUpValidators(this.form, this);
      // Currently the `onCollectionChange` callback is rewritten each time the
      // `_registerOnCollectionChange` function is invoked. The implication is that cleanup should
      // happen *only* when the `onCollectionChange` callback was set by this directive instance.
      // Otherwise it might cause overriding a callback of some other directive instances. We should
      // consider updating this logic later to make it similar to how `onChange` callbacks are
      // handled, see https://github.com/angular/angular/issues/39732 for additional info.
      if (this.form._onCollectionChange === this._onCollectionChange) {
        this.form._registerOnCollectionChange(() => {});
      }
    }
  }
  /**
   * @description
   * Returns this directive's instance.
   */
  get formDirective() {
    return this;
  }
  /**
   * @description
   * Returns the `FormGroup` bound to this directive.
   */
  get control() {
    return this.form;
  }
  /**
   * @description
   * Returns an array representing the path to this group. Because this directive
   * always lives at the top level of a form, it always an empty array.
   */
  get path() {
    return [];
  }
  /**
   * @description
   * Method that sets up the control directive in this group, re-calculates its value
   * and validity, and adds the instance to the internal list of directives.
   *
   * @param dir The `FormControlName` directive instance.
   */
  addControl(dir) {
    const ctrl = this.form.get(dir.path);
    setUpControl(ctrl, dir, this.callSetDisabledState);
    ctrl.updateValueAndValidity({
      emitEvent: false
    });
    this.directives.push(dir);
    return ctrl;
  }
  /**
   * @description
   * Retrieves the `FormControl` instance from the provided `FormControlName` directive
   *
   * @param dir The `FormControlName` directive instance.
   */
  getControl(dir) {
    return this.form.get(dir.path);
  }
  /**
   * @description
   * Removes the `FormControlName` instance from the internal list of directives
   *
   * @param dir The `FormControlName` directive instance.
   */
  removeControl(dir) {
    cleanUpControl(dir.control || null, dir, /* validateControlPresenceOnChange */false);
    removeListItem$1(this.directives, dir);
  }
  /**
   * Adds a new `FormGroupName` directive instance to the form.
   *
   * @param dir The `FormGroupName` directive instance.
   */
  addFormGroup(dir) {
    this._setUpFormContainer(dir);
  }
  /**
   * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the
   * view.
   *
   * @param dir The `FormGroupName` directive instance.
   */
  removeFormGroup(dir) {
    this._cleanUpFormContainer(dir);
  }
  /**
   * @description
   * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance
   *
   * @param dir The `FormGroupName` directive instance.
   */
  getFormGroup(dir) {
    return this.form.get(dir.path);
  }
  /**
   * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.
   *
   * @param dir The `FormArrayName` directive instance.
   */
  addFormArray(dir) {
    this._setUpFormContainer(dir);
  }
  /**
   * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the
   * view.
   *
   * @param dir The `FormArrayName` directive instance.
   */
  removeFormArray(dir) {
    this._cleanUpFormContainer(dir);
  }
  /**
   * @description
   * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.
   *
   * @param dir The `FormArrayName` directive instance.
   */
  getFormArray(dir) {
    return this.form.get(dir.path);
  }
  /**
   * Sets the new value for the provided `FormControlName` directive.
   *
   * @param dir The `FormControlName` directive instance.
   * @param value The new value for the directive's control.
   */
  updateModel(dir, value) {
    const ctrl = this.form.get(dir.path);
    ctrl.setValue(value);
  }
  /**
   * @description
   * Method called with the "submit" event is triggered on the form.
   * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
   *
   * @param $event The "submit" event object
   */
  onSubmit($event) {
    this.submitted = true;
    syncPendingControls(this.form, this.directives);
    this.ngSubmit.emit($event);
    // Forms with `method="dialog"` have some special behavior that won't reload the page and that
    // shouldn't be prevented. Note that we need to null check the `event` and the `target`, because
    // some internal apps call this method directly with the wrong arguments.
    return $event?.target?.method === 'dialog';
  }
  /**
   * @description
   * Method called when the "reset" event is triggered on the form.
   */
  onReset() {
    this.resetForm();
  }
  /**
   * @description
   * Resets the form to an initial value and resets its submitted status.
   *
   * @param value The new value for the form.
   */
  resetForm(value = undefined) {
    this.form.reset(value);
    this.submitted = false;
  }
  /** @internal */
  _updateDomValue() {
    this.directives.forEach(dir => {
      const oldCtrl = dir.control;
      const newCtrl = this.form.get(dir.path);
      if (oldCtrl !== newCtrl) {
        // Note: the value of the `dir.control` may not be defined, for example when it's a first
        // `FormControl` that is added to a `FormGroup` instance (via `addControl` call).
        cleanUpControl(oldCtrl || null, dir);
        // Check whether new control at the same location inside the corresponding `FormGroup` is an
        // instance of `FormControl` and perform control setup only if that's the case.
        // Note: we don't need to clear the list of directives (`this.directives`) here, it would be
        // taken care of in the `removeControl` method invoked when corresponding `formControlName`
        // directive instance is being removed (invoked from `FormControlName.ngOnDestroy`).
        if (isFormControl(newCtrl)) {
          setUpControl(newCtrl, dir, this.callSetDisabledState);
          dir.control = newCtrl;
        }
      }
    });
    this.form._updateTreeValidity({
      emitEvent: false
    });
  }
  _setUpFormContainer(dir) {
    const ctrl = this.form.get(dir.path);
    setUpFormContainer(ctrl, dir);
    // NOTE: this operation looks unnecessary in case no new validators were added in
    // `setUpFormContainer` call. Consider updating this code to match the logic in
    // `_cleanUpFormContainer` function.
    ctrl.updateValueAndValidity({
      emitEvent: false
    });
  }
  _cleanUpFormContainer(dir) {
    if (this.form) {
      const ctrl = this.form.get(dir.path);
      if (ctrl) {
        const isControlUpdated = cleanUpFormContainer(ctrl, dir);
        if (isControlUpdated) {
          // Run validity check only in case a control was updated (i.e. view validators were
          // removed) as removing view validators might cause validity to change.
          ctrl.updateValueAndValidity({
            emitEvent: false
          });
        }
      }
    }
  }
  _updateRegistrations() {
    this.form._registerOnCollectionChange(this._onCollectionChange);
    if (this._oldForm) {
      this._oldForm._registerOnCollectionChange(() => {});
    }
  }
  _updateValidators() {
    setUpValidators(this.form, this);
    if (this._oldForm) {
      cleanUpValidators(this._oldForm, this);
    }
  }
  _checkFormPresent() {
    if (!this.form && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw missingFormException();
    }
  }
}
FormGroupDirective.ɵfac = function FormGroupDirective_Factory(t) {
  return new (t || FormGroupDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CALL_SET_DISABLED_STATE, 8));
};
FormGroupDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: FormGroupDirective,
  selectors: [["", "formGroup", ""]],
  hostBindings: function FormGroupDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("submit", function FormGroupDirective_submit_HostBindingHandler($event) {
        return ctx.onSubmit($event);
      })("reset", function FormGroupDirective_reset_HostBindingHandler() {
        return ctx.onReset();
      });
    }
  },
  inputs: {
    form: ["formGroup", "form"]
  },
  outputs: {
    ngSubmit: "ngSubmit"
  },
  exportAs: ["ngForm"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formDirectiveProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormGroupDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[formGroup]',
      providers: [formDirectiveProvider],
      host: {
        '(submit)': 'onSubmit($event)',
        '(reset)': 'onReset()'
      },
      exportAs: 'ngForm'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [CALL_SET_DISABLED_STATE]
      }]
    }];
  }, {
    form: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['formGroup']
    }],
    ngSubmit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
const formGroupNameProvider = {
  provide: ControlContainer,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => FormGroupName)
};
/**
 * @description
 *
 * Syncs a nested `FormGroup` or `FormRecord` to a DOM element.
 *
 * This directive can only be used with a parent `FormGroupDirective`.
 *
 * It accepts the string name of the nested `FormGroup` or `FormRecord` to link, and
 * looks for a `FormGroup` or `FormRecord` registered with that name in the parent
 * `FormGroup` instance you passed into `FormGroupDirective`.
 *
 * Use nested form groups to validate a sub-group of a
 * form separately from the rest or to group the values of certain
 * controls into their own nested object.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 *
 * @usageNotes
 *
 * ### Access the group by name
 *
 * The following example uses the `AbstractControl.get` method to access the
 * associated `FormGroup`
 *
 * ```ts
 *   this.form.get('name');
 * ```
 *
 * ### Access individual controls in the group
 *
 * The following example uses the `AbstractControl.get` method to access
 * individual controls within the group using dot syntax.
 *
 * ```ts
 *   this.form.get('name.first');
 * ```
 *
 * ### Register a nested `FormGroup`.
 *
 * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,
 * and provides methods to retrieve the nested `FormGroup` and individual controls.
 *
 * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */
class FormGroupName extends AbstractFormGroupDirective {
  constructor(parent, validators, asyncValidators) {
    super();
    this._parent = parent;
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
  }
  /** @internal */
  _checkParentType() {
    if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw groupParentException();
    }
  }
}
FormGroupName.ɵfac = function FormGroupName_Factory(t) {
  return new (t || FormGroupName)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 13), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
};
FormGroupName.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: FormGroupName,
  selectors: [["", "formGroupName", ""]],
  inputs: {
    name: ["formGroupName", "name"]
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formGroupNameProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormGroupName, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[formGroupName]',
      providers: [formGroupNameProvider]
    }]
  }], function () {
    return [{
      type: ControlContainer,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }];
  }, {
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['formGroupName']
    }]
  });
})();
const formArrayNameProvider = {
  provide: ControlContainer,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => FormArrayName)
};
/**
 * @description
 *
 * Syncs a nested `FormArray` to a DOM element.
 *
 * This directive is designed to be used with a parent `FormGroupDirective` (selector:
 * `[formGroup]`).
 *
 * It accepts the string name of the nested `FormArray` you want to link, and
 * will look for a `FormArray` registered with that name in the parent
 * `FormGroup` instance you passed into `FormGroupDirective`.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 * @see `AbstractControl`
 *
 * @usageNotes
 *
 * ### Example
 *
 * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */
class FormArrayName extends ControlContainer {
  constructor(parent, validators, asyncValidators) {
    super();
    this._parent = parent;
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
  }
  /**
   * A lifecycle method called when the directive's inputs are initialized. For internal use only.
   * @throws If the directive does not have a valid parent.
   * @nodoc
   */
  ngOnInit() {
    this._checkParentType();
    this.formDirective.addFormArray(this);
  }
  /**
   * A lifecycle method called before the directive's instance is destroyed. For internal use only.
   * @nodoc
   */
  ngOnDestroy() {
    if (this.formDirective) {
      this.formDirective.removeFormArray(this);
    }
  }
  /**
   * @description
   * The `FormArray` bound to this directive.
   */
  get control() {
    return this.formDirective.getFormArray(this);
  }
  /**
   * @description
   * The top-level directive for this group if present, otherwise null.
   */
  get formDirective() {
    return this._parent ? this._parent.formDirective : null;
  }
  /**
   * @description
   * Returns an array that represents the path from the top-level form to this control.
   * Each index is the string name of the control on that level.
   */
  get path() {
    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
  }
  _checkParentType() {
    if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw arrayParentException();
    }
  }
}
FormArrayName.ɵfac = function FormArrayName_Factory(t) {
  return new (t || FormArrayName)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 13), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
};
FormArrayName.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: FormArrayName,
  selectors: [["", "formArrayName", ""]],
  inputs: {
    name: ["formArrayName", "name"]
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([formArrayNameProvider]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormArrayName, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[formArrayName]',
      providers: [formArrayNameProvider]
    }]
  }], function () {
    return [{
      type: ControlContainer,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }];
  }, {
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['formArrayName']
    }]
  });
})();
function _hasInvalidParent(parent) {
  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
}
const controlNameBinding = {
  provide: NgControl,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => FormControlName)
};
/**
 * @description
 * Syncs a `FormControl` in an existing `FormGroup` to a form control
 * element by name.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 * @see `FormControl`
 * @see `AbstractControl`
 *
 * @usageNotes
 *
 * ### Register `FormControl` within a group
 *
 * The following example shows how to register multiple form controls within a form group
 * and set their value.
 *
 * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
 *
 * To see `formControlName` examples with different form control types, see:
 *
 * * Radio buttons: `RadioControlValueAccessor`
 * * Selects: `SelectControlValueAccessor`
 *
 * ### Use with ngModel is deprecated
 *
 * Support for using the `ngModel` input property and `ngModelChange` event with reactive
 * form directives has been deprecated in Angular v6 and is scheduled for removal in
 * a future version of Angular.
 *
 * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */
class FormControlName extends NgControl {
  /**
   * @description
   * Triggers a warning in dev mode that this input should not be used with reactive forms.
   */
  set isDisabled(isDisabled) {
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      console.warn(disabledAttrWarning);
    }
  }
  constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
    super();
    this._ngModelWarningConfig = _ngModelWarningConfig;
    this._added = false;
    /** @deprecated as of v6 */
    this.update = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * @description
     * Instance property used to track whether an ngModel warning has been sent out for this
     * particular FormControlName instance. Used to support warning config of "always".
     *
     * @internal
     */
    this._ngModelWarningSent = false;
    this._parent = parent;
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
    this.valueAccessor = selectValueAccessor(this, valueAccessors);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (!this._added) this._setUpControl();
    if (isPropertyUpdated(changes, this.viewModel)) {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);
      }
      this.viewModel = this.model;
      this.formDirective.updateModel(this, this.model);
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.formDirective) {
      this.formDirective.removeControl(this);
    }
  }
  /**
   * @description
   * Sets the new value for the view model and emits an `ngModelChange` event.
   *
   * @param newValue The new value for the view model.
   */
  viewToModelUpdate(newValue) {
    this.viewModel = newValue;
    this.update.emit(newValue);
  }
  /**
   * @description
   * Returns an array that represents the path from the top-level form to this control.
   * Each index is the string name of the control on that level.
   */
  get path() {
    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
  }
  /**
   * @description
   * The top-level directive for this group if present, otherwise null.
   */
  get formDirective() {
    return this._parent ? this._parent.formDirective : null;
  }
  _checkParentType() {
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
        throw ngModelGroupException();
      } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
        throw controlParentException();
      }
    }
  }
  _setUpControl() {
    this._checkParentType();
    this.control = this.formDirective.addControl(this);
    this._added = true;
  }
}
/**
 * @description
 * Static property used to track whether any ngModel warnings have been sent across
 * all instances of FormControlName. Used to support warning config of "once".
 *
 * @internal
 */
FormControlName._ngModelWarningSentOnce = false;
FormControlName.ɵfac = function FormControlName_Factory(t) {
  return new (t || FormControlName)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ControlContainer, 13), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));
};
FormControlName.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: FormControlName,
  selectors: [["", "formControlName", ""]],
  inputs: {
    name: ["formControlName", "name"],
    isDisabled: ["disabled", "isDisabled"],
    model: ["ngModel", "model"]
  },
  outputs: {
    update: "ngModelChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([controlNameBinding]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormControlName, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[formControlName]',
      providers: [controlNameBinding]
    }]
  }], function () {
    return [{
      type: ControlContainer,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Self
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_VALUE_ACCESSOR]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
      }]
    }];
  }, {
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['formControlName']
    }],
    isDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['disabled']
    }],
    model: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['ngModel']
    }],
    update: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output,
      args: ['ngModelChange']
    }]
  });
})();
const SELECT_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => SelectControlValueAccessor),
  multi: true
};
function _buildValueString$1(id, value) {
  if (id == null) return `${value}`;
  if (value && typeof value === 'object') value = 'Object';
  return `${id}: ${value}`.slice(0, 50);
}
function _extractId$1(valueString) {
  return valueString.split(':')[0];
}
/**
 * @description
 * The `ControlValueAccessor` for writing select control values and listening to select control
 * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
 * `NgModel` directives.
 *
 * @usageNotes
 *
 * ### Using select controls in a reactive form
 *
 * The following examples show how to use a select control in a reactive form.
 *
 * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
 *
 * ### Using select controls in a template-driven form
 *
 * To use a select in a template-driven form, simply add an `ngModel` and a `name`
 * attribute to the main `<select>` tag.
 *
 * {@example forms/ts/selectControl/select_control_example.ts region='Component'}
 *
 * ### Customizing option selection
 *
 * Angular uses object identity to select option. It's possible for the identities of items
 * to change while the data does not. This can happen, for example, if the items are produced
 * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
 * second response will produce objects with different identities.
 *
 * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
 * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
 * If `compareWith` is given, Angular selects option by the return value of the function.
 *
 * ```ts
 * const selectedCountriesControl = new FormControl();
 * ```
 *
 * ```
 * <select [compareWith]="compareFn"  [formControl]="selectedCountriesControl">
 *     <option *ngFor="let country of countries" [ngValue]="country">
 *         {{country.name}}
 *     </option>
 * </select>
 *
 * compareFn(c1: Country, c2: Country): boolean {
 *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
 * }
 * ```
 *
 * **Note:** We listen to the 'change' event because 'input' events aren't fired
 * for selects in IE, see:
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event#browser_compatibility
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class SelectControlValueAccessor extends BuiltInControlValueAccessor {
  constructor() {
    super(...arguments);
    /** @internal */
    this._optionMap = new Map();
    /** @internal */
    this._idCounter = 0;
    this._compareWith = Object.is;
  }
  /**
   * @description
   * Tracks the option comparison algorithm for tracking identities when
   * checking for changes.
   */
  set compareWith(fn) {
    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1201 /* RuntimeErrorCode.COMPAREWITH_NOT_A_FN */, `compareWith must be a function, but received ${JSON.stringify(fn)}`);
    }
    this._compareWith = fn;
  }
  /**
   * Sets the "value" property on the select element.
   * @nodoc
   */
  writeValue(value) {
    this.value = value;
    const id = this._getOptionId(value);
    const valueString = _buildValueString$1(id, value);
    this.setProperty('value', valueString);
  }
  /**
   * Registers a function called when the control value changes.
   * @nodoc
   */
  registerOnChange(fn) {
    this.onChange = valueString => {
      this.value = this._getOptionValue(valueString);
      fn(this.value);
    };
  }
  /** @internal */
  _registerOption() {
    return (this._idCounter++).toString();
  }
  /** @internal */
  _getOptionId(value) {
    for (const id of Array.from(this._optionMap.keys())) {
      if (this._compareWith(this._optionMap.get(id), value)) return id;
    }
    return null;
  }
  /** @internal */
  _getOptionValue(valueString) {
    const id = _extractId$1(valueString);
    return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
  }
}
SelectControlValueAccessor.ɵfac = /* @__PURE__ */function () {
  let ɵSelectControlValueAccessor_BaseFactory;
  return function SelectControlValueAccessor_Factory(t) {
    return (ɵSelectControlValueAccessor_BaseFactory || (ɵSelectControlValueAccessor_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](SelectControlValueAccessor)))(t || SelectControlValueAccessor);
  };
}();
SelectControlValueAccessor.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SelectControlValueAccessor,
  selectors: [["select", "formControlName", "", 3, "multiple", ""], ["select", "formControl", "", 3, "multiple", ""], ["select", "ngModel", "", 3, "multiple", ""]],
  hostBindings: function SelectControlValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SelectControlValueAccessor_change_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("blur", function SelectControlValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  inputs: {
    compareWith: "compareWith"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([SELECT_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SelectControlValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
      host: {
        '(change)': 'onChange($event.target.value)',
        '(blur)': 'onTouched()'
      },
      providers: [SELECT_VALUE_ACCESSOR]
    }]
  }], null, {
    compareWith: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
/**
 * @description
 * Marks `<option>` as dynamic, so Angular can be notified when options change.
 *
 * @see `SelectControlValueAccessor`
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class NgSelectOption {
  constructor(_element, _renderer, _select) {
    this._element = _element;
    this._renderer = _renderer;
    this._select = _select;
    if (this._select) this.id = this._select._registerOption();
  }
  /**
   * @description
   * Tracks the value bound to the option element. Unlike the value binding,
   * ngValue supports binding to objects.
   */
  set ngValue(value) {
    if (this._select == null) return;
    this._select._optionMap.set(this.id, value);
    this._setElementValue(_buildValueString$1(this.id, value));
    this._select.writeValue(this._select.value);
  }
  /**
   * @description
   * Tracks simple string values bound to the option element.
   * For objects, use the `ngValue` input binding.
   */
  set value(value) {
    this._setElementValue(value);
    if (this._select) this._select.writeValue(this._select.value);
  }
  /** @internal */
  _setElementValue(value) {
    this._renderer.setProperty(this._element.nativeElement, 'value', value);
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this._select) {
      this._select._optionMap.delete(this.id);
      this._select.writeValue(this._select.value);
    }
  }
}
NgSelectOption.ɵfac = function NgSelectOption_Factory(t) {
  return new (t || NgSelectOption)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SelectControlValueAccessor, 9));
};
NgSelectOption.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: NgSelectOption,
  selectors: [["option"]],
  inputs: {
    ngValue: "ngValue",
    value: "value"
  }
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgSelectOption, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'option'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
    }, {
      type: SelectControlValueAccessor,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
      }]
    }];
  }, {
    ngValue: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['ngValue']
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['value']
    }]
  });
})();
const SELECT_MULTIPLE_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => SelectMultipleControlValueAccessor),
  multi: true
};
function _buildValueString(id, value) {
  if (id == null) return `${value}`;
  if (typeof value === 'string') value = `'${value}'`;
  if (value && typeof value === 'object') value = 'Object';
  return `${id}: ${value}`.slice(0, 50);
}
function _extractId(valueString) {
  return valueString.split(':')[0];
}
/** Mock interface for HTMLCollection */
class HTMLCollection {}
/**
 * @description
 * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select
 * control changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
 * `NgModel` directives.
 *
 * @see `SelectControlValueAccessor`
 *
 * @usageNotes
 *
 * ### Using a multi-select control
 *
 * The follow example shows you how to use a multi-select control with a reactive form.
 *
 * ```ts
 * const countryControl = new FormControl();
 * ```
 *
 * ```
 * <select multiple name="countries" [formControl]="countryControl">
 *   <option *ngFor="let country of countries" [ngValue]="country">
 *     {{ country.name }}
 *   </option>
 * </select>
 * ```
 *
 * ### Customizing option selection
 *
 * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
 * See the `SelectControlValueAccessor` for usage.
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class SelectMultipleControlValueAccessor extends BuiltInControlValueAccessor {
  constructor() {
    super(...arguments);
    /** @internal */
    this._optionMap = new Map();
    /** @internal */
    this._idCounter = 0;
    this._compareWith = Object.is;
  }
  /**
   * @description
   * Tracks the option comparison algorithm for tracking identities when
   * checking for changes.
   */
  set compareWith(fn) {
    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      throw new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](1201 /* RuntimeErrorCode.COMPAREWITH_NOT_A_FN */, `compareWith must be a function, but received ${JSON.stringify(fn)}`);
    }
    this._compareWith = fn;
  }
  /**
   * Sets the "value" property on one or of more of the select's options.
   * @nodoc
   */
  writeValue(value) {
    this.value = value;
    let optionSelectedStateSetter;
    if (Array.isArray(value)) {
      // convert values to ids
      const ids = value.map(v => this._getOptionId(v));
      optionSelectedStateSetter = (opt, o) => {
        opt._setSelected(ids.indexOf(o.toString()) > -1);
      };
    } else {
      optionSelectedStateSetter = (opt, o) => {
        opt._setSelected(false);
      };
    }
    this._optionMap.forEach(optionSelectedStateSetter);
  }
  /**
   * Registers a function called when the control value changes
   * and writes an array of the selected options.
   * @nodoc
   */
  registerOnChange(fn) {
    this.onChange = element => {
      const selected = [];
      const selectedOptions = element.selectedOptions;
      if (selectedOptions !== undefined) {
        const options = selectedOptions;
        for (let i = 0; i < options.length; i++) {
          const opt = options[i];
          const val = this._getOptionValue(opt.value);
          selected.push(val);
        }
      }
      // Degrade to use `options` when `selectedOptions` property is not available.
      // Note: the `selectedOptions` is available in all supported browsers, but the Domino lib
      // doesn't have it currently, see https://github.com/fgnass/domino/issues/177.
      else {
        const options = element.options;
        for (let i = 0; i < options.length; i++) {
          const opt = options[i];
          if (opt.selected) {
            const val = this._getOptionValue(opt.value);
            selected.push(val);
          }
        }
      }
      this.value = selected;
      fn(selected);
    };
  }
  /** @internal */
  _registerOption(value) {
    const id = (this._idCounter++).toString();
    this._optionMap.set(id, value);
    return id;
  }
  /** @internal */
  _getOptionId(value) {
    for (const id of Array.from(this._optionMap.keys())) {
      if (this._compareWith(this._optionMap.get(id)._value, value)) return id;
    }
    return null;
  }
  /** @internal */
  _getOptionValue(valueString) {
    const id = _extractId(valueString);
    return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
  }
}
SelectMultipleControlValueAccessor.ɵfac = /* @__PURE__ */function () {
  let ɵSelectMultipleControlValueAccessor_BaseFactory;
  return function SelectMultipleControlValueAccessor_Factory(t) {
    return (ɵSelectMultipleControlValueAccessor_BaseFactory || (ɵSelectMultipleControlValueAccessor_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](SelectMultipleControlValueAccessor)))(t || SelectMultipleControlValueAccessor);
  };
}();
SelectMultipleControlValueAccessor.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SelectMultipleControlValueAccessor,
  selectors: [["select", "multiple", "", "formControlName", ""], ["select", "multiple", "", "formControl", ""], ["select", "multiple", "", "ngModel", ""]],
  hostBindings: function SelectMultipleControlValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SelectMultipleControlValueAccessor_change_HostBindingHandler($event) {
        return ctx.onChange($event.target);
      })("blur", function SelectMultipleControlValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  inputs: {
    compareWith: "compareWith"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([SELECT_MULTIPLE_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SelectMultipleControlValueAccessor, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
      host: {
        '(change)': 'onChange($event.target)',
        '(blur)': 'onTouched()'
      },
      providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
    }]
  }], null, {
    compareWith: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
/**
 * @description
 * Marks `<option>` as dynamic, so Angular can be notified when options change.
 *
 * @see `SelectMultipleControlValueAccessor`
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class ɵNgSelectMultipleOption {
  constructor(_element, _renderer, _select) {
    this._element = _element;
    this._renderer = _renderer;
    this._select = _select;
    if (this._select) {
      this.id = this._select._registerOption(this);
    }
  }
  /**
   * @description
   * Tracks the value bound to the option element. Unlike the value binding,
   * ngValue supports binding to objects.
   */
  set ngValue(value) {
    if (this._select == null) return;
    this._value = value;
    this._setElementValue(_buildValueString(this.id, value));
    this._select.writeValue(this._select.value);
  }
  /**
   * @description
   * Tracks simple string values bound to the option element.
   * For objects, use the `ngValue` input binding.
   */
  set value(value) {
    if (this._select) {
      this._value = value;
      this._setElementValue(_buildValueString(this.id, value));
      this._select.writeValue(this._select.value);
    } else {
      this._setElementValue(value);
    }
  }
  /** @internal */
  _setElementValue(value) {
    this._renderer.setProperty(this._element.nativeElement, 'value', value);
  }
  /** @internal */
  _setSelected(selected) {
    this._renderer.setProperty(this._element.nativeElement, 'selected', selected);
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this._select) {
      this._select._optionMap.delete(this.id);
      this._select.writeValue(this._select.value);
    }
  }
}
ɵNgSelectMultipleOption.ɵfac = function ɵNgSelectMultipleOption_Factory(t) {
  return new (t || ɵNgSelectMultipleOption)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SelectMultipleControlValueAccessor, 9));
};
ɵNgSelectMultipleOption.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: ɵNgSelectMultipleOption,
  selectors: [["option"]],
  inputs: {
    ngValue: "ngValue",
    value: "value"
  }
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ɵNgSelectMultipleOption, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'option'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
    }, {
      type: SelectMultipleControlValueAccessor,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
      }]
    }];
  }, {
    ngValue: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['ngValue']
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['value']
    }]
  });
})();

/**
 * Method that updates string to integer if not already a number
 *
 * @param value The value to convert to integer.
 * @returns value of parameter converted to number or integer.
 */
function toInteger(value) {
  return typeof value === 'number' ? value : parseInt(value, 10);
}
/**
 * Method that ensures that provided value is a float (and converts it to float if needed).
 *
 * @param value The value to convert to float.
 * @returns value of parameter converted to number or float.
 */
function toFloat(value) {
  return typeof value === 'number' ? value : parseFloat(value);
}
/**
 * A base class for Validator-based Directives. The class contains common logic shared across such
 * Directives.
 *
 * For internal use only, this class is not intended for use outside of the Forms package.
 */
class AbstractValidatorDirective {
  constructor() {
    this._validator = nullValidator;
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (this.inputName in changes) {
      const input = this.normalizeInput(changes[this.inputName].currentValue);
      this._enabled = this.enabled(input);
      this._validator = this._enabled ? this.createValidator(input) : nullValidator;
      if (this._onChange) {
        this._onChange();
      }
    }
  }
  /** @nodoc */
  validate(control) {
    return this._validator(control);
  }
  /** @nodoc */
  registerOnValidatorChange(fn) {
    this._onChange = fn;
  }
  /**
   * @description
   * Determines whether this validator should be active or not based on an input.
   * Base class implementation checks whether an input is defined (if the value is different from
   * `null` and `undefined`). Validator classes that extend this base class can override this
   * function with the logic specific to a particular validator directive.
   */
  enabled(input) {
    return input != null /* both `null` and `undefined` */;
  }
}

AbstractValidatorDirective.ɵfac = function AbstractValidatorDirective_Factory(t) {
  return new (t || AbstractValidatorDirective)();
};
AbstractValidatorDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: AbstractValidatorDirective,
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AbstractValidatorDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive
  }], null, null);
})();
/**
 * @description
 * Provider which adds `MaxValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const MAX_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => MaxValidator),
  multi: true
};
/**
 * A directive which installs the {@link MaxValidator} for any `formControlName`,
 * `formControl`, or control with `ngModel` that also has a `max` attribute.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a max validator
 *
 * The following example shows how to add a max validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input type="number" ngModel max="4">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class MaxValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    /** @internal */
    this.inputName = 'max';
    /** @internal */
    this.normalizeInput = input => toFloat(input);
    /** @internal */
    this.createValidator = max => maxValidator(max);
  }
}
MaxValidator.ɵfac = /* @__PURE__ */function () {
  let ɵMaxValidator_BaseFactory;
  return function MaxValidator_Factory(t) {
    return (ɵMaxValidator_BaseFactory || (ɵMaxValidator_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MaxValidator)))(t || MaxValidator);
  };
}();
MaxValidator.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: MaxValidator,
  selectors: [["input", "type", "number", "max", "", "formControlName", ""], ["input", "type", "number", "max", "", "formControl", ""], ["input", "type", "number", "max", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function MaxValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("max", ctx._enabled ? ctx.max : null);
    }
  },
  inputs: {
    max: "max"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([MAX_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MaxValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]',
      providers: [MAX_VALIDATOR],
      host: {
        '[attr.max]': '_enabled ? max : null'
      }
    }]
  }], null, {
    max: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
/**
 * @description
 * Provider which adds `MinValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const MIN_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => MinValidator),
  multi: true
};
/**
 * A directive which installs the {@link MinValidator} for any `formControlName`,
 * `formControl`, or control with `ngModel` that also has a `min` attribute.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a min validator
 *
 * The following example shows how to add a min validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input type="number" ngModel min="4">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class MinValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    /** @internal */
    this.inputName = 'min';
    /** @internal */
    this.normalizeInput = input => toFloat(input);
    /** @internal */
    this.createValidator = min => minValidator(min);
  }
}
MinValidator.ɵfac = /* @__PURE__ */function () {
  let ɵMinValidator_BaseFactory;
  return function MinValidator_Factory(t) {
    return (ɵMinValidator_BaseFactory || (ɵMinValidator_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MinValidator)))(t || MinValidator);
  };
}();
MinValidator.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: MinValidator,
  selectors: [["input", "type", "number", "min", "", "formControlName", ""], ["input", "type", "number", "min", "", "formControl", ""], ["input", "type", "number", "min", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function MinValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("min", ctx._enabled ? ctx.min : null);
    }
  },
  inputs: {
    min: "min"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([MIN_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MinValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]',
      providers: [MIN_VALIDATOR],
      host: {
        '[attr.min]': '_enabled ? min : null'
      }
    }]
  }], null, {
    min: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
/**
 * @description
 * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const REQUIRED_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => RequiredValidator),
  multi: true
};
/**
 * @description
 * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const CHECKBOX_REQUIRED_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => CheckboxRequiredValidator),
  multi: true
};
/**
 * @description
 * A directive that adds the `required` validator to any controls marked with the
 * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a required validator using template-driven forms
 *
 * ```
 * <input name="fullName" ngModel required>
 * ```
 *
 * @ngModule FormsModule
 * @ngModule ReactiveFormsModule
 * @publicApi
 */
class RequiredValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    /** @internal */
    this.inputName = 'required';
    /** @internal */
    this.normalizeInput = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcoerceToBoolean"];
    /** @internal */
    this.createValidator = input => requiredValidator;
  }
  /** @nodoc */
  enabled(input) {
    return input;
  }
}
RequiredValidator.ɵfac = /* @__PURE__ */function () {
  let ɵRequiredValidator_BaseFactory;
  return function RequiredValidator_Factory(t) {
    return (ɵRequiredValidator_BaseFactory || (ɵRequiredValidator_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](RequiredValidator)))(t || RequiredValidator);
  };
}();
RequiredValidator.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: RequiredValidator,
  selectors: [["", "required", "", "formControlName", "", 3, "type", "checkbox"], ["", "required", "", "formControl", "", 3, "type", "checkbox"], ["", "required", "", "ngModel", "", 3, "type", "checkbox"]],
  hostVars: 1,
  hostBindings: function RequiredValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("required", ctx._enabled ? "" : null);
    }
  },
  inputs: {
    required: "required"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([REQUIRED_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](RequiredValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
      providers: [REQUIRED_VALIDATOR],
      host: {
        '[attr.required]': '_enabled ? "" : null'
      }
    }]
  }], null, {
    required: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
/**
 * A Directive that adds the `required` validator to checkbox controls marked with the
 * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a required checkbox validator using template-driven forms
 *
 * The following example shows how to add a checkbox required validator to an input attached to an
 * ngModel binding.
 *
 * ```
 * <input type="checkbox" name="active" ngModel required>
 * ```
 *
 * @publicApi
 * @ngModule FormsModule
 * @ngModule ReactiveFormsModule
 */
class CheckboxRequiredValidator extends RequiredValidator {
  constructor() {
    super(...arguments);
    /** @internal */
    this.createValidator = input => requiredTrueValidator;
  }
}
CheckboxRequiredValidator.ɵfac = /* @__PURE__ */function () {
  let ɵCheckboxRequiredValidator_BaseFactory;
  return function CheckboxRequiredValidator_Factory(t) {
    return (ɵCheckboxRequiredValidator_BaseFactory || (ɵCheckboxRequiredValidator_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](CheckboxRequiredValidator)))(t || CheckboxRequiredValidator);
  };
}();
CheckboxRequiredValidator.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: CheckboxRequiredValidator,
  selectors: [["input", "type", "checkbox", "required", "", "formControlName", ""], ["input", "type", "checkbox", "required", "", "formControl", ""], ["input", "type", "checkbox", "required", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function CheckboxRequiredValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("required", ctx._enabled ? "" : null);
    }
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([CHECKBOX_REQUIRED_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CheckboxRequiredValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
      providers: [CHECKBOX_REQUIRED_VALIDATOR],
      host: {
        '[attr.required]': '_enabled ? "" : null'
      }
    }]
  }], null, null);
})();
/**
 * @description
 * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const EMAIL_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => EmailValidator),
  multi: true
};
/**
 * A directive that adds the `email` validator to controls marked with the
 * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * The email validation is based on the WHATWG HTML specification with some enhancements to
 * incorporate more RFC rules. More information can be found on the [Validators.email
 * page](api/forms/Validators#email).
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding an email validator
 *
 * The following example shows how to add an email validator to an input attached to an ngModel
 * binding.
 *
 * ```
 * <input type="email" name="email" ngModel email>
 * <input type="email" name="email" ngModel email="true">
 * <input type="email" name="email" ngModel [email]="true">
 * ```
 *
 * @publicApi
 * @ngModule FormsModule
 * @ngModule ReactiveFormsModule
 */
class EmailValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    /** @internal */
    this.inputName = 'email';
    /** @internal */
    this.normalizeInput = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcoerceToBoolean"];
    /** @internal */
    this.createValidator = input => emailValidator;
  }
  /** @nodoc */
  enabled(input) {
    return input;
  }
}
EmailValidator.ɵfac = /* @__PURE__ */function () {
  let ɵEmailValidator_BaseFactory;
  return function EmailValidator_Factory(t) {
    return (ɵEmailValidator_BaseFactory || (ɵEmailValidator_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](EmailValidator)))(t || EmailValidator);
  };
}();
EmailValidator.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: EmailValidator,
  selectors: [["", "email", "", "formControlName", ""], ["", "email", "", "formControl", ""], ["", "email", "", "ngModel", ""]],
  inputs: {
    email: "email"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([EMAIL_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](EmailValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[email][formControlName],[email][formControl],[email][ngModel]',
      providers: [EMAIL_VALIDATOR]
    }]
  }], null, {
    email: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
/**
 * @description
 * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const MIN_LENGTH_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => MinLengthValidator),
  multi: true
};
/**
 * A directive that adds minimum length validation to controls marked with the
 * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a minimum length validator
 *
 * The following example shows how to add a minimum length validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input name="firstName" ngModel minlength="4">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class MinLengthValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    /** @internal */
    this.inputName = 'minlength';
    /** @internal */
    this.normalizeInput = input => toInteger(input);
    /** @internal */
    this.createValidator = minlength => minLengthValidator(minlength);
  }
}
MinLengthValidator.ɵfac = /* @__PURE__ */function () {
  let ɵMinLengthValidator_BaseFactory;
  return function MinLengthValidator_Factory(t) {
    return (ɵMinLengthValidator_BaseFactory || (ɵMinLengthValidator_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MinLengthValidator)))(t || MinLengthValidator);
  };
}();
MinLengthValidator.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: MinLengthValidator,
  selectors: [["", "minlength", "", "formControlName", ""], ["", "minlength", "", "formControl", ""], ["", "minlength", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function MinLengthValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("minlength", ctx._enabled ? ctx.minlength : null);
    }
  },
  inputs: {
    minlength: "minlength"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([MIN_LENGTH_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MinLengthValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
      providers: [MIN_LENGTH_VALIDATOR],
      host: {
        '[attr.minlength]': '_enabled ? minlength : null'
      }
    }]
  }], null, {
    minlength: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
/**
 * @description
 * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const MAX_LENGTH_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => MaxLengthValidator),
  multi: true
};
/**
 * A directive that adds max length validation to controls marked with the
 * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a maximum length validator
 *
 * The following example shows how to add a maximum length validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input name="firstName" ngModel maxlength="25">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class MaxLengthValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    /** @internal */
    this.inputName = 'maxlength';
    /** @internal */
    this.normalizeInput = input => toInteger(input);
    /** @internal */
    this.createValidator = maxlength => maxLengthValidator(maxlength);
  }
}
MaxLengthValidator.ɵfac = /* @__PURE__ */function () {
  let ɵMaxLengthValidator_BaseFactory;
  return function MaxLengthValidator_Factory(t) {
    return (ɵMaxLengthValidator_BaseFactory || (ɵMaxLengthValidator_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MaxLengthValidator)))(t || MaxLengthValidator);
  };
}();
MaxLengthValidator.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: MaxLengthValidator,
  selectors: [["", "maxlength", "", "formControlName", ""], ["", "maxlength", "", "formControl", ""], ["", "maxlength", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function MaxLengthValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("maxlength", ctx._enabled ? ctx.maxlength : null);
    }
  },
  inputs: {
    maxlength: "maxlength"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([MAX_LENGTH_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](MaxLengthValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
      providers: [MAX_LENGTH_VALIDATOR],
      host: {
        '[attr.maxlength]': '_enabled ? maxlength : null'
      }
    }]
  }], null, {
    maxlength: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
/**
 * @description
 * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const PATTERN_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => PatternValidator),
  multi: true
};
/**
 * @description
 * A directive that adds regex pattern validation to controls marked with the
 * `pattern` attribute. The regex must match the entire control value.
 * The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a pattern validator
 *
 * The following example shows how to add a pattern validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input name="firstName" ngModel pattern="[a-zA-Z ]*">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
class PatternValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    /** @internal */
    this.inputName = 'pattern';
    /** @internal */
    this.normalizeInput = input => input;
    /** @internal */
    this.createValidator = input => patternValidator(input);
  }
}
PatternValidator.ɵfac = /* @__PURE__ */function () {
  let ɵPatternValidator_BaseFactory;
  return function PatternValidator_Factory(t) {
    return (ɵPatternValidator_BaseFactory || (ɵPatternValidator_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](PatternValidator)))(t || PatternValidator);
  };
}();
PatternValidator.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: PatternValidator,
  selectors: [["", "pattern", "", "formControlName", ""], ["", "pattern", "", "formControl", ""], ["", "pattern", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function PatternValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("pattern", ctx._enabled ? ctx.pattern : null);
    }
  },
  inputs: {
    pattern: "pattern"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([PATTERN_VALIDATOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PatternValidator, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
      providers: [PATTERN_VALIDATOR],
      host: {
        '[attr.pattern]': '_enabled ? pattern : null'
      }
    }]
  }], null, {
    pattern: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
const SHARED_FORM_DIRECTIVES = [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, MinValidator, MaxValidator];
const TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
const REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
/**
 * Internal module used for sharing directives between FormsModule and ReactiveFormsModule
 */
class ɵInternalFormsSharedModule {}
ɵInternalFormsSharedModule.ɵfac = function ɵInternalFormsSharedModule_Factory(t) {
  return new (t || ɵInternalFormsSharedModule)();
};
ɵInternalFormsSharedModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: ɵInternalFormsSharedModule
});
ɵInternalFormsSharedModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [RadioControlRegistryModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ɵInternalFormsSharedModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: SHARED_FORM_DIRECTIVES,
      imports: [RadioControlRegistryModule],
      exports: SHARED_FORM_DIRECTIVES
    }]
  }], null, null);
})();

/**
 * Tracks the value and validity state of an array of `FormControl`,
 * `FormGroup` or `FormArray` instances.
 *
 * A `FormArray` aggregates the values of each child `FormControl` into an array.
 * It calculates its status by reducing the status values of its children. For example, if one of
 * the controls in a `FormArray` is invalid, the entire array becomes invalid.
 *
 * `FormArray` accepts one generic argument, which is the type of the controls inside.
 * If you need a heterogenous array, use {@link UntypedFormArray}.
 *
 * `FormArray` is one of the four fundamental building blocks used to define forms in Angular,
 * along with `FormControl`, `FormGroup`, and `FormRecord`.
 *
 * @usageNotes
 *
 * ### Create an array of form controls
 *
 * ```
 * const arr = new FormArray([
 *   new FormControl('Nancy', Validators.minLength(2)),
 *   new FormControl('Drew'),
 * ]);
 *
 * console.log(arr.value);   // ['Nancy', 'Drew']
 * console.log(arr.status);  // 'VALID'
 * ```
 *
 * ### Create a form array with array-level validators
 *
 * You include array-level validators and async validators. These come in handy
 * when you want to perform validation that considers the value of more than one child
 * control.
 *
 * The two types of validators are passed in separately as the second and third arg
 * respectively, or together as part of an options object.
 *
 * ```
 * const arr = new FormArray([
 *   new FormControl('Nancy'),
 *   new FormControl('Drew')
 * ], {validators: myValidator, asyncValidators: myAsyncValidator});
 * ```
 *
 * ### Set the updateOn property for all controls in a form array
 *
 * The options object is used to set a default value for each child
 * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
 * array level, all child controls default to 'blur', unless the child
 * has explicitly specified a different `updateOn` value.
 *
 * ```ts
 * const arr = new FormArray([
 *    new FormControl()
 * ], {updateOn: 'blur'});
 * ```
 *
 * ### Adding or removing controls from a form array
 *
 * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods
 * in `FormArray` itself. These methods ensure the controls are properly tracked in the
 * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
 * the `FormArray` directly, as that result in strange and unexpected behavior such
 * as broken change detection.
 *
 * @publicApi
 */
class FormArray extends AbstractControl {
  /**
   * Creates a new `FormArray` instance.
   *
   * @param controls An array of child controls. Each child control is given an index
   * where it is registered.
   *
   * @param validatorOrOpts A synchronous validator function, or an array of
   * such functions, or an `AbstractControlOptions` object that contains validation functions
   * and a validation trigger.
   *
   * @param asyncValidator A single async validator or array of async validator functions
   *
   */
  constructor(controls, validatorOrOpts, asyncValidator) {
    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
    this.controls = controls;
    this._initObservables();
    this._setUpdateStrategy(validatorOrOpts);
    this._setUpControls();
    this.updateValueAndValidity({
      onlySelf: true,
      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
      // `VALID` or `INVALID`.
      // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`
      // to `true` to allow that during the control creation process.
      emitEvent: !!this.asyncValidator
    });
  }
  /**
   * Get the `AbstractControl` at the given `index` in the array.
   *
   * @param index Index in the array to retrieve the control. If `index` is negative, it will wrap
   *     around from the back, and if index is greatly negative (less than `-length`), the result is
   * undefined. This behavior is the same as `Array.at(index)`.
   */
  at(index) {
    return this.controls[this._adjustIndex(index)];
  }
  /**
   * Insert a new `AbstractControl` at the end of the array.
   *
   * @param control Form control to be inserted
   * @param options Specifies whether this FormArray instance should emit events after a new
   *     control is added.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * inserted. When false, no events are emitted.
   */
  push(control, options = {}) {
    this.controls.push(control);
    this._registerControl(control);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  /**
   * Insert a new `AbstractControl` at the given `index` in the array.
   *
   * @param index Index in the array to insert the control. If `index` is negative, wraps around
   *     from the back. If `index` is greatly negative (less than `-length`), prepends to the array.
   * This behavior is the same as `Array.splice(index, 0, control)`.
   * @param control Form control to be inserted
   * @param options Specifies whether this FormArray instance should emit events after a new
   *     control is inserted.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * inserted. When false, no events are emitted.
   */
  insert(index, control, options = {}) {
    this.controls.splice(index, 0, control);
    this._registerControl(control);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
  }
  /**
   * Remove the control at the given `index` in the array.
   *
   * @param index Index in the array to remove the control.  If `index` is negative, wraps around
   *     from the back. If `index` is greatly negative (less than `-length`), removes the first
   *     element. This behavior is the same as `Array.splice(index, 1)`.
   * @param options Specifies whether this FormArray instance should emit events after a
   *     control is removed.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * removed. When false, no events are emitted.
   */
  removeAt(index, options = {}) {
    // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.
    let adjustedIndex = this._adjustIndex(index);
    if (adjustedIndex < 0) adjustedIndex = 0;
    if (this.controls[adjustedIndex]) this.controls[adjustedIndex]._registerOnCollectionChange(() => {});
    this.controls.splice(adjustedIndex, 1);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
  }
  /**
   * Replace an existing control.
   *
   * @param index Index in the array to replace the control. If `index` is negative, wraps around
   *     from the back. If `index` is greatly negative (less than `-length`), replaces the first
   *     element. This behavior is the same as `Array.splice(index, 1, control)`.
   * @param control The `AbstractControl` control to replace the existing control
   * @param options Specifies whether this FormArray instance should emit events after an
   *     existing control is replaced with a new one.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * replaced with a new one. When false, no events are emitted.
   */
  setControl(index, control, options = {}) {
    // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.
    let adjustedIndex = this._adjustIndex(index);
    if (adjustedIndex < 0) adjustedIndex = 0;
    if (this.controls[adjustedIndex]) this.controls[adjustedIndex]._registerOnCollectionChange(() => {});
    this.controls.splice(adjustedIndex, 1);
    if (control) {
      this.controls.splice(adjustedIndex, 0, control);
      this._registerControl(control);
    }
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  /**
   * Length of the control array.
   */
  get length() {
    return this.controls.length;
  }
  /**
   * Sets the value of the `FormArray`. It accepts an array that matches
   * the structure of the control.
   *
   * This method performs strict checks, and throws an error if you try
   * to set the value of a control that doesn't exist or if you exclude the
   * value of a control.
   *
   * @usageNotes
   * ### Set the values for the controls in the form array
   *
   * ```
   * const arr = new FormArray([
   *   new FormControl(),
   *   new FormControl()
   * ]);
   * console.log(arr.value);   // [null, null]
   *
   * arr.setValue(['Nancy', 'Drew']);
   * console.log(arr.value);   // ['Nancy', 'Drew']
   * ```
   *
   * @param value Array of values for the controls
   * @param options Configure options that determine how the control propagates changes and
   * emits events after the value changes
   *
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
   * is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control value is updated.
   * When false, no events are emitted.
   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
   * updateValueAndValidity} method.
   */
  setValue(value, options = {}) {
    assertAllValuesPresent(this, false, value);
    value.forEach((newValue, index) => {
      assertControlPresent(this, false, index);
      this.at(index).setValue(newValue, {
        onlySelf: true,
        emitEvent: options.emitEvent
      });
    });
    this.updateValueAndValidity(options);
  }
  /**
   * Patches the value of the `FormArray`. It accepts an array that matches the
   * structure of the control, and does its best to match the values to the correct
   * controls in the group.
   *
   * It accepts both super-sets and sub-sets of the array without throwing an error.
   *
   * @usageNotes
   * ### Patch the values for controls in a form array
   *
   * ```
   * const arr = new FormArray([
   *    new FormControl(),
   *    new FormControl()
   * ]);
   * console.log(arr.value);   // [null, null]
   *
   * arr.patchValue(['Nancy']);
   * console.log(arr.value);   // ['Nancy', null]
   * ```
   *
   * @param value Array of latest values for the controls
   * @param options Configure options that determine how the control propagates changes and
   * emits events after the value changes
   *
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
   * is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control
   * value is updated. When false, no events are emitted. The configuration options are passed to
   * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
   */
  patchValue(value, options = {}) {
    // Even though the `value` argument type doesn't allow `null` and `undefined` values, the
    // `patchValue` can be called recursively and inner data structures might have these values,
    // so we just ignore such cases when a field containing FormArray instance receives `null` or
    // `undefined` as a value.
    if (value == null /* both `null` and `undefined` */) return;
    value.forEach((newValue, index) => {
      if (this.at(index)) {
        this.at(index).patchValue(newValue, {
          onlySelf: true,
          emitEvent: options.emitEvent
        });
      }
    });
    this.updateValueAndValidity(options);
  }
  /**
   * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the
   * value of all descendants to null or null maps.
   *
   * You reset to a specific form state by passing in an array of states
   * that matches the structure of the control. The state is a standalone value
   * or a form state object with both a value and a disabled status.
   *
   * @usageNotes
   * ### Reset the values in a form array
   *
   * ```ts
   * const arr = new FormArray([
   *    new FormControl(),
   *    new FormControl()
   * ]);
   * arr.reset(['name', 'last name']);
   *
   * console.log(arr.value);  // ['name', 'last name']
   * ```
   *
   * ### Reset the values in a form array and the disabled status for the first control
   *
   * ```
   * arr.reset([
   *   {value: 'name', disabled: true},
   *   'last'
   * ]);
   *
   * console.log(arr.value);  // ['last']
   * console.log(arr.at(0).status);  // 'DISABLED'
   * ```
   *
   * @param value Array of values for the controls
   * @param options Configure options that determine how the control propagates changes and
   * emits events after the value changes
   *
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
   * is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is reset.
   * When false, no events are emitted.
   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
   * updateValueAndValidity} method.
   */
  reset(value = [], options = {}) {
    this._forEachChild((control, index) => {
      control.reset(value[index], {
        onlySelf: true,
        emitEvent: options.emitEvent
      });
    });
    this._updatePristine(options);
    this._updateTouched(options);
    this.updateValueAndValidity(options);
  }
  /**
   * The aggregate value of the array, including any disabled controls.
   *
   * Reports all values regardless of disabled status.
   */
  getRawValue() {
    return this.controls.map(control => control.getRawValue());
  }
  /**
   * Remove all controls in the `FormArray`.
   *
   * @param options Specifies whether this FormArray instance should emit events after all
   *     controls are removed.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when all controls
   * in this FormArray instance are removed. When false, no events are emitted.
   *
   * @usageNotes
   * ### Remove all elements from a FormArray
   *
   * ```ts
   * const arr = new FormArray([
   *    new FormControl(),
   *    new FormControl()
   * ]);
   * console.log(arr.length);  // 2
   *
   * arr.clear();
   * console.log(arr.length);  // 0
   * ```
   *
   * It's a simpler and more efficient alternative to removing all elements one by one:
   *
   * ```ts
   * const arr = new FormArray([
   *    new FormControl(),
   *    new FormControl()
   * ]);
   *
   * while (arr.length) {
   *    arr.removeAt(0);
   * }
   * ```
   */
  clear(options = {}) {
    if (this.controls.length < 1) return;
    this._forEachChild(control => control._registerOnCollectionChange(() => {}));
    this.controls.splice(0);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
  }
  /**
   * Adjusts a negative index by summing it with the length of the array. For very negative
   * indices, the result may remain negative.
   * @internal
   */
  _adjustIndex(index) {
    return index < 0 ? index + this.length : index;
  }
  /** @internal */
  _syncPendingControls() {
    let subtreeUpdated = this.controls.reduce((updated, child) => {
      return child._syncPendingControls() ? true : updated;
    }, false);
    if (subtreeUpdated) this.updateValueAndValidity({
      onlySelf: true
    });
    return subtreeUpdated;
  }
  /** @internal */
  _forEachChild(cb) {
    this.controls.forEach((control, index) => {
      cb(control, index);
    });
  }
  /** @internal */
  _updateValue() {
    this.value = this.controls.filter(control => control.enabled || this.disabled).map(control => control.value);
  }
  /** @internal */
  _anyControls(condition) {
    return this.controls.some(control => control.enabled && condition(control));
  }
  /** @internal */
  _setUpControls() {
    this._forEachChild(control => this._registerControl(control));
  }
  /** @internal */
  _allControlsDisabled() {
    for (const control of this.controls) {
      if (control.enabled) return false;
    }
    return this.controls.length > 0 || this.disabled;
  }
  _registerControl(control) {
    control.setParent(this);
    control._registerOnCollectionChange(this._onCollectionChange);
  }
  /** @internal */
  _find(name) {
    return this.at(name) ?? null;
  }
}
const UntypedFormArray = FormArray;
/**
 * @description
 * Asserts that the given control is an instance of `FormArray`
 *
 * @publicApi
 */
const isFormArray = control => control instanceof FormArray;
function isAbstractControlOptions(options) {
  return !!options && (options.asyncValidators !== undefined || options.validators !== undefined || options.updateOn !== undefined);
}
// clang-format on
/**
 * @description
 * Creates an `AbstractControl` from a user-specified configuration.
 *
 * The `FormBuilder` provides syntactic sugar that shortens creating instances of a
 * `FormControl`, `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to
 * build complex forms.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 *
 * @publicApi
 */
class FormBuilder {
  constructor() {
    this.useNonNullable = false;
  }
  /**
   * @description
   * Returns a FormBuilder in which automatically constructed `FormControl` elements
   * have `{nonNullable: true}` and are non-nullable.
   *
   * **Constructing non-nullable controls**
   *
   * When constructing a control, it will be non-nullable, and will reset to its initial value.
   *
   * ```ts
   * let nnfb = new FormBuilder().nonNullable;
   * let name = nnfb.control('Alex'); // FormControl<string>
   * name.reset();
   * console.log(name); // 'Alex'
   * ```
   *
   * **Constructing non-nullable groups or arrays**
   *
   * When constructing a group or array, all automatically created inner controls will be
   * non-nullable, and will reset to their initial values.
   *
   * ```ts
   * let nnfb = new FormBuilder().nonNullable;
   * let name = nnfb.group({who: 'Alex'}); // FormGroup<{who: FormControl<string>}>
   * name.reset();
   * console.log(name); // {who: 'Alex'}
   * ```
   * **Constructing *nullable* fields on groups or arrays**
   *
   * It is still possible to have a nullable field. In particular, any `FormControl` which is
   * *already* constructed will not be altered. For example:
   *
   * ```ts
   * let nnfb = new FormBuilder().nonNullable;
   * // FormGroup<{who: FormControl<string|null>}>
   * let name = nnfb.group({who: new FormControl('Alex')});
   * name.reset(); console.log(name); // {who: null}
   * ```
   *
   * Because the inner control is constructed explicitly by the caller, the builder has
   * no control over how it is created, and cannot exclude the `null`.
   */
  get nonNullable() {
    const nnfb = new FormBuilder();
    nnfb.useNonNullable = true;
    return nnfb;
  }
  group(controls, options = null) {
    const reducedControls = this._reduceControls(controls);
    let newOptions = {};
    if (isAbstractControlOptions(options)) {
      // `options` are `AbstractControlOptions`
      newOptions = options;
    } else if (options !== null) {
      // `options` are legacy form group options
      newOptions.validators = options.validator;
      newOptions.asyncValidators = options.asyncValidator;
    }
    return new FormGroup(reducedControls, newOptions);
  }
  /**
   * @description
   * Constructs a new `FormRecord` instance. Accepts a single generic argument, which is an object
   * containing all the keys and corresponding inner control types.
   *
   * @param controls A collection of child controls. The key for each child is the name
   * under which it is registered.
   *
   * @param options Configuration options object for the `FormRecord`. The object should have the
   * `AbstractControlOptions` type and might contain the following fields:
   * * `validators`: A synchronous validator function, or an array of validator functions.
   * * `asyncValidators`: A single async validator or array of async validator functions.
   * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur'
   * | submit').
   */
  record(controls, options = null) {
    const reducedControls = this._reduceControls(controls);
    // Cast to `any` because the inferred types are not as specific as Element.
    return new FormRecord(reducedControls, options);
  }
  /**
   * @description
   * Constructs a new `FormControl` with the given state, validators and options. Sets
   * `{nonNullable: true}` in the options to get a non-nullable control. Otherwise, the
   * control will be nullable. Accepts a single generic argument, which is the type  of the
   * control's value.
   *
   * @param formState Initializes the control with an initial state value, or
   * with an object that contains both a value and a disabled status.
   *
   * @param validatorOrOpts A synchronous validator function, or an array of
   * such functions, or a `FormControlOptions` object that contains
   * validation functions and a validation trigger.
   *
   * @param asyncValidator A single async validator or array of async validator
   * functions.
   *
   * @usageNotes
   *
   * ### Initialize a control as disabled
   *
   * The following example returns a control with an initial value in a disabled state.
   *
   * <code-example path="forms/ts/formBuilder/form_builder_example.ts" region="disabled-control">
   * </code-example>
   */
  control(formState, validatorOrOpts, asyncValidator) {
    let newOptions = {};
    if (!this.useNonNullable) {
      return new FormControl(formState, validatorOrOpts, asyncValidator);
    }
    if (isAbstractControlOptions(validatorOrOpts)) {
      // If the second argument is options, then they are copied.
      newOptions = validatorOrOpts;
    } else {
      // If the other arguments are validators, they are copied into an options object.
      newOptions.validators = validatorOrOpts;
      newOptions.asyncValidators = asyncValidator;
    }
    return new FormControl(formState, {
      ...newOptions,
      nonNullable: true
    });
  }
  /**
   * Constructs a new `FormArray` from the given array of configurations,
   * validators and options. Accepts a single generic argument, which is the type of each control
   * inside the array.
   *
   * @param controls An array of child controls or control configs. Each child control is given an
   *     index when it is registered.
   *
   * @param validatorOrOpts A synchronous validator function, or an array of such functions, or an
   *     `AbstractControlOptions` object that contains
   * validation functions and a validation trigger.
   *
   * @param asyncValidator A single async validator or array of async validator functions.
   */
  array(controls, validatorOrOpts, asyncValidator) {
    const createdControls = controls.map(c => this._createControl(c));
    // Cast to `any` because the inferred types are not as specific as Element.
    return new FormArray(createdControls, validatorOrOpts, asyncValidator);
  }
  /** @internal */
  _reduceControls(controls) {
    const createdControls = {};
    Object.keys(controls).forEach(controlName => {
      createdControls[controlName] = this._createControl(controls[controlName]);
    });
    return createdControls;
  }
  /** @internal */
  _createControl(controls) {
    if (controls instanceof FormControl) {
      return controls;
    } else if (controls instanceof AbstractControl) {
      // A control; just return it
      return controls;
    } else if (Array.isArray(controls)) {
      // ControlConfig Tuple
      const value = controls[0];
      const validator = controls.length > 1 ? controls[1] : null;
      const asyncValidator = controls.length > 2 ? controls[2] : null;
      return this.control(value, validator, asyncValidator);
    } else {
      // T or FormControlState<T>
      return this.control(controls);
    }
  }
}
FormBuilder.ɵfac = function FormBuilder_Factory(t) {
  return new (t || FormBuilder)();
};
FormBuilder.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: FormBuilder,
  factory: FormBuilder.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormBuilder, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();
/**
 * @description
 * `NonNullableFormBuilder` is similar to {@link FormBuilder}, but automatically constructed
 * {@link FormControl} elements have `{nonNullable: true}` and are non-nullable.
 *
 * @publicApi
 */
class NonNullableFormBuilder {}
NonNullableFormBuilder.ɵfac = function NonNullableFormBuilder_Factory(t) {
  return new (t || NonNullableFormBuilder)();
};
NonNullableFormBuilder.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: NonNullableFormBuilder,
  factory: function () {
    return (() => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(FormBuilder).nonNullable)();
  },
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NonNullableFormBuilder, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root',
      useFactory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(FormBuilder).nonNullable
    }]
  }], null, null);
})();
/**
 * UntypedFormBuilder is the same as `FormBuilder`, but it provides untyped controls.
 */
class UntypedFormBuilder extends FormBuilder {
  group(controlsConfig, options = null) {
    return super.group(controlsConfig, options);
  }
  /**
   * Like `FormBuilder#control`, except the resulting control is untyped.
   */
  control(formState, validatorOrOpts, asyncValidator) {
    return super.control(formState, validatorOrOpts, asyncValidator);
  }
  /**
   * Like `FormBuilder#array`, except the resulting array is untyped.
   */
  array(controlsConfig, validatorOrOpts, asyncValidator) {
    return super.array(controlsConfig, validatorOrOpts, asyncValidator);
  }
}
UntypedFormBuilder.ɵfac = /* @__PURE__ */function () {
  let ɵUntypedFormBuilder_BaseFactory;
  return function UntypedFormBuilder_Factory(t) {
    return (ɵUntypedFormBuilder_BaseFactory || (ɵUntypedFormBuilder_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](UntypedFormBuilder)))(t || UntypedFormBuilder);
  };
}();
UntypedFormBuilder.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: UntypedFormBuilder,
  factory: UntypedFormBuilder.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](UntypedFormBuilder, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();

/**
 * @module
 * @description
 * Entry point for all public APIs of the forms package.
 */
/**
 * @publicApi
 */
const VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Version('15.2.4');

/**
 * Exports the required providers and directives for template-driven forms,
 * making them available for import by NgModules that import this module.
 *
 * Providers associated with this module:
 * * `RadioControlRegistry`
 *
 * @see [Forms Overview](/guide/forms-overview)
 * @see [Template-driven Forms Guide](/guide/forms)
 *
 * @publicApi
 */
class FormsModule {
  /**
   * @description
   * Provides options for configuring the forms module.
   *
   * @param opts An object of configuration options
   * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more
   * correct, or to only call it `whenDisabled`, which is the legacy behavior.
   */
  static withConfig(opts) {
    return {
      ngModule: FormsModule,
      providers: [{
        provide: CALL_SET_DISABLED_STATE,
        useValue: opts.callSetDisabledState ?? setDisabledStateDefault
      }]
    };
  }
}
FormsModule.ɵfac = function FormsModule_Factory(t) {
  return new (t || FormsModule)();
};
FormsModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: FormsModule
});
FormsModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [ɵInternalFormsSharedModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FormsModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: TEMPLATE_DRIVEN_DIRECTIVES,
      exports: [ɵInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
    }]
  }], null, null);
})();
/**
 * Exports the required infrastructure and directives for reactive forms,
 * making them available for import by NgModules that import this module.
 *
 * Providers associated with this module:
 * * `FormBuilder`
 * * `RadioControlRegistry`
 *
 * @see [Forms Overview](guide/forms-overview)
 * @see [Reactive Forms Guide](guide/reactive-forms)
 *
 * @publicApi
 */
class ReactiveFormsModule {
  /**
   * @description
   * Provides options for configuring the reactive forms module.
   *
   * @param opts An object of configuration options
   * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`
   * binding is used with reactive form directives.
   * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more
   * correct, or to only call it `whenDisabled`, which is the legacy behavior.
   */
  static withConfig(opts) {
    return {
      ngModule: ReactiveFormsModule,
      providers: [{
        provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,
        useValue: opts.warnOnNgModelWithFormControl ?? 'always'
      }, {
        provide: CALL_SET_DISABLED_STATE,
        useValue: opts.callSetDisabledState ?? setDisabledStateDefault
      }]
    };
  }
}
ReactiveFormsModule.ɵfac = function ReactiveFormsModule_Factory(t) {
  return new (t || ReactiveFormsModule)();
};
ReactiveFormsModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: ReactiveFormsModule
});
ReactiveFormsModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [ɵInternalFormsSharedModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ReactiveFormsModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [REACTIVE_DRIVEN_DIRECTIVES],
      exports: [ɵInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
    }]
  }], null, null);
})();

/**
 * @module
 * @description
 * This module is used for handling user input, by defining and building a `FormGroup` that
 * consists of `FormControl` objects, and mapping them onto the DOM. `FormControl`
 * objects can then be used to read information from the form DOM elements.
 *
 * Forms providers are not included in default providers; you must import these providers
 * explicitly.
 */

/**
 * @module
 * @description
 * Entry point for all public APIs of this package.
 */
// This file only reexports content of the `src` folder. Keep it that way.

// This file is not used to build this module. It is only used during editing

/**
 * Generated bundle index. Do not edit.
 */



/***/ }),

/***/ 8008:
/*!**********************************************************************!*\
  !*** ./node_modules/@simpl/element-ng/fesm2020/simpl-element-ng.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AXIS_X": () => (/* binding */ AXIS_X),
/* harmony export */   "AXIS_Y": () => (/* binding */ AXIS_Y),
/* harmony export */   "AlertDialogResult": () => (/* binding */ AlertDialogResult),
/* harmony export */   "BOOTSTRAP_BREAKPOINTS": () => (/* binding */ BOOTSTRAP_BREAKPOINTS),
/* harmony export */   "BOUNDING_RECT_WINDOW": () => (/* binding */ BOUNDING_RECT_WINDOW),
/* harmony export */   "BlinkService": () => (/* binding */ BlinkService),
/* harmony export */   "CheckboxClickEventArgs": () => (/* binding */ CheckboxClickEventArgs),
/* harmony export */   "ClickEventArgs": () => (/* binding */ ClickEventArgs),
/* harmony export */   "ClickEventArgs2": () => (/* binding */ ClickEventArgs2),
/* harmony export */   "ConfirmationDialogResult": () => (/* binding */ ConfirmationDialogResult),
/* harmony export */   "DEFAULT_CHILDREN_INDENTATION": () => (/* binding */ DEFAULT_CHILDREN_INDENTATION),
/* harmony export */   "DEFAULT_TREE_ICON_SET": () => (/* binding */ DEFAULT_TREE_ICON_SET),
/* harmony export */   "DateFormat": () => (/* binding */ DateFormat),
/* harmony export */   "DeleteConfirmationDialogResult": () => (/* binding */ DeleteConfirmationDialogResult),
/* harmony export */   "ELEMENT_THEME_NAME": () => (/* binding */ ELEMENT_THEME_NAME),
/* harmony export */   "EditAbortDialogResult": () => (/* binding */ EditAbortDialogResult),
/* harmony export */   "FolderStateEventArgs": () => (/* binding */ FolderStateEventArgs),
/* harmony export */   "ItemsVirtualizedArgs": () => (/* binding */ ItemsVirtualizedArgs),
/* harmony export */   "LoadChildrenEventArgs": () => (/* binding */ LoadChildrenEventArgs),
/* harmony export */   "MeridianDesignation": () => (/* binding */ MeridianDesignation),
/* harmony export */   "ModalRef": () => (/* binding */ ModalRef),
/* harmony export */   "PopoverComponent": () => (/* binding */ PopoverComponent),
/* harmony export */   "ROOT_LEVEL": () => (/* binding */ ROOT_LEVEL),
/* harmony export */   "Required": () => (/* binding */ Required),
/* harmony export */   "ResizeObserverService": () => (/* binding */ ResizeObserverService),
/* harmony export */   "ResultDetailStepState": () => (/* binding */ ResultDetailStepState),
/* harmony export */   "SI_DATATABLE_CONFIG": () => (/* binding */ SI_DATATABLE_CONFIG),
/* harmony export */   "SI_LINK_DEFAULT_NAVIGATION_EXTRA": () => (/* binding */ SI_LINK_DEFAULT_NAVIGATION_EXTRA),
/* harmony export */   "SI_LOCALE_CONFIG": () => (/* binding */ SI_LOCALE_CONFIG),
/* harmony export */   "SI_LOCALE_LOCAL_STORAGE_KEY": () => (/* binding */ SI_LOCALE_LOCAL_STORAGE_KEY),
/* harmony export */   "SI_LOCALE_STORE": () => (/* binding */ SI_LOCALE_STORE),
/* harmony export */   "SI_THEME_LOCAL_STORAGE_KEY": () => (/* binding */ SI_THEME_LOCAL_STORAGE_KEY),
/* harmony export */   "SI_TOAST_AUTO_HIDE_DELAY": () => (/* binding */ SI_TOAST_AUTO_HIDE_DELAY),
/* harmony export */   "SI_UI_STATES_STORAGE_KEY": () => (/* binding */ SI_UI_STATES_STORAGE_KEY),
/* harmony export */   "STATUS_ICON": () => (/* binding */ STATUS_ICON),
/* harmony export */   "ScrollbarHelper": () => (/* binding */ ScrollbarHelper),
/* harmony export */   "SiAboutComponent": () => (/* binding */ SiAboutComponent),
/* harmony export */   "SiAboutModule": () => (/* binding */ SiAboutModule),
/* harmony export */   "SiAccordionComponent": () => (/* binding */ SiAccordionComponent),
/* harmony export */   "SiAccordionHCollapseService": () => (/* binding */ SiAccordionHCollapseService),
/* harmony export */   "SiAccordionModule": () => (/* binding */ SiAccordionModule),
/* harmony export */   "SiAccordionService": () => (/* binding */ SiAccordionService),
/* harmony export */   "SiActionDialogModule": () => (/* binding */ SiActionDialogModule),
/* harmony export */   "SiActionDialogService": () => (/* binding */ SiActionDialogService),
/* harmony export */   "SiAlertDialogComponent": () => (/* binding */ SiAlertDialogComponent),
/* harmony export */   "SiAriaCurrentDirective": () => (/* binding */ SiAriaCurrentDirective),
/* harmony export */   "SiAriaCurrentModule": () => (/* binding */ SiAriaCurrentModule),
/* harmony export */   "SiAutoCollapsableListAdditionalContentDirective": () => (/* binding */ SiAutoCollapsableListAdditionalContentDirective),
/* harmony export */   "SiAutoCollapsableListDirective": () => (/* binding */ SiAutoCollapsableListDirective),
/* harmony export */   "SiAutoCollapsableListItemDirective": () => (/* binding */ SiAutoCollapsableListItemDirective),
/* harmony export */   "SiAutoCollapsableListMeasurable": () => (/* binding */ SiAutoCollapsableListMeasurable),
/* harmony export */   "SiAutoCollapsableListModule": () => (/* binding */ SiAutoCollapsableListModule),
/* harmony export */   "SiAutoCollapsableListOverflowItemDirective": () => (/* binding */ SiAutoCollapsableListOverflowItemDirective),
/* harmony export */   "SiBreadcrumbComponent": () => (/* binding */ SiBreadcrumbComponent),
/* harmony export */   "SiBreadcrumbModule": () => (/* binding */ SiBreadcrumbModule),
/* harmony export */   "SiCardComponent": () => (/* binding */ SiCardComponent),
/* harmony export */   "SiCardModule": () => (/* binding */ SiCardModule),
/* harmony export */   "SiCircleStatusComponent": () => (/* binding */ SiCircleStatusComponent),
/* harmony export */   "SiCircleStatusModule": () => (/* binding */ SiCircleStatusModule),
/* harmony export */   "SiCollapsiblePanelComponent": () => (/* binding */ SiCollapsiblePanelComponent),
/* harmony export */   "SiColumnSelectionDialogComponent": () => (/* binding */ SiColumnSelectionDialogComponent),
/* harmony export */   "SiColumnSelectionDialogService": () => (/* binding */ SiColumnSelectionDialogService),
/* harmony export */   "SiColumnSelectionModalModule": () => (/* binding */ SiColumnSelectionModalModule),
/* harmony export */   "SiComfortScoreComponent": () => (/* binding */ SiComfortScoreComponent),
/* harmony export */   "SiComfortScoreModule": () => (/* binding */ SiComfortScoreModule),
/* harmony export */   "SiComfortScoreStatusComponent": () => (/* binding */ SiComfortScoreStatusComponent),
/* harmony export */   "SiCommissioningStatusComponent": () => (/* binding */ SiCommissioningStatusComponent),
/* harmony export */   "SiCommissioningStatusModule": () => (/* binding */ SiCommissioningStatusModule),
/* harmony export */   "SiConfirmationDialogComponent": () => (/* binding */ SiConfirmationDialogComponent),
/* harmony export */   "SiConnectionStrengthComponent": () => (/* binding */ SiConnectionStrengthComponent),
/* harmony export */   "SiConnectionStrengthModule": () => (/* binding */ SiConnectionStrengthModule),
/* harmony export */   "SiContentActionBarComponent": () => (/* binding */ SiContentActionBarComponent),
/* harmony export */   "SiContentActionBarMenuComponent": () => (/* binding */ SiContentActionBarMenuComponent),
/* harmony export */   "SiContentActionBarModule": () => (/* binding */ SiContentActionBarModule),
/* harmony export */   "SiDatatableInteractionDirective": () => (/* binding */ SiDatatableInteractionDirective),
/* harmony export */   "SiDatatableModule": () => (/* binding */ SiDatatableModule),
/* harmony export */   "SiDateInputDirective": () => (/* binding */ SiDateInputDirective),
/* harmony export */   "SiDateRangeComponent": () => (/* binding */ SiDateRangeComponent),
/* harmony export */   "SiDatepickerComponent": () => (/* binding */ SiDatepickerComponent),
/* harmony export */   "SiDatepickerDirective": () => (/* binding */ SiDatepickerDirective),
/* harmony export */   "SiDatepickerModule": () => (/* binding */ SiDatepickerModule),
/* harmony export */   "SiDatepickerOverlayComponent": () => (/* binding */ SiDatepickerOverlayComponent),
/* harmony export */   "SiDefaultLocaleStore": () => (/* binding */ SiDefaultLocaleStore),
/* harmony export */   "SiDefaultThemeStore": () => (/* binding */ SiDefaultThemeStore),
/* harmony export */   "SiDeleteConfirmationDialogComponent": () => (/* binding */ SiDeleteConfirmationDialogComponent),
/* harmony export */   "SiDropdownContainerComponent": () => (/* binding */ SiDropdownContainerComponent),
/* harmony export */   "SiDropdownDirective": () => (/* binding */ SiDropdownDirective),
/* harmony export */   "SiDropdownMenuDirective": () => (/* binding */ SiDropdownMenuDirective),
/* harmony export */   "SiDropdownModule": () => (/* binding */ SiDropdownModule),
/* harmony export */   "SiDropdownToggleDirective": () => (/* binding */ SiDropdownToggleDirective),
/* harmony export */   "SiEditAbortDialogComponent": () => (/* binding */ SiEditAbortDialogComponent),
/* harmony export */   "SiElectrontitlebarComponent": () => (/* binding */ SiElectrontitlebarComponent),
/* harmony export */   "SiElectrontitlebarModule": () => (/* binding */ SiElectrontitlebarModule),
/* harmony export */   "SiEmptyStateComponent": () => (/* binding */ SiEmptyStateComponent),
/* harmony export */   "SiEmptyStateModule": () => (/* binding */ SiEmptyStateModule),
/* harmony export */   "SiFileDropzoneComponent": () => (/* binding */ SiFileDropzoneComponent),
/* harmony export */   "SiFileUploaderComponent": () => (/* binding */ SiFileUploaderComponent),
/* harmony export */   "SiFileUploaderModule": () => (/* binding */ SiFileUploaderModule),
/* harmony export */   "SiFilterBarComponent": () => (/* binding */ SiFilterBarComponent),
/* harmony export */   "SiFilterBarModule": () => (/* binding */ SiFilterBarModule),
/* harmony export */   "SiFilterPillComponent": () => (/* binding */ SiFilterPillComponent),
/* harmony export */   "SiFilteredSearchComponent": () => (/* binding */ SiFilteredSearchComponent),
/* harmony export */   "SiFilteredSearchModule": () => (/* binding */ SiFilteredSearchModule),
/* harmony export */   "SiFooterComponent": () => (/* binding */ SiFooterComponent),
/* harmony export */   "SiFooterModule": () => (/* binding */ SiFooterModule),
/* harmony export */   "SiFormContainerComponent": () => (/* binding */ SiFormContainerComponent),
/* harmony export */   "SiFormItemComponent": () => (/* binding */ SiFormItemComponent),
/* harmony export */   "SiFormModule": () => (/* binding */ SiFormModule),
/* harmony export */   "SiIconComponent": () => (/* binding */ SiIconComponent),
/* harmony export */   "SiIconModule": () => (/* binding */ SiIconModule),
/* harmony export */   "SiInlineNotificationComponent": () => (/* binding */ SiInlineNotificationComponent),
/* harmony export */   "SiInlineNotificationModule": () => (/* binding */ SiInlineNotificationModule),
/* harmony export */   "SiLandingPageComponent": () => (/* binding */ SiLandingPageComponent),
/* harmony export */   "SiLandingPageModule": () => (/* binding */ SiLandingPageModule),
/* harmony export */   "SiLanguageSwitcherComponent": () => (/* binding */ SiLanguageSwitcherComponent),
/* harmony export */   "SiLanguageSwitcherModule": () => (/* binding */ SiLanguageSwitcherModule),
/* harmony export */   "SiLinkActionService": () => (/* binding */ SiLinkActionService),
/* harmony export */   "SiLinkDirective": () => (/* binding */ SiLinkDirective),
/* harmony export */   "SiLinkModule": () => (/* binding */ SiLinkModule),
/* harmony export */   "SiListInteractionDirective": () => (/* binding */ SiListInteractionDirective),
/* harmony export */   "SiListInteractionItemDirective": () => (/* binding */ SiListInteractionItemDirective),
/* harmony export */   "SiListInteractionModule": () => (/* binding */ SiListInteractionModule),
/* harmony export */   "SiListInteractionService": () => (/* binding */ SiListInteractionService),
/* harmony export */   "SiLoadingSpinnerComponent": () => (/* binding */ SiLoadingSpinnerComponent),
/* harmony export */   "SiLoadingSpinnerModule": () => (/* binding */ SiLoadingSpinnerModule),
/* harmony export */   "SiLocaleId": () => (/* binding */ SiLocaleId),
/* harmony export */   "SiLocaleService": () => (/* binding */ SiLocaleService),
/* harmony export */   "SiLocaleStore": () => (/* binding */ SiLocaleStore),
/* harmony export */   "SiLocalizationModule": () => (/* binding */ SiLocalizationModule),
/* harmony export */   "SiMasterDetailContainerComponent": () => (/* binding */ SiMasterDetailContainerComponent),
/* harmony export */   "SiMasterDetailContainerModule": () => (/* binding */ SiMasterDetailContainerModule),
/* harmony export */   "SiMenuComponent": () => (/* binding */ SiMenuComponent),
/* harmony export */   "SiMenuItemComponent": () => (/* binding */ SiMenuItemComponent),
/* harmony export */   "SiMenuModule": () => (/* binding */ SiMenuModule),
/* harmony export */   "SiModalComponent": () => (/* binding */ SiModalComponent),
/* harmony export */   "SiModalModule": () => (/* binding */ SiModalModule),
/* harmony export */   "SiModalService": () => (/* binding */ SiModalService),
/* harmony export */   "SiNavbarBrandComponent": () => (/* binding */ SiNavbarBrandComponent),
/* harmony export */   "SiNavbarItemComponent": () => (/* binding */ SiNavbarItemComponent),
/* harmony export */   "SiNavbarModule": () => (/* binding */ SiNavbarModule),
/* harmony export */   "SiNavbarPrimaryComponent": () => (/* binding */ SiNavbarPrimaryComponent),
/* harmony export */   "SiNavbarProfileMenuComponent": () => (/* binding */ SiNavbarProfileMenuComponent),
/* harmony export */   "SiNavbarSecondaryComponent": () => (/* binding */ SiNavbarSecondaryComponent),
/* harmony export */   "SiNavbarSecondaryModule": () => (/* binding */ SiNavbarSecondaryModule),
/* harmony export */   "SiNavbarVerticalComponent": () => (/* binding */ SiNavbarVerticalComponent),
/* harmony export */   "SiNavbarVerticalFlyoutComponent": () => (/* binding */ SiNavbarVerticalFlyoutComponent),
/* harmony export */   "SiNavbarVerticalItemComponent": () => (/* binding */ SiNavbarVerticalItemComponent),
/* harmony export */   "SiNavbarVerticalModule": () => (/* binding */ SiNavbarVerticalModule),
/* harmony export */   "SiNumberInputComponent": () => (/* binding */ SiNumberInputComponent),
/* harmony export */   "SiNumberInputModule": () => (/* binding */ SiNumberInputModule),
/* harmony export */   "SiPaginationComponent": () => (/* binding */ SiPaginationComponent),
/* harmony export */   "SiPaginationModule": () => (/* binding */ SiPaginationModule),
/* harmony export */   "SiPasswordStrengthComponent": () => (/* binding */ SiPasswordStrengthComponent),
/* harmony export */   "SiPasswordStrengthDirective": () => (/* binding */ SiPasswordStrengthDirective),
/* harmony export */   "SiPasswordStrengthModule": () => (/* binding */ SiPasswordStrengthModule),
/* harmony export */   "SiPopoverDirective": () => (/* binding */ SiPopoverDirective),
/* harmony export */   "SiPopoverModule": () => (/* binding */ SiPopoverModule),
/* harmony export */   "SiProgressbarComponent": () => (/* binding */ SiProgressbarComponent),
/* harmony export */   "SiProgressbarModule": () => (/* binding */ SiProgressbarModule),
/* harmony export */   "SiPromptDialogButtonsComponent": () => (/* binding */ SiPromptDialogButtonsComponent),
/* harmony export */   "SiPromptDialogButtonsModule": () => (/* binding */ SiPromptDialogButtonsModule),
/* harmony export */   "SiResizeObserverDirective": () => (/* binding */ SiResizeObserverDirective),
/* harmony export */   "SiResizeObserverModule": () => (/* binding */ SiResizeObserverModule),
/* harmony export */   "SiResponsiveContainerDirective": () => (/* binding */ SiResponsiveContainerDirective),
/* harmony export */   "SiResultDetailsListComponent": () => (/* binding */ SiResultDetailsListComponent),
/* harmony export */   "SiResultDetailsListModule": () => (/* binding */ SiResultDetailsListModule),
/* harmony export */   "SiRightPanelComponent": () => (/* binding */ SiRightPanelComponent),
/* harmony export */   "SiRightPanelContentComponent": () => (/* binding */ SiRightPanelContentComponent),
/* harmony export */   "SiRightPanelModule": () => (/* binding */ SiRightPanelModule),
/* harmony export */   "SiSearchBarComponent": () => (/* binding */ SiSearchBarComponent),
/* harmony export */   "SiSearchBarModule": () => (/* binding */ SiSearchBarModule),
/* harmony export */   "SiSelectComplexOptionsDirective": () => (/* binding */ SiSelectComplexOptionsDirective),
/* harmony export */   "SiSelectComponent": () => (/* binding */ SiSelectComponent),
/* harmony export */   "SiSelectGroupTemplateDirective": () => (/* binding */ SiSelectGroupTemplateDirective),
/* harmony export */   "SiSelectModule": () => (/* binding */ SiSelectModule),
/* harmony export */   "SiSelectMultiValueDirective": () => (/* binding */ SiSelectMultiValueDirective),
/* harmony export */   "SiSelectOptionTemplateDirective": () => (/* binding */ SiSelectOptionTemplateDirective),
/* harmony export */   "SiSelectSimpleOptionsDirective": () => (/* binding */ SiSelectSimpleOptionsDirective),
/* harmony export */   "SiSelectSingleValueDirective": () => (/* binding */ SiSelectSingleValueDirective),
/* harmony export */   "SiSidePanelComponent": () => (/* binding */ SiSidePanelComponent),
/* harmony export */   "SiSidePanelContentComponent": () => (/* binding */ SiSidePanelContentComponent),
/* harmony export */   "SiSidePanelModule": () => (/* binding */ SiSidePanelModule),
/* harmony export */   "SiSidePanelService": () => (/* binding */ SiSidePanelService),
/* harmony export */   "SiSliderComponent": () => (/* binding */ SiSliderComponent),
/* harmony export */   "SiSliderModule": () => (/* binding */ SiSliderModule),
/* harmony export */   "SiSortBarComponent": () => (/* binding */ SiSortBarComponent),
/* harmony export */   "SiSortBarModule": () => (/* binding */ SiSortBarModule),
/* harmony export */   "SiSplitComponent": () => (/* binding */ SiSplitComponent),
/* harmony export */   "SiSplitModule": () => (/* binding */ SiSplitModule),
/* harmony export */   "SiSplitPartComponent": () => (/* binding */ SiSplitPartComponent),
/* harmony export */   "SiStatusBarComponent": () => (/* binding */ SiStatusBarComponent),
/* harmony export */   "SiStatusBarItemComponent": () => (/* binding */ SiStatusBarItemComponent),
/* harmony export */   "SiStatusBarModule": () => (/* binding */ SiStatusBarModule),
/* harmony export */   "SiSwitchComponent": () => (/* binding */ SiSwitchComponent),
/* harmony export */   "SiSwitchModule": () => (/* binding */ SiSwitchModule),
/* harmony export */   "SiTabComponent": () => (/* binding */ SiTabComponent),
/* harmony export */   "SiTabsModule": () => (/* binding */ SiTabsModule),
/* harmony export */   "SiTabsetComponent": () => (/* binding */ SiTabsetComponent),
/* harmony export */   "SiThemeService": () => (/* binding */ SiThemeService),
/* harmony export */   "SiThemeStore": () => (/* binding */ SiThemeStore),
/* harmony export */   "SiThresholdComponent": () => (/* binding */ SiThresholdComponent),
/* harmony export */   "SiThresholdModule": () => (/* binding */ SiThresholdModule),
/* harmony export */   "SiTimepickerComponent": () => (/* binding */ SiTimepickerComponent),
/* harmony export */   "SiToastNotificationComponent": () => (/* binding */ SiToastNotificationComponent),
/* harmony export */   "SiToastNotificationDrawerComponent": () => (/* binding */ SiToastNotificationDrawerComponent),
/* harmony export */   "SiToastNotificationModule": () => (/* binding */ SiToastNotificationModule),
/* harmony export */   "SiToastNotificationService": () => (/* binding */ SiToastNotificationService),
/* harmony export */   "SiTooltipDirective": () => (/* binding */ SiTooltipDirective),
/* harmony export */   "SiTooltipModule": () => (/* binding */ SiTooltipModule),
/* harmony export */   "SiTranslateModule": () => (/* binding */ SiTranslateModule),
/* harmony export */   "SiTranslatePipe": () => (/* binding */ SiTranslatePipe),
/* harmony export */   "SiTranslateService": () => (/* binding */ SiTranslateService),
/* harmony export */   "SiTranslateServiceBuilder": () => (/* binding */ SiTranslateServiceBuilder),
/* harmony export */   "SiTreeViewComponent": () => (/* binding */ SiTreeViewComponent),
/* harmony export */   "SiTreeViewConverterService": () => (/* binding */ SiTreeViewConverterService),
/* harmony export */   "SiTreeViewItemComponent": () => (/* binding */ SiTreeViewItemComponent),
/* harmony export */   "SiTreeViewItemHeightService": () => (/* binding */ SiTreeViewItemHeightService),
/* harmony export */   "SiTreeViewItemTemplateDirective": () => (/* binding */ SiTreeViewItemTemplateDirective),
/* harmony export */   "SiTreeViewModule": () => (/* binding */ SiTreeViewModule),
/* harmony export */   "SiTreeViewService": () => (/* binding */ SiTreeViewService),
/* harmony export */   "SiTreeViewVirtualizationService": () => (/* binding */ SiTreeViewVirtualizationService),
/* harmony export */   "SiTypeaheadComponent": () => (/* binding */ SiTypeaheadComponent),
/* harmony export */   "SiTypeaheadDirective": () => (/* binding */ SiTypeaheadDirective),
/* harmony export */   "SiTypeaheadModule": () => (/* binding */ SiTypeaheadModule),
/* harmony export */   "SiUIStateService": () => (/* binding */ SiUIStateService),
/* harmony export */   "SiUnauthorizedPageComponent": () => (/* binding */ SiUnauthorizedPageComponent),
/* harmony export */   "SiUnauthorizedPageModule": () => (/* binding */ SiUnauthorizedPageModule),
/* harmony export */   "SiWizardComponent": () => (/* binding */ SiWizardComponent),
/* harmony export */   "SiWizardModule": () => (/* binding */ SiWizardModule),
/* harmony export */   "SiWizardStepComponent": () => (/* binding */ SiWizardStepComponent),
/* harmony export */   "SimplElementNgModule": () => (/* binding */ SimplElementNgModule),
/* harmony export */   "TextMeasureService": () => (/* binding */ TextMeasureService),
/* harmony export */   "ThemeSwitcherService": () => (/* binding */ ThemeSwitcherService),
/* harmony export */   "TimeFormat": () => (/* binding */ TimeFormat),
/* harmony export */   "ToLabelPipe": () => (/* binding */ ToLabelPipe),
/* harmony export */   "TooltipComponent": () => (/* binding */ TooltipComponent),
/* harmony export */   "addChildItem": () => (/* binding */ addChildItem),
/* harmony export */   "areAnimationsDisabled": () => (/* binding */ areAnimationsDisabled),
/* harmony export */   "boxClicked": () => (/* binding */ boxClicked),
/* harmony export */   "childrenLoaded": () => (/* binding */ childrenLoaded),
/* harmony export */   "collapse": () => (/* binding */ collapse),
/* harmony export */   "correctKeyRTL": () => (/* binding */ correctKeyRTL),
/* harmony export */   "deleteItem": () => (/* binding */ deleteItem),
/* harmony export */   "doFolderStateChange": () => (/* binding */ doFolderStateChange),
/* harmony export */   "elementTheme": () => (/* binding */ elementTheme),
/* harmony export */   "enableCheckboxRecursive": () => (/* binding */ enableCheckboxRecursive),
/* harmony export */   "enableOptionboxRecursive": () => (/* binding */ enableOptionboxRecursive),
/* harmony export */   "expand": () => (/* binding */ expand),
/* harmony export */   "expandRecursive": () => (/* binding */ expandRecursive),
/* harmony export */   "getBrowserCultureLanguage": () => (/* binding */ getBrowserCultureLanguage),
/* harmony export */   "getBrowserLanguage": () => (/* binding */ getBrowserLanguage),
/* harmony export */   "getContentPositionString": () => (/* binding */ getContentPositionString),
/* harmony export */   "getDatepickerFormat": () => (/* binding */ getDatepickerFormat),
/* harmony export */   "hasChildren": () => (/* binding */ hasChildren),
/* harmony export */   "isRTL": () => (/* binding */ isRTL),
/* harmony export */   "parentCountRecursive": () => (/* binding */ parentCountRecursive),
/* harmony export */   "removeUndefinedState": () => (/* binding */ removeUndefinedState),
/* harmony export */   "resetActive": () => (/* binding */ resetActive),
/* harmony export */   "resolveReference": () => (/* binding */ resolveReference),
/* harmony export */   "responsivelyCheckDirection": () => (/* binding */ responsivelyCheckDirection),
/* harmony export */   "runsInElectron": () => (/* binding */ runsInElectron),
/* harmony export */   "selectItemsBetween": () => (/* binding */ selectItemsBetween),
/* harmony export */   "selectMenuItemById": () => (/* binding */ selectMenuItemById),
/* harmony export */   "selectRecursive": () => (/* binding */ selectRecursive),
/* harmony export */   "setActive": () => (/* binding */ setActive),
/* harmony export */   "setBoxStateRecursive": () => (/* binding */ setBoxStateRecursive),
/* harmony export */   "setSelectable": () => (/* binding */ setSelectable)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ 9196);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 116);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 635);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ 8977);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ 8951);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ 8574);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs/operators */ 6319);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs/operators */ 1203);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs/operators */ 4874);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs/operators */ 2673);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! rxjs/operators */ 1339);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! rxjs/operators */ 9337);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! rxjs/operators */ 9295);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! rxjs/operators */ 5004);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! rxjs/operators */ 155);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! rxjs/operators */ 7260);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! rxjs/operators */ 1989);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! rxjs/operators */ 8504);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! rxjs/operators */ 8728);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ 4666);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 833);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 6317);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ 8947);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ 745);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs */ 6562);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs */ 5971);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs */ 228);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! rxjs */ 6646);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! rxjs */ 3280);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! rxjs */ 6067);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! rxjs */ 6078);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! rxjs */ 4437);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! rxjs */ 6936);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! rxjs */ 5474);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! rxjs */ 591);
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/cdk/coercion */ 8971);
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @angular/animations */ 4851);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @angular/router */ 124);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @angular/forms */ 2508);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! tslib */ 4929);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @angular/common/http */ 8987);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @angular/platform-browser */ 4497);
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @angular/cdk/a11y */ 4218);
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @angular/cdk/overlay */ 5895);
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @angular/cdk/portal */ 7520);
/* harmony import */ var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @angular/cdk/drag-drop */ 7727);
/* harmony import */ var _angular_cdk_listbox__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @angular/cdk/listbox */ 6840);




























/**
 * A service wrapping `ResizeObserver`. This is a service for those reasons:
 * - only one `ResizeObserver` should be used for performance reason.
 * - For Angular change detection to work, explicity `ngZone` calls are necessary
 * - Observable stream
 */
function SiSplitPartComponent_div_0_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", ctx_r3.statusContainerStyle);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r3.headerStatusIconClass);
  }
}
function SiSplitPartComponent_div_0_div_6_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiSplitPartComponent_div_0_div_6_button_1_Template_button_click_0_listener($event) {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r9);
      const action_r7 = restoredCtx.$implicit;
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](action_r7.click($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const action_r7 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("title", action_r7.tooltip || "");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", action_r7.tooltip);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", action_r7.iconClass);
  }
}
function SiSplitPartComponent_div_0_div_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiSplitPartComponent_div_0_div_6_button_1_Template, 2, 3, "button", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r4.actions)("ngForTrackBy", ctx_r4.trackByIndex);
  }
}
const _c0 = function (a0, a1) {
  return [a0, a1];
};
function SiSplitPartComponent_div_0_div_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 15)(1, "button", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiSplitPartComponent_div_0_div_7_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r11);
      const ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r10.toggleCollapse());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "i", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("flip-rtl", ctx_r5.orientation === "horizontal");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 4, ctx_r5.collapseLabel));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction2"](6, _c0, ctx_r5.collapseIconClass, ctx_r5.getCollapseArrow()));
  }
}
function SiSplitPartComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiSplitPartComponent_div_0_div_1_Template, 2, 2, "div", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 5)(3, "span", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiSplitPartComponent_div_0_div_6_Template, 2, 2, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiSplitPartComponent_div_0_div_7_Template, 4, 9, "div", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("color", ctx_r0.headerStatusColor && !ctx_r0.collapsed ? ctx_r0.headerStatusColor : null);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("is-collapsed", ctx_r0.collapsed)("is-horizontal", ctx_r0.orientation === "horizontal")("has-status-color", ctx_r0.headerStatusColor && !ctx_r0.collapsed);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.headerStatusIconClass && !ctx_r0.collapsed);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 12, ctx_r0.heading));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r0.collapsed);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.showCollapseButton);
  }
}
function SiSplitPartComponent_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiSplitPartComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiSplitPartComponent_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r1.headerTemplate)("ngTemplateOutletContext", ctx_r1.headerContext);
  }
}
function SiSplitPartComponent_ng_content_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0, 0, ["*ngIf", "!removeContentOnCollapse || !collapsed"]);
  }
}
const _c1 = ["*"];
const _c2 = ["splitContainer"];
const _c3 = ["gutter"];
function SiSplitComponent_ng_container_3_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 4, 5);
  }
  if (rf & 2) {
    const i_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().index;
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("order", i_r3 * 2 + 1)("width", ctx_r4.orientation === "horizontal" ? ctx_r4.gutterSize : null, "px")("height", ctx_r4.orientation === "vertical" ? ctx_r4.gutterSize : null, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("d-none", !ctx_r4.showGutter(i_r3));
  }
}
function SiSplitComponent_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiSplitComponent_ng_container_3_div_1_Template, 2, 8, "div", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const i_r3 = ctx.index;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", i_r3 < ctx_r1.splitParts.length - 1);
  }
}
function SiIconComponent_i_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 2);
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    let tmp_0_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction2"](1, _c0, ctx_r0.stackedIcon, (tmp_0_0 = ctx_r0.stackedColor) !== null && tmp_0_0 !== undefined ? tmp_0_0 : ""));
  }
}
const _c4 = function (a0, a1, a2) {
  return [a0, a1, a2];
};
const _c5 = ["autoCloseBar"];
function SiToastNotificationComponent_p_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](2, 1, ctx_r1.toast.message, ctx_r1.toast.translationParams));
  }
}
function SiToastNotificationComponent_p_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p")(1, "a", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mt-3", ctx_r2.toast.message)("mt-4", !ctx_r2.toast.message);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", ctx_r2.toast.action);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](3, 6, ctx_r2.toast.action.title, ctx_r2.toast.translationParams));
  }
}
function SiToastNotificationComponent_button_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.enter", function SiToastNotificationComponent_button_12_Template_button_keydown_enter_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r5);
      const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r4.close());
    })("click", function SiToastNotificationComponent_button_12_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r5);
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r6.close());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
function SiToastNotificationDrawerComponent_si_toast_notification_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-toast-notification", 2);
  }
  if (rf & 2) {
    const toast_r1 = ctx.$implicit;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("toast", toast_r1)("@toastTrigger", undefined)("@.disabled", ctx_r0.animationsDisabled);
  }
}
const _c6 = ["content"];
function SiCollapsiblePanelComponent_i_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 8);
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("collapsed-icon", ctx_r0.isHCollapsible);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r0.icon);
  }
}
function SiCollapsiblePanelComponent_div_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div")(1, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r2.contentCssClasses);
  }
}
function SiAboutComponent_img_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "img", 15);
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx_r0.icon, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"])("alt", ctx_r0.appName + "'s Logo");
  }
}
function SiAboutComponent_i_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 16);
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r1.iconName);
  }
}
function SiAboutComponent_p_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r14 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](item_r14);
  }
}
const _c7 = function (a0) {
  return {
    link: a0
  };
};
function SiAboutComponent_ng_container_12_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 17);
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r12)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c7, ctx_r3.imprintLink));
  }
}
function SiAboutComponent_ng_container_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 17);
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r12)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c7, ctx_r4.privacyLink));
  }
}
function SiAboutComponent_ng_container_14_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 17);
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r12)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c7, ctx_r5.cookieNoticeLink));
  }
}
function SiAboutComponent_ng_container_15_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 17);
  }
  if (rf & 2) {
    const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r12)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c7, ctx_r6.termsLink));
  }
}
function SiAboutComponent_ng_container_16_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 17);
  }
  if (rf & 2) {
    const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r12)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c7, ctx_r7.acceptableUsePolicyLink));
  }
}
function SiAboutComponent_ng_container_17_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 17);
  }
  if (rf & 2) {
    const item_r15 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r12)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c7, item_r15));
  }
}
function SiAboutComponent_pre_23_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "pre", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r9.licenseInfo.text);
  }
}
function SiAboutComponent_iframe_24_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "iframe", 19);
  }
  if (rf & 2) {
    const ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx_r10.sanitizedUrl, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeResourceUrl"])("title", ctx_r10.licenseInfo.title);
  }
}
function SiAboutComponent_ng_container_25_ng_container_1_si_collapsible_panel_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r21 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "si-collapsible-panel", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("toggle", function SiAboutComponent_ng_container_25_ng_container_1_si_collapsible_panel_2_Template_si_collapsible_panel_toggle_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r21);
      const file_r19 = restoredCtx.$implicit;
      const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r20.toggleLoadLicenseContent(file_r19));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "pre", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const file_r19 = ctx.$implicit;
    const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("icon", ctx_r18.licenseInfo.icon ? ctx_r18.licenseInfo.icon : "element-document")("heading", file_r19.name);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](file_r19.content);
  }
}
function SiAboutComponent_ng_container_25_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r23 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "si-collapsible-panel", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("toggle", function SiAboutComponent_ng_container_25_ng_container_1_Template_si_collapsible_panel_toggle_1_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r23);
      const api_r17 = restoredCtx.$implicit;
      const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r22.toggleLoadLicenseApi(api_r17));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiAboutComponent_ng_container_25_ng_container_1_si_collapsible_panel_2_Template, 3, 3, "si-collapsible-panel", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const api_r17 = ctx.$implicit;
    const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("heading", api_r17.name);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", api_r17.files)("ngForTrackBy", ctx_r16.trackByIndex);
  }
}
function SiAboutComponent_ng_container_25_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiAboutComponent_ng_container_25_ng_container_1_Template, 3, 3, "ng-container", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r11.licenseApi)("ngForTrackBy", ctx_r11.trackByIndex);
  }
}
function SiAboutComponent_ng_template_26_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const link_r24 = ctx.link;
    let tmp_1_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", link_r24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 2, (tmp_1_0 = link_r24.title) !== null && tmp_1_0 !== undefined ? tmp_1_0 : ""), " ");
  }
}
const _c8 = ["breadcrumb"];
const _c9 = ["breadcrumbItem"];
function SiBreadcrumbComponent_ng_container_4_ng_container_1_ng_container_1_i_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 16);
  }
}
function SiBreadcrumbComponent_ng_container_4_ng_container_1_ng_container_1_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiBreadcrumbComponent_ng_container_4_ng_container_1_ng_container_1_div_6_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
const _c10 = function (a0) {
  return {
    item: a0
  };
};
function SiBreadcrumbComponent_ng_container_4_ng_container_1_ng_container_1_div_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiBreadcrumbComponent_ng_container_4_ng_container_1_ng_container_1_div_6_ng_container_1_Template, 1, 0, "ng-container", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3).$implicit;
    const ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("show", ctx_r17.breadcrumbDropdownOpen[item_r8.level]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx_r17.controlId + item_r8.level);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r6)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](5, _c10, item_r8));
  }
}
const _c11 = function (a0, a1) {
  return {
    item: a0,
    title: a1
  };
};
function SiBreadcrumbComponent_ng_container_4_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "li", 10, 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiBreadcrumbComponent_ng_container_4_ng_container_1_ng_container_1_i_3_Template, 1, 0, "i", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiBreadcrumbComponent_ng_container_4_ng_container_1_ng_container_1_ng_container_5_Template, 1, 0, "ng-container", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiBreadcrumbComponent_ng_container_4_ng_container_1_ng_container_1_div_6_Template, 2, 7, "div", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    const isFirst_r9 = ctx_r20.first;
    const item_r8 = ctx_r20.$implicit;
    const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !isFirst_r9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r4)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction2"](4, _c11, item_r8, item_r8.shortenedTitle));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r12.addExpandDropdown);
  }
}
function SiBreadcrumbComponent_ng_container_4_ng_container_1_li_2_i_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 16);
  }
}
function SiBreadcrumbComponent_ng_container_4_ng_container_1_li_2_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiBreadcrumbComponent_ng_container_4_ng_container_1_li_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 18, 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiBreadcrumbComponent_ng_container_4_ng_container_1_li_2_i_2_Template, 1, 0, "i", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiBreadcrumbComponent_ng_container_4_ng_container_1_li_2_ng_container_3_Template, 1, 0, "ng-container", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    const isFirst_r9 = ctx_r24.first;
    const item_r8 = ctx_r24.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !isFirst_r9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r2)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](3, _c10, item_r8));
  }
}
function SiBreadcrumbComponent_ng_container_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiBreadcrumbComponent_ng_container_4_ng_container_1_ng_container_1_Template, 7, 7, "ng-container", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiBreadcrumbComponent_ng_container_4_ng_container_1_li_2_Template, 4, 5, "li", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r8.shortened);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !item_r8.shortened);
  }
}
function SiBreadcrumbComponent_ng_container_4_li_2_i_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 16);
  }
}
function SiBreadcrumbComponent_ng_container_4_li_2_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiBreadcrumbComponent_ng_container_4_li_2_ng_container_5_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiBreadcrumbComponent_ng_container_4_li_2_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiBreadcrumbComponent_ng_container_4_li_2_ng_container_5_ng_container_1_Template, 1, 0, "ng-container", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r29 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r6)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c10, item_r29));
  }
}
const _c12 = function (a0) {
  return {
    item: a0,
    title: ""
  };
};
function SiBreadcrumbComponent_ng_container_4_li_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiBreadcrumbComponent_ng_container_4_li_2_i_1_Template, 1, 0, "i", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiBreadcrumbComponent_ng_container_4_li_2_ng_container_3_Template, 1, 0, "ng-container", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiBreadcrumbComponent_ng_container_4_li_2_ng_container_5_Template, 2, 4, "ng-container", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r31 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const isFirst_r9 = ctx_r31.first;
    const item_r8 = ctx_r31.$implicit;
    const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !isFirst_r9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r4)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](8, _c12, item_r8));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("show", ctx_r11.breadcrumbDropdownOpen[item_r8.level]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx_r11.controlId + item_r8.level);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r11.itemsHidden)("ngForTrackBy", ctx_r11.trackByIndex);
  }
}
function SiBreadcrumbComponent_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiBreadcrumbComponent_ng_container_4_ng_container_1_Template, 3, 2, "ng-container", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiBreadcrumbComponent_ng_container_4_li_2_Template, 6, 10, "li", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r8 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r1.breadcrumbShortened || item_r8.level !== ctx_r1.ellipsesLevel);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.breadcrumbShortened && item_r8.level === ctx_r1.ellipsesLevel);
  }
}
function SiBreadcrumbComponent_ng_template_5_i_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 22);
  }
}
function SiBreadcrumbComponent_ng_template_5_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().item;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](item_r32.title);
  }
}
function SiBreadcrumbComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiBreadcrumbComponent_ng_template_5_i_1_Template, 1, 0, "i", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiBreadcrumbComponent_ng_template_5_span_2_Template, 2, 1, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r32 = ctx.item;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disable-router-link", !item_r32.link && !item_r32.action && !item_r32.href)("text-secondary", item_r32.lastItem);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", item_r32)("exactMatch", true);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", item_r32.title)("aria-disabled", !item_r32.link && !item_r32.href && !item_r32.action);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r32.level === 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r32.level !== 0);
  }
}
function SiBreadcrumbComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r39 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.enter", function SiBreadcrumbComponent_ng_template_7_Template_div_keydown_enter_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r39);
      const item_r36 = restoredCtx.item;
      const ctx_r38 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r38.toggleBreadcrumbDropdown(item_r36.level));
    })("click", function SiBreadcrumbComponent_ng_template_7_Template_div_click_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r39);
      const item_r36 = restoredCtx.item;
      const ctx_r40 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r40.toggleBreadcrumbDropdown(item_r36.level));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r36 = ctx.item;
    const title_r37 = ctx.title;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-controls", ctx_r5.controlId + item_r36.level)("aria-expanded", ctx_r5.breadcrumbDropdownOpen[item_r36.level]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("", title_r37, "...");
  }
}
function SiBreadcrumbComponent_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r41 = ctx.item;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disable-router-link", !item_r41.link && !item_r41.action && !item_r41.href);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", item_r41)("exactMatch", true);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-disabled", !item_r41.link && !item_r41.action && !item_r41.href);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](item_r41.title);
  }
}
function SiComfortScoreStatusComponent_i_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 5);
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("item-disabled", ctx_r0.item.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction3"](3, _c4, ctx_r0.item.icon, "status-" + ctx_r0.item.status, ctx_r0.item.selected ? ctx_r0.item.icon + "-filled" : ""));
  }
}
function SiComfortScoreStatusComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    let tmp_2_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-secondary", !ctx_r1.item.disabled)("text-muted", ctx_r1.item.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate2"](" ", ctx_r1.item.value, "", (tmp_2_0 = ctx_r1.item.unit) !== null && tmp_2_0 !== undefined ? tmp_2_0 : " / 100", " ");
  }
}
function SiComfortScoreStatusComponent_div_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r2.item.description), " ");
  }
}
function SiComfortScoreComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 5);
  }
}
function SiComfortScoreComponent_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2, "100");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4, "0");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
}
function SiComfortScoreComponent_ng_container_4_div_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    let tmp_0_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate2"](" ", item_r4.value, "", (tmp_0_0 = item_r4.unit) !== null && tmp_0_0 !== undefined ? tmp_0_0 : "", " ");
  }
}
function SiComfortScoreComponent_ng_container_4_si_comfort_score_status_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-comfort-score-status", 16);
  }
  if (rf & 2) {
    const item_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", item_r4);
  }
}
function SiComfortScoreComponent_ng_container_4_div_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-muted", item_r4.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 3, item_r4.title));
  }
}
function SiComfortScoreComponent_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 8)(2, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiComfortScoreComponent_ng_container_4_Template_div_click_2_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r13);
      const item_r4 = restoredCtx.$implicit;
      const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r12.selected.emit(item_r4));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiComfortScoreComponent_ng_container_4_div_4_Template, 2, 2, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiComfortScoreComponent_ng_container_4_Template_div_click_5_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r13);
      const item_r4 = restoredCtx.$implicit;
      const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r14.selected.emit(item_r4));
    })("keydown.enter", function SiComfortScoreComponent_ng_container_4_Template_div_keydown_enter_5_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r13);
      const item_r4 = restoredCtx.$implicit;
      const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r15.selected.emit(item_r4));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiComfortScoreComponent_ng_container_4_si_comfort_score_status_6_Template, 1, 1, "si-comfort-score-status", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiComfortScoreComponent_ng_container_4_div_7_Template, 3, 5, "div", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r4 = ctx.$implicit;
    const i_r5 = ctx.index;
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("grid-column", i_r5 + 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("height", item_r4.value, "%");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("detail", !ctx_r2.labelOnly);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("selected", item_r4.selected)("disabled", item_r4.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", "status-" + item_r4.status);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r2.showValues && !item_r4.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-disabled", item_r4.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r2.labelOnly);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r2.labelOnly);
  }
}
function SiConnectionStrengthComponent__svg_svg_0__svg_g_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "g");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "path", 7)(2, "path", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
function SiConnectionStrengthComponent__svg_svg_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "path", 2)(2, "path", 3)(3, "path", 4)(4, "circle", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiConnectionStrengthComponent__svg_svg_0__svg_g_5_Template, 3, 0, "g", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("none", ctx_r0.numberValue < 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("inactive", ctx_r0.numberValue < 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("inactive", ctx_r0.numberValue < 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.numberValue < 1);
  }
}
function SiConnectionStrengthComponent__svg_svg_1__svg_g_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "g");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "path", 12)(2, "path", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
function SiConnectionStrengthComponent__svg_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "path", 9)(2, "path", 10)(3, "circle", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiConnectionStrengthComponent__svg_svg_1__svg_g_4_Template, 3, 0, "g", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("none", ctx_r1.numberValue < 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("inactive", ctx_r1.numberValue < 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("inactive", ctx_r1.numberValue < 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.numberValue < 1);
  }
}
const _c13 = ["menu"];
const _c14 = ["menuItem"];
function SiMenuItemComponent_a_0_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiMenuItemComponent_a_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 3, 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("activeChange", function SiMenuItemComponent_a_0_Template_a_activeChange_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r7);
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r6.linkActiveChange($event));
    })("keydown.space", function SiMenuItemComponent_a_0_Template_a_keydown_space_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r7);
      const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r8.handleSpace());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiMenuItemComponent_a_0_ng_container_3_Template, 1, 0, "ng-container", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("focus-inside", ctx_r0.focusStylingInside)("active", ctx_r0.forceActive || ctx_r0.active)("disabled", ctx_r0.item.disabled)("dropdown-item-icon-only", ctx_r0.iconOnly || !ctx_r0.item.title && ctx_r0.item.icon && !ctx_r0.item.selectionState && !ctx_r0.dropdownCaret && (!ctx_r0.item.items || ctx_r0.item.items.length === 0))("dropdown-item-no-link", ctx_r0.item.type);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r0.itemClass)("siLink", ctx_r0.item)("actionParam", ctx_r0.actionParam);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx_r0.disableListInteraction ? "" : "-1")("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 20, ctx_r0.item.title))("aria-disabled", ctx_r0.item.disabled)("aria-checked", ctx_r0.getAriaChecked(ctx_r0.item))("data-id", ctx_r0.item.id)("role", ctx_r0.getItemRole(ctx_r0.item));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r2);
  }
}
function SiMenuItemComponent_a_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiMenuItemComponent_a_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 6, 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiMenuItemComponent_a_1_ng_container_3_Template, 1, 0, "ng-container", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dropdown-header", ctx_r1.item.isHeading)("focus-inside", ctx_r1.focusStylingInside)("active", ctx_r1.forceActive || ctx_r1.active)("disabled", ctx_r1.item.disabled)("dropdown-item-static", (!ctx_r1.item.items || ctx_r1.item.items.length === 0) && (ctx_r1.disableLinklessClick && !ctx_r1.item.action && !ctx_r1.item.link && !ctx_r1.item.href || ctx_r1.item.isHeading))("dropdown-item-icon-only", ctx_r1.iconOnly || !ctx_r1.item.title && ctx_r1.item.icon && !ctx_r1.item.selectionState && !ctx_r1.dropdownCaret && !(ctx_r1.item.items == null ? null : ctx_r1.item.items.length));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r1.itemClass);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx_r1.disableListInteraction ? "" : "-1")("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 20, ctx_r1.item.title))("aria-disabled", ctx_r1.item.disabled)("aria-checked", ctx_r1.getAriaChecked(ctx_r1.item))("data-id", ctx_r1.item.id)("role", ctx_r1.getItemRole(ctx_r1.item));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r2);
  }
}
function SiMenuItemComponent_ng_template_2_span_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "span", 13);
  }
  if (rf & 2) {
    const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("badge-dot", ctx_r11.item.badgeDot);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r11.iconClass);
  }
}
function SiMenuItemComponent_ng_template_2_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r12.badgeText);
  }
}
function SiMenuItemComponent_ng_template_2_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r13.item.title));
  }
}
function SiMenuItemComponent_ng_template_2_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", "bg-" + (ctx_r14.item.badgeColor || "default"));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r14.item.badge);
  }
}
function SiMenuItemComponent_ng_template_2_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "span", 17);
  }
  if (rf & 2) {
    const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("element-ok", ctx_r15.item.selectionState === "check")("element-record-filled", ctx_r15.item.selectionState === "radio");
  }
}
function SiMenuItemComponent_ng_template_2_span_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "span", 18);
  }
  if (rf & 2) {
    const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dropdown-caret-end", ctx_r16.dropdownCaret === "end")("dropdown-caret-start", ctx_r16.dropdownCaret === "start")("dropdown-caret-up", ctx_r16.dropdownCaret === "up");
  }
}
function SiMenuItemComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiMenuItemComponent_ng_template_2_span_0_Template, 1, 3, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiMenuItemComponent_ng_template_2_span_1_Template, 2, 1, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiMenuItemComponent_ng_template_2_span_2_Template, 3, 3, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiMenuItemComponent_ng_template_2_span_3_Template, 2, 2, "span", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiMenuItemComponent_ng_template_2_span_4_Template, 1, 4, "span", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiMenuItemComponent_ng_template_2_span_5_Template, 1, 6, "span", 12);
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r3.item.icon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", (ctx_r3.theBadgeStyle === "dot" || !ctx_r3.theBadgeStyle && (ctx_r3.iconOnly || !ctx_r3.item.title && ctx_r3.item.icon)) && ctx_r3.item.badge && ctx_r3.item.icon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r3.iconOnly && (ctx_r3.item.title || !ctx_r3.item.icon || ctx_r3.item.selectionState || ctx_r3.dropdownCaret || (ctx_r3.item.items == null ? null : ctx_r3.item.items.length)));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", (ctx_r3.theBadgeStyle === "inline" || !ctx_r3.theBadgeStyle && !ctx_r3.iconOnly && (ctx_r3.item.title || !ctx_r3.item.icon)) && ctx_r3.item.badge);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r3.iconOnly && ctx_r3.item.selectionState && !ctx_r3.dropdownCaret && !(ctx_r3.item.items == null ? null : ctx_r3.item.items.length));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r3.iconOnly && ((ctx_r3.item.items == null ? null : ctx_r3.item.items.length) || ctx_r3.dropdownCaret) && ctx_r3.dropdownCaret !== "none");
  }
}
function SiMenuComponent_ng_container_1_li_1_si_menu_item_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "si-menu-item", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("activeChange", function SiMenuComponent_ng_container_1_li_1_si_menu_item_1_Template_si_menu_item_activeChange_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r7);
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r6.linkActiveChange($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", item_r1)("actionParam", ctx_r5.actionParam)("disableParentClick", true)("disableLinklessClick", true)("forceTitle", ctx_r5.forceTitle);
  }
}
function SiMenuComponent_ng_container_1_li_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiMenuComponent_ng_container_1_li_1_si_menu_item_1_Template, 1, 5, "si-menu-item", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dropdown-divider", item_r1.title === "-");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("role", item_r1.title === "-" ? "separator" : "presentation");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r1.title !== "-");
  }
}
function SiMenuComponent_ng_container_1_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 6)(1, "si-menu-item", 7, 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("activeChange", function SiMenuComponent_ng_container_1_ng_template_2_Template_si_menu_item_activeChange_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r12);
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r11.linkActiveChange($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "si-menu", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("activeChange", function SiMenuComponent_ng_container_1_ng_template_2_Template_si_menu_activeChange_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r12);
      const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r13.linkActiveChange($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](2);
    const item_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dropstart", ctx_r4.actualDropstart)("dropend", !ctx_r4.actualDropstart)("disabled", item_r1.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", item_r1)("actionParam", ctx_r4.actionParam)("disableParentClick", true)("disableLinklessClick", true);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("hidden", ctx_r4.childrenHidden)("dropupwards", item_r1.dropUpwards);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("items", item_r1.items)("dropstart", ctx_r4.actualDropstart)("responsiveDropstart", ctx_r4.responsiveDropstart)("focusLastFromParent", !!item_r1.dropUpwards)("responsivelyDropUpwards", ctx_r4.responsivelyDropUpwards)("actionParam", ctx_r4.actionParam)("isSubList", true)("parentItem", _r10)("forceTitle", ctx_r4.forceTitle);
  }
}
function SiMenuComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiMenuComponent_ng_container_1_li_1_Template, 2, 4, "li", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiMenuComponent_ng_container_1_ng_template_2_Template, 4, 23, "ng-template", null, 3, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](3);
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r0.hasChildren(item_r1))("ngIfElse", _r3);
  }
}
const _c15 = ["si-content-action-bar-menu", ""];
function SiContentActionBarMenuComponent_ng_container_0_ng_container_1_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-menu-item", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", item_r3)("actionParam", ctx_r4.actionParam)("focusStylingInside", true);
  }
}
function SiContentActionBarMenuComponent_ng_container_0_ng_container_1_div_2_si_menu_item_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-menu-item", 11, 12);
  }
  if (rf & 2) {
    const _r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
    const item_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;
    const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", item_r3)("actionParam", ctx_r8.actionParam)("disableParentClick", false)("dropdownToggle", _r11)("focusStylingInside", true);
  }
}
function SiContentActionBarMenuComponent_ng_container_0_ng_container_1_div_2_si_menu_item_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-menu-item", 13);
  }
  if (rf & 2) {
    const item_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;
    const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", item_r3)("actionParam", ctx_r9.actionParam)("disableParentClick", false)("focusStylingInside", true);
  }
}
function SiContentActionBarMenuComponent_ng_container_0_ng_container_1_div_2_si_menu_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-menu", 14);
  }
  if (rf & 2) {
    const item_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;
    const ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("items", item_r3.items)("dropstart", true)("actionParam", ctx_r10.actionParam)("isSubList", true)("forceTitle", true);
  }
}
function SiContentActionBarMenuComponent_ng_container_0_ng_container_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 6, 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiContentActionBarMenuComponent_ng_container_0_ng_container_1_div_2_si_menu_item_2_Template, 2, 5, "si-menu-item", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiContentActionBarMenuComponent_ng_container_0_ng_container_1_div_2_si_menu_item_3_Template, 1, 4, "si-menu-item", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiContentActionBarMenuComponent_ng_container_0_ng_container_1_div_2_si_menu_4_Template, 1, 5, "si-menu", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
    const item_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", item_r3.disabled)("active", item_r3.isActive);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("dropdownResponsiveDirection", true)("dropdownFocusOnOpen", false);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !item_r3.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r3.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", _r7.isOpen);
  }
}
function SiContentActionBarMenuComponent_ng_container_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiContentActionBarMenuComponent_ng_container_0_ng_container_1_div_1_Template, 2, 3, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiContentActionBarMenuComponent_ng_container_0_ng_container_1_div_2_Template, 5, 9, "div", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r3 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !item_r3.items);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r3.items);
  }
}
function SiContentActionBarMenuComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiContentActionBarMenuComponent_ng_container_0_ng_container_1_Template, 3, 2, "ng-container", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "slice");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind3"](2, 2, ctx_r0.primaryActions, 0, 4))("ngForTrackBy", ctx_r0.trackByIndex);
  }
}
function SiContentActionBarMenuComponent_ng_container_1_si_menu_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-menu", 14);
  }
  if (rf & 2) {
    const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("items", ctx_r18.secondaryActions)("dropstart", true)("actionParam", ctx_r18.actionParam)("isSubList", true)("forceTitle", true);
  }
}
function SiContentActionBarMenuComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 15, 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "si-menu-item", 17, 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiContentActionBarMenuComponent_ng_container_1_si_menu_5_Template, 1, 5, "si-menu", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const _r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](2);
    const _r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](4);
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("dropdownResponsiveDirection", true)("dropdownFocusOnOpen", false);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", ctx_r1.secondaryToggleItem)("actionParam", ctx_r1.actionParam)("dropdownToggle", _r17)("focusStylingInside", true);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", _r16.isOpen);
  }
}
const _c16 = ["main"];
const _c17 = ["mobileDropdown"];
function SiContentActionBarComponent_div_2_si_menu_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-menu", 8);
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("items", ctx_r4.mobileActions)("dropstart", true)("actionParam", ctx_r4.actionParam)("isSubList", true)("forceTitle", true);
  }
}
function SiContentActionBarComponent_div_2_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-menu-item", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", ctx_r5.toggleItem)("focusStylingInside", true);
  }
}
function SiContentActionBarComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 4, 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("dropdownOnToggle", function SiContentActionBarComponent_div_2_Template_div_dropdownOnToggle_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r7);
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r6.mobileDropdownToggle($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiContentActionBarComponent_div_2_si_menu_2_Template, 1, 5, "si-menu", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiContentActionBarComponent_div_2_div_3_Template, 2, 2, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("dropdownResponsiveDirection", true)("dropdownFocusOnOpen", false);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", _r3.isOpen);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", (ctx_r1.primaryActions == null ? null : ctx_r1.primaryActions.length) || (ctx_r1.secondaryActions == null ? null : ctx_r1.secondaryActions.length));
  }
}
function SiContentActionBarComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "div", 12, 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "si-menu-item", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("expanded", ctx_r2.isExpanded)("active", ctx_r2.isExpanded || ctx_r2.isExpandedCollapsible);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("actionParam", ctx_r2.actionParam)("primaryActions", ctx_r2.primaryActions)("secondaryActions", ctx_r2.secondaryActions)("toggleItemLabel", ctx_r2.toggleItemLabel);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("active", ctx_r2.isExpanded || ctx_r2.isExpandedCollapsible);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", ctx_r2.toggleItem)("focusStylingInside", true);
  }
}
function SiTimepickerComponent_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r0.hoursLabel) || "\xA0");
  }
}
function SiTimepickerComponent_ng_container_5_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiTimepickerComponent_ng_container_5_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r8.minutesLabel) || "\xA0");
  }
}
function SiTimepickerComponent_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTimepickerComponent_ng_container_5_ng_container_1_Template, 1, 0, "ng-container", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "label", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiTimepickerComponent_ng_container_5_span_3_Template, 3, 3, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "input", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SiTimepickerComponent_ng_container_5_Template_input_change_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r10);
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r9.updateMinutes(ctx_r9.toHtmlInputElement($event.target).value));
    })("blur", function SiTimepickerComponent_ng_container_5_Template_input_blur_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r10);
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r11.updateMinutes(ctx_r11.toHtmlInputElement($event.target).value));
    })("keydown", function SiTimepickerComponent_ng_container_5_Template_input_keydown_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r10);
      const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r12.upDown($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r1.hideLabels);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("is-invalid", ctx_r1.invalidMinutes);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r1.disabled)("readonly", ctx_r1.readonly)("placeholder", ctx_r1.minutesPlaceholder)("value", ctx_r1.minutes);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 9, ctx_r1.minutesAriaLabel));
  }
}
function SiTimepickerComponent_ng_container_6_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiTimepickerComponent_ng_container_6_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r14.secondsLabel) || "\xA0");
  }
}
function SiTimepickerComponent_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTimepickerComponent_ng_container_6_ng_container_1_Template, 1, 0, "ng-container", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "label", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiTimepickerComponent_ng_container_6_span_3_Template, 3, 3, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "input", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SiTimepickerComponent_ng_container_6_Template_input_change_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r16);
      const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r15.updateSeconds(ctx_r15.toHtmlInputElement($event.target).value));
    })("blur", function SiTimepickerComponent_ng_container_6_Template_input_blur_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r16);
      const ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r17.updateSeconds(ctx_r17.toHtmlInputElement($event.target).value));
    })("keydown", function SiTimepickerComponent_ng_container_6_Template_input_keydown_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r16);
      const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r18.upDown($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r2.hideLabels);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("is-invalid", ctx_r2.invalidSeconds);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r2.disabled)("readonly", ctx_r2.readonly)("placeholder", ctx_r2.secondsPlaceholder)("value", ctx_r2.seconds);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 9, ctx_r2.secondsAriaLabel));
  }
}
function SiTimepickerComponent_ng_container_7_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiTimepickerComponent_ng_container_7_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r20.millisecondsLabel) || "\xA0");
  }
}
const _c18 = function () {
  return {
    separator: "."
  };
};
function SiTimepickerComponent_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTimepickerComponent_ng_container_7_ng_container_1_Template, 1, 0, "ng-container", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "label", 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiTimepickerComponent_ng_container_7_span_3_Template, 3, 3, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "input", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SiTimepickerComponent_ng_container_7_Template_input_change_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r22);
      const ctx_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r21.updateMilliseconds(ctx_r21.toHtmlInputElement($event.target).value));
    })("blur", function SiTimepickerComponent_ng_container_7_Template_input_blur_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r22);
      const ctx_r23 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r23.updateMilliseconds(ctx_r23.toHtmlInputElement($event.target).value));
    })("keydown", function SiTimepickerComponent_ng_container_7_Template_input_keydown_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r22);
      const ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r24.upDown($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r5)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction0"](12, _c18));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r3.hideLabels);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("is-invalid", ctx_r3.invalidMilliseconds);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r3.disabled)("readonly", ctx_r3.readonly)("placeholder", ctx_r3.millisecondsPlaceholder)("value", ctx_r3.milliseconds);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 10, ctx_r3.millisecondsAriaLabel));
  }
}
function SiTimepickerComponent_label_8_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r25.meridiansLabel) || "\xA0");
  }
}
function SiTimepickerComponent_label_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r27 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "label", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTimepickerComponent_label_8_span_1_Template, 3, 3, "span", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "select", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SiTimepickerComponent_label_8_Template_select_change_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r27);
      const ctx_r26 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r26.toggleMeridian());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "option", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "option", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r4.hideLabels);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r4.disabled || ctx_r4.readonly);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 7, ctx_r4.meridiansAriaLabel));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("selected", ctx_r4.meridian === "am");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r4.periods[0]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("selected", ctx_r4.meridian === "pm");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r4.periods[1]);
  }
}
function SiTimepickerComponent_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const separator_r28 = ctx.separator;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](separator_r28 ? separator_r28 : ":");
  }
}
const _c19 = ["timePicker"];
function SiDatepickerComponent_div_0_div_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_div_0_div_11_Template_div_click_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r7);
      const year_r5 = restoredCtx.$implicit;
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r6.setYear(year_r5));
    })("keydown.enter", function SiDatepickerComponent_div_0_div_11_Template_div_keydown_enter_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r7);
      const year_r5 = restoredCtx.$implicit;
      const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r8.setYear(year_r5));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const year_r5 = ctx.$implicit;
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", year_r5 > ctx_r4.maxYear || year_r5 < ctx_r4.minYear);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("tabindex", year_r5 > ctx_r4.maxYear || year_r5 < ctx_r4.minYear ? null : "0")("listInteractionItemDisabled", year_r5 > ctx_r4.maxYear || year_r5 < ctx_r4.minYear);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](year_r5);
  }
}
function SiDatepickerComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 3)(1, "div", 4)(2, "button", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_div_0_Template_button_click_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r10);
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r9.prevYears());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "i", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "button", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_div_0_Template_button_click_7_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r10);
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r11.nextYears());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](8, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](9, "i", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, SiDatepickerComponent_div_0_div_11_Template, 2, 5, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r0.years[0] <= ctx_r0.minYear);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 8, ctx_r0.previousLabel));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate2"](" ", ctx_r0.years[0], " - ", ctx_r0.years[ctx_r0.years.length - 1], " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r0.years[ctx_r0.years.length - 1] >= ctx_r0.maxYear);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](8, 10, ctx_r0.nextLabel));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r0.years)("ngForTrackBy", ctx_r0.trackByIndex);
  }
}
function SiDatepickerComponent_div_1_div_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_div_1_div_11_Template_div_click_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r15);
      const m_r13 = restoredCtx.$implicit;
      const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r14.setMonth(m_r13));
    })("keydown.enter", function SiDatepickerComponent_div_1_div_11_Template_div_keydown_enter_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r15);
      const m_r13 = restoredCtx.$implicit;
      const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r16.setMonth(m_r13));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const m_r13 = ctx.$implicit;
    const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx_r12.year >= ctx_r12.maxYear && ctx_r12.maxMonth && m_r13 > ctx_r12.maxMonth || ctx_r12.year <= ctx_r12.minYear && ctx_r12.minMonth && m_r13 < ctx_r12.minMonth);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("tabindex", ctx_r12.year >= ctx_r12.maxYear && ctx_r12.maxMonth && m_r13 > ctx_r12.maxMonth || ctx_r12.year <= ctx_r12.minYear && ctx_r12.minMonth && m_r13 < ctx_r12.minMonth ? null : "0")("listInteractionItemDisabled", !!(ctx_r12.year >= ctx_r12.maxYear && ctx_r12.maxMonth && m_r13 > ctx_r12.maxMonth) || !!(ctx_r12.year <= ctx_r12.minYear && ctx_r12.minMonth && m_r13 < ctx_r12.minMonth));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r12.months[m_r13 - 1], " ");
  }
}
const _c20 = function () {
  return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
};
function SiDatepickerComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 3)(1, "div", 4)(2, "button", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_div_1_Template_button_click_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r18);
      const ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r17.setYear(ctx_r17.year - 1));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "i", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "a", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_div_1_Template_a_click_5_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r18);
      const ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r19.yearSelection());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "button", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_div_1_Template_button_click_7_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r18);
      const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r20.setYear(ctx_r20.year + 1));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](8, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](9, "i", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, SiDatepickerComponent_div_1_div_11_Template, 2, 5, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r1.year <= ctx_r1.minYear);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 7, ctx_r1.previousLabel));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r1.year, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r1.year >= ctx_r1.maxYear);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](8, 9, ctx_r1.nextLabel));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction0"](11, _c20))("ngForTrackBy", ctx_r1.trackByIndex);
  }
}
function SiDatepickerComponent_div_2_td_16_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "td", 25);
  }
}
function SiDatepickerComponent_div_2_th_17_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th")(1, "span", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const day_r25 = ctx.$implicit;
    const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r22.days[day_r25.index - 1]);
  }
}
function SiDatepickerComponent_div_2_tr_19_td_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const index_r27 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().index;
    const ctx_r28 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r28.weekNums[index_r27]);
  }
}
function SiDatepickerComponent_div_2_tr_19_td_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r33 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 28);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mouseover", function SiDatepickerComponent_div_2_tr_19_td_2_Template_td_mouseover_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r33);
      const day_r31 = restoredCtx.$implicit;
      const ctx_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r32.activeHover = day_r31.date);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 29);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_div_2_tr_19_td_2_Template_div_click_1_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r33);
      const day_r31 = restoredCtx.$implicit;
      const ctx_r34 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r34.dateSelected(day_r31.date));
    })("keydown.enter", function SiDatepickerComponent_div_2_tr_19_td_2_Template_div_keydown_enter_1_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r33);
      const day_r31 = restoredCtx.$implicit;
      const ctx_r35 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r35.dateSelected(day_r31.date));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const day_r31 = ctx.$implicit;
    const ctx_r29 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("range-hover", ctx_r29.config.enableDateRange && ctx_r29.isRangeHover(day_r31))("range", ctx_r29.inRange(day_r31))("range-start-end", ctx_r29.isRangeSelected(day_r31));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-secondary", day_r31.otherMonth && !day_r31.disabled && !ctx_r29.isRangeSelected(day_r31))("si-body-1", day_r31.otherMonth)("si-title-1", !day_r31.otherMonth)("today", day_r31.isToday)("selected", day_r31.selected && !ctx_r29.config.enableDateRange)("disabled", day_r31.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("listInteractionItemDisabled", day_r31.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-disabled", day_r31.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", day_r31.day, " ");
  }
}
function SiDatepickerComponent_div_2_tr_19_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "tr");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiDatepickerComponent_div_2_tr_19_td_1_Template, 2, 1, "td", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiDatepickerComponent_div_2_tr_19_td_2_Template, 3, 21, "td", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const week_r26 = ctx.$implicit;
    const ctx_r23 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("selected", week_r26[0].selected);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r23.hideWeekNumbers);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", week_r26)("ngForTrackBy", ctx_r23.trackByIndex);
  }
}
function SiDatepickerComponent_div_2_div_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r37 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 30)(1, "button", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_div_2_div_20_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r37);
      const ctx_r36 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r36.goToToday());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    let tmp_0_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 1, (tmp_0_0 = ctx_r24.config.todayText) !== null && tmp_0_0 !== undefined ? tmp_0_0 : "Today"), " ");
  }
}
function SiDatepickerComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r39 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 15)(1, "div", 4)(2, "a", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_div_2_Template_a_click_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r39);
      const ctx_r38 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r38.setMonthOffset(-1));
    })("keydown.enter", function SiDatepickerComponent_div_2_Template_a_keydown_enter_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r39);
      const ctx_r40 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r40.setMonthOffset(-1));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "i", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 17)(6, "a", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_div_2_Template_a_click_6_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r39);
      const ctx_r41 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r41.monthSelection());
    })("keydown.enter", function SiDatepickerComponent_div_2_Template_a_keydown_enter_6_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r39);
      const ctx_r42 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r42.monthSelection());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "a", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_div_2_Template_a_click_8_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r39);
      const ctx_r43 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r43.yearSelection());
    })("keydown.enter", function SiDatepickerComponent_div_2_Template_a_keydown_enter_8_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r39);
      const ctx_r44 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r44.yearSelection());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "a", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_div_2_Template_a_click_10_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r39);
      const ctx_r45 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r45.year >= ctx_r45.maxYear && ctx_r45.maxMonth && ctx_r45.monthNumber >= ctx_r45.maxMonth ? false : ctx_r45.setMonthOffset(1));
    })("keydown.enter", function SiDatepickerComponent_div_2_Template_a_keydown_enter_10_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r39);
      const ctx_r46 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r46.year >= ctx_r46.maxYear && ctx_r46.maxMonth && ctx_r46.monthNumber >= ctx_r46.maxMonth ? false : ctx_r46.setMonthOffset(1));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](11, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](12, "i", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "table", 20)(14, "thead")(15, "tr");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](16, SiDatepickerComponent_div_2_td_16_Template, 1, 0, "td", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](17, SiDatepickerComponent_div_2_th_17_Template, 3, 1, "th", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](18, "tbody");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](19, SiDatepickerComponent_div_2_tr_19_Template, 3, 5, "tr", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](20, SiDatepickerComponent_div_2_div_20_Template, 4, 3, "div", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    let tmp_0_0;
    let tmp_5_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx_r2.year <= ctx_r2.minYear && ctx_r2.minMonth && ((tmp_0_0 = ctx_r2.monthNumber <= ctx_r2.minMonth) !== null && tmp_0_0 !== undefined ? tmp_0_0 : null));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("tabindex", ctx_r2.year <= ctx_r2.minYear && ctx_r2.minMonth && ctx_r2.monthNumber <= ctx_r2.minMonth ? null : "0");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 16, ctx_r2.previousLabel));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r2.months[ctx_r2.monthNumber - 1], " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r2.year, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx_r2.year >= ctx_r2.maxYear && ctx_r2.maxMonth && ((tmp_5_0 = ctx_r2.monthNumber >= ctx_r2.maxMonth) !== null && tmp_5_0 !== undefined ? tmp_5_0 : null));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("tabindex", ctx_r2.year >= ctx_r2.maxYear && ctx_r2.maxMonth && ctx_r2.monthNumber >= ctx_r2.maxMonth ? null : "0");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](11, 18, ctx_r2.nextLabel));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r2.hideWeekNumbers);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r2.daysOfWeek)("ngForTrackBy", ctx_r2.trackByIndex);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r2.weeks)("ngForTrackBy", ctx_r2.trackByIndex);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r2.showToday);
  }
}
function SiDatepickerComponent_div_3_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r50 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 37)(1, "input", 38);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SiDatepickerComponent_div_3_div_2_Template_input_change_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r50);
      const ctx_r49 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r49.toggleDisabledTime());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "label", 39);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r47 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx_r47.switchId)("checked", !ctx_r47.disabledTime);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("for", ctx_r47.switchId);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 4, ctx_r47.includeTimeLabel));
  }
}
function SiDatepickerComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r52 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 32)(1, "div", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiDatepickerComponent_div_3_div_2_Template, 5, 6, "div", 34);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "si-timepicker", 35, 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function SiDatepickerComponent_div_3_Template_si_timepicker_ngModelChange_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r52);
      const ctx_r51 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r51.timeSelected($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    let tmp_0_0;
    let tmp_3_0;
    let tmp_4_0;
    let tmp_5_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", (tmp_0_0 = !ctx_r3.config.mandatoryTime) !== null && tmp_0_0 !== undefined ? tmp_0_0 : false);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", ctx_r3.time)("disabled", ctx_r3.disabledTime)("showMinutes", (tmp_3_0 = ctx_r3.config.showMinutes) !== null && tmp_3_0 !== undefined ? tmp_3_0 : true)("showSeconds", (tmp_4_0 = ctx_r3.config.showSeconds) !== null && tmp_4_0 !== undefined ? tmp_4_0 : false)("showMilliseconds", (tmp_5_0 = ctx_r3.config.showMilliseconds) !== null && tmp_5_0 !== undefined ? tmp_5_0 : false)("showMeridian", ctx_r3.time12h);
  }
}
const _c21 = ["datepicker"];
const _c22 = ["range"];
const _c23 = ["startInput"];
const _c24 = ["endInput"];
const _c25 = ["end"];
function SiElectrontitlebarComponent_div_6_si_menu_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-menu", 11);
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("items", ctx_r2.menuItems);
  }
}
function SiElectrontitlebarComponent_div_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 7, 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "button", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiElectrontitlebarComponent_div_6_si_menu_3_Template, 1, 1, "si-menu", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("unfocused", !ctx_r0.hasFocus);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", ctx_r0.ariaLabelMenu);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", _r1.isOpen);
  }
}
function SiPaginationComponent_li_7_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiPaginationComponent_li_7_button_1_Template_button_click_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r6);
      const page_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r4.setPage($event, page_r1.page));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const page_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", page_r1.page === ctx_r2.currentPage);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-current", page_r1.page === ctx_r2.currentPage ? "page" : "");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", page_r1.page, " ");
  }
}
function SiPaginationComponent_li_7_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, "\u2026");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
function SiPaginationComponent_li_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiPaginationComponent_li_7_button_1_Template, 2, 3, "button", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiPaginationComponent_li_7_span_2_Template, 2, 0, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const page_r1 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !page_r1.sep);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", page_r1.sep);
  }
}
function SiProgressbarComponent_div_0_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r1.heading));
  }
}
function SiProgressbarComponent_div_0_small_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "small", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r2.progress);
  }
}
function SiProgressbarComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiProgressbarComponent_div_0_span_1_Template, 3, 3, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiProgressbarComponent_div_0_small_2_Template, 2, 1, "small", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("justify-content-end", !ctx_r0.heading)("justify-content-between", ctx_r0.heading);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.heading);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.progress);
  }
}
function PopoverComponent_div_2_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "span", 9);
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r4.icon);
  }
}
function PopoverComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, PopoverComponent_div_2_span_1_Template, 1, 1, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.icon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r0.popoverTitle);
  }
}
function PopoverComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 10);
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r1.popover, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
  }
}
function PopoverComponent_ng_template_5_0_ng_template_0_Template(rf, ctx) {}
function PopoverComponent_ng_template_5_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, PopoverComponent_ng_template_5_0_ng_template_0_Template, 0, 0, "ng-template");
  }
}
function PopoverComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, PopoverComponent_ng_template_5_0_Template, 1, 0, null, 11);
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r3.popoverTemplate);
  }
}
function SiPromptDialogButtonsComponent_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiPromptDialogButtonsComponent_button_1_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r2);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r1.clickSave());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r0.saveDisabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 2, ctx_r0.saveLabel));
  }
}
function SiEmptyStateComponent_p_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r0.content));
  }
}
function SiFilterPillComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("empty-desc", !ctx_r0.filter.description && !ctx_r0.responsive);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 3, ctx_r0.filter.title));
  }
}
function SiFilterPillComponent_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, ":");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
function SiFilterPillComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, "\xA0");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
function SiFilterPillComponent_ng_container_8_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiFilterPillComponent_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiFilterPillComponent_ng_container_8_ng_container_1_Template, 1, 0, "ng-container", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r4);
  }
}
function SiFilterPillComponent_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.enter", function SiFilterPillComponent_ng_template_9_Template_button_keydown_enter_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r8);
      const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r7.deleteClicked());
    })("click", function SiFilterPillComponent_ng_template_9_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r8);
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r9.deleteClicked());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("ms-0", ctx_r5.responsive)("ms-2", !ctx_r5.responsive)("btn-xs", ctx_r5.responsive)("btn-sm", !ctx_r5.responsive);
  }
}
function SiFilterBarComponent_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("", ctx_r0.filterTitle, ":");
  }
}
function SiFilterBarComponent_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r1.filterDefaultText);
  }
}
function SiFilterBarComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 9)(1, "si-filter-pill", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("deleteFilters", function SiFilterBarComponent_div_3_Template_si_filter_pill_deleteFilters_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r8);
      const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r7.deleteFilters($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const filter_r5 = ctx.$implicit;
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dark-background", ctx_r2.responsive && ctx_r2.colorVariant === "base-0");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("totalPills", ctx_r2.filters.length)("filter", filter_r5)("responsive", ctx_r2.responsive)("disabled", ctx_r2.disabled);
  }
}
function SiFilterBarComponent_button_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiFilterBarComponent_button_6_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r10);
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r9.onResetFilters());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r4.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r4.resetText, " ");
  }
}
const _c26 = function (a0) {
  return {
    description: a0,
    title: "",
    status: "default",
    filterName: ""
  };
};
function SiFooterComponent_span_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span")(1, "a", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const link_r1 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", link_r1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 2, link_r1.title), " ");
  }
}
function SiInlineNotificationComponent_strong_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "strong", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](2, 1, ctx_r0.heading, ctx_r0.translationParams), ": ");
  }
}
function SiInlineNotificationComponent_a_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", ctx_r1.action);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](2, 2, ctx_r1.action.title, ctx_r1.translationParams));
  }
}
function SiLanguageSwitcherComponent_option_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "option", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const language_r1 = ctx.$implicit;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", language_r1.value)("selected", language_r1.value === ctx_r0.translate.currentLanguage);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 3, language_r1.name), " ");
  }
}
function SiLandingPageComponent_si_inline_notification_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-inline-notification", 18);
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("severity", ctx_r0.announcement.severity)("heading", ctx_r0.announcement.heading)("message", ctx_r0.announcement.message);
  }
}
function SiLandingPageComponent__svg_svg_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "path", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
function SiLandingPageComponent_img_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "img", 21);
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx_r2.logoUrl, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"])("alt", ctx_r2.heading + "'s Background");
  }
}
function SiLandingPageComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-language-switcher", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("translationKey", ctx_r3.translationKey)("availableLanguages", ctx_r3.availableLanguages);
  }
}
function SiLandingPageComponent_div_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r4.subheading);
  }
}
function SiLandingPageComponent_h2_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "h2", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r5.subtitle);
  }
}
function SiLandingPageComponent_si_inline_notification_14_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-inline-notification", 26);
  }
  if (rf & 2) {
    const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("severity", ctx_r6.loginAlert.severity || "danger")("heading", ctx_r6.loginAlert.heading)("message", ctx_r6.loginAlert.message);
  }
}
function SiLandingPageComponent_span_20_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span")(1, "a", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const link_r9 = ctx.$implicit;
    let tmp_1_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", link_r9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 2, (tmp_1_0 = link_r9.title) !== null && tmp_1_0 !== undefined ? tmp_1_0 : ""), " ");
  }
}
function SiLandingPageComponent_div_21_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 28);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r8.copyright, " ");
  }
}
function SiCommissioningStatusComponent_div_0_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r4.overwritten);
  }
}
function SiCommissioningStatusComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-icon", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiCommissioningStatusComponent_div_0_span_2_Template, 2, 1, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("status-warning", ctx_r0.overwritten > 0 && !ctx_r0.disabled)("inactive", ctx_r0.overwritten === 0 || ctx_r0.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r0.disabled);
  }
}
function SiCommissioningStatusComponent_div_1_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r5.checked);
  }
}
function SiCommissioningStatusComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-icon", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiCommissioningStatusComponent_div_1_span_2_Template, 2, 1, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("inactive", ctx_r1.checked === 0 || ctx_r1.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("color", ctx_r1.checked === 0 || ctx_r1.disabled ? "" : "status-success")("stackedColor", ctx_r1.checked === 0 || ctx_r1.disabled ? "stacked-color-inactive" : "status-success-contrast");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r1.disabled);
  }
}
function SiCommissioningStatusComponent_div_2_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r6.failed);
  }
}
function SiCommissioningStatusComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-icon", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiCommissioningStatusComponent_div_2_span_2_Template, 2, 1, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("inactive", ctx_r2.failed === 0 || ctx_r2.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("color", ctx_r2.failed === 0 || ctx_r2.disabled ? "" : "status-danger")("stackedColor", ctx_r2.failed === 0 || ctx_r2.disabled ? "stacked-color-inactive" : "status-danger-contrast");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r2.disabled);
  }
}
function SiCommissioningStatusComponent_div_3_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r7.unchecked);
  }
}
function SiCommissioningStatusComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-icon", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiCommissioningStatusComponent_div_3_span_2_Template, 2, 1, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("stable", ctx_r3.unchecked > 0 && !ctx_r3.disabled)("inactive", ctx_r3.unchecked === 0 || ctx_r3.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r3.disabled);
  }
}
function SiMasterDetailContainerComponent_ng_container_0_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiMasterDetailContainerComponent_ng_container_0_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiMasterDetailContainerComponent_ng_container_0_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiMasterDetailContainerComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiMasterDetailContainerComponent_ng_container_0_ng_container_2_Template, 1, 0, "ng-container", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "si-split", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("sizesChange", function SiMasterDetailContainerComponent_ng_container_0_Template_si_split_sizesChange_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r13);
      const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r12.onSplitSizesChange($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "si-split-part", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiMasterDetailContainerComponent_ng_container_0_ng_container_5_Template, 1, 0, "ng-container", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "si-split-part", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiMasterDetailContainerComponent_ng_container_0_ng_container_7_Template, 1, 0, "ng-container", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](4);
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](6);
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r0.containerClass);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("stateId", ctx_r0.stateId)("sizes", ctx_r0.splitSizes);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("showCollapseButton", false)("showHeader", false)("minSize", ctx_r0.minMasterSize)("stateId", ctx_r0.masterStateId);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("showCollapseButton", false)("showHeader", false)("minSize", ctx_r0.minDetailSize)("stateId", ctx_r0.detailStateId);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r7);
  }
}
function SiMasterDetailContainerComponent_ng_template_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiMasterDetailContainerComponent_ng_template_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiMasterDetailContainerComponent_ng_template_1_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
const _c27 = function (a0) {
  return {
    customClass: a0
  };
};
function SiMasterDetailContainerComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiMasterDetailContainerComponent_ng_template_1_ng_container_1_Template, 1, 0, "ng-container", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiMasterDetailContainerComponent_ng_template_1_ng_container_3_Template, 1, 0, "ng-container", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiMasterDetailContainerComponent_ng_template_1_ng_container_4_Template, 1, 0, "ng-container", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](4);
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](6);
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("large-size", ctx_r2.hasLargeSize);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r2.containerClass);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("details-active", ctx_r2.detailsActive && !ctx_r2.hasLargeSize);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r5)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](10, _c27, ctx_r2.hasLargeSize ? "col-3 ps-0 pe-4" : "col-6 px-0"));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r7)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](12, _c27, ctx_r2.hasLargeSize ? "col-9 ps-4 pe-0" : "col-6 px-0"));
  }
}
function SiMasterDetailContainerComponent_ng_template_3_h2_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "h2", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-truncate", ctx_r17.truncateHeading);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 3, ctx_r17.heading));
  }
}
function SiMasterDetailContainerComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiMasterDetailContainerComponent_ng_template_3_h2_0_Template, 3, 5, "h2", 12);
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r4.heading);
  }
}
function SiMasterDetailContainerComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 14)(1, "div", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](3, 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](5, 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const customClass_r18 = ctx.customClass;
    const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("max-inline-size", ctx_r6.maxMasterSize);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction2"](3, _c0, ctx_r6.masterContainerClass, customClass_r18 ? customClass_r18 : ""));
  }
}
function SiMasterDetailContainerComponent_ng_template_7_button_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r23 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiMasterDetailContainerComponent_ng_template_7_button_2_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r23);
      const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r22.detailsBackClicked());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 1, ctx_r20.detailsBackButtonText));
  }
}
function SiMasterDetailContainerComponent_ng_template_7_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r21.detailsHeading));
  }
}
function SiMasterDetailContainerComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 17)(1, "div", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiMasterDetailContainerComponent_ng_template_7_button_2_Template, 4, 3, "button", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiMasterDetailContainerComponent_ng_template_7_span_3_Template, 3, 3, "span", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](4, 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](5, 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const customClass_r19 = ctx.customClass;
    const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("max-inline-size", ctx_r8.maxDetailSize);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction2"](5, _c0, ctx_r8.detailContainerClass, customClass_r19 ? customClass_r19 : ""));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r8.hasLargeSize && !ctx_r8.hideBackButton);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r8.detailsHeading);
  }
}
const _c28 = [[["", "slot", "mastersearch"]], [["", "slot", "masteractions"]], [["", "slot", "masterdata"]], [["", "slot", "detailactions"]], [["", "slot", "details"]]];
const _c29 = ["[slot=masterSearch]", "[slot=masterActions]", "[slot=masterData]", "[slot=detailActions]", "[slot=details]"];
function SiEditAbortDialogComponent_button_16_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiEditAbortDialogComponent_button_16_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r2);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r1.onSave());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r0.saveBtnName));
  }
}
const _c30 = ["modalContainer"];
function SiModalComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 2);
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("fade", (ctx_r0.modalRef.data == null ? null : ctx_r0.modalRef.data.animated) !== false)("show", ctx_r0.showBackdropClass);
  }
}
function SiModalComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 3, 4)(2, "div", 5)(3, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("fade", (ctx_r1.modalRef.data == null ? null : ctx_r1.modalRef.data.animated) !== false)("show", ctx_r1.show);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-labelledby", ctx_r1.titleId);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r1.dialogClass);
  }
}
const _c31 = ["modalBody"];
function SiColumnSelectionDialogComponent_div_13_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.alt.arrowUp", function SiColumnSelectionDialogComponent_div_13_Template_div_keydown_alt_arrowUp_0_listener($event) {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r6);
      const index_r4 = restoredCtx.index;
      const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r5.moveUp(index_r4, $event));
    })("keydown.alt.arrowDown", function SiColumnSelectionDialogComponent_div_13_Template_div_keydown_alt_arrowDown_0_listener($event) {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r6);
      const index_r4 = restoredCtx.index;
      const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r7.moveDown(index_r4, $event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "div", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "span", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 16)(7, "span", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](9, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](10, "span", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const headerContent_r3 = ctx.$implicit;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("cdkDragDisabled", !headerContent_r3.draggable)("cdkOption", headerContent_r3.id)("cdkOptionDisabled", headerContent_r3.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", headerContent_r3.disabled)("draggable", headerContent_r3.draggable);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", headerContent_r3.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](5, 17, headerContent_r3.title, ctx_r1.translationParams));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", headerContent_r3.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](9, 20, headerContent_r3.visible ? ctx_r1.visibleText : ctx_r1.hiddenText));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", headerContent_r3.disabled)("checked", headerContent_r3.visible);
  }
}
function SiColumnSelectionDialogComponent_button_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiColumnSelectionDialogComponent_button_15_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r9);
      const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r8.restoreToDefault());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r2.restoreToDefaultBtnName), " ");
  }
}
function SiNavbarBrandComponent__svg_svg_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "path", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
function SiNavbarBrandComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "img", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx_r2.resolvedLogoUrl, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);
  }
}
function SiNavbarItemComponent_li_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "si-menu", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("activeChange", function SiNavbarItemComponent_li_1_ng_container_3_Template_si_menu_activeChange_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r6);
      const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r5.submenuActiveChange($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("items", ctx_r3.item.items)("isSubList", true);
  }
}
function SiNavbarItemComponent_li_1_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
}
function SiNavbarItemComponent_li_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-menu-item", 5, 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiNavbarItemComponent_li_1_ng_container_3_Template, 2, 2, "ng-container", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiNavbarItemComponent_li_1_ng_container_4_Template, 3, 0, "ng-container", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](2);
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("dropdownFocusOnOpen", false);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("quick-action", ctx_r0.quickAction !== undefined);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", ctx_r0.item)("badgeStyle", ctx_r0.quickAction !== undefined ? "dot" : "")("disableParentClick", false)("forceActive", ctx_r0.active)("focusStylingInside", true)("dropdownToggle", _r2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.item.items);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.item.customContent);
  }
}
function SiNavbarItemComponent_si_menu_item_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-menu-item", 10);
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("quick-action", ctx_r1.quickAction !== undefined);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("badgeStyle", ctx_r1.quickAction !== undefined ? "dot" : "")("item", ctx_r1.item)("focusStylingInside", true);
  }
}
function SiNavbarProfileMenuComponent_ul_0_img_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "img", 18);
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx_r2.account.image, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"])("alt", ctx_r2.account.title + "'s Avatar");
  }
}
function SiNavbarProfileMenuComponent_ul_0_span_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r3.accountShortName);
  }
}
function SiNavbarProfileMenuComponent_ul_0_div_14_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r4.account.email);
  }
}
function SiNavbarProfileMenuComponent_ul_0_span_16_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r5.account.company));
  }
}
function SiNavbarProfileMenuComponent_ul_0_span_17_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r6.account.role), " ");
  }
}
function SiNavbarProfileMenuComponent_ul_0_ng_container_18_ng_container_2_li_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "li", 28);
  }
}
function SiNavbarProfileMenuComponent_ul_0_ng_container_18_ng_container_2_li_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 29);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-menu-item", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", item_r10);
  }
}
function SiNavbarProfileMenuComponent_ul_0_ng_container_18_ng_container_2_li_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-menu-item", 32)(2, "si-menu", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("dropdownFocusOnOpen", false);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", item_r10)("disableParentClick", false);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("items", item_r10.items)("isSubList", true);
  }
}
function SiNavbarProfileMenuComponent_ul_0_ng_container_18_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiNavbarProfileMenuComponent_ul_0_ng_container_18_ng_container_2_li_1_Template, 1, 0, "li", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiNavbarProfileMenuComponent_ul_0_ng_container_18_ng_container_2_li_2_Template, 2, 1, "li", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiNavbarProfileMenuComponent_ul_0_ng_container_18_ng_container_2_li_3_Template, 3, 5, "li", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r10 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !item_r10.items && item_r10.title === "-");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !item_r10.items && item_r10.title !== "-");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r10.items);
  }
}
function SiNavbarProfileMenuComponent_ul_0_ng_container_18_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "li", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiNavbarProfileMenuComponent_ul_0_ng_container_18_ng_container_2_Template, 4, 3, "ng-container", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r7.items)("ngForTrackBy", ctx_r7.trackByIndex);
  }
}
function SiNavbarProfileMenuComponent_ul_0_ng_container_19_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "li");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
}
function SiNavbarProfileMenuComponent_ul_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "ul", 1)(1, "li", 2, 3)(3, "div", 4)(4, "a", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiNavbarProfileMenuComponent_ul_0_img_5_Template, 1, 2, "img", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiNavbarProfileMenuComponent_ul_0_span_6_Template, 2, 1, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](9, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "ul", 10)(11, "li", 11)(12, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](14, SiNavbarProfileMenuComponent_ul_0_div_14_Template, 2, 1, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](15, "div", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](16, SiNavbarProfileMenuComponent_ul_0_span_16_Template, 3, 3, "span", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](17, SiNavbarProfileMenuComponent_ul_0_span_17_Template, 3, 3, "span", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](18, SiNavbarProfileMenuComponent_ul_0_ng_container_18_Template, 3, 2, "ng-container", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](19, SiNavbarProfileMenuComponent_ul_0_ng_container_19_Template, 3, 0, "ng-container", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](2);
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("dropdownFocusOnOpen", false)("dropdownFocusOnClose", false);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("show", _r1.isOpen);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.account.image);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r0.account.image);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r0.account.title);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("listInteractionIsSubList", true);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r0.account.title);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.account.email);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.account.company);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.account.role);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.items == null ? null : ctx_r0.items.length);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.account.customContent);
  }
}
const _c32 = ["ref"];
const _c33 = ["navbar"];
const _c34 = ["appSwitcherToggle"];
const _c35 = ["appSwitcherKeyboardInteraction"];
function SiNavbarPrimaryComponent_div_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 20)(1, "a", 21)(2, "div", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("has-selected-item", ctx_r2.selectedItemTitle);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", ctx_r2.home);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r2.appTitle);
  }
}
function SiNavbarPrimaryComponent_span_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r3.selectedItemTitle));
  }
}
function SiNavbarPrimaryComponent_ng_container_16_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "a", 23, 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarPrimaryComponent_ng_container_16_Template_a_click_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r12);
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      ctx_r11.toggleAppSwitcher();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"]($event.preventDefault());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "i", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 1, ctx_r4.openAppSwitcherText));
  }
}
function SiNavbarPrimaryComponent_div_18_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 26)(1, "a", 21)(2, "div", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("has-selected-item", ctx_r5.selectedItemTitle);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", ctx_r5.home);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r5.appTitle);
  }
}
function SiNavbarPrimaryComponent_ul_19_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "ul", 27)(1, "li", 28)(2, "a", 29);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarPrimaryComponent_ul_19_Template_a_click_2_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r14);
      const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      ctx_r13.toggleAppSwitcher();
      ctx_r13.focusLaunchpad();
      ctx_r13.closeMobileNav($event);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"]($event.preventDefault());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "i", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "span", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()()();
  }
  if (rf & 2) {
    const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 1, ctx_r6.appSwitcherTitle));
  }
}
function SiNavbarPrimaryComponent_si_navbar_item_21_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-navbar-item", 32);
  }
  if (rf & 2) {
    const item_r15 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", item_r15);
  }
}
function SiNavbarPrimaryComponent_si_navbar_profile_menu_24_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "si-navbar-profile-menu", 33)(1, "div", null, 34);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](3, 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("items", ctx_r8.accountItems)("account", ctx_r8.accountItem);
  }
}
function SiNavbarPrimaryComponent_ng_container_25_p_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p", 44);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r17.appSwitcherTitle));
  }
}
function SiNavbarPrimaryComponent_ng_container_25_p_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p", 45);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mb-9", ctx_r18.isCategorized)("mb-4", !ctx_r18.isCategorized);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 5, ctx_r18.appSwitcherSubTitle));
  }
}
function SiNavbarPrimaryComponent_ng_container_25_div_8_a_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r26 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 51);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarPrimaryComponent_ng_container_25_div_8_a_6_Template_a_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r26);
      const ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r25.hideAppSwitcher());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "div", 52);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "span", 53);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const app_r24 = ctx.$implicit;
    let tmp_1_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", app_r24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", (tmp_1_0 = app_r24.icon) !== null && tmp_1_0 !== undefined ? tmp_1_0 : "");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 3, app_r24.title));
  }
}
function SiNavbarPrimaryComponent_ng_container_25_div_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 46)(1, "span", 47);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 48, 49);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiNavbarPrimaryComponent_ng_container_25_div_8_a_6_Template, 5, 5, "a", 50);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 4, ctx_r19.favoriteAppsTitle));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("listInteractionIsSubList", true);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r19.appsFavorites)("ngForTrackBy", ctx_r19.trackByIndex);
  }
}
function SiNavbarPrimaryComponent_ng_container_25_a_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r28 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 54);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarPrimaryComponent_ng_container_25_a_9_Template_a_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r28);
      const ctx_r27 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r27.showAllApps = !ctx_r27.showAllApps);
    })("keydown.enter", function SiNavbarPrimaryComponent_ng_container_25_a_9_Template_a_keydown_enter_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r28);
      const ctx_r29 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r29.showAllApps = !ctx_r29.showAllApps);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "i", 55);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("show", ctx_r20.showAllApps);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 3, ctx_r20.showAllApps ? ctx_r20.showLessAppsTitle : ctx_r20.showMoreAppsTitle), "");
  }
}
function SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 47);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const appsCategory_r31 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, appsCategory_r31.category));
  }
}
function SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 47);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r34 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r34.defaultAppsTitle));
  }
}
function SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_div_5_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r44 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 65)(1, "div", 66)(2, "i", 67);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_div_5_div_1_Template_i_click_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r44);
      const app_r39 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      const ctx_r42 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r42.toggleFavorite(app_r39));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const app_r39 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("favorite", app_r39.isFavorite)("element-favorites-filled", app_r39.isFavorite)("element-favorites", !app_r39.isFavorite);
  }
}
function SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_div_5_i_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 68);
  }
}
function SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_div_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r47 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 60);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_div_5_div_1_Template, 3, 6, "div", 62);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "a", 63);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.space", function SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_div_5_Template_a_keydown_space_2_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r47);
      const app_r39 = restoredCtx.$implicit;
      const ctx_r46 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r46.toggleFavorite(app_r39));
    })("click", function SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_div_5_Template_a_click_2_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r47);
      const ctx_r48 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r48.hideAppSwitcherOnClick($event.target));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "div", 52);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "span", 53);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_div_5_i_7_Template, 1, 0, "i", 64);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const app_r39 = ctx.$implicit;
    const ctx_r36 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](4);
    let tmp_2_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r36.appItemsFavorites);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", app_r39);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", (tmp_2_0 = app_r39.icon) !== null && tmp_2_0 !== undefined ? tmp_2_0 : "");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 5, app_r39.title), "");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", app_r39.isExternal);
  }
}
function SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_a_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r50 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 69);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_a_7_Template_a_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r50);
      const ctx_r49 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r49.hideAppSwitcher());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "span", 53);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r37 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", ctx_r37.allAppsLink);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMapInterpolate1"]("app-container icon-add btn btn-circle btn-secondary ", (ctx_r37.allAppsLink == null ? null : ctx_r37.allAppsLink.icon) || "element-plus", "");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 5, (ctx_r37.allAppsLink == null ? null : ctx_r37.allAppsLink.title) || "Add more"));
  }
}
function SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 46);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_span_1_Template, 3, 3, "span", 57);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_span_2_Template, 3, 3, "span", 57);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 58, 49);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_div_5_Template, 8, 7, "div", 59);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 60);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_a_7_Template, 5, 7, "a", 61);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const appsCategory_r31 = ctx.$implicit;
    const i_r32 = ctx.index;
    const ctx_r30 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mt-4", ctx_r30.isCategorized);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", appsCategory_r31.category);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !appsCategory_r31.category && ctx_r30.isCategorized);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("apps-categorized", ctx_r30.isCategorized);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("listInteractionIsSubList", true);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", appsCategory_r31.items)("ngForTrackBy", ctx_r30.trackByIndex);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r30.allAppsLink && ctx_r30.appsCategorized.length - 1 === i_r32);
  }
}
function SiNavbarPrimaryComponent_ng_container_25_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiNavbarPrimaryComponent_ng_container_25_ng_container_10_div_1_Template, 8, 10, "div", 56);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r21.appsCategorized)("ngForTrackBy", ctx_r21.trackByIndex);
  }
}
function SiNavbarPrimaryComponent_ng_container_25_Template(rf, ctx) {
  if (rf & 1) {
    const _r52 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 35)(2, "button", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarPrimaryComponent_ng_container_25_Template_button_click_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r52);
      const ctx_r51 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r51.hideAppSwitcher());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiNavbarPrimaryComponent_ng_container_25_p_5_Template, 3, 3, "p", 38);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiNavbarPrimaryComponent_ng_container_25_p_6_Template, 3, 7, "p", 39);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 40);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, SiNavbarPrimaryComponent_ng_container_25_div_8_Template, 7, 6, "div", 41);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](9, SiNavbarPrimaryComponent_ng_container_25_a_9_Template, 4, 5, "a", 42);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](10, SiNavbarPrimaryComponent_ng_container_25_ng_container_10_Template, 2, 2, "ng-container", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](11, "div", 43);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarPrimaryComponent_ng_container_25_Template_div_click_11_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r52);
      const ctx_r53 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r53.appsVisible = false);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 6, ctx_r9.closeAppSwitcherText));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r9.appSwitcherTitle);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r9.appSwitcherSubTitle);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r9.showFavorites);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r9.showFavorites);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r9.showFavorites || ctx_r9.showAllApps);
  }
}
const _c36 = [[["si-navbar-item", "quickAction", ""]], "*"];
const _c37 = ["si-navbar-item [quickAction]", "*"];
function SiNavbarSecondaryComponent_ng_container_4_li_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "si-menu", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("activeChange", function SiNavbarSecondaryComponent_ng_container_4_li_1_ng_container_3_Template_si_menu_activeChange_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r8);
      const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r7.submenuActiveChange($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("items", item_r1.items)("isSubList", true);
  }
}
function SiNavbarSecondaryComponent_ng_container_4_li_1_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
}
function SiNavbarSecondaryComponent_ng_container_4_li_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-menu-item", 7, 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiNavbarSecondaryComponent_ng_container_4_li_1_ng_container_3_Template, 2, 2, "ng-container", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiNavbarSecondaryComponent_ng_container_4_li_1_ng_container_4_Template, 3, 0, "ng-container", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](2);
    const item_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("dropdownFocusOnOpen", false);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", item_r1)("disableParentClick", false)("forceActive", ctx_r2.active)("focusStylingInside", true)("dropdownToggle", _r4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r1.items);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r1.customContent);
  }
}
function SiNavbarSecondaryComponent_ng_container_4_li_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-menu-item", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", item_r1)("focusStylingInside", true);
  }
}
function SiNavbarSecondaryComponent_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiNavbarSecondaryComponent_ng_container_4_li_1_Template, 5, 8, "li", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiNavbarSecondaryComponent_ng_container_4_li_2_Template, 2, 2, "li", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r1 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r1.items || item_r1.customContent);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !item_r1.items && !item_r1.customContent);
  }
}
const _c38 = ["inputRef"];
function SiSearchBarComponent_i_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 5);
  }
}
function SiSearchBarComponent_button_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiSearchBarComponent_button_4_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4);
      const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r3.resetForm());
    })("focusin", function SiSearchBarComponent_button_4_Template_button_focusin_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4);
      const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r5.onCancelFocus($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r2.disabled || ctx_r2.readonly);
  }
}
const _c39 = ["menuBody"];
const _c40 = ["itemLink"];
const _c41 = ["siLink"];
function SiNavbarVerticalItemComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r0.item.title), "\n");
  }
}
function SiNavbarVerticalItemComponent_a_1_i_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 10);
  }
  if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction2"](1, _c0, ctx_r4.item.icon, _r3.active ? ctx_r4.item.icon + "-filled" : ""));
  }
}
function SiNavbarVerticalItemComponent_a_1_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r5.item.badge);
  }
}
function SiNavbarVerticalItemComponent_a_1_span_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", "bg-" + ctx_r6.item.badgeColor);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r6.item.badge, " ");
  }
}
function SiNavbarVerticalItemComponent_a_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 4, 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("activeChange", function SiNavbarVerticalItemComponent_a_1_Template_a_activeChange_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r8);
      const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r7.checkActive());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiNavbarVerticalItemComponent_a_1_i_2_Template, 1, 4, "i", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiNavbarVerticalItemComponent_a_1_span_3_Template, 2, 1, "span", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiNavbarVerticalItemComponent_a_1_span_7_Template, 2, 2, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", ctx_r1.item)("listInteractionItemDisabled", ctx_r1.collapsed === "hidden");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-current", _r3.active);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.item.icon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.item.icon && ctx_r1.item.badge !== undefined && ctx_r1.item.badge !== "");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("ps-4", ctx_r1.item.icon)("ps-5", !ctx_r1.item.icon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 11, ctx_r1.item.title));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.item.badge !== undefined && ctx_r1.item.badge !== "");
  }
}
function SiNavbarVerticalItemComponent_div_2_i_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 26);
  }
  if (rf & 2) {
    const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction2"](1, _c0, ctx_r11.item.icon, ctx_r11.subItemActive ? ctx_r11.item.icon + "-filled" : ""));
  }
}
function SiNavbarVerticalItemComponent_div_2_span_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", "bg-" + ctx_r12.item.badgeColor);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r12.item.badge, " ");
  }
}
function SiNavbarVerticalItemComponent_div_2_a_17_i_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 26);
  }
  if (rf & 2) {
    const subitem_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    const _r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction2"](1, _c0, subitem_r16.icon, _r17.active ? subitem_r16.icon + "-filled" : ""));
  }
}
function SiNavbarVerticalItemComponent_div_2_a_17_span_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const subitem_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", "bg-" + subitem_r16.badgeColor);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", subitem_r16.badge, " ");
  }
}
function SiNavbarVerticalItemComponent_div_2_a_17_Template(rf, ctx) {
  if (rf & 1) {
    const _r23 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 27, 28);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("activeChange", function SiNavbarVerticalItemComponent_div_2_a_17_Template_a_activeChange_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r23);
      const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r22.checkActive());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiNavbarVerticalItemComponent_div_2_a_17_i_2_Template, 1, 4, "i", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "span", 29);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiNavbarVerticalItemComponent_div_2_a_17_span_6_Template, 2, 2, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const subitem_r16 = ctx.$implicit;
    const _r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
    const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", subitem_r16)("listInteractionItemDisabled", !!ctx_r14.collapsed || !ctx_r14.open);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-current", _r17.active);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", subitem_r16.icon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("ps-5", !ctx_r14.textOnly);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 8, subitem_r16.title));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", subitem_r16.badge !== undefined && subitem_r16.badge !== "");
  }
}
function SiNavbarVerticalItemComponent_div_2_si_navbar_vertical_flyout_18_Template(rf, ctx) {
  if (rf & 1) {
    const _r25 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "si-navbar-vertical-flyout", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("closeMenu", function SiNavbarVerticalItemComponent_div_2_si_navbar_vertical_flyout_18_Template_si_navbar_vertical_flyout_closeMenu_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r25);
      const ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r24.flyOut = false);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](3);
    const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", ctx_r15.item)("top", ctx_r15.flyOutTop)("navbar", ctx_r15.navbar)("menuParentItem", _r9);
  }
}
function SiNavbarVerticalItemComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r27 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 13)(1, "div", 14)(2, "a", 15, 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarVerticalItemComponent_div_2_Template_a_click_2_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r27);
      const ctx_r26 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r26.triggerItemOrMenu($event));
    })("keydown.enter", function SiNavbarVerticalItemComponent_div_2_Template_a_keydown_enter_2_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r27);
      const ctx_r28 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r28.triggerItemOrMenu($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "a", 17, 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.enter", function SiNavbarVerticalItemComponent_div_2_Template_a_keydown_enter_5_listener($event) {
      return $event.preventDefault();
    })("activeChange", function SiNavbarVerticalItemComponent_div_2_Template_a_activeChange_5_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r27);
      const ctx_r30 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r30.checkActive());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiNavbarVerticalItemComponent_div_2_i_7_Template, 1, 4, "i", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "span", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](10, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, SiNavbarVerticalItemComponent_div_2_span_11_Template, 2, 2, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "a", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarVerticalItemComponent_div_2_Template_a_click_12_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r27);
      const ctx_r31 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r31.triggerMenu($event));
    })("keydown.enter", function SiNavbarVerticalItemComponent_div_2_Template_a_keydown_enter_12_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r27);
      const ctx_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r32.triggerMenu($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](13, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](14, "span", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](15, "div", 22, 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](17, SiNavbarVerticalItemComponent_div_2_a_17_Template, 7, 10, "a", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](18, SiNavbarVerticalItemComponent_div_2_si_navbar_vertical_flyout_18_Template, 1, 4, "si-navbar-vertical-flyout", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("open", ctx_r2.open)("expanded", ctx_r2.expanded)("sub-active", ctx_r2.subItemActive || ctx_r2.flyOut);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-expanded", ctx_r2.expanded);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("open", ctx_r2.open)("hover-full", !ctx_r2.item.link && !ctx_r2.item.action && !ctx_r2.item.href);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("navbar-vertical-no-collapse", !ctx_r2.isLink)("active", ctx_r2.subItemActive);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("listInteractionItemDisabled", !ctx_r2.isLink && !ctx_r2.collapsed || ctx_r2.collapsed === "hidden");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("title", ctx_r2.item.tooltip ? _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 29, ctx_r2.item.tooltip) : null)("aria-current", ctx_r2.subItemActive);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", ctx_r2.item);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r2.item.icon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](10, 31, ctx_r2.item.title));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r2.item.badge !== undefined && ctx_r2.item.badge !== "");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("listInteractionItemDisabled", !!ctx_r2.collapsed);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](13, 33, ctx_r2.expanded ? ctx_r2.collapseButtonText : ctx_r2.expandButtonText));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("max-height", ctx_r2.menuMaxHeight, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r2.item.items)("ngForTrackBy", ctx_r2.trackByIndex);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r2.flyOut);
  }
}
const _c42 = ["searchBar"];
const _c43 = ["listInteraction"];
function SiNavbarVerticalComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 6)(1, "button", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarVerticalComponent_div_2_Template_button_click_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r5);
      const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r4.toggleMobileExpand($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r1.navbarExpandButtonText));
  }
}
function SiNavbarVerticalComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 8)(1, "button", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarVerticalComponent_div_3_Template_button_click_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r7);
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r6.toggleCollapse($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r2.navbarExpandButtonText));
  }
}
function SiNavbarVerticalComponent_nav_4_div_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 20)(1, "si-search-bar", 21, 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("searchChange", function SiNavbarVerticalComponent_nav_4_div_8_Template_si_search_bar_searchChange_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r14);
      const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r13.doSearch($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "button", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarVerticalComponent_nav_4_div_8_Template_button_click_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r14);
      const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r15.toggleSearch($event, false));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](6, "i", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "button", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarVerticalComponent_nav_4_div_8_Template_button_click_7_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r14);
      const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r16.toggleSearch($event, true));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](8, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](9, "i", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("placeholder", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 8, ctx_r9.searchPlaceholder))("colorVariant", "base-0")("debounceTime", 400)("showIcon", true)("prohibitedCharacters", "*?")("tabbable", false);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 10, ctx_r9.searchPlaceholder));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](8, 12, ctx_r9.searchPlaceholder));
  }
}
function SiNavbarVerticalComponent_nav_4_si_navbar_vertical_item_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r19 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "si-navbar-vertical-item", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("menuTrigger", function SiNavbarVerticalComponent_nav_4_si_navbar_vertical_item_11_Template_si_navbar_vertical_item_menuTrigger_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r19);
      const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r18.mobileCollapseTimer());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r17 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](10);
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
    const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", item_r17)("textOnly", ctx_r11.textOnly)("scroller", _r10)("collapsed", ctx_r11.isCollapsed)("collapseButtonText", ctx_r11.navbarCollapseButtonText)("expandButtonText", ctx_r11.navbarExpandButtonText)("navbar", _r8);
  }
}
function SiNavbarVerticalComponent_nav_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r21 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "nav", 10, 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarVerticalComponent_nav_4_Template_nav_click_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r21);
      const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r20.handleClick($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 12)(3, "button", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarVerticalComponent_nav_4_Template_button_click_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r21);
      const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r22.toggleCollapse($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 14)(6, "button", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarVerticalComponent_nav_4_Template_button_click_6_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r21);
      const ctx_r23 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r23.toggleMobileExpand($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](7, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, SiNavbarVerticalComponent_nav_4_div_8_Template, 10, 14, "div", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 17, 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, SiNavbarVerticalComponent_nav_4_si_navbar_vertical_item_11_Template, 1, 7, "si-navbar-vertical-item", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-only", ctx_r3.textOnly);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("element-double-left", !ctx_r3.collapsed)("element-double-right", ctx_r3.collapsed);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("listInteractionItemDisabled", ctx_r3.isMobileSmall && !ctx_r3.mobileExpanded || (ctx_r3.isMobile && !ctx_r3.mobileExpanded || !ctx_r3.isMobile && ctx_r3.collapsed) && ctx_r3.textOnly);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 19, ctx_r3.collapsed ? ctx_r3.navbarExpandButtonText : ctx_r3.navbarCollapseButtonText))("aria-expanded", !ctx_r3.collapsed);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("element-double-left", ctx_r3.mobileExpanded)("element-double-right", !ctx_r3.mobileExpanded);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("listInteractionItemDisabled", ctx_r3.isMobileSmall && !ctx_r3.mobileExpanded || (ctx_r3.isMobile && !ctx_r3.mobileExpanded || !ctx_r3.isMobile && ctx_r3.collapsed) && ctx_r3.textOnly);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](7, 21, ctx_r3.mobileExpanded ? ctx_r3.navbarCollapseButtonText : ctx_r3.navbarExpandButtonText))("aria-expanded", ctx_r3.mobileExpanded);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r3.searchable && (!ctx_r3.isMobileSmall || ctx_r3.mobileExpanded));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r3.items)("ngForTrackBy", ctx_r3.trackByIndex);
  }
}
const _c44 = ["ctrl"];
function SiNumberInputComponent_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-secondary", !ctx_r1.disabled)("text-disabled", ctx_r1.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r1.unit);
  }
}
function SiNumberInputComponent_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "button", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mousedown", function SiNumberInputComponent_ng_container_3_Template_button_mousedown_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4);
      const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r3.autoUpdateStart($event, false));
    })("touchstart", function SiNumberInputComponent_ng_container_3_Template_button_touchstart_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4);
      const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r5.autoUpdateStart($event, false));
    })("touchend", function SiNumberInputComponent_ng_container_3_Template_button_touchend_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4);
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r6.autoUpdateStop());
    })("mouseup", function SiNumberInputComponent_ng_container_3_Template_button_mouseup_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4);
      const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r7.autoUpdateStop());
    })("mouseleave", function SiNumberInputComponent_ng_container_3_Template_button_mouseleave_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4);
      const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r8.autoUpdateStop());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "button", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mousedown", function SiNumberInputComponent_ng_container_3_Template_button_mousedown_2_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4);
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r9.autoUpdateStart($event, true));
    })("touchstart", function SiNumberInputComponent_ng_container_3_Template_button_touchstart_2_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4);
      const ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r10.autoUpdateStart($event, true));
    })("touchend", function SiNumberInputComponent_ng_container_3_Template_button_touchend_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4);
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r11.autoUpdateStop());
    })("mouseup", function SiNumberInputComponent_ng_container_3_Template_button_mouseup_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4);
      const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r12.autoUpdateStop());
    })("mouseleave", function SiNumberInputComponent_ng_container_3_Template_button_mouseleave_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4);
      const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r13.autoUpdateStop());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r2.disabled || ctx_r2.readonly || !ctx_r2.canDec);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r2.disabled || ctx_r2.readonly || !ctx_r2.canInc);
  }
}
const _c45 = function () {
  return {
    standalone: true
  };
};
function SiResultDetailsListComponent_li_1_si_loading_spinner_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-loading-spinner", 11);
  }
}
function SiResultDetailsListComponent_li_1_si_icon_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-icon", 12);
  }
  if (rf & 2) {
    const step_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("icon", step_r1.icon);
  }
}
function SiResultDetailsListComponent_li_1_ng_container_3_si_icon_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-icon", 18);
  }
}
function SiResultDetailsListComponent_li_1_ng_container_3_si_icon_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-icon", 19);
  }
}
function SiResultDetailsListComponent_li_1_ng_container_3_si_icon_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-icon", 20);
  }
}
function SiResultDetailsListComponent_li_1_ng_container_3_si_icon_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-icon", 21);
  }
}
function SiResultDetailsListComponent_li_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0, 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiResultDetailsListComponent_li_1_ng_container_3_si_icon_1_Template, 1, 0, "si-icon", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiResultDetailsListComponent_li_1_ng_container_3_si_icon_2_Template, 1, 0, "si-icon", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiResultDetailsListComponent_li_1_ng_container_3_si_icon_3_Template, 1, 0, "si-icon", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiResultDetailsListComponent_li_1_ng_container_3_si_icon_4_Template, 1, 0, "si-icon", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const step_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitch", step_r1.state);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", ctx_r4.resultDetailStepState.Passed);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", ctx_r4.resultDetailStepState.Failed);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", ctx_r4.resultDetailStepState.NotStarted);
  }
}
function SiResultDetailsListComponent_li_1_span_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const step_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](step_r1.value);
  }
}
function SiResultDetailsListComponent_li_1_span_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const step_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, step_r1.errorMessage));
  }
}
function SiResultDetailsListComponent_li_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiResultDetailsListComponent_li_1_si_loading_spinner_1_Template, 1, 0, "si-loading-spinner", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiResultDetailsListComponent_li_1_si_icon_2_Template, 1, 1, "si-icon", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiResultDetailsListComponent_li_1_ng_container_3_Template, 5, 4, "ng-container", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 6)(5, "div", 7)(6, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](8, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](9, SiResultDetailsListComponent_li_1_span_9_Template, 2, 1, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](10, SiResultDetailsListComponent_li_1_span_10_Template, 3, 3, "span", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const step_r1 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-primary", step_r1.state === "Running");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", step_r1.state === "Running");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", step_r1.icon && step_r1.state !== "Running");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !step_r1.icon && step_r1.state !== "Running");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](8, 8, step_r1.description));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", step_r1.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", step_r1.errorMessage);
  }
}
const _c46 = ["typeahead"];
const _c47 = ["typeaheadMatch"];
function SiTypeaheadComponent_ng_template_0_input_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "input", 5);
  }
  if (rf & 2) {
    const match_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().match;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("checked", match_r3.itemSelected);
  }
}
function SiTypeaheadComponent_ng_template_0_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "span", 6);
  }
  if (rf & 2) {
    const match_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().match;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", match_r3.iconClass);
  }
}
function SiTypeaheadComponent_ng_template_0_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const segment_r9 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("typeahead-match-segment-matching", segment_r9.isMatching);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](segment_r9.text);
  }
}
function SiTypeaheadComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiTypeaheadComponent_ng_template_0_input_0_Template, 1, 1, "input", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTypeaheadComponent_ng_template_0_span_1_Template, 1, 1, "span", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiTypeaheadComponent_ng_template_0_span_2_Template, 2, 3, "span", 4);
  }
  if (rf & 2) {
    const match_r3 = ctx.match;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.multiselect);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", match_r3.iconClass);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", match_r3.result)("ngForTrackBy", ctx_r1.trackByIndex);
  }
}
function SiTypeaheadComponent_ul_2_li_2_ng_template_2_Template(rf, ctx) {}
const _c48 = function (a0, a1, a2, a3) {
  return {
    item: a0,
    index: a1,
    match: a2,
    query: a3
  };
};
function SiTypeaheadComponent_ul_2_li_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 10, 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiTypeaheadComponent_ul_2_li_2_Template_li_click_0_listener($event) {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);
      const index_r13 = restoredCtx.index;
      const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r16.selectMatch($event, ctx_r16.dropup ? ctx_r16.matchesArray.length - index_r13 - 1 : index_r13));
    })("mousedown", function SiTypeaheadComponent_ul_2_li_2_Template_li_mousedown_0_listener($event) {
      return $event.preventDefault();
    })("mouseover", function SiTypeaheadComponent_ul_2_li_2_Template_li_mouseover_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);
      const index_r13 = restoredCtx.index;
      const ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r19.activeIndex = ctx_r19.dropup ? ctx_r19.matchesArray.length - index_r13 - 1 : index_r13);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiTypeaheadComponent_ul_2_li_2_ng_template_2_Template, 0, 0, "ng-template", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const match_r12 = ctx.$implicit;
    const index_r13 = ctx.index;
    const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    const _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("active", ctx_r11.activeIndex === (ctx_r11.dropup ? ctx_r11.matchesArray.length - index_r13 - 1 : index_r13));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r11.parent.typeaheadItemTemplate || _r0)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction4"](4, _c48, match_r12.option, ctx_r11.dropup ? ctx_r11.matchesArray.length - index_r13 - 1 : index_r13, match_r12, ctx_r11.query));
  }
}
function SiTypeaheadComponent_ul_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "ul", 7, 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiTypeaheadComponent_ul_2_li_2_Template, 3, 9, "li", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("margin-inline-start", ctx_r2.iconOffset, "px");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("up", ctx_r2.dropup);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r2.matchesArray)("ngForTrackBy", ctx_r2.trackByIndex);
  }
}
const _c49 = ["clearInputButton"];
const _c50 = ["valueInput"];
function SiFilteredSearchComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "span", 6);
  }
  if (rf & 2) {
    const model_r5 = ctx.item;
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r1.highlight(model_r5), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
  }
}
function SiFilteredSearchComponent_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "span", 7);
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("empty", !ctx_r2.internSearchCriteria.criteria.length && !ctx_r2.internSearchCriteria.value);
  }
}
function SiFilteredSearchComponent_div_4_input_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "input", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function SiFilteredSearchComponent_div_4_input_3_Template_input_ngModelChange_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);
      const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](criterion_r6.operator = $event);
    })("keyup", function SiFilteredSearchComponent_div_4_input_3_Template_input_keyup_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);
      const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r18.operatorKeyUp($event));
    })("click", function SiFilteredSearchComponent_div_4_input_3_Template_input_click_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);
      const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      const ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r19.editOperator(criterion_r6, $event));
    })("focus", function SiFilteredSearchComponent_div_4_input_3_Template_input_focus_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);
      const i_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().index;
      const ctx_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r21.inputFocused($event, i_r7));
    })("focusout", function SiFilteredSearchComponent_div_4_input_3_Template_input_focusout_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);
      const ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      const criterion_r6 = ctx_r24.$implicit;
      const i_r7 = ctx_r24.index;
      const ctx_r23 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r23.inputFocusOut($event, criterion_r6.name, i_r7));
    })("ngModelChange", function SiFilteredSearchComponent_div_4_input_3_Template_input_ngModelChange_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);
      const i_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().index;
      const ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r25.modelChanged($event, i_r7));
    })("typeaheadOnSelect", function SiFilteredSearchComponent_div_4_input_3_Template_input_typeaheadOnSelect_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);
      const ctx_r27 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r27.typeaheadOnSelectOperator());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r28 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const i_r7 = ctx_r28.index;
    const criterion_r6 = ctx_r28.$implicit;
    const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMapInterpolate1"]("operator-input-", i_r7, " operator-input");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", criterion_r6.operator)("siTypeahead", ctx_r8.getCriterionOperators(criterion_r6.name, criterion_r6.operator))("typeaheadProcess", false)("typeaheadAutoSelectIndex", ctx_r8.getSelectedOperatorIndex(criterion_r6.name, criterion_r6.operator))("typeaheadMinLength", 0)("typeaheadOptionsLimit", 0)("readOnly", false)("typeaheadScrollable", true)("typeaheadOptionsInScrollableView", ctx_r8.optionsInScrollableView);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 14, ctx_r8.searchLabel))("size", ctx_r8.getLongestOperatorLength(criterion_r6.name));
  }
}
function SiFilteredSearchComponent_div_4_div_4_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;
    const ctx_r29 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("tabindex", !ctx_r29.disabled ? 0 : -1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", criterion_r6.operator, " ");
  }
}
function SiFilteredSearchComponent_div_4_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r33 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiFilteredSearchComponent_div_4_div_4_Template_div_click_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r33);
      const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      const ctx_r31 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r31.editOperator(criterion_r6, $event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiFilteredSearchComponent_div_4_div_4_span_1_Template, 2, 2, "span", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !!criterion_r6.operator);
  }
}
function SiFilteredSearchComponent_div_4_div_5_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 28);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "date");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;
    const ctx_r36 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("tabindex", ctx_r36.disabled ? -1 : 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](2, 2, criterion_r6.dateValue, ctx_r36.shortDateFormat), " ");
  }
}
function SiFilteredSearchComponent_div_4_div_5_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 29)(1, "span", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "date");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;
    const ctx_r38 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("tabindex", ctx_r38.disabled ? -1 : 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](3, 2, criterion_r6.dateValue, ctx_r38.getDateTimeFormat(criterion_r6)), " ");
  }
}
const _c51 = function (a0) {
  return {
    itemCount: a0
  };
};
function SiFilteredSearchComponent_div_4_div_5_ng_template_6_span_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 29)(1, "span", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3).$implicit;
    const ctx_r46 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("tabindex", ctx_r46.disabled ? -1 : 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](3, 2, ctx_r46.itemCountText, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](5, _c51, criterion_r6.value.length)), " ");
  }
}
function SiFilteredSearchComponent_div_4_div_5_ng_template_6_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 29)(1, "span", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3).$implicit;
    const ctx_r47 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("tabindex", ctx_r47.disabled ? -1 : 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate2"](" ", criterion_r6.value.length, " ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 3, ctx_r47.items), " ");
  }
}
function SiFilteredSearchComponent_div_4_div_5_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiFilteredSearchComponent_div_4_div_5_ng_template_6_span_0_Template, 4, 7, "span", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiFilteredSearchComponent_div_4_div_5_ng_template_6_span_1_Template, 4, 5, "span", 31);
  }
  if (rf & 2) {
    const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;
    const ctx_r40 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !!criterion_r6.value && ctx_r40.itemCountText);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !!criterion_r6.value && !ctx_r40.itemCountText);
  }
}
function SiFilteredSearchComponent_div_4_div_5_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 29)(1, "span", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "toLabel");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;
    const ctx_r42 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("tabindex", ctx_r42.disabled ? -1 : 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](3, 2, criterion_r6.value, ctx_r42.getOptionsFromCriteria(criterion_r6.name)), " ");
  }
}
function SiFilteredSearchComponent_div_4_div_5_button_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r54 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiFilteredSearchComponent_div_4_div_5_button_10_Template_button_click_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r54);
      const i_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).index;
      const ctx_r52 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r52.deleteCriterion($event, i_r7));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r43 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r43.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 2, ctx_r43.clearButtonLabel));
  }
}
function SiFilteredSearchComponent_div_4_div_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keyup.enter", function SiFilteredSearchComponent_div_4_div_5_Template_div_keyup_enter_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r57);
      const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      const ctx_r55 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r55.editValue(criterion_r6, $event));
    })("click", function SiFilteredSearchComponent_div_4_div_5_Template_div_click_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r57);
      const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      const ctx_r58 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r58.editValue(criterion_r6, $event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](1, 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiFilteredSearchComponent_div_4_div_5_ng_template_2_Template, 3, 5, "ng-template", null, 23, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiFilteredSearchComponent_div_4_div_5_ng_template_4_Template, 4, 5, "ng-template", null, 24, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiFilteredSearchComponent_div_4_div_5_ng_template_6_Template, 2, 2, "ng-template", null, 25, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, SiFilteredSearchComponent_div_4_div_5_ng_template_8_Template, 4, 5, "ng-template", null, 26, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](10, SiFilteredSearchComponent_div_4_div_5_button_10_Template, 2, 4, "button", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const _r35 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](3);
    const _r37 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](5);
    const _r39 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](7);
    const _r41 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](9);
    const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    const ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("invalid-criterion", !ctx_r10.validateCriterionLabel(criterion_r6) || !ctx_r10.validateCriterionValue(criterion_r6));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", !!criterion_r6.dateValue && ctx_r10.isDateTime(criterion_r6.name) ? _r37 : !!criterion_r6.dateValue && ctx_r10.isDate(criterion_r6.name) ? _r35 : !!criterion_r6.value && ctx_r10.hasMultiSelections(criterion_r6.name, criterion_r6.value) ? _r39 : _r41);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r10.readonly);
  }
}
function SiFilteredSearchComponent_div_4_input_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r64 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "input", 34, 35);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown", function SiFilteredSearchComponent_div_4_input_6_Template_input_keydown_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r64);
      const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      const ctx_r62 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r62.filterKeyInputEvents($event, criterion_r6.name));
    })("keyup", function SiFilteredSearchComponent_div_4_input_6_Template_input_keyup_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r64);
      const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      const ctx_r65 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r65.onValueInputKeyEvent($event, criterion_r6.name));
    })("focus", function SiFilteredSearchComponent_div_4_input_6_Template_input_focus_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r64);
      const i_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().index;
      const ctx_r67 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r67.inputFocused($event, i_r7));
    })("blur", function SiFilteredSearchComponent_div_4_input_6_Template_input_blur_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r64);
      const ctx_r69 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r69.focusState = false);
    })("ngModelChange", function SiFilteredSearchComponent_div_4_input_6_Template_input_ngModelChange_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r64);
      const ctx_r71 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      const i_r7 = ctx_r71.index;
      const criterion_r6 = ctx_r71.$implicit;
      const ctx_r70 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r70.modelChanged($event, i_r7, criterion_r6.name));
    })("typeaheadOnSelect", function SiFilteredSearchComponent_div_4_input_6_Template_input_typeaheadOnSelect_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r64);
      const ctx_r73 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      const criterion_r6 = ctx_r73.$implicit;
      const i_r7 = ctx_r73.index;
      const ctx_r72 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r72.typeaheadOnSelectValue(criterion_r6.name, i_r7, $event));
    })("typeaheadOnMultiselectClose", function SiFilteredSearchComponent_div_4_input_6_Template_input_typeaheadOnMultiselectClose_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r64);
      const ctx_r74 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r74.focusFreeInputField());
    })("typeaheadClosed", function SiFilteredSearchComponent_div_4_input_6_Template_input_typeaheadClosed_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r64);
      const ctx_r75 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r75.onValueInputClosed());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r76 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const i_r7 = ctx_r76.index;
    const criterion_r6 = ctx_r76.$implicit;
    const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMapInterpolate1"]("value-input-", i_r7, " criterion-value pe-4");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("me-n8", criterion_r6.value == null ? null : criterion_r6.value.length)("pe-8", criterion_r6.value == null ? null : criterion_r6.value.length);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("type", ctx_r11.getInputType(criterion_r6.name))("step", ctx_r11.getStepAttribute(criterion_r6.name))("ngModel", !ctx_r11.isMultiSelect(criterion_r6.name) ? criterion_r6.value : "")("siTypeahead", ctx_r11.getCriterionOptions(criterion_r6.name, i_r7, ctx_r11.isMultiSelect(criterion_r6.name) ? "" : criterion_r6.value))("typeaheadProcess", ctx_r11.isMultiSelect(criterion_r6.name))("typeaheadMultiSelect", ctx_r11.isMultiSelect(criterion_r6.name))("typeaheadMinLength", 0)("typeaheadOptionsLimit", ctx_r11.maxCriteriaOptions)("readOnly", ctx_r11.readonly || ctx_r11.onlySelectValue || ctx_r11.getCriterionOnlySelectValue(criterion_r6.name))("typeaheadScrollable", true)("typeaheadOptionsInScrollableView", ctx_r11.optionsInScrollableView);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 19, ctx_r11.searchLabel));
  }
}
function SiFilteredSearchComponent_div_4_input_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r78 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "input", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown", function SiFilteredSearchComponent_div_4_input_7_Template_input_keydown_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r78);
      const ctx_r77 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r77.onDateTimeKeyDown($event));
    })("keyup", function SiFilteredSearchComponent_div_4_input_7_Template_input_keyup_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r78);
      const ctx_r79 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r79.onDateTimeKeyEvent($event));
    })("focus", function SiFilteredSearchComponent_div_4_input_7_Template_input_focus_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r78);
      const i_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().index;
      const ctx_r80 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r80.inputFocused($event, i_r7));
    })("blur", function SiFilteredSearchComponent_div_4_input_7_Template_input_blur_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r78);
      const ctx_r82 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r82.focusState = false);
    })("siDatepickerClose", function SiFilteredSearchComponent_div_4_input_7_Template_input_siDatepickerClose_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r78);
      const ctx_r83 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r83.onDatePickerClose());
    })("ngModelChange", function SiFilteredSearchComponent_div_4_input_7_Template_input_ngModelChange_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r78);
      const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      const ctx_r84 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r84.selectDate(criterion_r6, $event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r86 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const i_r7 = ctx_r86.index;
    const criterion_r6 = ctx_r86.$implicit;
    const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMapInterpolate1"]("value-input-", i_r7, " criterion-value datepicker form-control");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("me-n8", criterion_r6.dateValue)("pe-8", criterion_r6.dateValue);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siDatepickerConfig", ctx_r12.getDatepickerConfig(criterion_r6))("ngModel", criterion_r6.dateValue);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 10, ctx_r12.searchLabel));
  }
}
function SiFilteredSearchComponent_div_4_input_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r88 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "input", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown", function SiFilteredSearchComponent_div_4_input_8_Template_input_keydown_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r88);
      const ctx_r87 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r87.onDateTimeKeyDown($event));
    })("keyup", function SiFilteredSearchComponent_div_4_input_8_Template_input_keyup_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r88);
      const ctx_r89 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r89.onDateTimeKeyEvent($event));
    })("focus", function SiFilteredSearchComponent_div_4_input_8_Template_input_focus_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r88);
      const i_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().index;
      const ctx_r90 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r90.inputFocused($event, i_r7));
    })("blur", function SiFilteredSearchComponent_div_4_input_8_Template_input_blur_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r88);
      const ctx_r92 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r92.focusState = false);
    })("siDatepickerClose", function SiFilteredSearchComponent_div_4_input_8_Template_input_siDatepickerClose_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r88);
      const ctx_r93 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r93.onDatePickerClose());
    })("siDatepickerDisabledTime", function SiFilteredSearchComponent_div_4_input_8_Template_input_siDatepickerDisabledTime_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r88);
      const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      const ctx_r94 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r94.disableTime(criterion_r6, $event));
    })("ngModelChange", function SiFilteredSearchComponent_div_4_input_8_Template_input_ngModelChange_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r88);
      const criterion_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      const ctx_r96 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r96.selectDate(criterion_r6, $event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r98 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const i_r7 = ctx_r98.index;
    const criterion_r6 = ctx_r98.$implicit;
    const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMapInterpolate1"]("value-input-", i_r7, " criterion-value datepicker form-control");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("me-n8", criterion_r6.dateValue)("pe-8", criterion_r6.dateValue);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siDatepickerConfig", ctx_r13.getDatepickerConfig(criterion_r6))("ngModel", criterion_r6.dateValue);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 10, ctx_r13.searchLabel));
  }
}
function SiFilteredSearchComponent_div_4_button_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r102 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 38, 39);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiFilteredSearchComponent_div_4_button_9_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r102);
      const ctx_r101 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      const i_r7 = ctx_r101.index;
      const criterion_r6 = ctx_r101.$implicit;
      const ctx_r100 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r100.clearValueInput(i_r7, criterion_r6));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r14.clearButtonLabel));
  }
}
function SiFilteredSearchComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r104 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 8)(1, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiFilteredSearchComponent_div_4_Template_div_click_1_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r104);
      const criterion_r6 = restoredCtx.$implicit;
      const ctx_r103 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r103.editCriterion(criterion_r6));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiFilteredSearchComponent_div_4_input_3_Template, 2, 16, "input", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiFilteredSearchComponent_div_4_div_4_Template, 2, 1, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiFilteredSearchComponent_div_4_div_5_Template, 11, 4, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiFilteredSearchComponent_div_4_input_6_Template, 3, 21, "input", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiFilteredSearchComponent_div_4_input_7_Template, 2, 12, "input", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, SiFilteredSearchComponent_div_4_input_8_Template, 2, 12, "input", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](9, SiFilteredSearchComponent_div_4_button_9_Template, 3, 3, "button", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const criterion_r6 = ctx.$implicit;
    const i_r7 = ctx.index;
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx_r3.disabled)("invalid-criterion", !ctx_r3.validateCriterionLabel(criterion_r6));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-disabled", ctx_r3.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", criterion_r6.label, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r3.isOperatorSpecified(criterion_r6.name) && ctx_r3.editCriterionIndex === i_r7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", criterion_r6.operator && ctx_r3.editCriterionIndex !== i_r7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r3.editCriterionIndex !== i_r7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r3.editCriterionIndex === i_r7 && !ctx_r3.isDateOrDateTime(criterion_r6.name));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r3.editCriterionIndex === i_r7 && ctx_r3.isDate(criterion_r6.name));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r3.editCriterionIndex === i_r7 && ctx_r3.isDateTime(criterion_r6.name));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r3.editCriterionIndex === i_r7 && ((criterion_r6.value == null ? null : criterion_r6.value.length) || criterion_r6.dateValue) && !ctx_r3.readonly);
  }
}
function SiFilteredSearchComponent_button_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r106 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 40);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiFilteredSearchComponent_button_7_Template_button_click_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r106);
      const ctx_r105 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r105.deleteAllCriteria($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r4.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 2, ctx_r4.clearButtonLabel));
  }
}
const _c52 = ["fileInput"];
function SiFileDropzoneComponent_div_13_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate2"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 2, ctx_r2.maxFileSizeText), ": ", ctx_r2.maxFileSizeString, ". ");
  }
}
function SiFileDropzoneComponent_div_13_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate2"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 2, ctx_r3.acceptText), ": ", ctx_r3.accept, ". ");
  }
}
function SiFileDropzoneComponent_div_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiFileDropzoneComponent_div_13_ng_container_1_Template, 3, 4, "ng-container", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiFileDropzoneComponent_div_13_ng_container_2_Template, 3, 4, "ng-container", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.maxFileSize);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.accept);
  }
}
const _c53 = ["dropZone"];
function SiFileUploaderComponent_si_inline_notification_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-inline-notification", 6);
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("message", ctx_r1.maxFilesReachedText);
  }
}
function SiFileUploaderComponent_div_4_div_7_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const file_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](": ", file_r4.httpErrorText, "");
  }
}
function SiFileUploaderComponent_div_4_div_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-icon", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiFileUploaderComponent_div_4_div_7_ng_container_4_Template, 2, 1, "ng-container", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const file_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-warning", file_r4.status === "invalid")("text-danger", file_r4.status === "error");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("icon", file_r4.status === "invalid" ? "element-triangle-filled" : "element-circle-filled")("color", file_r4.status === "invalid" ? "status-warning" : "status-danger")("stackedColor", file_r4.status === "invalid" ? "status-warning-contrast" : "status-danger-contrast");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 9, file_r4.errorText), "");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", file_r4.httpErrorText);
  }
}
function SiFileUploaderComponent_div_4_div_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 22)(1, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "si-progressbar", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const file_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("", file_r4.progress, " %");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", file_r4.progress)("ariaLabel", ctx_r7.uploadingText);
  }
}
function SiFileUploaderComponent_div_4_button_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiFileUploaderComponent_div_4_button_10_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r18);
      const file_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r16.retryUpload(file_r4));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", !ctx_r8.uploadEnabled)("title", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 3, ctx_r8.uploadButtonText));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 5, ctx_r8.uploadButtonText));
  }
}
function SiFileUploaderComponent_div_4_button_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r21 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiFileUploaderComponent_div_4_button_11_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r21);
      const i_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().index;
      const ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r19.removeFile(i_r5));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("title", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 2, ctx_r9.removeButtonText));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 4, ctx_r9.removeButtonText));
  }
}
function SiFileUploaderComponent_div_4_button_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r24 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiFileUploaderComponent_div_4_button_12_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r24);
      const file_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r22.cancelUpload(file_r4));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("title", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 2, ctx_r10.cancelButtonText));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 4, ctx_r10.cancelButtonText));
  }
}
function SiFileUploaderComponent_div_4_si_icon_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-icon", 28);
  }
  if (rf & 2) {
    const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("alt", ctx_r11.successTextTitle);
  }
}
function SiFileUploaderComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 9)(3, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiFileUploaderComponent_div_4_div_7_Template, 5, 11, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, SiFileUploaderComponent_div_4_div_8_Template, 4, 3, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](10, SiFileUploaderComponent_div_4_button_10_Template, 3, 7, "button", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, SiFileUploaderComponent_div_4_button_11_Template, 3, 6, "button", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](12, SiFileUploaderComponent_div_4_button_12_Template, 3, 6, "button", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](13, SiFileUploaderComponent_div_4_si_icon_13_Template, 1, 1, "si-icon", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const file_r4 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("fade-out", file_r4.fadeOut);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](file_r4.fileName);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](file_r4.size);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", file_r4.errorText);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !file_r4.errorText);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", file_r4.status === "error");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", file_r4.status === "added" || file_r4.status === "error" || file_r4.status === "invalid");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", file_r4.status === "uploading" || file_r4.status === "queued");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", file_r4.status === "success");
  }
}
function SiFileUploaderComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r26 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 29)(1, "button", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiFileUploaderComponent_div_5_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r26);
      const ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r25.reset());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "button", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiFileUploaderComponent_div_5_Template_button_click_4_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r26);
      const ctx_r27 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r27.fileUpload());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r3.pending || !ctx_r3.files.length);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 4, ctx_r3.clearButtonText));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", !ctx_r3.uploadEnabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 6, ctx_r3.uploadButtonText));
  }
}
function SiFormContainerComponent_div_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiFormContainerComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiFormContainerComponent_div_2_ng_container_1_Template, 1, 0, "ng-container", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r3);
  }
}
function SiFormContainerComponent_div_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiFormContainerComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiFormContainerComponent_div_3_ng_container_1_Template, 1, 0, "ng-container", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("breakpoints", ctx_r1.contentContainerBreakpoints);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r3);
  }
}
function SiFormContainerComponent_div_4_ng_container_3_ng_template_1_li_1_b_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "b");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const error_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, error_r12.controlNameTranslationKey), ": ");
  }
}
function SiFormContainerComponent_div_4_ng_container_3_ng_template_1_li_1_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const error_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](2, 1, error_r12.errorCodeTranslationKey || error_r12.errorCode, error_r12.errorParams), " ");
  }
}
function SiFormContainerComponent_div_4_ng_container_3_ng_template_1_li_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiFormContainerComponent_div_4_ng_container_3_ng_template_1_li_1_b_1_Template, 3, 3, "b", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiFormContainerComponent_div_4_ng_container_3_ng_template_1_li_1_span_2_Template, 3, 4, "span", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const error_r12 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", error_r12.controlNameTranslationKey);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", error_r12.errorCode);
  }
}
function SiFormContainerComponent_div_4_ng_container_3_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "ul", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiFormContainerComponent_div_4_ng_container_3_ng_template_1_li_1_Template, 3, 2, "li", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r9.getValidationErrors())("ngForTrackBy", ctx_r9.trackByIndex);
  }
}
function SiFormContainerComponent_div_4_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiFormContainerComponent_div_4_ng_container_3_ng_template_1_Template, 2, 2, "ng-template", null, 13, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "span", 14, 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.enter", function SiFormContainerComponent_div_4_ng_container_3_Template_span_keydown_enter_3_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r18);
      const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](_r10.click());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](2);
    const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 2, ctx_r7.helpTitle), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"])("siPopover", _r8);
  }
}
function SiFormContainerComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 9)(1, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiFormContainerComponent_div_4_ng_container_3_Template, 6, 4, "ng-container", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](5, 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-success", ctx_r2.validFormContainerMessage)("text-danger", ctx_r2.invalidFormContainerMessage);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r2.enableValidationHelp && ctx_r2.getValidationErrors() && ctx_r2.invalidFormContainerMessage);
  }
}
function SiFormContainerComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0, 2);
  }
}
const _c54 = [[["", "si-form-container-message", ""]], [["", "si-form-container-buttons", ""]], [["", "si-form-container-content", ""]]];
const _c55 = ["[si-form-container-message]", "[si-form-container-buttons]", "[si-form-container-content]"];
function SiFormItemComponent_span_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, ":");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
}
function SiFormItemComponent_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiFormItemComponent_span_1_ng_container_3_Template, 2, 0, "ng-container", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-break", ctx_r0.labelWrap)("text-truncate", !ctx_r0.labelWrap);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 6, ctx_r0.label));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.displayLabelColon);
  }
}
const _c56 = ["handle"];
function SiSliderComponent_i_14_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 15);
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r1.thumbIcon);
  }
}
function SiSliderComponent_div_15_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 16);
  }
}
function SiSliderComponent_div_18_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 17)(1, "div", 18)(2, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "span", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r3.minLabel);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r3.maxLabel);
  }
}
function SiSortBarComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiSortBarComponent_div_4_Template_div_click_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r3);
      const item_r1 = restoredCtx.$implicit;
      const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r2.setActive(item_r1.key));
    })("keydown.enter", function SiSortBarComponent_div_4_Template_div_keydown_enter_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r3);
      const item_r1 = restoredCtx.$implicit;
      const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r4.setActive(item_r1.key));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "span", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 5, item_r1.name));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("element-sort-up", item_r1.key === ctx_r0.activeSortCriteria && !ctx_r0.sortIsDescending)("element-sort-down", item_r1.key === ctx_r0.activeSortCriteria && ctx_r0.sortIsDescending);
  }
}
const _c57 = ["bg"];
function SiStatusBarItemComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 8);
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("background-color", ctx_r1.value && ctx_r1.color ? ctx_r1.color : null);
  }
}
function SiStatusBarItemComponent_si_icon_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-icon", 9);
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("icon", ctx_r2.statusIcon.icon)("color", ctx_r2.value ? ctx_r2.statusIcon.color : "indicator-disabled")("stackedIcon", ctx_r2.statusIcon.stacked)("stackedColor", ctx_r2.value ? ctx_r2.statusIcon.stackedColor : "text-inverse");
  }
}
function SiStatusBarItemComponent_div_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r3.value.toString()));
  }
}
function SiStatusBarItemComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r4.heading));
  }
}
const _c58 = ["thebar"];
const _c59 = ["custom"];
function SiStatusBarComponent_div_4_si_status_bar_item_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "si-status-bar-item", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiStatusBarComponent_div_4_si_status_bar_item_2_Template_si_status_bar_item_click_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r14);
      const item_r12 = restoredCtx.$implicit;
      const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r13.onItemClicked(item_r12));
    })("keydown.enter", function SiStatusBarComponent_div_4_si_status_bar_item_2_Template_si_status_bar_item_keydown_enter_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r14);
      const item_r12 = restoredCtx.$implicit;
      const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r15.onItemClicked(item_r12));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r12 = ctx.$implicit;
    const ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("flex-basis", ctx_r10.responsiveMode ? 100 / ctx_r10.responsiveMode : null, "%");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mute-padding", item_r12.mutePadding && ctx_r10.muteButton !== undefined);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", item_r12.value)("heading", item_r12.title)("status", item_r12.status)("color", item_r12.color)("blink", item_r12.blink !== false && ctx_r10.blink && !ctx_r10.expanded)("clickable", !!item_r12.action)("valueOnly", item_r12.isSpecial);
  }
}
function SiStatusBarComponent_div_4_div_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiStatusBarComponent_div_4_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiStatusBarComponent_div_4_div_3_ng_container_1_Template, 1, 0, "ng-container", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r8);
  }
}
function SiStatusBarComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 16)(1, "div", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiStatusBarComponent_div_4_si_status_bar_item_2_Template, 1, 11, "si-status-bar-item", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiStatusBarComponent_div_4_div_3_Template, 2, 1, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r1.responsiveItems)("ngForTrackBy", ctx_r1.trackByIndex);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.muteButton !== undefined);
  }
}
function SiStatusBarComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 23);
  }
}
function SiStatusBarComponent_si_status_bar_item_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r19 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "si-status-bar-item", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiStatusBarComponent_si_status_bar_item_9_Template_si_status_bar_item_click_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r19);
      const item_r17 = restoredCtx.$implicit;
      const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r18.onItemClicked(item_r17));
    })("keydown.enter", function SiStatusBarComponent_si_status_bar_item_9_Template_si_status_bar_item_keydown_enter_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r19);
      const item_r17 = restoredCtx.$implicit;
      const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r20.onItemClicked(item_r17));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r17 = ctx.$implicit;
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("flex-basis", ctx_r4.responsiveMode ? 100 / ctx_r4.responsiveMode : null, "%");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("compact", ctx_r4.responsiveMode || ctx_r4.compact);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", item_r17.value)("heading", item_r17.title)("status", item_r17.status)("color", item_r17.color)("blink", item_r17.blink !== false && ctx_r4.blink)("clickable", !!item_r17.action);
  }
}
function SiStatusBarComponent_ng_container_14_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function SiStatusBarComponent_ng_container_14_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiStatusBarComponent_ng_container_14_ng_container_1_Template, 1, 0, "ng-container", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r8);
  }
}
function SiStatusBarComponent_div_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r23 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 25)(1, "a", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.enter", function SiStatusBarComponent_div_15_Template_a_keydown_enter_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r23);
      const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r22.toggleExpand());
    })("click", function SiStatusBarComponent_div_15_Template_a_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r23);
      const ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r24.toggleExpand());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "i", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 5, ctx_r7.expanded ? ctx_r7.collapseButtonText : ctx_r7.expandButtonText))("aria-expanded", !!ctx_r7.expanded)("aria-controls", ctx_r7.statusId);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("expanded", ctx_r7.expanded === 2);
  }
}
function SiStatusBarComponent_ng_template_16_Template(rf, ctx) {
  if (rf & 1) {
    const _r26 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 28);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiStatusBarComponent_ng_template_16_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r26);
      const ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r25.muteToggle.emit());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("element-sound-mute", ctx_r9.muteButton === false)("element-sound-on", ctx_r9.muteButton === true);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 5, ctx_r9.muteButtonText));
  }
}
function SiCircleStatusComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 7);
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("background-color", ctx_r1.color);
  }
}
function SiCircleStatusComponent_si_icon_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-icon", 8);
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("icon", ctx_r2.statusIcon.icon)("color", ctx_r2.statusIcon.color)("stackedIcon", ctx_r2.statusIcon.stacked)("stackedColor", ctx_r2.statusIcon.stackedColor);
  }
}
function SiCircleStatusComponent_i_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 9);
  }
}
function SiCircleStatusComponent_i_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 10);
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r4.icon);
  }
}
const _c60 = ["contextDropdown"];
function SiTreeViewItemComponent_div_0_a_2_si_loading_spinner_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-loading-spinner");
  }
}
function SiTreeViewItemComponent_div_0_a_2_i_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 20);
  }
  if (rf & 2) {
    const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r15.getItemFolderStateClass());
  }
}
function SiTreeViewItemComponent_div_0_a_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiTreeViewItemComponent_div_0_a_2_Template_a_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);
      const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r16.onItemFolderClicked());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTreeViewItemComponent_div_0_a_2_si_loading_spinner_1_Template, 1, 0, "si-loading-spinner", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiTreeViewItemComponent_div_0_a_2_i_2_Template, 1, 1, "i", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("margin-inline-start", "-" + ctx_r2.biggerPaddingStart)("padding-inline-start", ctx_r2.paddingStart);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r2.isExpanding);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r2.isExpanding);
  }
}
function SiTreeViewItemComponent_div_0_a_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r19 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 21)(1, "input", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiTreeViewItemComponent_div_0_a_3_Template_input_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r19);
      const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r18.onBoxClicked());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    let tmp_4_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("type", ctx_r3.getInputType())("indeterminate", ctx_r3.treeItem.checked === "indeterminate" ? true : null)("checked", ctx_r3.treeItem.checked === "checked")("disabled", !(ctx_r3.treeItem == null ? null : ctx_r3.treeItem.selectable));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 5, (tmp_4_0 = ctx_r3.treeItem.label) !== null && tmp_4_0 !== undefined ? tmp_4_0 : ""));
  }
}
function SiTreeViewItemComponent_div_0_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "span", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r4.getIconClass());
  }
}
function SiTreeViewItemComponent_div_0_h5_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "h5");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    let tmp_0_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, (tmp_0_0 = ctx_r5.treeItem.label) !== null && tmp_0_0 !== undefined ? tmp_0_0 : ""));
  }
}
function SiTreeViewItemComponent_div_0_div_8_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
const _c61 = function (a0) {
  return {
    $implicit: a0
  };
};
function SiTreeViewItemComponent_div_0_div_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTreeViewItemComponent_div_0_div_8_ng_container_1_Template, 1, 0, "ng-container", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r6.renderMatchingTemplate(ctx_r6.treeItem))("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c61, ctx_r6.treeItem));
  }
}
function SiTreeViewItemComponent_div_0_p_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r7.treeItem.dataField1));
  }
}
function SiTreeViewItemComponent_div_0_p_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r8.treeItem.dataField2));
  }
}
function SiTreeViewItemComponent_div_0_span_11_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 28);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", "bg-" + (ctx_r9.treeItem.badgeColor || "default"));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r9.treeItem.badge);
  }
}
function SiTreeViewItemComponent_div_0_div_13_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 29);
  }
  if (rf & 2) {
    const ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("background-color", ctx_r10.getStateIndicatorColor());
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("si-tree-view-state-indicator-endmost", !ctx_r10.enableContextMenuButton && !ctx_r10.showFolderStateEnd);
  }
}
function SiTreeViewItemComponent_div_0_div_14_si_menu_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-menu", 35);
  }
  if (rf & 2) {
    const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("items", ctx_r22.contextMenuItems)("dropstart", true)("actionParam", ctx_r22.treeItem)("focusOnLoad", true);
  }
}
function SiTreeViewItemComponent_div_0_div_14_Template(rf, ctx) {
  if (rf & 1) {
    const _r24 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 30, 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("dropdownOnToggle", function SiTreeViewItemComponent_div_0_div_14_Template_div_dropdownOnToggle_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r24);
      const ctx_r23 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r23.onToggleContextMenu($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "i", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiTreeViewItemComponent_div_0_div_14_si_menu_5_Template, 1, 4, "si-menu", 34);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const _r21 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
    const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    let tmp_5_0;
    let tmp_6_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("dropdownResponsiveDirection", true)("dropdownResponsiveDirectionToPlacement", false)("dropdownIsDisabled", !(ctx_r11.treeItem == null ? null : ctx_r11.treeItem.selectable))("dropdownFocusOnClose", false);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 7, ctx_r11.contextMenuAriaLabel));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", (tmp_5_0 = ctx_r11.icons == null ? null : ctx_r11.icons.itemMenu) !== null && tmp_5_0 !== undefined ? tmp_5_0 : "");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", (tmp_6_0 = _r21 == null ? null : _r21.isOpen) !== null && tmp_6_0 !== undefined ? tmp_6_0 : false);
  }
}
function SiTreeViewItemComponent_div_0_a_15_si_loading_spinner_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-loading-spinner", 39);
  }
}
function SiTreeViewItemComponent_div_0_a_15_i_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 24);
  }
  if (rf & 2) {
    const ctx_r26 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r26.getItemFolderStateClass());
  }
}
function SiTreeViewItemComponent_div_0_a_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r28 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiTreeViewItemComponent_div_0_a_15_Template_a_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r28);
      const ctx_r27 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r27.onItemFolderClicked());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTreeViewItemComponent_div_0_a_15_si_loading_spinner_1_Template, 1, 0, "si-loading-spinner", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiTreeViewItemComponent_div_0_a_15_i_2_Template, 1, 1, "i", 38);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", !ctx_r12.getItemFolderStateClass());
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r12.isExpanding);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r12.isExpanding);
  }
}
function SiTreeViewItemComponent_div_0_div_16_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 40);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 41);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
function SiTreeViewItemComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r30 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 2)(1, "div", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mousedown", function SiTreeViewItemComponent_div_0_Template_div_mousedown_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r30);
      const ctx_r29 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r29.onMouseDownTreeItem($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiTreeViewItemComponent_div_0_a_2_Template, 3, 6, "a", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiTreeViewItemComponent_div_0_a_3_Template, 3, 7, "a", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiTreeViewItemComponent_div_0_Template_div_click_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r30);
      const ctx_r31 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r31.onItemClicked($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiTreeViewItemComponent_div_0_div_5_Template, 2, 1, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiTreeViewItemComponent_div_0_h5_7_Template, 3, 3, "h5", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, SiTreeViewItemComponent_div_0_div_8_Template, 2, 4, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](9, SiTreeViewItemComponent_div_0_p_9_Template, 3, 3, "p", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](10, SiTreeViewItemComponent_div_0_p_10_Template, 3, 3, "p", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, SiTreeViewItemComponent_div_0_span_11_Template, 2, 2, "span", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](13, SiTreeViewItemComponent_div_0_div_13_Template, 1, 4, "div", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](14, SiTreeViewItemComponent_div_0_div_14_Template, 6, 9, "div", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](15, SiTreeViewItemComponent_div_0_a_15_Template, 3, 4, "a", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](16, SiTreeViewItemComponent_div_0_div_16_Template, 2, 0, "div", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    let tmp_1_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("padding-inline-start", ctx_r0.biggerPaddingStart);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("si-tree-view-item-context-menu-visible", (tmp_1_0 = ctx_r0.contextDropdown == null ? null : ctx_r0.contextDropdown.isOpen) !== null && tmp_1_0 !== undefined ? tmp_1_0 : false)("si-tree-view-item-active", ctx_r0.treeItem.active)("si-tree-view-item-selected", ctx_r0.enableSelection && ctx_r0.treeItem.selected)("si-tree-view-item-not-selectable", !ctx_r0.treeItem.selectable);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-disabled", !ctx_r0.treeItem.selectable);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.showFolderStateStart && ctx_r0.treeItem.state !== "leaf");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.showCheckOrOptionBox);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.showIcon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !(ctx_r0.templates == null ? null : ctx_r0.templates.length));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.templates == null ? null : ctx_r0.templates.length);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.enableDataField1 && ctx_r0.treeItem.dataField1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.enableDataField2 && ctx_r0.treeItem.dataField2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.treeItem.badge);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("si-tree-view-item-end-icons-sticky", ctx_r0.stickyEndItems);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.showStateIndicator);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.isContextMenuButtonVisible);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.showFolderStateEnd && ctx_r0.treeItem.state !== "leaf");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.showFolderStateEnd && ctx_r0.treeItem.state === "leaf");
  }
}
function SiTreeViewItemComponent_div_1_a_2_si_loading_spinner_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-loading-spinner");
  }
}
function SiTreeViewItemComponent_div_1_a_2_i_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 24);
  }
  if (rf & 2) {
    const ctx_r36 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r36.getItemFolderStateClass());
  }
}
function SiTreeViewItemComponent_div_1_a_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r38 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiTreeViewItemComponent_div_1_a_2_Template_a_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r38);
      const ctx_r37 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r37.onItemFolderClicked());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTreeViewItemComponent_div_1_a_2_si_loading_spinner_1_Template, 1, 0, "si-loading-spinner", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiTreeViewItemComponent_div_1_a_2_i_2_Template, 1, 1, "i", 38);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r32.isExpanding);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r32.isExpanding);
  }
}
function SiTreeViewItemComponent_div_1_a_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r40 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 21)(1, "input", 47);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiTreeViewItemComponent_div_1_a_3_Template_input_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r40);
      const ctx_r39 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r39.onBoxClicked());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r33 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    let tmp_3_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("type", ctx_r33.getInputType())("indeterminate", ctx_r33.treeItem.checked === "indeterminate" ? true : null)("checked", ctx_r33.treeItem.checked === "checked");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 4, (tmp_3_0 = ctx_r33.treeItem.label) !== null && tmp_3_0 !== undefined ? tmp_3_0 : ""));
  }
}
function SiTreeViewItemComponent_div_1_a_7_si_loading_spinner_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-loading-spinner");
  }
}
function SiTreeViewItemComponent_div_1_a_7_i_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 24);
  }
  if (rf & 2) {
    const ctx_r42 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r42.getItemFolderStateClass());
  }
}
function SiTreeViewItemComponent_div_1_a_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r44 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 48);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiTreeViewItemComponent_div_1_a_7_Template_a_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r44);
      const ctx_r43 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r43.onItemFolderClicked());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTreeViewItemComponent_div_1_a_7_si_loading_spinner_1_Template, 1, 0, "si-loading-spinner", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiTreeViewItemComponent_div_1_a_7_i_2_Template, 1, 1, "i", 38);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r34 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", !ctx_r34.getItemFolderStateClass());
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r34.isExpanding);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r34.isExpanding);
  }
}
function SiTreeViewItemComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 42)(1, "div", 43);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiTreeViewItemComponent_div_1_a_2_Template, 3, 2, "a", 44);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiTreeViewItemComponent_div_1_a_3_Template, 3, 6, "a", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "p", 45);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiTreeViewItemComponent_div_1_a_7_Template, 3, 4, "a", 46);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    let tmp_2_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.showFolderStateStart);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.showCheckOrOptionBox);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 4, (tmp_2_0 = ctx_r1.treeItem.label) !== null && tmp_2_0 !== undefined ? tmp_2_0 : ""));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.showFolderStateEnd);
  }
}
const _c62 = ["treeViewInner"];
function SiTreeViewComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-menu-item", 7)(2, "si-menu-item", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", ctx_r0.expandItem)("disableListInteraction", true);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("item", ctx_r0.collapseItem)("disableListInteraction", true);
  }
}
function SiTreeViewComponent_div_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiTreeViewComponent_div_1_span_1_Template_span_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r10);
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r9.onFlatTreeNavigateHome());
    })("keydown.enter", function SiTreeViewComponent_div_1_span_1_Template_span_keydown_enter_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r10);
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r11.onFlatTreeNavigateHome());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx_r6.headerShowsRoot);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r6.icons.headerHome);
  }
}
function SiTreeViewComponent_div_1_span_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiTreeViewComponent_div_1_span_2_Template_span_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r13);
      const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r12.onFlatTreeNavigateUp());
    })("keydown.enter", function SiTreeViewComponent_div_1_span_2_Template_span_keydown_enter_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r13);
      const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r14.onFlatTreeNavigateUp());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx_r7.headerShowsRoot);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r7.icons.headerArrow);
  }
}
function SiTreeViewComponent_div_1_span_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    let tmp_0_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, (tmp_0_0 = ctx_r8.lastBreadCrumbItem.label) !== null && tmp_0_0 !== undefined ? tmp_0_0 : ""));
  }
}
function SiTreeViewComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTreeViewComponent_div_1_span_1_Template, 1, 3, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiTreeViewComponent_div_1_span_2_Template, 1, 3, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiTreeViewComponent_div_1_span_3_Template, 3, 3, "span", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r1.lastBreadCrumbItem);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.lastBreadCrumbItem);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.lastBreadCrumbItem);
  }
}
function SiTreeViewComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div");
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("height", ctx_r3.heightBefore);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("w-100", ctx_r3.horizontalScrolling);
  }
}
function SiTreeViewComponent_div_5_si_tree_view_item_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-tree-view-item", 15);
  }
  if (rf & 2) {
    const treeItem_r16 = ctx.$implicit;
    const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    let tmp_1_0;
    let tmp_6_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("si-tree-ellipsis", !ctx_r15.horizontalScrolling)("si-tree-view-top-level-item", !ctx_r15.compactMode && (ctx_r15.flatTree || ((tmp_1_0 = treeItem_r16.level) !== null && tmp_1_0 !== undefined ? tmp_1_0 : 0) < 2));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("treeItem", treeItem_r16)("templates", ctx_r15.templates)("scrollIntoView", ctx_r15.scrollChildIntoView)("childrenLoaded", ctx_r15.childrenLoaded)("indentLevel", (tmp_6_0 = treeItem_r16.level) !== null && tmp_6_0 !== undefined ? tmp_6_0 : 0)("icons", ctx_r15.icons)("contextMenuItemsProvider", ctx_r15.contextMenuItems)("stickyEndItems", ctx_r15.horizontalScrolling)("displayFolderState", ctx_r15.hasAnyChildren)("contextMenuAriaLabel", ctx_r15.contextMenuAriaLabel);
  }
}
function SiTreeViewComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTreeViewComponent_div_5_si_tree_view_item_1_Template, 1, 14, "si-tree-view-item", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r4.itemsVirtualized)("ngForTrackBy", ctx_r4.trackByFunction);
  }
}
function SiTreeViewComponent_div_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div");
  }
  if (rf & 2) {
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("height", ctx_r5.heightAfter);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("w-100", ctx_r5.horizontalScrolling);
  }
}
function SiWizardStepComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
const _c63 = ["container"];
const _c64 = ["cancelButtonContainer"];
const _c65 = ["buttonContainer"];
function SiWizardComponent_ng_container_0_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 17, 18)(2, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiWizardComponent_ng_container_0_div_3_Template_div_click_2_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r9);
      const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r8.cancel.emit());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "button", 20)(4, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](9, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 2, ctx_r3.cancelText));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](9, 4, ctx_r3.cancelText));
  }
}
const _c66 = function (a0) {
  return [a0];
};
function SiWizardComponent_ng_container_0_ng_container_15_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 22)(1, "a", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiWizardComponent_ng_container_0_ng_container_15_div_1_Template_a_click_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r15);
      const stepIndex_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().index;
      const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r13.activateStep($event, stepIndex_r11));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "i", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const stepIndex_r11 = ctx_r16.index;
    const step_r10 = ctx_r16.$implicit;
    const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("small", ctx_r12.isSmall);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r12.getStepClass(stepIndex_r11));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r12.getStateClass(stepIndex_r11));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-current", ctx_r12.getAriaCurrent(stepIndex_r11))("href", !ctx_r12.canActivate(stepIndex_r11) || !ctx_r12.currentStep.isNextNavigable ? null : "#", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](11, _c66, ctx_r12.getState(step_r10, stepIndex_r11)));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-disabled", ctx_r12.getAriaDisabled(stepIndex_r11));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 9, step_r10.heading));
  }
}
function SiWizardComponent_ng_container_0_ng_container_15_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiWizardComponent_ng_container_0_ng_container_15_div_1_Template, 6, 13, "div", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const stepIndex_r11 = ctx.index;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r5.isVisibleStep(stepIndex_r11));
  }
}
function SiWizardComponent_ng_container_0_button_28_Template(rf, ctx) {
  if (rf & 1) {
    const _r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiWizardComponent_ng_container_0_button_28_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r18);
      const ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r17.save());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", !ctx_r6.currentStep.isValid || !ctx_r6.currentStep.isNextNavigable);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 2, ctx_r6.saveText));
  }
}
function SiWizardComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r20 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 2, 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("siResizeObserver", function SiWizardComponent_ng_container_0_Template_div_siResizeObserver_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r20);
      const ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r19.calculateNumberOfVisibleSteps());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiWizardComponent_ng_container_0_div_3_Template, 10, 6, "div", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 5, 6)(6, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiWizardComponent_ng_container_0_Template_div_click_6_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r20);
      const ctx_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r21.back(1));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "button", 8)(8, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](10, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](11, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](13, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](15, SiWizardComponent_ng_container_0_ng_container_15_Template, 2, 1, "ng-container", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "div", 5)(17, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiWizardComponent_ng_container_0_Template_div_click_17_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r20);
      const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r22.next(1));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](18, "button", 14)(19, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](21, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](24, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](25, "div");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](26);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](27, "div", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](28, SiWizardComponent_ng_container_0_button_28_Template, 3, 4, "button", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("display-one-step", ctx_r0.visibleSteps === 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.hasCancel);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("invisible", ctx_r0.index === 0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](10, 22, ctx_r0.backText));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](13, 24, ctx_r0.backText));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("small", ctx_r0.isSmall);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r0.steps)("ngForTrackBy", ctx_r0.trackByIndex);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("wizard-text-deactivate", !ctx_r0.currentStep.isValid);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("invisible", ctx_r0.index === ctx_r0.steps.length - 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", !ctx_r0.currentStep.isValid);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](21, 26, ctx_r0.nextText));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", !ctx_r0.currentStep.isValid);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-disabled", !ctx_r0.currentStep.isValid);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](24, 28, ctx_r0.nextText));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.index === ctx_r0.steps.length - 1);
  }
}
function SiWizardComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "p", 28);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 1, ctx_r1.completionText), "");
  }
}
function SiCardComponent_si_content_action_bar_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-content-action-bar", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("primaryActions", ctx_r0.primaryActions)("secondaryActions", ctx_r0.secondaryActions)("viewType", ctx_r0.actionBarViewType);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("title", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 4, ctx_r0.actionBarTitle));
  }
}
const _c67 = [[["", "headerIcon", ""]], [["", "body", ""]]];
const _c68 = ["[headerIcon]", "[body]"];
function SiUnauthorizedPageComponent_h1_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "h1", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r0.heading));
  }
}
function SiUnauthorizedPageComponent_h2_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "h2", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r1.subHeading));
  }
}
function SiUnauthorizedPageComponent_p_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, ctx_r2.description));
  }
}
function SiUnauthorizedPageComponent_a_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", ctx_r3.link);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r3.link.title ? ctx_r3.link.title : _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 2, "Go back"));
  }
}
const _c69 = ["tabContainer"];
const _c70 = ["innerTabContainer"];
function SiTabsetComponent_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.enter", function SiTabsetComponent_button_1_Template_button_keydown_enter_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r6);
      const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r5.scrollStart());
    })("mousedown", function SiTabsetComponent_button_1_Template_button_mousedown_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r6);
      const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r7.scrollStart());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("hidden", !ctx_r0.xPos);
  }
}
function SiTabsetComponent_li_6_si_icon_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-icon", 15);
  }
  if (rf & 2) {
    const tab_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("icon", tab_r8.icon)("alt", tab_r8.iconAltText);
  }
}
function SiTabsetComponent_li_6_span_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const tab_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", "bg-" + tab_r8.badgeColor);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 2, tab_r8.badgeContent), " ");
  }
}
function SiTabsetComponent_li_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 10)(1, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.enter", function SiTabsetComponent_li_6_Template_div_keydown_enter_1_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r14);
      const tab_r8 = restoredCtx.$implicit;
      const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r13.selectTab(tab_r8));
    })("click", function SiTabsetComponent_li_6_Template_div_click_1_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r14);
      const tab_r8 = restoredCtx.$implicit;
      const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r15.selectTab(tab_r8));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "span", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiTabsetComponent_li_6_si_icon_5_Template, 1, 2, "si-icon", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiTabsetComponent_li_6_span_6_Template, 3, 4, "span", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const tab_r8 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("active", tab_r8.active);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("hidden", tab_r8.hidden || null);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("active", tab_r8.active);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-selected", tab_r8.active);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 9, tab_r8.heading));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", tab_r8.icon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", tab_r8.badgeContent);
  }
}
function SiTabsetComponent_button_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.enter", function SiTabsetComponent_button_7_Template_button_keydown_enter_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);
      const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r16.scrollEnd());
    })("mousedown", function SiTabsetComponent_button_7_Template_button_mousedown_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);
      const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r18.scrollEnd());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("hidden", ctx_r4.endArrowDisabled);
  }
}
const _c71 = ["sidePanel"];
const _c72 = ["portalOutlet"];
const _c73 = ["tmpPortalOutlet"];
const _c74 = [[["si-side-panel-content"], ["si-right-panel-content"]], "*"];
const _c75 = ["si-side-panel-content, si-right-panel-content", "*"];
const _c76 = "[_nghost-%COMP%]{--rpanel-collapsed-padding: 0;--rpanel-size: 390px;display:block;padding-inline-end:var(--rpanel-size)}.ready[_nghost-%COMP%]{transition:padding-inline-end calc(.5s * var(--element-animations-enabled, 1))}.ready[_nghost-%COMP%]   .side-panel[_ngcontent-%COMP%]{transition:inline-size calc(.5s * var(--element-animations-enabled, 1))}[_nghost-%COMP%]   .side-panel[_ngcontent-%COMP%], [_nghost-%COMP%]   .side-panel[_ngcontent-%COMP%] > .inner[_ngcontent-%COMP%]{inline-size:var(--rpanel-size)}.collapsible[_nghost-%COMP%], .collapsible-temp[_nghost-%COMP%]{--rpanel-collapsed-width: 48px}.rpanel-size--wide[_nghost-%COMP%]{--rpanel-size: 500px}.rpanel-resize-sm.rpanel-mode--over[_nghost-%COMP%], .rpanel-resize-md.rpanel-mode--over[_nghost-%COMP%], .rpanel-resize-lg.rpanel-mode--over[_nghost-%COMP%], .rpanel-resize-xl.rpanel-mode--over[_nghost-%COMP%]{padding-inline-end:var(--rpanel-collapsed-width)}.rpanel-resize-lg.rpanel-mode--scroll.rpanel-size--wide[_nghost-%COMP%]{padding-inline-end:var(--rpanel-collapsed-width)}.rpanel-resize-sm.rpanel-mode--scroll[_nghost-%COMP%], .rpanel-resize-md.rpanel-mode--scroll[_nghost-%COMP%]{padding-inline-end:var(--rpanel-collapsed-width)}.rpanel-resize-xs.rpanel-mode--over[_nghost-%COMP%], .rpanel-resize-xs.rpanel-mode--scroll[_nghost-%COMP%]{padding-inline-end:var(--rpanel-collapsed-width)}.rpanel-resize-xs[_nghost-%COMP%]:not(.collapsible)   .side-panel[_ngcontent-%COMP%]{inset-block-start:0;z-index:1035}.rpanel-resize-xs.collapsible[_nghost-%COMP%]   .side-panel[_ngcontent-%COMP%]{z-index:1030}.rpanel-resize-xs[_nghost-%COMP%]:not(.rpanel-collapsed)   .side-panel[_ngcontent-%COMP%], .rpanel-resize-xs[_nghost-%COMP%]:not(.rpanel-collapsed)   .side-panel[_ngcontent-%COMP%] > .inner[_ngcontent-%COMP%]{inline-size:100%}.rpanel-hidden[_nghost-%COMP%]:not(.collapsible)   .side-panel[_ngcontent-%COMP%]{display:none}.rpanel-collapsed[_nghost-%COMP%]{padding-inline-end:var(--rpanel-collapsed-width)}.rpanel-collapsed[_nghost-%COMP%]:not(.collapsible)   .side-panel[_ngcontent-%COMP%]{inline-size:0;overflow:hidden}.rpanel-collapsed.collapsible[_nghost-%COMP%]   .side-panel[_ngcontent-%COMP%]{inline-size:var(--rpanel-collapsed-width);overflow:hidden}.side-panel[_ngcontent-%COMP%]{position:fixed;z-index:1029;inset-block:48px 0;inset-inline-end:0;overflow-x:hidden;background:var(--element-base-1);outline:0}.side-panel[_ngcontent-%COMP%] > .inner[_ngcontent-%COMP%]{display:flex;flex-direction:column;position:absolute;inset-block:0;inset-inline-start:0}";
function SiSidePanelContentComponent_si_content_action_bar_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-content-action-bar", 9);
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("primaryActions", ctx_r0.primaryActions)("secondaryActions", ctx_r0.secondaryActions)("toggleItemLabel", ctx_r0.toggleItemLabel);
  }
}
function SiSidePanelContentComponent_div_10_ng_container_1_a_1_i_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 18);
  }
  if (rf & 2) {
    const dp_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", dp_r4.overlayIcon);
  }
}
function SiSidePanelContentComponent_div_10_ng_container_1_a_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "i", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiSidePanelContentComponent_div_10_ng_container_1_a_1_i_3_Template, 1, 1, "i", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "span", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const dp_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", dp_r4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", !ctx_r5.isCollapsed ? "" : _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 5, dp_r4.title));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", dp_r4.icon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", dp_r4.overlayIcon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 7, dp_r4.title));
  }
}
function SiSidePanelContentComponent_div_10_ng_container_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 19)(1, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2, "\u2022");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
}
function SiSidePanelContentComponent_div_10_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiSidePanelContentComponent_div_10_ng_container_1_a_1_Template, 7, 9, "a", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiSidePanelContentComponent_div_10_ng_container_1_div_2_Template, 3, 0, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const dp_r4 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !dp_r4.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", dp_r4.disabled);
  }
}
function SiSidePanelContentComponent_div_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiSidePanelContentComponent_div_10_ng_container_1_Template, 3, 2, "ng-container", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r1.statusActions)("ngForTrackBy", ctx_r1.trackByIndex);
  }
}
function SiSidePanelContentComponent_div_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 21)(1, "si-search-bar", 22, 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("searchChange", function SiSidePanelContentComponent_div_11_Template_si_search_bar_searchChange_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r12);
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r11.searchEvent.emit($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("colorVariant", "base-0")("placeholder", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 5, ctx_r2.searchPlaceholder))("debounceTime", 400)("showIcon", true)("prohibitedCharacters", "*?");
  }
}
function SiRightPanelContentComponent_si_content_action_bar_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-content-action-bar", 9);
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("primaryActions", ctx_r0.primaryActions)("secondaryActions", ctx_r0.secondaryActions)("toggleItemLabel", ctx_r0.toggleItemLabel);
  }
}
function SiRightPanelContentComponent_div_10_ng_container_1_a_1_i_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 18);
  }
  if (rf & 2) {
    const dp_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", dp_r4.overlayIcon);
  }
}
function SiRightPanelContentComponent_div_10_ng_container_1_a_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "i", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiRightPanelContentComponent_div_10_ng_container_1_a_1_i_3_Template, 1, 1, "i", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "span", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const dp_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", dp_r4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", !ctx_r5.isCollapsed ? "" : _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 5, dp_r4.title));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", dp_r4.icon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", dp_r4.overlayIcon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 7, dp_r4.title));
  }
}
function SiRightPanelContentComponent_div_10_ng_container_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 19)(1, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2, "\u2022");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
}
function SiRightPanelContentComponent_div_10_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiRightPanelContentComponent_div_10_ng_container_1_a_1_Template, 7, 9, "a", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiRightPanelContentComponent_div_10_ng_container_1_div_2_Template, 3, 0, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const dp_r4 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !dp_r4.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", dp_r4.disabled);
  }
}
function SiRightPanelContentComponent_div_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiRightPanelContentComponent_div_10_ng_container_1_Template, 3, 2, "ng-container", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r1.statusActions)("ngForTrackBy", ctx_r1.trackByIndex);
  }
}
function SiRightPanelContentComponent_div_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 21)(1, "si-search-bar", 22, 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("searchChange", function SiRightPanelContentComponent_div_11_Template_si_search_bar_searchChange_1_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r12);
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r11.searchEvent.emit($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("colorVariant", "base-0")("placeholder", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 5, ctx_r2.searchPlaceholder))("debounceTime", 400)("showIcon", true)("prohibitedCharacters", "*?");
  }
}
const _c77 = "[_nghost-%COMP%]{display:flex;flex-direction:column;flex:1}.collapsible[_nghost-%COMP%]   .close-button[_ngcontent-%COMP%], .collapsible   [_nghost-%COMP%]   .close-button[_ngcontent-%COMP%]{display:none}.collapsible[_nghost-%COMP%]   .collapse-toggle[_ngcontent-%COMP%], .collapsible   [_nghost-%COMP%]   .collapse-toggle[_ngcontent-%COMP%]{display:block}.collapsible   .collapsed[_nghost-%COMP%]   .auto-hide[_ngcontent-%COMP%]{display:none}.collapsible   .collapsed[_nghost-%COMP%]   .rpanel-wrapper[_ngcontent-%COMP%]{inline-size:var(--rpanel-collapsed-width)}.collapsible   .collapsed[_nghost-%COMP%]   .rpanel-content[_ngcontent-%COMP%]{flex:0 0 auto;margin-block-start:8px}.collapsible   .collapsed[_nghost-%COMP%]   .rpanel-statusactions[_ngcontent-%COMP%]{order:3;flex-direction:column;align-items:flex-start;padding:0!important}.collapsible   .collapsed[_nghost-%COMP%]   .rpanel-statusaction[_ngcontent-%COMP%]{padding-block:8px;padding-inline:12px}.collapsible   .collapsed[_nghost-%COMP%]   .rpanel-statusaction[_ngcontent-%COMP%]:not(.dot-outer):hover{background:var(--element-base-1-hover)}.collapse-toggle[_ngcontent-%COMP%]{display:none}.rpanel-header[_ngcontent-%COMP%], .rpanel-statusaction[_ngcontent-%COMP%]{display:flex;align-items:center}.rpanel-header[_ngcontent-%COMP%]{justify-content:space-between}.rpanel-content[_ngcontent-%COMP%]{margin-block-start:12px}.rpanel-wrapper[_ngcontent-%COMP%], .rpanel-content[_ngcontent-%COMP%]{min-block-size:0;flex:1 0 0;overflow-x:hidden;overflow-y:auto}.rpanel-statusaction[_ngcontent-%COMP%]{text-decoration:none}.rpanel-statusaction[_ngcontent-%COMP%]   .dot[_ngcontent-%COMP%]{inline-size:24px;line-height:24px}.rpanel-statusaction[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-size:12px;white-space:pre-wrap;color:var(--element-text-primary)}.rpanel-statusaction[_ngcontent-%COMP%]:hover   span[_ngcontent-%COMP%]{color:var(--element-text-active)}";
function SiSelectComponent_span_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx_r1.id + "-aria-label");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r1.ariaLabel);
  }
}
function SiSelectComponent_div_4_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, ",\xA0");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
function SiSelectComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiSelectComponent_div_4_span_1_Template, 2, 0, "span", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](2, 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const activeOption_r9 = ctx.$implicit;
    const first_r10 = ctx.first;
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](9);
    let tmp_1_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !first_r10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", (tmp_1_0 = ctx_r2.optionTemplate) !== null && tmp_1_0 !== undefined ? tmp_1_0 : _r5)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](3, _c61, activeOption_r9));
  }
}
function SiSelectComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 16, 17)(2, "div", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _r12.hiddenItemCount, "+ ");
  }
}
function SiSelectComponent_ng_template_7_ng_container_1_div_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 15);
  }
  if (rf & 2) {
    const optionRow_r21 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
    const _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r14)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c61, optionRow_r21));
  }
}
function SiSelectComponent_ng_template_7_ng_container_1_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 25)(1, "span", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](2, 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiSelectComponent_ng_template_7_ng_container_1_div_1_ng_container_3_Template, 1, 4, "ng-container", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const index_r17 = ctx_r22.index;
    const item_r16 = ctx_r22.$implicit;
    const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](11);
    let tmp_2_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-labelledby", ctx_r18.id + "-" + index_r17 + "-group-header");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx_r18.id + "-" + index_r17 + "-group-header");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", (tmp_2_0 = ctx_r18.groupTemplate) !== null && tmp_2_0 !== undefined ? tmp_2_0 : _r7)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](6, _c61, item_r16));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", item_r16.options)("ngForTrackBy", ctx_r18.trackByItem);
  }
}
function SiSelectComponent_ng_template_7_ng_container_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 15);
  }
  if (rf & 2) {
    const item_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r14)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c61, item_r16));
  }
}
function SiSelectComponent_ng_template_7_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiSelectComponent_ng_template_7_ng_container_1_div_1_Template, 4, 8, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiSelectComponent_ng_template_7_ng_container_1_ng_container_2_Template, 1, 4, "ng-container", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r16 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r16.type === "group");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r16.type === "option");
  }
}
function SiSelectComponent_ng_template_7_ng_template_2_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 31);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "span", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
function SiSelectComponent_ng_template_7_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 28, 29);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](3, 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiSelectComponent_ng_template_7_ng_template_2_span_4_Template, 2, 0, "span", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const option_r24 = ctx.$implicit;
    const _r25 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
    const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    const _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](9);
    let tmp_6_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("active", _r25.isActive())("disabled", option_r24.disabled);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("cdkOption", option_r24.value)("cdkOptionDisabled", option_r24.disabled)("cdkOptionTypeaheadLabel", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 11, option_r24.typeaheadLabel));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("data-id", option_r24.value);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", (tmp_6_0 = ctx_r15.optionTemplate) !== null && tmp_6_0 !== undefined ? tmp_6_0 : _r5)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](13, _c61, option_r24));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", _r25.isSelected());
  }
}
function SiSelectComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r28 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("cdkListboxValueChange", function SiSelectComponent_ng_template_7_Template_div_cdkListboxValueChange_0_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r28);
      const ctx_r27 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r27.listBoxValueChange($event));
    })("keydown.tab", function SiSelectComponent_ng_template_7_Template_div_keydown_tab_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r28);
      const ctx_r29 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r29.open = false);
    })("click", function SiSelectComponent_ng_template_7_Template_div_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r28);
      const ctx_r30 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r30.closeListBoxIfSingle());
    })("keydown.enter", function SiSelectComponent_ng_template_7_Template_div_keydown_enter_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r28);
      const ctx_r31 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r31.closeListBoxIfSingle());
    })("keydown.space", function SiSelectComponent_ng_template_7_Template_div_keydown_space_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r28);
      const ctx_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r32.closeListBoxIfSingle());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiSelectComponent_ng_template_7_ng_container_1_Template, 3, 2, "ng-container", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiSelectComponent_ng_template_7_ng_template_2_Template, 5, 15, "ng-template", 21, 22, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx_r4.id + "-listbox")("cdkListboxMultiple", ctx_r4.selectionStrategy.allowMultiple)("cdkListboxValue", ctx_r4.selectionStrategy.arrayValue);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-labelledby", ctx_r4.id + "-aria-label" + " " + ctx_r4.labelledby + " " + (ctx_r4.id + "-content"));
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r4.rows)("ngForTrackBy", ctx_r4.trackByItem);
  }
}
function SiSelectComponent_ng_template_8_i_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 34);
  }
  if (rf & 2) {
    const item_r33 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction2"](1, _c0, item_r33.icon, !item_r33.disabled && item_r33.color || ""));
  }
}
function SiSelectComponent_ng_template_8_span_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r33 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 1, item_r33.label));
  }
}
function SiSelectComponent_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiSelectComponent_ng_template_8_i_0_Template, 1, 4, "i", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiSelectComponent_ng_template_8_span_1_Template, 3, 3, "span", 14);
  }
  if (rf & 2) {
    const item_r33 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r33.icon);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", item_r33.label);
  }
}
function SiSelectComponent_ng_template_10_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
  }
  if (rf & 2) {
    const group_r38 = ctx.$implicit;
    let tmp_0_0;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 1, (tmp_0_0 = group_r38.label) !== null && tmp_0_0 !== undefined ? tmp_0_0 : group_r38.key));
  }
}
function SiThresholdComponent_div_0_div_1_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiThresholdComponent_div_0_div_1_button_1_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);
      const index_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).index;
      const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r15.deleteStep(index_r6));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 1, ctx_r12.deleteAriaLabel));
  }
}
function SiThresholdComponent_div_0_div_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, "\u200B");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
function SiThresholdComponent_div_0_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r20 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiThresholdComponent_div_0_div_1_button_1_Template, 2, 3, "button", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiThresholdComponent_div_0_div_1_div_2_Template, 2, 0, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "div", 14)(5, "div", 15)(6, "div", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 16)(8, "si-number-input", 17, 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function SiThresholdComponent_div_0_div_1_Template_si_number_input_ngModelChange_8_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r20);
      const step_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](step_r3.value = $event);
    })("ngModelChange", function SiThresholdComponent_div_0_div_1_Template_si_number_input_ngModelChange_8_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r20);
      const ctx_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r21.emitChange());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](10, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const index_r6 = ctx_r22.index;
    const step_r3 = ctx_r22.$implicit;
    const ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r7.canAddRemoveSteps && !ctx_r7.readonly);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r7.canAddRemoveSteps || ctx_r7.readonly);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r7.colors[index_r6 - 1]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r7.colors[index_r6]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("is-invalid", step_r3.valid === false);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](10, 16, ctx_r7.inputAriaLabel))("readonly", ctx_r7.readonly)("ngModel", step_r3.value)("ngModelOptions", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction0"](18, _c45))("min", ctx_r7.minValue)("max", ctx_r7.maxValue)("step", ctx_r7.stepSize)("unit", ctx_r7.unit)("showButtons", ctx_r7.showDecIncButtons)("required", true);
  }
}
const _c78 = function (a0) {
  return {
    color: a0
  };
};
function SiThresholdComponent_div_0_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 21);
  }
  if (rf & 2) {
    const index_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().index;
    const ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r1)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c78, ctx_r8.colors[index_r6]));
  }
}
function SiThresholdComponent_div_0_button_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r26 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiThresholdComponent_div_0_button_4_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r26);
      const index_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().index;
      const ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r24.addStep(index_r6));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r9.maxSteps && ctx_r9.thresholdSteps.length >= ctx_r9.maxSteps);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 2, ctx_r9.addAriaLabel));
  }
}
function SiThresholdComponent_div_0_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, "\u200B");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
}
function SiThresholdComponent_div_0_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 21);
  }
  if (rf & 2) {
    const index_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().index;
    const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r1)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c78, ctx_r11.colors[index_r6]));
  }
}
function SiThresholdComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r29 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiThresholdComponent_div_0_div_1_Template, 11, 19, "div", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiThresholdComponent_div_0_ng_container_2_Template, 1, 4, "ng-container", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiThresholdComponent_div_0_button_4_Template, 2, 4, "button", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiThresholdComponent_div_0_div_5_Template, 2, 0, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](7, "div", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "si-select", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("valueChange", function SiThresholdComponent_div_0_Template_si_select_valueChange_8_listener($event) {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r29);
      const step_r3 = restoredCtx.$implicit;
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](step_r3.optionValue = $event);
    })("valueChange", function SiThresholdComponent_div_0_Template_si_select_valueChange_8_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r29);
      const ctx_r30 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r30.optionChanged());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](9, SiThresholdComponent_div_0_ng_container_9_Template, 1, 4, "ng-container", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const step_r3 = ctx.$implicit;
    const first_r4 = ctx.first;
    const last_r5 = ctx.last;
    const index_r6 = ctx.index;
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !first_r4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", first_r4 && ctx_r0.horizontalLayout);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.canAddRemoveSteps && !ctx_r0.readonly);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r0.canAddRemoveSteps || ctx_r0.readonly);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx_r0.colors[index_r6]);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ariaLabel", ctx_r0.statusAriaLabel)("value", step_r3.optionValue)("readonly", ctx_r0.readonly)("options", ctx_r0.options);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", last_r5 && ctx_r0.horizontalLayout);
  }
}
function SiThresholdComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 23)(1, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2, "\u200B");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "div", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6, "\u200B");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const color_r31 = ctx.color;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", color_r31);
  }
}
class ResizeObserverService {
  constructor(zone, platformId) {
    this.zone = zone;
    this.listeners = new Map();
    this.timerQueue = new Map();
    if (!(0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId) || !ResizeObserver) {
      return;
    }
    this.resizeObserver = new ResizeObserver(entries => entries.forEach(entry => this.handleElement(entry.target)));
  }
  /**
   * Observe the size of an element. Returns an observable with the changes.
   * @param element The element to observe
   * @param throttle Throttle time in ms. Will emit this time after the resize
   * @param emitInitial Emit the initial size after subscribe?
   * @param emitImmediate Emit an event immediately after the size changes. Useful e.g. for visibility checks.
   */
  observe(element, throttle, emitInitial, emitImmediate) {
    let entry = this.listeners.get(element);
    if (!entry) {
      entry = {
        element,
        subscribers: []
      };
      this.listeners.set(element, entry);
    }
    return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(subscriber => {
      const sub = {
        sub: subscriber,
        dim: undefined,
        throttle,
        blocked: false,
        emitImmediate
      };
      this.subscriberAdded(entry, sub, emitInitial);
      return () => this.subscriberRemoved(entry, sub);
    });
  }
  subscriberAdded(entry, subscriber, emitInitial) {
    entry.subscribers.push(subscriber);
    if (entry.subscribers.length === 1) {
      this.resizeObserver?.observe(entry.element);
    }
    if (emitInitial) {
      this.schedule(0, entry.element, subscriber, false, true);
    }
  }
  subscriberRemoved(entry, subscriber) {
    const index = entry.subscribers.indexOf(subscriber);
    if (index >= 0) {
      entry.subscribers.splice(index, 1);
    }
    if (entry.subscribers.length === 0) {
      // no more subscribers, tear down everything
      this.resizeObserver?.unobserve(entry.element);
      this.listeners.delete(entry.element);
    }
    this.unschedule(subscriber);
    // close down, no re-subscription possible
    subscriber.sub.complete();
  }
  handleElement(element) {
    const entry = this.listeners.get(element);
    if (!entry) {
      this.resizeObserver?.unobserve(element);
      return;
    }
    entry.subscribers.forEach(sub => this.handleResizeSubscriber(element, sub));
  }
  handleResizeSubscriber(element, entry) {
    if (entry.blocked) {
      return;
    }
    if (entry.emitImmediate) {
      this.schedule(0, element, entry, false);
    }
    this.schedule(entry.throttle, element, entry, true);
  }
  emitSize(element, entry, force = false) {
    const dimensions = {
      width: element.clientWidth,
      height: element.clientHeight
    };
    if (!force && entry.dim?.width === dimensions.width && entry.dim?.height === dimensions.height) {
      // Prevent spurious emissions. Subpixels and all..
      return;
    }
    entry.dim = dimensions;
    entry.sub.next(dimensions);
  }
  schedule(timeout, element, subscriber, unblock, force = false) {
    if (unblock) {
      subscriber.blocked = true;
    }
    let queue = this.timerQueue.get(timeout);
    if (!queue) {
      queue = [];
      this.timerQueue.set(timeout, queue);
      setTimeout(() => {
        this.timerQueue.delete(timeout);
        this.processQueue(queue);
      }, timeout);
    }
    queue.push({
      element,
      subscriber,
      unblock,
      force
    });
  }
  unschedule(entry) {
    const queued = this.timerQueue.get(entry.throttle);
    if (queued) {
      const index = queued.findIndex(q => q.subscriber === entry);
      if (index > -1) {
        queued.splice(index, 1);
      }
    }
  }
  processQueue(queue) {
    this.zone.run(() => {
      queue?.forEach(q => {
        if (q.unblock) {
          q.subscriber.blocked = false;
        }
        this.emitSize(q.element, q.subscriber, q.force);
      });
    });
  }
  /**
   * check size on all observed elements. Only use in testing!
   */
  // eslint-disable-next-line @typescript-eslint/naming-convention
  _checkAll() {
    this.listeners.forEach(entry => this.handleElement(entry.element));
  }
}
ResizeObserverService.ɵfac = function ResizeObserverService_Factory(t) {
  return new (t || ResizeObserverService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID));
};
ResizeObserverService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: ResizeObserverService,
  factory: ResizeObserverService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ResizeObserverService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }];
  }, null);
})();
class SiAutoCollapsableListMeasurable {
  constructor(elementRef, resizeObserverService) {
    this.elementRef = elementRef;
    this.resizeObserverService = resizeObserverService;
  }
  ngAfterViewInit() {
    this.size$ = this.resizeObserverService.observe(this.elementRef.nativeElement, 100, true).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.shareReplay)(1));
  }
}
SiAutoCollapsableListMeasurable.ɵfac = function SiAutoCollapsableListMeasurable_Factory(t) {
  return new (t || SiAutoCollapsableListMeasurable)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ResizeObserverService));
};
SiAutoCollapsableListMeasurable.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiAutoCollapsableListMeasurable
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAutoCollapsableListMeasurable, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: ResizeObserverService
    }];
  }, null);
})();

/**
 * A global blink pulse generator for synchronized blinking patterns across an entire application.
 * Use to trigger any blinking by subscribing to `pulse$`.
 */
class BlinkService {
  constructor() {
    this.pause$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(false);
    this.off$ = this.pause$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.filter)(v => v));
    this.on$ = this.pause$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.filter)(v => !v));
    /**
     * Blink pulse. Subscribe to it to toggle `on` CSS class when true, `off` CSS class when `false`.
     * Do animations using CSS transitions
     */
    this.pulse$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.timer)(0, 1400).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.map)(count => count % 2 === 0), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.distinctUntilChanged)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.takeUntil)(this.off$), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.endWith)(false), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.repeatWhen)(() => this.on$), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.share)());
  }
  pause() {
    this.pause$.next(true);
  }
  resume() {
    this.pause$.next(false);
  }
  isPaused() {
    return this.pause$.value;
  }
}
BlinkService.ɵfac = function BlinkService_Factory(t) {
  return new (t || BlinkService)();
};
BlinkService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: BlinkService,
  factory: BlinkService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BlinkService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();
const SI_UI_STATES_STORAGE_KEY = 'si-ui-states';
/**
 * Service to save and load `UIState` objects. UI state objects contain a context id, which are used
 * as storage keys and prevents unwanted overwrites.
 * To enable the service,
 *
 * - add it to the `providers` declaration in your app module and
 * - set unique `stateId`s to the components (e.g. vertical navbar menu items or splits).
 *
  ```ts
  import { SiUIStateService } from '@simpl/element-ng';
  :
  providers: [
    { provide: SiUIStateService }
   ]
  ```
 *
 */
class SiUIStateService {
  constructor(platformId) {
    if ((0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId)) {
      this.storage = localStorage;
    }
  }
  /**
   * Saves the provided state in the storage.
   *
   * @param state The state to be save. state with context ids are preferred to prevent unwanted overwrites.
   * @returns True if all goes well as an observable for potential asynchronous remote storage implementations.
   */
  save(state) {
    const store = this.loadStore();
    if (state.contextId) {
      if (!store.contexts) {
        store.contexts = {};
      }
      store.contexts[state.contextId] = state;
    } else {
      store.default = state;
    }
    this.saveStore(store);
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(true);
  }
  /**
   * Loads and returns the UIState for the given context id.
   * @param contextId The optional but recommended context id for which the UI state object is returned.
   * @returns The UI state object or undefined, wrapped within an observable to support asynchronous
   * remote storage implementations.
   */
  load(contextId) {
    const store = this.loadStore();
    if (contextId) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(store.contexts?.[contextId]);
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(store.default);
  }
  loadStore() {
    const storeStr = this.storage?.getItem(SI_UI_STATES_STORAGE_KEY);
    if (storeStr) {
      return JSON.parse(storeStr);
    }
    return {
      default: undefined,
      contexts: {}
    };
  }
  saveStore(store) {
    this.storage?.setItem(SI_UI_STATES_STORAGE_KEY, JSON.stringify(store));
  }
}
SiUIStateService.ɵfac = function SiUIStateService_Factory(t) {
  return new (t || SiUIStateService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID));
};
SiUIStateService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiUIStateService,
  factory: SiUIStateService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiUIStateService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }];
  }, null);
})();
class TextMeasureService {
  measureText(text, fontRef) {
    this.ensureCanvas();
    this.setFontStyle(fontRef);
    return Math.ceil(this.measureCanvas.measureText(text).width);
  }
  getFontStyle(element) {
    const style = getComputedStyle(element);
    // this is necessary since Firefox returns style.font as ""
    return `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${style.fontSize} ${style.fontFamily}`.replace(/ +/g, ' ').trim();
  }
  ensureCanvas() {
    if (this.measureCanvas) {
      return;
    }
    const canvas = document.createElement('canvas');
    this.measureCanvas = canvas.getContext('2d');
  }
  setFontStyle(fontRef) {
    if (typeof fontRef === 'string') {
      this.measureCanvas.font = fontRef;
      return;
    }
    if (fontRef) {
      this.measureCanvas.font = this.getFontStyle(fontRef);
      return;
    }
    if (!this.defaultFont) {
      this.defaultFont = this.getFontStyle(document.body);
    }
    this.measureCanvas.font = this.defaultFont;
  }
}
TextMeasureService.ɵfac = function TextMeasureService_Factory(t) {
  return new (t || TextMeasureService)();
};
TextMeasureService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: TextMeasureService,
  factory: TextMeasureService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TextMeasureService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();
class SiAutoCollapsableListItemDirective extends SiAutoCollapsableListMeasurable {
  constructor(elementRef, resizeObserverService, changeDetectorRef) {
    super(elementRef, resizeObserverService);
    this.changeDetectorRef = changeDetectorRef;
    this.visible = true;
    this.initialized = false;
  }
  get visibility() {
    return this.visible && this.initialized ? 'visible' : 'hidden';
  }
  get position() {
    return this.visible && this.initialized ? '' : 'absolute';
  }
  // ensure hidden items are behind the visible ones. Otherwise, the visible ones are not clickable
  get zIndex() {
    return this.visible && this.initialized ? '' : '-1';
  }
  ngAfterViewInit() {
    if (getComputedStyle(this.elementRef.nativeElement).display === 'inline') {
      console.error('siAutoCollapsibleListItem does not work on items with display="inline"');
    }
    super.ngAfterViewInit();
    setTimeout(() => {
      this.initialized = true;
      this.changeDetectorRef.markForCheck();
    });
  }
}
SiAutoCollapsableListItemDirective.ɵfac = function SiAutoCollapsableListItemDirective_Factory(t) {
  return new (t || SiAutoCollapsableListItemDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ResizeObserverService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiAutoCollapsableListItemDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiAutoCollapsableListItemDirective,
  selectors: [["", "siAutoCollapsableListItem", ""]],
  hostVars: 6,
  hostBindings: function SiAutoCollapsableListItemDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("visibility", ctx.visibility)("position", ctx.position)("z-index", ctx.zIndex);
    }
  },
  exportAs: ["siAutoCollapsableListItem"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAutoCollapsableListItemDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siAutoCollapsableListItem]',
      exportAs: 'siAutoCollapsableListItem'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: ResizeObserverService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    visibility: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['style.visibility']
    }],
    position: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['style.position']
    }],
    zIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['style.z-index']
    }]
  });
})();
class SiAutoCollapsableListAdditionalContentDirective extends SiAutoCollapsableListMeasurable {}
SiAutoCollapsableListAdditionalContentDirective.ɵfac = /* @__PURE__ */function () {
  let ɵSiAutoCollapsableListAdditionalContentDirective_BaseFactory;
  return function SiAutoCollapsableListAdditionalContentDirective_Factory(t) {
    return (ɵSiAutoCollapsableListAdditionalContentDirective_BaseFactory || (ɵSiAutoCollapsableListAdditionalContentDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](SiAutoCollapsableListAdditionalContentDirective)))(t || SiAutoCollapsableListAdditionalContentDirective);
  };
}();
SiAutoCollapsableListAdditionalContentDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiAutoCollapsableListAdditionalContentDirective,
  selectors: [["", "siAutoCollapsableListAdditionalContent", ""]],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAutoCollapsableListAdditionalContentDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siAutoCollapsableListAdditionalContent]'
    }]
  }], null, null);
})();
class SiAutoCollapsableListOverflowItemDirective extends SiAutoCollapsableListItemDirective {
  constructor() {
    super(...arguments);
    this.hiddenItemCount = 0;
  }
}
SiAutoCollapsableListOverflowItemDirective.ɵfac = /* @__PURE__ */function () {
  let ɵSiAutoCollapsableListOverflowItemDirective_BaseFactory;
  return function SiAutoCollapsableListOverflowItemDirective_Factory(t) {
    return (ɵSiAutoCollapsableListOverflowItemDirective_BaseFactory || (ɵSiAutoCollapsableListOverflowItemDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](SiAutoCollapsableListOverflowItemDirective)))(t || SiAutoCollapsableListOverflowItemDirective);
  };
}();
SiAutoCollapsableListOverflowItemDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiAutoCollapsableListOverflowItemDirective,
  selectors: [["", "siAutoCollapsableListOverflowItem", ""]],
  exportAs: ["siAutoCollapsableListOverflowItem"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAutoCollapsableListOverflowItemDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siAutoCollapsableListOverflowItem]',
      exportAs: 'siAutoCollapsableListOverflowItem'
    }]
  }], null, null);
})();
class SiAutoCollapsableListDirective {
  get overflow() {
    return this._siAutoCollapsableList ? 'hidden' : '';
  }
  get siAutoCollapsableList() {
    return this._siAutoCollapsableList;
  }
  set siAutoCollapsableList(value) {
    this._siAutoCollapsableList = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__.coerceBooleanProperty)(value);
    if (!this._siAutoCollapsableList && this.resizeSubscription) {
      this.reset();
      this.resizeSubscription.unsubscribe();
      this.resizeSubscription = undefined;
    } else if (this._siAutoCollapsableList && !this.resizeSubscription && this.items) {
      this.setupResizeListener();
    }
  }
  constructor(elementRef, resizeObserverService, changeDetectorRef) {
    this.elementRef = elementRef;
    this.resizeObserverService = resizeObserverService;
    this.changeDetectorRef = changeDetectorRef;
    this._siAutoCollapsableList = true;
  }
  ngAfterViewInit() {
    if (this.siAutoCollapsableList) {
      this.setupResizeListener();
    } else {
      this.reset();
    }
  }
  ngOnDestroy() {
    this.resizeSubscription?.unsubscribe();
  }
  setupResizeListener() {
    const containerSize$ = this.resizeObserverService.observe(this.elementRef.nativeElement, 100, true);
    const itemSizes$ = this.items.changes.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.startWith)(this.items), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.switchMap)(items => !items.length ? (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)([]) : (0,rxjs__WEBPACK_IMPORTED_MODULE_17__.combineLatest)(items.map(item => item.size$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.map)(({
      width: size
    }) => ({
      size,
      directive: item
    })))))));
    const additionalContentSizes$ = this.additionalContent.changes.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.startWith)(this.additionalContent), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.switchMap)(additionalContent => (0,rxjs__WEBPACK_IMPORTED_MODULE_17__.combineLatest)(additionalContent.map(item => item.size$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.map)(({
      width: size
    }) => size))))), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.startWith)([]));
    this.resizeSubscription = (0,rxjs__WEBPACK_IMPORTED_MODULE_17__.combineLatest)([containerSize$, this.overflowItem?.size$ ?? (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)({
      width: 0,
      height: 0
    }), itemSizes$, additionalContentSizes$]).subscribe(([containerSize, overflowItemSize, items, additionalContentSizes]) => setTimeout(() => this.updateItemVisibility(containerSize.width, overflowItemSize.width, items, additionalContentSizes)));
  }
  updateItemVisibility(size, overflowSize, items, additionalContent) {
    let remainingSpace = size - additionalContent.reduce((a, b) => a + b, 0);
    const itemsCopy = items.slice();
    while (remainingSpace >= 0 && itemsCopy.length) {
      const item = itemsCopy.shift();
      if (remainingSpace - item.size - overflowSize >= 0) {
        item.directive.visible = true;
        remainingSpace -= item.size;
      } else if (!itemsCopy.length && remainingSpace - item.size >= 0) {
        item.directive.visible = true;
        remainingSpace = 0;
      } else {
        remainingSpace = 0;
        item.directive.visible = false;
      }
    }
    itemsCopy.forEach(item => item.directive.visible = false);
    if (this.overflowItem) {
      this.overflowItem.hiddenItemCount = this.items.filter(item => !item.visible).length;
      this.overflowItem.visible = this.overflowItem.hiddenItemCount !== 0;
    }
    this.changeDetectorRef.markForCheck();
  }
  reset() {
    this.items.forEach(item => item.visible = true);
    if (this.overflowItem) {
      this.overflowItem.visible = false;
      this.overflowItem.hiddenItemCount = 0;
    }
    this.changeDetectorRef.markForCheck();
  }
}
SiAutoCollapsableListDirective.ɵfac = function SiAutoCollapsableListDirective_Factory(t) {
  return new (t || SiAutoCollapsableListDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ResizeObserverService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiAutoCollapsableListDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiAutoCollapsableListDirective,
  selectors: [["", "siAutoCollapsableList", ""]],
  contentQueries: function SiAutoCollapsableListDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, SiAutoCollapsableListOverflowItemDirective, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, SiAutoCollapsableListItemDirective, 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, SiAutoCollapsableListAdditionalContentDirective, 4);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.overflowItem = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.items = _t);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.additionalContent = _t);
    }
  },
  hostVars: 2,
  hostBindings: function SiAutoCollapsableListDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("overflow", ctx.overflow);
    }
  },
  inputs: {
    siAutoCollapsableList: "siAutoCollapsableList"
  },
  exportAs: ["siAutoCollapsableList"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAutoCollapsableListDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siAutoCollapsableList]',
      exportAs: 'siAutoCollapsableList'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: ResizeObserverService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    items: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
      args: [SiAutoCollapsableListItemDirective]
    }],
    overflowItem: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChild,
      args: [SiAutoCollapsableListOverflowItemDirective]
    }],
    additionalContent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
      args: [SiAutoCollapsableListAdditionalContentDirective]
    }],
    overflow: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['style.overflow']
    }],
    siAutoCollapsableList: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiAutoCollapsableListModule {}
SiAutoCollapsableListModule.ɵfac = function SiAutoCollapsableListModule_Factory(t) {
  return new (t || SiAutoCollapsableListModule)();
};
SiAutoCollapsableListModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiAutoCollapsableListModule
});
SiAutoCollapsableListModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAutoCollapsableListModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [SiAutoCollapsableListAdditionalContentDirective, SiAutoCollapsableListDirective, SiAutoCollapsableListItemDirective, SiAutoCollapsableListOverflowItemDirective],
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule],
      exports: [SiAutoCollapsableListAdditionalContentDirective, SiAutoCollapsableListDirective, SiAutoCollapsableListItemDirective, SiAutoCollapsableListOverflowItemDirective]
    }]
  }], null, null);
})();

/**
 * Provide this class to build a custom translation service.
 *
 * @internal
 */
class SiTranslateServiceBuilder {}
SiTranslateServiceBuilder.ɵfac = function SiTranslateServiceBuilder_Factory(t) {
  return new (t || SiTranslateServiceBuilder)();
};
SiTranslateServiceBuilder.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiTranslateServiceBuilder,
  factory: SiTranslateServiceBuilder.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTranslateServiceBuilder, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
  }], null, null);
})();

/**
 * @returns The culture language code of the browser, e.g. "en-US".
 */
const getBrowserCultureLanguage = () => window?.navigator?.languages?.[0] ?? window?.navigator?.language;
/**
 * @returns The language code of the browser, e.g. "en".
 */
const getBrowserLanguage = () => getBrowserCultureLanguage()?.split(/-|_/)[0];
/**
 * Wrapper around an actual translation framework which is meant to be used internally by Element.
 * Applications must not use this service.
 *
 * @internal
 */
class SiTranslateService {}
SiTranslateService.ɵfac = function SiTranslateService_Factory(t) {
  return new (t || SiTranslateService)();
};
SiTranslateService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiTranslateService,
  factory: SiTranslateService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTranslateService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
  }], null, null);
})();
const arrayToRecord = keys => keys.reduce((acc, cur) => {
  acc[cur] = cur;
  return acc;
}, {});
/**
 * Pass through implementation of the {@link SiTranslateService} which is used as a default.
 *
 * @internal
 */
class SiNoTranslateService extends SiTranslateService {
  constructor() {
    super(...arguments);
    this.translationChange = rxjs__WEBPACK_IMPORTED_MODULE_18__.NEVER;
  }
  get currentLanguage() {
    return 'en';
  }
  get availableLanguages() {
    return ['en'];
  }
  set availableLanguages(_lang) {}
  setCurrentLanguage(_lang) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)();
  }
  getDefaultLanguage() {
    return 'en';
  }
  setDefaultLanguage(_lang) {}
  translate(keys, _params) {
    // "as any" due to Typescript not being able to handle type guards in combination with generics
    return typeof keys === 'string' ? keys : arrayToRecord(keys);
  }
  translateSync(keys, params) {
    return this.translate(keys, params);
  }
  translateAsync(keys, params) {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(this.translate(keys, params));
  }
}
SiNoTranslateService.ɵfac = /* @__PURE__ */function () {
  let ɵSiNoTranslateService_BaseFactory;
  return function SiNoTranslateService_Factory(t) {
    return (ɵSiNoTranslateService_BaseFactory || (ɵSiNoTranslateService_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](SiNoTranslateService)))(t || SiNoTranslateService);
  };
}();
SiNoTranslateService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiNoTranslateService,
  factory: SiNoTranslateService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNoTranslateService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();

/**
 * Always returns the same instance of {@link SiNoTranslateService}
 *
 * @internal
 */
class SiNoTranslateServiceBuilder extends SiTranslateServiceBuilder {
  constructor(siNoTranslateService) {
    super();
    this.siNoTranslateService = siNoTranslateService;
  }
  buildService() {
    return this.siNoTranslateService;
  }
}
SiNoTranslateServiceBuilder.ɵfac = function SiNoTranslateServiceBuilder_Factory(t) {
  return new (t || SiNoTranslateServiceBuilder)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](SiNoTranslateService));
};
SiNoTranslateServiceBuilder.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiNoTranslateServiceBuilder,
  factory: SiNoTranslateServiceBuilder.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNoTranslateServiceBuilder, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: SiNoTranslateService
    }];
  }, null);
})();

/**
 * Translates keys by using the {@link SiTranslateService}.
 * Within Element this pipe should be used instead of ngx-translates `translate` pipe.
 * Outside Element, this pipe should NOT be used.
 *
 * @internal
 */
// eslint-disable-next-line @angular-eslint/no-pipe-impure
class SiTranslatePipe {
  constructor(siTranslateService, cdRef) {
    this.siTranslateService = siTranslateService;
    this.cdRef = cdRef;
    this.value = '';
  }
  transform(key, params) {
    if (!key) {
      return '';
    }
    const currentKeyParams = params ? `${key}-${JSON.stringify(params)}` : key;
    if (this.lastKeyParams === currentKeyParams) {
      return this.value;
    }
    this.subscription?.unsubscribe();
    const translate = this.siTranslateService.translate(key, params);
    if (typeof translate === 'string') {
      this.updateValue(currentKeyParams, translate);
    } else {
      this.subscription = translate.subscribe(value => this.updateValue(currentKeyParams, value));
    }
    return this.value;
  }
  ngOnDestroy() {
    this.subscription?.unsubscribe();
    this.subscription = undefined;
  }
  updateValue(currentKeyParams, value) {
    this.lastKeyParams = currentKeyParams;
    this.value = value;
    this.cdRef.markForCheck();
  }
}
SiTranslatePipe.ɵfac = function SiTranslatePipe_Factory(t) {
  return new (t || SiTranslatePipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiTranslateService, 16), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef, 16));
};
SiTranslatePipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
  name: "translate",
  type: SiTranslatePipe,
  pure: false
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTranslatePipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
    args: [{
      name: 'translate',
      pure: false
    }]
  }], function () {
    return [{
      type: SiTranslateService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, null);
})();

/**
 * This provides declares SiTranslatePipe and provides a respective SiTranslateService.
 * It should be used internally of Element but NOT by any application
 *
 * @internal
 */
class SiTranslateModule {}
SiTranslateModule.ɵfac = function SiTranslateModule_Factory(t) {
  return new (t || SiTranslateModule)();
};
SiTranslateModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiTranslateModule
});
SiTranslateModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  providers: [
  /* This is needed for ngx-translate when using the isolated mode for lazy child routes.
   * In that case a new TranslateService is created by ngx-translate which also needs to be used
   * by SiMPL components within that route. The Builder can be used to check if a new service is available
   * and then provide a corresponding SiTranslateService.
   */
  {
    provide: SiTranslateService,
    useFactory: (injector, noTranslateBuilder) => injector.get(SiTranslateServiceBuilder, noTranslateBuilder).buildService(injector),
    deps: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector, SiNoTranslateServiceBuilder]
  }]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTranslateModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [SiTranslatePipe],
      exports: [SiTranslatePipe],
      providers: [
      /* This is needed for ngx-translate when using the isolated mode for lazy child routes.
       * In that case a new TranslateService is created by ngx-translate which also needs to be used
       * by SiMPL components within that route. The Builder can be used to check if a new service is available
       * and then provide a corresponding SiTranslateService.
       */
      {
        provide: SiTranslateService,
        useFactory: (injector, noTranslateBuilder) => injector.get(SiTranslateServiceBuilder, noTranslateBuilder).buildService(injector),
        deps: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector, SiNoTranslateServiceBuilder]
      }]
    }]
  }], null, null);
})();
class SiSplitPartComponent {
  constructor(_elRef, cdRef) {
    this._elRef = _elRef;
    this.cdRef = cdRef;
    this._arrows = {
      h: ['arrow-start', 'arrow-end'],
      v: ['arrow-up', 'arrow-down']
    };
    this.actions = [];
    this.collapseDirection = 'start';
    /**
     * Sets the icon class that is used in the buttons of split parts to
     * collapse and uncollapse the parts.
     */
    this.collapseIconClass = 'element-double-right';
    /**
     * Collapse only to the given min size.
     */
    this.collapseToMinSize = false;
    /**
     * Minimum size in px.
     */
    this.minSize = 0;
    /**
     * When a split part is collapsed, the content gets hidden but it will
     * still remain within the DOM. If you want to remove and destroy the component
     * in collapsed mode and recreate it on un-collapse, set this property to
     * true.
     */
    this.removeContentOnCollapse = false;
    /**
     * Defines the behavior of the split part during scaling.
     * E.g. when set to `none`, the spit part will keep its current size even when the parent container grows or shrinks.
     */
    this.scale = 'auto';
    /**
     * Defines if the collapse button of a split part is displayed. Default value is true.
     */
    this.showCollapseButton = true;
    /**
     * Defines if the header of the split part is visible. Default is true.
     */
    this.showHeader = true;
    /**
     * Aria label for collapse button. Needed for a11y
     */
    this.collapseLabel = 'collapse';
    this.collapseChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.stateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.collapsed = false;
    this.orientation = 'vertical';
    this.trackByIndex = index => index;
    this.headerContext = {
      $implicit: this
    };
  }
  set expanded(value) {
    if (this.expanded !== value) {
      this.toggleCollapse();
    }
  }
  get expanded() {
    return !this.collapsed;
  }
  /**
   * Header size in px.
   */
  get headerSize() {
    const header = this._elRef.nativeElement.querySelector('.si-split-part-header');
    return header ? this.orientation === 'horizontal' && this.collapsed ? header.clientWidth : header.clientHeight : 0;
  }
  /**
   * Expanded size in px.
   */
  set size(value) {
    if (this._size !== value) {
      this._size = value;
      this.stateChange.emit(this.state);
    }
  }
  get size() {
    return this._size;
  }
  get statusContainerStyle() {
    const header = this._elRef.nativeElement.querySelector('.si-split-part-header');
    if (header) {
      // we need the header´s padding values to adjust the position of the status icon container
      const headerStyle = window.getComputedStyle(header);
      return {
        'block-size': `calc(100% + ${headerStyle.paddingTop} + ${headerStyle.paddingBottom}`,
        'margin-block-end': `-${headerStyle.paddingBottom}`,
        'margin-inline-start': `-${headerStyle.paddingInlineStart}`,
        'margin-inline-end': headerStyle.paddingInlineEnd,
        'margin-block-start': `-${headerStyle.paddingTop}`
      };
    }
    return null;
  }
  applyStyle(style) {
    Object.assign(this._elRef.nativeElement.style, style);
  }
  getCollapseArrow() {
    let tempArrows = this._arrows.h;
    if (this.orientation === 'vertical') {
      tempArrows = this._arrows.v;
    }
    let arrowIndex = 0;
    if (this.collapseDirection === 'end') {
      arrowIndex = 1 - arrowIndex;
    }
    if (this.collapsed) {
      arrowIndex = 1 - arrowIndex;
    }
    return tempArrows[arrowIndex];
  }
  getHeight() {
    return this._elRef.nativeElement.offsetHeight;
  }
  getWidth() {
    return this._elRef.nativeElement.offsetWidth;
  }
  initPart() {
    if (typeof this.minSize === 'number') {
      if (this.orientation === 'horizontal') {
        this.applyStyle({
          'min-width': `${this.minSize}px`,
          'min-height': 'auto'
        });
      } else {
        this.applyStyle({
          'min-width': 'auto',
          'min-height': `${this.minSize}px`
        });
      }
    }
    this.cdRef.detectChanges();
    this.cdRef.markForCheck();
  }
  /**
   * Returns true if this split part is horizontal by comparing the orientation property
   * with 'horizontal'.
   */
  isHorizontal() {
    return this.orientation === 'horizontal';
  }
  toggleCollapse() {
    this.collapsed = !this.collapsed;
    this.collapseChanged.emit(this.collapsed);
    this.stateChange.emit(this.state);
    this.cdRef.detectChanges();
    this.cdRef.markForCheck();
  }
  updateSize() {
    if (this.expanded && this.scale === 'none') {
      this.size = this.isHorizontal() ? this.getWidth() : this.getHeight();
      this.cdRef.detectChanges();
      this.cdRef.markForCheck();
    }
  }
  get state() {
    return {
      expanded: this.expanded,
      size: this.size
    };
  }
}
SiSplitPartComponent.ɵfac = function SiSplitPartComponent_Factory(t) {
  return new (t || SiSplitPartComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiSplitPartComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiSplitPartComponent,
  selectors: [["si-split-part"]],
  hostVars: 2,
  hostBindings: function SiSplitPartComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("is-collapsed", ctx.collapsed);
    }
  },
  inputs: {
    actions: "actions",
    collapseDirection: "collapseDirection",
    collapseIconClass: "collapseIconClass",
    collapseToMinSize: "collapseToMinSize",
    headerStatusColor: "headerStatusColor",
    headerStatusIconClass: "headerStatusIconClass",
    headerTemplate: "headerTemplate",
    heading: "heading",
    minSize: "minSize",
    removeContentOnCollapse: "removeContentOnCollapse",
    scale: "scale",
    showCollapseButton: "showCollapseButton",
    showHeader: "showHeader",
    collapseLabel: "collapseLabel",
    stateId: "stateId",
    expanded: "expanded",
    size: "size"
  },
  outputs: {
    collapseChanged: "collapseChanged",
    stateChange: "stateChange"
  },
  ngContentSelectors: _c1,
  decls: 4,
  vars: 5,
  consts: [["class", "si-split-part-header", 3, "is-collapsed", "is-horizontal", "has-status-color", "color", 4, "ngIf"], [4, "ngIf"], [1, "si-split-part-content"], [1, "si-split-part-header"], ["class", "si-split-part-status-container", 3, "ngStyle", 4, "ngIf"], [1, "si-split-part-title"], [1, "text-truncate"], ["class", "si-split-part-actions", 4, "ngIf"], ["class", "si-split-part-collapse-button", 4, "ngIf"], [1, "si-split-part-status-container", 3, "ngStyle"], [1, "si-split-part-status", 3, "ngClass"], [1, "si-split-part-actions"], ["type", "button", "class", "si-split-button", 3, "title", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["type", "button", 1, "si-split-button", 3, "title", "click"], [3, "ngClass"], [1, "si-split-part-collapse-button"], ["type", "button", 1, "si-split-button", 3, "click"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"]],
  template: function SiSplitPartComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiSplitPartComponent_div_0_Template, 8, 14, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiSplitPartComponent_ng_container_1_Template, 2, 2, "ng-container", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiSplitPartComponent_ng_content_3_Template, 1, 0, "ng-content", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.headerTemplate && ctx.showHeader);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.headerTemplate);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("hidden", !ctx.removeContentOnCollapse && ctx.collapsed && !ctx.collapseToMinSize);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.removeContentOnCollapse || !ctx.collapsed);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgStyle, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:flex;flex-grow:1;flex-shrink:1;flex-basis:var(--si-split-part-flex-basis);flex-direction:column;overflow:hidden}.is-collapsed[_nghost-%COMP%]{min-inline-size:auto!important;min-block-size:auto!important}[_nghost-%COMP%]     si-split{flex:1}.si-split-part-content[_ngcontent-%COMP%]{flex-basis:0px;flex-grow:1;flex-shrink:1;display:flex;flex-direction:column;overflow:hidden;inline-size:100%}.si-split-part-header[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex:none;align-items:center;padding:var(--si-split-part-header-padding);background:var(--si-split-part-header-background);block-size:var(--si-split-part-header-height)}.si-split-part-header.is-collapsed[_ngcontent-%COMP%]{border-block-end-width:var(--si-split-part-header-border-width);border-style:var(--si-split-part-header-border-style);border-color:var(--si-split-part-header-border-color)}.si-split-part-header.has-status-color[_ngcontent-%COMP%]{box-shadow:inset 0 calc(-1 * var(--si-split-part-header-status-border-width)) 0 0}.si-split-part-header.has-status-color[_ngcontent-%COMP%]   .si-split-part-status-container[_ngcontent-%COMP%]{background-color:currentColor}.si-split-part-header.is-collapsed.is-horizontal[_ngcontent-%COMP%]{flex:auto;flex-direction:column;max-block-size:100%;padding:var(--si-split-part-header-collapsed-horizontal-padding)}.si-split-part-header.is-collapsed.is-horizontal[_ngcontent-%COMP%]   .si-split-part-title[_ngcontent-%COMP%]{inline-size:100%}.si-split-part-header.is-collapsed.is-horizontal[_ngcontent-%COMP%]   .si-split-part-title[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{writing-mode:vertical-rl;transform:rotate(180deg);margin:0}.si-split-part-header.is-collapsed.is-horizontal[_ngcontent-%COMP%]   .si-split-part-collapse-button[_ngcontent-%COMP%]{order:-1}.si-split-part-status-container[_ngcontent-%COMP%]{display:inline-flex;inline-size:var(--si-split-part-header-height);max-inline-size:var(--si-split-part-header-height);padding:var(--si-split-part-header-status-container-padding)}.si-split-part-status-container[_ngcontent-%COMP%]   .si-split-part-status[_ngcontent-%COMP%]{color:var(--si-split-part-header-status-icon-color);font-size:var(--si-split-part-header-status-icon-size);margin:auto}.si-split-part-title[_ngcontent-%COMP%]{display:flex;justify-content:center;flex:auto;font-weight:var(--si-split-part-title-font-weight);font-size:var(--si-split-part-title-font-size);color:var(--si-split-part-title-color);line-height:var(--si-split-part-title-line-height);overflow:hidden}.si-split-part-title[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{display:block;word-wrap:normal;line-height:initial;min-inline-size:0;max-inline-size:100%;margin-inline-end:auto}.si-split-part-actions[_ngcontent-%COMP%]{display:flex;flex:none;align-items:center;color:initial;margin-inline:var(--si-split-part-action-margin)}.si-split-button[_ngcontent-%COMP%]{display:inline-block;padding:var(--si-split-button-padding);color:var(--si-split-button-color);overflow:hidden;white-space:nowrap;text-overflow:var(--si-split-button-text-overflow);text-decoration:none;font-size:var(--si-split-button-font-size);line-height:var(--si-split-button-line-height);vertical-align:middle;outline:none;-webkit-user-select:none;user-select:none;background:none;border:0;cursor:pointer}.si-split-button[_ngcontent-%COMP%]:hover{background:var(--si-split-button-shade-background-hover)}.si-split-button.has-noflex[_ngcontent-%COMP%]{flex:none}.si-split-button[_ngcontent-%COMP%]   .arrow-start[_ngcontent-%COMP%]{transform:rotate(180deg)}.si-split-button[_ngcontent-%COMP%]   .arrow-down[_ngcontent-%COMP%]{transform:rotate(90deg)}.si-split-button[_ngcontent-%COMP%]   .arrow-up[_ngcontent-%COMP%]{transform:rotate(270deg)}.hidden[_ngcontent-%COMP%]{display:none}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSplitPartComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-split-part',
      template: "<div\n  *ngIf=\"!headerTemplate && showHeader\"\n  class=\"si-split-part-header\"\n  [class.is-collapsed]=\"collapsed\"\n  [class.is-horizontal]=\"orientation === 'horizontal'\"\n  [class.has-status-color]=\"headerStatusColor && !collapsed\"\n  [style.color]=\"headerStatusColor && !collapsed ? headerStatusColor : null\"\n>\n  <div *ngIf=\"headerStatusIconClass && !collapsed\" class=\"si-split-part-status-container\" [ngStyle]=\"statusContainerStyle\">\n    <i class=\"si-split-part-status\" [ngClass]=\"headerStatusIconClass\"></i>\n  </div>\n  <div class=\"si-split-part-title\">\n    <span class=\"text-truncate\">{{ heading | translate}}</span>\n  </div>\n  <div class=\"si-split-part-actions\" *ngIf=\"!collapsed\">\n    <button\n      *ngFor=\"let action of actions; trackBy: trackByIndex\"\n      type=\"button\"\n      [title]=\"action.tooltip || ''\"\n      [attr.aria-label]=\"action.tooltip\"\n      class=\"si-split-button\"\n      (click)=\"action.click($event)\"\n    >\n      <i [ngClass]=\"action.iconClass\"></i>\n    </button>\n  </div>\n  <div *ngIf=\"showCollapseButton\" class=\"si-split-part-collapse-button\">\n    <button\n      type=\"button\"\n      [attr.aria-label]=\"collapseLabel | translate\"\n      class=\"si-split-button\"\n      [class.flip-rtl]=\"orientation === 'horizontal'\"\n      (click)=\"toggleCollapse()\"\n    >\n      <i [ngClass]=\"[collapseIconClass, getCollapseArrow()]\"></i>\n    </button>\n  </div>\n</div>\n\n<ng-container *ngIf=\"headerTemplate\">\n  <ng-container *ngTemplateOutlet=\"headerTemplate; context: headerContext\"></ng-container>\n</ng-container>\n\n<div class=\"si-split-part-content\" [class.hidden]=\"!removeContentOnCollapse && collapsed && !collapseToMinSize\">\n  <ng-content *ngIf=\"!removeContentOnCollapse || !collapsed\"></ng-content>\n</div>\n",
      styles: [":host{display:flex;flex-grow:1;flex-shrink:1;flex-basis:var(--si-split-part-flex-basis);flex-direction:column;overflow:hidden}:host.is-collapsed{min-inline-size:auto!important;min-block-size:auto!important}:host ::ng-deep si-split{flex:1}.si-split-part-content{flex-basis:0px;flex-grow:1;flex-shrink:1;display:flex;flex-direction:column;overflow:hidden;inline-size:100%}.si-split-part-header{display:flex;flex-direction:row;flex:none;align-items:center;padding:var(--si-split-part-header-padding);background:var(--si-split-part-header-background);block-size:var(--si-split-part-header-height)}.si-split-part-header.is-collapsed{border-block-end-width:var(--si-split-part-header-border-width);border-style:var(--si-split-part-header-border-style);border-color:var(--si-split-part-header-border-color)}.si-split-part-header.has-status-color{box-shadow:inset 0 calc(-1 * var(--si-split-part-header-status-border-width)) 0 0}.si-split-part-header.has-status-color .si-split-part-status-container{background-color:currentColor}.si-split-part-header.is-collapsed.is-horizontal{flex:auto;flex-direction:column;max-block-size:100%;padding:var(--si-split-part-header-collapsed-horizontal-padding)}.si-split-part-header.is-collapsed.is-horizontal .si-split-part-title{inline-size:100%}.si-split-part-header.is-collapsed.is-horizontal .si-split-part-title>span{writing-mode:vertical-rl;transform:rotate(180deg);margin:0}.si-split-part-header.is-collapsed.is-horizontal .si-split-part-collapse-button{order:-1}.si-split-part-status-container{display:inline-flex;inline-size:var(--si-split-part-header-height);max-inline-size:var(--si-split-part-header-height);padding:var(--si-split-part-header-status-container-padding)}.si-split-part-status-container .si-split-part-status{color:var(--si-split-part-header-status-icon-color);font-size:var(--si-split-part-header-status-icon-size);margin:auto}.si-split-part-title{display:flex;justify-content:center;flex:auto;font-weight:var(--si-split-part-title-font-weight);font-size:var(--si-split-part-title-font-size);color:var(--si-split-part-title-color);line-height:var(--si-split-part-title-line-height);overflow:hidden}.si-split-part-title>span{display:block;word-wrap:normal;line-height:initial;min-inline-size:0;max-inline-size:100%;margin-inline-end:auto}.si-split-part-actions{display:flex;flex:none;align-items:center;color:initial;margin-inline:var(--si-split-part-action-margin)}.si-split-button{display:inline-block;padding:var(--si-split-button-padding);color:var(--si-split-button-color);overflow:hidden;white-space:nowrap;text-overflow:var(--si-split-button-text-overflow);text-decoration:none;font-size:var(--si-split-button-font-size);line-height:var(--si-split-button-line-height);vertical-align:middle;outline:none;-webkit-user-select:none;user-select:none;background:none;border:0;cursor:pointer}.si-split-button:hover{background:var(--si-split-button-shade-background-hover)}.si-split-button.has-noflex{flex:none}.si-split-button .arrow-start{transform:rotate(180deg)}.si-split-button .arrow-down{transform:rotate(90deg)}.si-split-button .arrow-up{transform:rotate(270deg)}.hidden{display:none}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    actions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    collapseDirection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    collapseIconClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    collapseToMinSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    headerStatusColor: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    headerStatusIconClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    headerTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    minSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    removeContentOnCollapse: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    scale: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showCollapseButton: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showHeader: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    collapseLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    stateId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    collapseChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    stateChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    collapsed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.is-collapsed']
    }],
    expanded: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    size: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
const isRTL = elem => getComputedStyle(elem ?? document.documentElement).direction === 'rtl';
const correctKeyRTL = key => {
  if (!isRTL()) {
    return key;
  }
  return key === 'ArrowLeft' ? 'ArrowRight' : key === 'ArrowRight' ? 'ArrowLeft' : key;
};
const COLLAPSED_SIZE = 'none';
class SplitPart {
  constructor(component, _index) {
    this.component = component;
    this._index = _index;
    this._minSize = 0;
    this._size = 0;
  }
  get actualSize() {
    return this.expanded ? this.size : this.collapseToMinSize ? this.minSize : this._headerSize;
  }
  get direction() {
    return this.component.collapseDirection;
  }
  get expanded() {
    return this.component.expanded;
  }
  get hasHeader() {
    return this.component.showHeader;
  }
  get index() {
    return this._index;
  }
  get minSize() {
    return this._minSize;
  }
  get pixelSize() {
    return this.component.orientation === 'horizontal' ? this.component.getWidth() : this.component.getHeight();
  }
  get scale() {
    return this.component.scale;
  }
  get size() {
    return this._size;
  }
  set size(value) {
    this._size = !isNaN(value) ? value : 0;
  }
  get stateId() {
    return this.component.stateId;
  }
  applyStyle() {
    this.component.applyStyle(this.style);
  }
  collapsed() {
    this.component.collapsed = true;
  }
  notifySizeChange() {
    this.component.updateSize();
  }
  observeStateChange(orientation) {
    this.updateOrientation(orientation);
    return this.component.collapseChanged;
  }
  updateOrientation(orientation) {
    this.component.orientation = orientation;
    this.component.initPart();
    this.component.applyStyle(this.style);
  }
  updateSize(initialSize, totalSize, force = false) {
    this._headerSize = this.hasHeader ? this.asPercent(this.component.headerSize, totalSize) : 0;
    this._minSize = this.component.minSize ? this.asPercent(this.component.minSize, totalSize) : 0;
    this._size = this.scale === 'none' && this.component.size && !force ? this.asPercent(this.component.size, totalSize) : initialSize;
  }
  get collapseToMinSize() {
    return this.component.collapseToMinSize;
  }
  get style() {
    return {
      order: this._index * 2,
      flex: this.expanded ? `1 1 ${this.size}%` : COLLAPSED_SIZE
    };
  }
  asPercent(size, totalSize) {
    return size / (totalSize * 0.01);
  }
}
class SiSplitComponent {
  constructor(zone, cdRef, uiStateService) {
    this.cdRef = cdRef;
    this.uiStateService = uiStateService;
    this._dragging = false;
    this._mixedSize = false;
    this._unsubscribe = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.active = true;
    this.orientation = 'horizontal';
    this.sizes = [];
    this.sizesChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.gutterSize = 16;
    this.splitParts = [];
    this.trackByIndex = index => index;
    this.initialSizes = [];
    this._zone = zone;
  }
  ngAfterViewInit() {
    this.splitPartComponents.changes.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.startWith)(undefined), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_20__.delay)(0), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.tap)(() => this._unsubscribe.next()), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.switchMap)(() => this.uiStateService && this.stateId ? this.uiStateService.load(this.stateId).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_22__.take)(1)) : (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(undefined))).subscribe(state => this.initSplitParts(state));
  }
  ngOnDestroy() {
    this._unsubscribe.next();
    this._unsubscribe.complete();
  }
  ngOnChanges(changes) {
    if (changes.orientation && !changes.orientation.firstChange) {
      this.splitParts.forEach(part => part.updateOrientation(this.orientation));
    }
    if (changes.sizes && changes.sizes.currentValue !== changes.sizes.previousValue) {
      // if the previous value is undefined, it is the initial setting of the sizes.
      if (changes.sizes.currentValue && !changes.sizes.previousValue) {
        this.initialSizes = changes.sizes.currentValue;
      }
      // Prevent recursions, we fire changes sizes on resizing, which could end
      // up here again. So do not resize again if it is the same object.
      if (this.sizesChanged(this.sizes, changes.sizes.previousValue)) {
        this.resizeSplitParts();
      }
    }
  }
  sizesChanged(a, b) {
    if (!b || a.length !== b.length) {
      return true;
    }
    for (let i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) {
        return true;
      }
    }
    return false;
  }
  onResize() {
    if (this.splitParts.length && !this._dragging) {
      this.splitParts.forEach(part => part.updateSize(part.size, this.containerSize));
      this.updateView();
    }
  }
  showGutter(index) {
    return index < this.splitParts.length - 1 && this.splitParts[index].expanded && this.splitParts[index + 1].expanded;
  }
  get containerSize() {
    const container = this.splitContainer.nativeElement;
    return this.orientation === 'horizontal' ? container.clientWidth : container.clientHeight;
  }
  get totalGutterSize() {
    const gutters = this.gutters.filter((_, index) => this.showGutter(index));
    return gutters.length !== 0 ? gutters.length * this.gutterSize : 0;
  }
  get unsubscribe$() {
    return this._unsubscribe.asObservable();
  }
  drag(event, status) {
    const position = this.getPosition(event);
    const diff = position - status.start;
    // handle the pixel size of the two split parts as 100%
    const totalPixel = status.startPixel1 + status.startPixel2;
    const totalPercent = status.startPercent1 + status.startPercent2;
    const relPercent1 = this.getAsPercent(status.startPercent1, totalPercent);
    const relPercent2 = 100 - relPercent1;
    let percentDiff = this.getAsPercent(diff, totalPixel);
    if (this.orientation === 'horizontal' && isRTL()) {
      percentDiff *= -1;
    }
    percentDiff = Math.min(percentDiff, relPercent2);
    percentDiff = Math.max(percentDiff, -relPercent1);
    // scale the 100% diff percentage to the total view
    percentDiff = percentDiff * (status.startPercent1 + status.startPercent2) * 0.01;
    this.splitParts[status.index].size = this.ensurePercentRange(status.startPercent1 + percentDiff);
    this.splitParts[status.index + 1].size = this.ensurePercentRange(status.startPercent2 - percentDiff);
    this.ensureMinSplitPartSizesAfterDrag(status.index);
    this.splitParts.forEach(part => {
      if (part.expanded) {
        part.applyStyle();
      }
    });
  }
  ensureMinSplitPartSizesAfterDrag(index) {
    const part1 = this.splitParts[index];
    const part2 = this.splitParts[index + 1];
    if (part1.size < part1.minSize) {
      part2.size += part1.size - part1.minSize;
      part1.size = part1.minSize;
    }
    if (part2.size < part2.minSize) {
      part1.size += part2.size - part2.minSize;
      part2.size = part2.minSize;
    }
  }
  ensurePercentRange(percentage) {
    return Math.max(0, Math.min(100, percentage));
  }
  getAsPercent(size, totalSize) {
    return size / (totalSize * 0.01);
  }
  getPosition(event) {
    if (event instanceof MouseEvent) {
      return this.orientation === 'horizontal' ? event.clientX : event.clientY;
    } else if (event instanceof TouchEvent) {
      return this.orientation === 'horizontal' ? event.touches[0].clientX : event.touches[0].clientY;
    }
    return 0;
  }
  fireResizeEvent() {
    this.saveUIState();
    this.cdRef.markForCheck();
  }
  initSplitParts(state) {
    this.splitParts = this.splitPartComponents.map((component, index) => {
      // load the stored ui state for a split part if
      //  - the part has an id
      //  - the part uses scale mode 'none'
      //  - the initial size has not changed to the initial size that we used at storing
      //    the state. This ensures that we can overwrite the stored sizing when setting
      //    new input sized via the API. Or, the part is collapsed (not expanded).
      if (component.stateId && state?.splitParts && component.scale === 'none' && (this.sizes[index] === state.splitParts[component.stateId].initialSize || !state.splitParts[component.stateId].expanded)) {
        const splitPartState = state.splitParts[component.stateId];
        this.sizes[index] = splitPartState.size;
        component.expanded = splitPartState.expanded ?? true;
      }
      const splitPart = new SplitPart(component, index);
      splitPart.updateSize(this.sizes[index], this.containerSize);
      this._mixedSize = this._mixedSize || splitPart.scale === 'none';
      return splitPart;
    });
    this.splitParts.forEach(part => {
      part.observeStateChange(this.orientation).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.takeUntil)(this.unsubscribe$)).subscribe(() => {
        this.updateView(part);
      });
    });
    setTimeout(() => {
      this.updateView();
      this.cdRef.detectChanges();
      this.setupDragEvents();
      this.splitParts.filter(part => part.scale === 'none').forEach(part => part.notifySizeChange());
      this.cdRef.detectChanges();
    });
  }
  resizeSplitParts() {
    this.splitParts.forEach((part, index) => {
      part.updateSize(this.sizes[index], this.containerSize, true);
      this._mixedSize = this._mixedSize || part.scale === 'none';
    });
    setTimeout(() => {
      this.updateView();
      this.splitParts.filter(part => part.scale === 'none').forEach(part => part.notifySizeChange());
      this.cdRef.markForCheck();
    });
  }
  setupDragEvents() {
    this._zone.runOutsideAngular(() => {
      const mousemove$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_23__.merge)((0,rxjs__WEBPACK_IMPORTED_MODULE_24__.fromEvent)(document, 'mousemove'), (0,rxjs__WEBPACK_IMPORTED_MODULE_24__.fromEvent)(document, 'touchmove'));
      const mouseup$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_23__.merge)((0,rxjs__WEBPACK_IMPORTED_MODULE_24__.fromEvent)(document, 'mouseup'), (0,rxjs__WEBPACK_IMPORTED_MODULE_24__.fromEvent)(document, 'touchend'));
      this.gutters.forEach((gutter, index) => {
        const mousedown$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_23__.merge)((0,rxjs__WEBPACK_IMPORTED_MODULE_24__.fromEvent)(gutter.nativeElement, 'mousedown'), (0,rxjs__WEBPACK_IMPORTED_MODULE_24__.fromEvent)(gutter.nativeElement, 'touchstart'));
        mousedown$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.takeUntil)(this.unsubscribe$), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.switchMap)(startEvent => {
          startEvent.preventDefault();
          this._dragging = true;
          const part1 = this.splitParts[index];
          const part2 = this.splitParts[index + 1];
          const status = {
            index,
            start: this.getPosition(startEvent),
            startPixel1: part1.pixelSize,
            startPixel2: part2.pixelSize,
            startPercent1: part1.size,
            startPercent2: part2.size
          };
          return mousemove$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.throttleTime)(5), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.tap)(evt => this.drag(evt, status)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.takeUntil)(mouseup$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.tap)(() => {
            this.fireResizeEvent();
            part1.notifySizeChange();
            part2.notifySizeChange();
            this._dragging = false;
            this.cdRef.detectChanges();
          }))), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_25__.throttleTime)(200));
        })).subscribe(() => this.fireResizeEvent());
      });
    });
  }
  updateAutoSize(activePart) {
    let factor;
    if (activePart?.expanded) {
      factor = (100 - activePart.size) / 100;
      this.splitParts.filter((part, index) => part.expanded && activePart.index !== index).forEach(part => part.size *= factor);
    }
    let totalSize = 0;
    this.splitParts.forEach((part, index) => {
      if (activePart && !activePart.expanded) {
        if (activePart.direction === 'start' && index < activePart.index) {
          part.collapsed();
        }
        if (activePart.direction === 'end' && index > activePart.index) {
          part.collapsed();
        }
      }
      totalSize += part.actualSize;
    });
    // recalculate size to fill 100%
    factor = totalSize !== 0 ? 100 / totalSize : 0;
    this.splitParts.filter(part => part.expanded).forEach(part => part.size *= factor);
  }
  updateMixedSize() {
    let autoSize = 100;
    let actualSize = 0;
    this.splitParts.forEach(part => {
      if (part.scale === 'none') {
        autoSize -= part.actualSize;
      } else {
        actualSize += part.size;
      }
    });
    autoSize -= this.getAsPercent(this.totalGutterSize, this.containerSize);
    const autoSizeFactor = actualSize ? autoSize / actualSize : 1;
    this.splitParts.forEach(part => {
      if (part.scale === 'auto') {
        part.size *= autoSizeFactor;
      }
    });
  }
  updateView(activePart) {
    if (this._mixedSize) {
      this.updateMixedSize();
    } else {
      this.updateAutoSize(activePart);
    }
    this.splitParts.forEach(part => part.applyStyle());
    if (activePart) {
      setTimeout(() => this.fireResizeEvent());
    }
    this.cdRef.detectChanges();
    this.cdRef.markForCheck();
  }
  saveUIState() {
    const state = {
      contextId: this.stateId,
      splitParts: {}
    };
    const newSizes = [];
    this.splitParts.forEach((part, index) => {
      newSizes.push(part.size);
      if (part.stateId) {
        state.splitParts[part.stateId] = {
          size: part.size,
          expanded: part.expanded,
          initialSize: this.initialSizes[index]
        };
      }
    });
    this.sizes = newSizes;
    this.sizesChange.emit(this.sizes);
    if (this.stateId && this.uiStateService) {
      this.uiStateService.save(state);
    }
  }
}
SiSplitComponent.ɵfac = function SiSplitComponent_Factory(t) {
  return new (t || SiSplitComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiUIStateService, 8));
};
SiSplitComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiSplitComponent,
  selectors: [["si-split"]],
  contentQueries: function SiSplitComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, SiSplitPartComponent, 4);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.splitPartComponents = _t);
    }
  },
  viewQuery: function SiSplitComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c2, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c3, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.splitContainer = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.gutters = _t);
    }
  },
  hostVars: 2,
  hostBindings: function SiSplitComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("resize", function SiSplitComponent_resize_HostBindingHandler() {
        return ctx.onResize();
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveWindow"]);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("si-split", ctx.active);
    }
  },
  inputs: {
    orientation: "orientation",
    sizes: "sizes",
    gutterSize: "gutterSize",
    stateId: "stateId"
  },
  outputs: {
    sizesChange: "sizesChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  ngContentSelectors: _c1,
  decls: 4,
  vars: 3,
  consts: [[1, "si-split-container", 3, "ngClass"], ["splitContainer", ""], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "si-split-gutter", 3, "d-none", "order", "width", "height", 4, "ngIf"], [1, "si-split-gutter"], ["gutter", ""]],
  template: function SiSplitComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiSplitComponent_ng_container_3_Template, 2, 1, "ng-container", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx.orientation);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.splitParts)("ngForTrackBy", ctx.trackByIndex);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf],
  styles: ["[_nghost-%COMP%]{--si-split-gutter-border-thickness: 0;--si-split-gutter-border-style: solid;--si-split-gutter-handle-size: 6px;--si-split-gutter-handle-length: 40px;--si-split-part-header-height: 40px;--si-split-part-header-background: var(--element-base-0);--si-split-part-header-padding: 6px;--si-split-part-header-collapsed-horizontal-padding: 6px;--si-split-part-header-status-border-width: 4px;--si-split-part-header-status-container-padding: 0;--si-split-part-header-status-icon-color: var(--si-split-part-title-color, initial);--si-split-part-header-status-icon-size: 20px;--si-split-part-title-color: var(--element-text-primary);--si-split-part-title-font-size: .875rem;--si-split-part-title-font-weight: bold;--si-split-part-title-line-height: 1.143;--si-split-part-action-margin: 8px;--si-split-part-flex-basis: 50px;--si-split-button-color: var(--element-text-primary);--si-split-button-font-size: 20px;--si-split-button-line-height: 1;--si-split-button-text-overflow: ellipsis;--si-split-button-padding: 4px;--si-split-button-shade-background-hover: rgba(47, 67, 99, .4);display:flex;inline-size:100%}.si-split-container[_ngcontent-%COMP%]{display:flex;overflow:hidden;inline-size:100%;flex-direction:row}.si-split-container.vertical[_ngcontent-%COMP%]{flex-direction:column}.si-split-gutter[_ngcontent-%COMP%]{flex-shrink:0;flex-grow:0;background:var(--element-base-0);cursor:ew-resize}.si-split-gutter[_ngcontent-%COMP%]:before{display:block;content:\"\";position:relative;inset-block-start:50%;margin-block-start:calc(-1 * var(--si-split-gutter-handle-length) / 2);inset-inline-start:50%;margin-inline-start:calc(-1 * var(--si-split-gutter-handle-size) / 2);inline-size:var(--si-split-gutter-handle-size);block-size:var(--si-split-gutter-handle-length);background:var(--element-ui-2);border-radius:3px}.vertical[_ngcontent-%COMP%]   .si-split-gutter[_ngcontent-%COMP%]{inline-size:auto;cursor:ns-resize}.vertical[_ngcontent-%COMP%]   .si-split-gutter[_ngcontent-%COMP%]:before{margin-block-start:calc(-1 * var(--si-split-gutter-handle-size) / 2);margin-inline-start:calc(-1 * var(--si-split-gutter-handle-length) / 2);inline-size:var(--si-split-gutter-handle-length);block-size:var(--si-split-gutter-handle-size)}.si-split-gutter[_ngcontent-%COMP%]:hover:before{background:var(--element-ui-0-hover)}.si-split-gutter[_ngcontent-%COMP%]:active:before{background:var(--element-ui-0)}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSplitComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-split',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div class=\"si-split-container\" [ngClass]=\"orientation\" #splitContainer>\n  <ng-content></ng-content>\n\n  <ng-container *ngFor=\"let splitPart of splitParts; trackBy: trackByIndex; let i = index\">\n    <div\n      #gutter\n      *ngIf=\"i < splitParts.length - 1\"\n      class=\"si-split-gutter\"\n      [class.d-none]=\"!showGutter(i)\"\n      [style.order]=\"i * 2 + 1\"\n      [style.width.px]=\"orientation === 'horizontal' ? gutterSize : null\"\n      [style.height.px]=\"orientation === 'vertical' ? gutterSize : null\"\n    ></div>\n  </ng-container>\n</div>\n",
      styles: [":host{--si-split-gutter-border-thickness: 0;--si-split-gutter-border-style: solid;--si-split-gutter-handle-size: 6px;--si-split-gutter-handle-length: 40px;--si-split-part-header-height: 40px;--si-split-part-header-background: var(--element-base-0);--si-split-part-header-padding: 6px;--si-split-part-header-collapsed-horizontal-padding: 6px;--si-split-part-header-status-border-width: 4px;--si-split-part-header-status-container-padding: 0;--si-split-part-header-status-icon-color: var(--si-split-part-title-color, initial);--si-split-part-header-status-icon-size: 20px;--si-split-part-title-color: var(--element-text-primary);--si-split-part-title-font-size: .875rem;--si-split-part-title-font-weight: bold;--si-split-part-title-line-height: 1.143;--si-split-part-action-margin: 8px;--si-split-part-flex-basis: 50px;--si-split-button-color: var(--element-text-primary);--si-split-button-font-size: 20px;--si-split-button-line-height: 1;--si-split-button-text-overflow: ellipsis;--si-split-button-padding: 4px;--si-split-button-shade-background-hover: rgba(47, 67, 99, .4);display:flex;inline-size:100%}.si-split-container{display:flex;overflow:hidden;inline-size:100%;flex-direction:row}.si-split-container.vertical{flex-direction:column}.si-split-gutter{flex-shrink:0;flex-grow:0;background:var(--element-base-0);cursor:ew-resize}.si-split-gutter:before{display:block;content:\"\";position:relative;inset-block-start:50%;margin-block-start:calc(-1 * var(--si-split-gutter-handle-length) / 2);inset-inline-start:50%;margin-inline-start:calc(-1 * var(--si-split-gutter-handle-size) / 2);inline-size:var(--si-split-gutter-handle-size);block-size:var(--si-split-gutter-handle-length);background:var(--element-ui-2);border-radius:3px}.vertical .si-split-gutter{inline-size:auto;cursor:ns-resize}.vertical .si-split-gutter:before{margin-block-start:calc(-1 * var(--si-split-gutter-handle-size) / 2);margin-inline-start:calc(-1 * var(--si-split-gutter-handle-length) / 2);inline-size:var(--si-split-gutter-handle-length);block-size:var(--si-split-gutter-handle-size)}.si-split-gutter:hover:before{background:var(--element-ui-0-hover)}.si-split-gutter:active:before{background:var(--element-ui-0)}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }, {
      type: SiUIStateService,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }];
  }, {
    splitPartComponents: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
      args: [SiSplitPartComponent]
    }],
    active: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.si-split']
    }],
    orientation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    sizes: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    sizesChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    gutterSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    stateId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    splitContainer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['splitContainer', {
        static: true
      }]
    }],
    gutters: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChildren,
      args: ['gutter']
    }],
    onResize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['window:resize']
    }]
  });
})();
class SiSplitModule {}
SiSplitModule.ɵfac = function SiSplitModule_Factory(t) {
  return new (t || SiSplitModule)();
};
SiSplitModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiSplitModule
});
SiSplitModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSplitModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule],
      declarations: [SiSplitComponent, SiSplitPartComponent],
      exports: [SiSplitComponent, SiSplitPartComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

const SI_TOAST_AUTO_HIDE_DELAY = 6000;

/**
 * @returns Returns whether animations are disabled via the CSS var. This is either set by
 * an application on low-end devices or in case the device is configured for reduced motion
 * (i.e. `@media (prefers-reduced-motion)` matches)
 */
const areAnimationsDisabled = () => {
  const style = getComputedStyle(document.documentElement);
  const flag = style.getPropertyValue('--element-animations-enabled');
  return parseInt(flag, 10) === 0;
};
const STATUS_ICON = {
  success: {
    icon: 'element-circle-filled',
    color: 'status-success',
    stacked: 'element-state-tick smooth-auto',
    stackedColor: 'status-success-contrast',
    background: 'bg-base-success',
    severity: 5
  },
  info: {
    icon: 'element-square-filled',
    color: 'status-info',
    stacked: 'element-state-info smooth-auto',
    stackedColor: 'status-info-contrast',
    background: 'bg-base-info',
    severity: 4
  },
  caution: {
    icon: 'element-square-45-filled',
    color: 'status-caution',
    stacked: 'element-state-exclamation-mark smooth-auto',
    stackedColor: 'status-caution-contrast',
    background: 'bg-base-caution',
    severity: 3
  },
  warning: {
    icon: 'element-triangle-filled',
    color: 'status-warning',
    stacked: 'element-state-exclamation-mark smooth-auto',
    stackedColor: 'status-warning-contrast',
    background: 'bg-base-warning',
    severity: 2
  },
  danger: {
    icon: 'element-circle-filled',
    color: 'status-danger',
    stacked: 'element-state-exclamation-mark smooth-auto',
    stackedColor: 'status-danger-contrast',
    background: 'bg-base-danger',
    severity: 1
  },
  critical: {
    icon: 'element-octagon-filled',
    color: 'status-critical',
    stacked: 'element-state-exclamation-mark smooth-auto',
    stackedColor: 'status-critical-contrast',
    background: 'bg-base-danger',
    severity: 0
  }
};
class SiIconComponent {
  constructor() {
    /** Text-size class for icon size, see https://simpl.code.siemens.io/simpl-element/fundamentals/typography/#type-styles-classes */
    this.size = 'icon';
    this.altText = '';
  }
  ngOnChanges(changes) {
    if (changes.icon || changes.alt) {
      this.altText = this.alt ?? this.icon?.replace('element-', '').split('-').join(' ') ?? '';
    }
  }
}
SiIconComponent.ɵfac = function SiIconComponent_Factory(t) {
  return new (t || SiIconComponent)();
};
SiIconComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiIconComponent,
  selectors: [["si-icon"]],
  inputs: {
    icon: "icon",
    color: "color",
    stackedIcon: "stackedIcon",
    stackedColor: "stackedColor",
    alt: "alt",
    size: "size"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 3,
  vars: 10,
  consts: [[1, "d-inline-block", "position-relative", 3, "ngClass"], ["class", "position-absolute start-0", "aria-hidden", "true", 3, "ngClass", 4, "ngIf"], ["aria-hidden", "true", 1, "position-absolute", "start-0", 3, "ngClass"]],
  template: function SiIconComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiIconComponent_i_2_Template, 1, 4, "i", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      let tmp_0_0;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction3"](6, _c4, (tmp_0_0 = ctx.icon) !== null && tmp_0_0 !== undefined ? tmp_0_0 : "", (tmp_0_0 = ctx.color) !== null && tmp_0_0 !== undefined ? tmp_0_0 : "", ctx.size));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", ctx.altText ? _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 4, ctx.altText) : null)("role", ctx.altText ? "img" : "presentation");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.stackedIcon);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiTranslatePipe],
  styles: ["[_nghost-%COMP%], span[_ngcontent-%COMP%]{line-height:1}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiIconComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-icon',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<span\n  [attr.aria-label]=\"altText ? (altText | translate) : null\"\n  [attr.role]=\"altText ? 'img' : 'presentation'\"\n  class=\"d-inline-block position-relative\"\n  [ngClass]=\"[icon ?? '', color ?? '', size]\"\n>\n  <i\n    *ngIf=\"stackedIcon\"\n    [ngClass]=\"[stackedIcon, stackedColor ?? '']\"\n    class=\"position-absolute start-0\"\n    aria-hidden=\"true\"\n  ></i>\n</span>\n",
      styles: [":host,span{line-height:1}\n"]
    }]
  }], null, {
    icon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    color: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    stackedIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    stackedColor: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    alt: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    size: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiLinkActionService {
  constructor() {
    this.actionSubject = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.action$ = this.actionSubject.asObservable();
  }
  emit(link, param) {
    this.actionSubject.next({
      link,
      param
    });
  }
}
SiLinkActionService.ɵfac = function SiLinkActionService_Factory(t) {
  return new (t || SiLinkActionService)();
};
SiLinkActionService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiLinkActionService,
  factory: SiLinkActionService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiLinkActionService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
  }], null, null);
})();
const SI_LINK_DEFAULT_NAVIGATION_EXTRA = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('SI_LINK_DEFAULT_NAVIGATION_EXTRA');
class SiLinkDirective {
  get isAriaCurrent() {
    return this.active ? this.ariaCurrent ?? 'true' : null;
  }
  constructor(router, activatedRoute, locationStrategy, translateService, actionService, element, renderer, cdRef, defaultNavigationExtra) {
    this.router = router;
    this.activatedRoute = activatedRoute;
    this.locationStrategy = locationStrategy;
    this.translateService = translateService;
    this.actionService = actionService;
    this.element = element;
    this.renderer = renderer;
    this.cdRef = cdRef;
    this.defaultNavigationExtra = defaultNavigationExtra;
    this.exactMatch = false;
    this.activeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    // @HostBinding('attr.href') is used rather than @HostBinding() because
    // it removes the href attribute when it becomes `null`.
    this.href = null;
    this.active = false;
  }
  ngOnDestroy() {
    this.subscription?.unsubscribe();
  }
  ngOnChanges() {
    if (!this.siLink) {
      this.href = null;
      return;
    }
    this.subscription?.unsubscribe();
    this.subscription = undefined;
    if (this.siLink.tooltip) {
      this.translateService.translateAsync(this.siLink.tooltip).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.first)()).subscribe(text => {
        this.title = text;
        this.cdRef.markForCheck();
      });
    } else {
      this.title = this.siLink.tooltip;
    }
    if (this.siLink.action) {
      this.href = '';
    } else if (this.siLink.link) {
      this.subscribeRouter();
    } else if (this.siLink.href) {
      this.href = this.siLink.href;
      this.target = this.siLink.target ?? this.siLinkDefaultTarget;
    } else {
      // In case the siLink has no link, href or action,
      // we remove the href to avoid the mouse pointer.
      this.href = null;
    }
    this.updateActive();
  }
  ngDoCheck() {
    // this deep-checks if isActive has changed. It then updates the internal state and emits the event
    // to be symmetric with the router-link case. Promise.resolve() avoids "Expression has changed after it was checked" errors
    if (this.siLink && !this.siLink.link && this.siLink.isActive !== undefined && this.active !== this.siLink.isActive) {
      this.active = this.siLink.isActive;
      Promise.resolve().then(() => {
        this.activeChange.emit(this.active);
        this.updateActiveClass();
      });
    }
  }
  subscribeRouter() {
    if (!this.router || !this.activatedRoute) {
      return;
    }
    this.subscription = this.router.events.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.filter)(e => e instanceof _angular_router__WEBPACK_IMPORTED_MODULE_27__.NavigationEnd)).subscribe(() => this.updateActive());
    this.subscription.add(this.activatedRoute.queryParams.subscribe(() => {
      this.updateUrlTree();
      this.updateActive();
      this.cdRef.detectChanges();
    }));
  }
  updateUrlTree() {
    if (!this.router || !this.siLink || !this.locationStrategy) {
      return;
    }
    const commands = Array.isArray(this.siLink.link) ? this.siLink.link : [this.siLink.link];
    this.navigationExtras = {
      relativeTo: this.activatedRoute,
      preserveFragment: true,
      queryParamsHandling: 'merge',
      ...this.defaultNavigationExtra,
      ...this.siLink.navigationExtras
    };
    this.urlTree = this.router.createUrlTree(commands, this.navigationExtras);
    this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
    // Remove leading hash and query params
    this.compareHref = this.href.replace(/^(#)/, '').replace(/\?.*/, '');
  }
  updateActive() {
    const matchOptions = this.exactMatch ? {
      paths: 'exact',
      queryParams: 'exact',
      fragment: 'ignored',
      matrixParams: 'ignored'
    } : {
      paths: 'subset',
      queryParams: 'subset',
      fragment: 'ignored',
      matrixParams: 'ignored'
    };
    // Promise is used to work around Angular view check error
    Promise.resolve().then(() => {
      let active = false;
      if (this.siLink) {
        if (this.siLink.isActive) {
          active = true;
        } else if (this.siLink.link && this.router) {
          // Compare with a string so we can ignore query params
          active = this.router.isActive(this.compareHref, matchOptions);
        }
      }
      if (active !== this.active) {
        this.active = active;
        this.activeChange.emit(active);
      }
      this.updateActiveClass();
    });
  }
  updateActiveClass() {
    if (this.activeClass) {
      if (this.active) {
        this.renderer.addClass(this.element.nativeElement, this.activeClass);
      } else {
        this.renderer.removeClass(this.element.nativeElement, this.activeClass);
        this.element.nativeElement.blur();
      }
    }
  }
  onClick(event) {
    if (this.siLink?.action) {
      event.preventDefault();
      if (typeof this.siLink.action === 'string') {
        this.actionService?.emit(this.siLink, this.actionParam);
      } else if (this.actionParam === undefined) {
        this.siLink.action();
      } else {
        this.siLink.action(this.actionParam);
      }
      this.updateActive();
      return;
    }
    // ignore regular links, allow user to open links in new tab or window
    if (!this.siLink || this.siLink.href || event.button > 0 || event.ctrlKey || event.metaKey || event.shiftKey) {
      return;
    }
    event.preventDefault();
    // We have links without any action, href or link. For example grouping navbar items that hold a
    // dropdown with links. That is why we need to check if the link property is set.
    if (this.siLink.link && this.router) {
      this.router.navigateByUrl(this.urlTree, this.navigationExtras);
    }
  }
}
SiLinkDirective.ɵfac = function SiLinkDirective_Factory(t) {
  return new (t || SiLinkDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_27__.Router, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_27__.ActivatedRoute, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.LocationStrategy, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiTranslateService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiLinkActionService, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SI_LINK_DEFAULT_NAVIGATION_EXTRA, 8));
};
SiLinkDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiLinkDirective,
  selectors: [["", "siLink", ""]],
  hostVars: 4,
  hostBindings: function SiLinkDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiLinkDirective_click_HostBindingHandler($event) {
        return ctx.onClick($event);
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("href", ctx.href, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrlOrResourceUrl"])("target", ctx.target)("title", ctx.title)("aria-current", ctx.isAriaCurrent);
    }
  },
  inputs: {
    siLink: "siLink",
    siLinkDefaultTarget: "siLinkDefaultTarget",
    actionParam: "actionParam",
    activeClass: "activeClass",
    exactMatch: "exactMatch",
    ariaCurrent: "ariaCurrent"
  },
  outputs: {
    activeChange: "activeChange"
  },
  exportAs: ["siLink"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiLinkDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siLink]',
      exportAs: 'siLink'
    }]
  }], function () {
    return [{
      type: _angular_router__WEBPACK_IMPORTED_MODULE_27__.Router,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }, {
      type: _angular_router__WEBPACK_IMPORTED_MODULE_27__.ActivatedRoute,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }, {
      type: _angular_common__WEBPACK_IMPORTED_MODULE_1__.LocationStrategy,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }, {
      type: SiTranslateService
    }, {
      type: SiLinkActionService,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [SI_LINK_DEFAULT_NAVIGATION_EXTRA]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }];
  }, {
    siLink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    siLinkDefaultTarget: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    actionParam: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    activeClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    exactMatch: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    ariaCurrent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    activeChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    href: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['attr.href']
    }],
    target: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['attr.target']
    }],
    title: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['attr.title']
    }],
    isAriaCurrent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['attr.aria-current']
    }],
    onClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['click', ['$event']]
    }]
  });
})();
class SiToastNotificationComponent {
  constructor(animationBuilder) {
    this.animationBuilder = animationBuilder;
    this.statusIcon = STATUS_ICON.info;
  }
  ngOnInit() {
    if (this.toast.state === 'connection') {
      this.statusIcon = STATUS_ICON.danger;
    } else {
      this.statusIcon = STATUS_ICON[this.toast.state];
    }
    if (!this.toast.disableAutoClose && this.toast.timeout) {
      const animation = this.animationBuilder.build([(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
        width: '0'
      }), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.animate)(this.toast.timeout, (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
        width: '100%'
      }))]);
      animation.create(this.autoCloseBar.nativeElement).play();
    }
  }
  close() {
    this.toast.close();
  }
}
SiToastNotificationComponent.ɵfac = function SiToastNotificationComponent_Factory(t) {
  return new (t || SiToastNotificationComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_animations__WEBPACK_IMPORTED_MODULE_28__.AnimationBuilder));
};
SiToastNotificationComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiToastNotificationComponent,
  selectors: [["si-toast-notification"]],
  viewQuery: function SiToastNotificationComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c5, 7);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.autoCloseBar = _t.first);
    }
  },
  inputs: {
    toast: "toast"
  },
  decls: 13,
  vars: 14,
  consts: [[1, "si-toast", "elevation-2"], [1, "si-toast-timer-bar", "cy-ignore"], ["autoCloseBar", ""], [1, "bar", 3, "ngClass"], ["alt", "", 3, "icon", "color", "stackedIcon", "stackedColor"], [1, "toast-content", "px-4"], [1, "toast-title"], ["class", "mt-3", 4, "ngIf"], [3, "mt-3", "mt-4", 4, "ngIf"], ["type", "button", "tabindex", "0", "class", "btn btn-circle btn-sm btn-ghost mt-n2 me-n2 element-cancel", "aria-label", "cancel", 3, "keydown.enter", "click", 4, "ngIf"], [1, "mt-3"], [3, "siLink"], ["type", "button", "tabindex", "0", "aria-label", "cancel", 1, "btn", "btn-circle", "btn-sm", "btn-ghost", "mt-n2", "me-n2", "element-cancel", 3, "keydown.enter", "click"]],
  template: function SiToastNotificationComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "div", 1, 2)(3, "div", 3)(4, "si-icon", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 5)(6, "p", 6)(7, "b");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](9, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](10, SiToastNotificationComponent_p_10_Template, 3, 4, "p", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, SiToastNotificationComponent_p_11_Template, 4, 9, "p", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](12, SiToastNotificationComponent_button_12_Template, 1, 0, "button", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("si-toast-auto-close", !ctx.toast.disableAutoClose);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx.statusIcon.color);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("icon", ctx.statusIcon.icon)("color", ctx.statusIcon.color)("stackedIcon", ctx.statusIcon.stacked)("stackedColor", ctx.statusIcon.stackedColor);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](9, 11, ctx.toast.title, ctx.toast.translationParams));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.toast.message);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.toast.action);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.toast.disableManualClose);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiIconComponent, SiLinkDirective, SiTranslatePipe],
  styles: [".si-toast-timer-bar[_ngcontent-%COMP%], .si-toast.si-toast-auto-close[_ngcontent-%COMP%]:before{position:absolute;inset-block-end:0;inset-inline-start:0;block-size:2px}[_nghost-%COMP%]{display:block}.si-toast[_ngcontent-%COMP%]{block-size:auto;position:relative;display:flex;align-items:flex-start;color:var(--element-text-primary);background:var(--element-base-1);border-radius:var(--element-radius-2);padding:12px;margin-block-end:20px;font-size:1rem;pointer-events:all;overflow:hidden;min-inline-size:250px;max-inline-size:calc(100vw - 40px)}@media (min-width: 768px){.si-toast[_ngcontent-%COMP%]{max-inline-size:400px}}.si-toast.si-toast-auto-close[_ngcontent-%COMP%]{padding-block-end:14px}.si-toast.si-toast-auto-close[_ngcontent-%COMP%]:before{content:\"\";background:var(--element-ui-4);inset-inline-end:0}.bar[_ngcontent-%COMP%]{inset-block-start:0;inset-inline-start:0;position:absolute;inline-size:4px;block-size:100%;background:currentColor}.si-toast-timer-bar[_ngcontent-%COMP%]{background-color:var(--element-ui-0)}.toast-content[_ngcontent-%COMP%]{flex:1;overflow:hidden;white-space:nowrap}.toast-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin-block:0;line-height:1.125rem;white-space:pre-line;overflow-wrap:break-word;word-wrap:break-word}.toast-content[_ngcontent-%COMP%]   .toast-title[_ngcontent-%COMP%]{line-height:1.5rem}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiToastNotificationComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-toast-notification',
      template: "<div class=\"si-toast elevation-2\" [class.si-toast-auto-close]=\"!toast.disableAutoClose\">\n  <div class=\"si-toast-timer-bar cy-ignore\" #autoCloseBar></div>\n  <div class=\"bar\" [ngClass]=\"statusIcon.color\"></div>\n  <si-icon\n    [icon]=\"statusIcon.icon\"\n    [color]=\"statusIcon.color\"\n    [stackedIcon]=\"statusIcon.stacked\"\n    [stackedColor]=\"statusIcon.stackedColor\"\n    alt=\"\"\n  ></si-icon>\n  <div class=\"toast-content px-4\">\n    <p class=\"toast-title\"><b>{{ toast.title | translate: toast.translationParams }}</b></p>\n    <p *ngIf=\"toast.message\" class=\"mt-3\">{{ toast.message | translate: toast.translationParams }}</p>\n    <p\n      *ngIf=\"toast.action\"\n      [class.mt-3]=\"toast.message\"\n      [class.mt-4]=\"!toast.message\"\n    >\n      <a [siLink]=\"toast.action\">{{ toast.action.title! | translate: toast.translationParams }}</a>\n    </p>\n  </div>\n  <button\n    *ngIf=\"!toast.disableManualClose\"\n    type=\"button\"\n    tabindex=\"0\"\n    class=\"btn btn-circle btn-sm btn-ghost mt-n2 me-n2 element-cancel\"\n    aria-label=\"cancel\"\n    (keydown.enter)=\"close()\"\n    (click)=\"close()\"\n  ></button>\n</div>\n",
      styles: [".si-toast-timer-bar,.si-toast.si-toast-auto-close:before{position:absolute;inset-block-end:0;inset-inline-start:0;block-size:2px}:host{display:block}.si-toast{block-size:auto;position:relative;display:flex;align-items:flex-start;color:var(--element-text-primary);background:var(--element-base-1);border-radius:var(--element-radius-2);padding:12px;margin-block-end:20px;font-size:1rem;pointer-events:all;overflow:hidden;min-inline-size:250px;max-inline-size:calc(100vw - 40px)}@media (min-width: 768px){.si-toast{max-inline-size:400px}}.si-toast.si-toast-auto-close{padding-block-end:14px}.si-toast.si-toast-auto-close:before{content:\"\";background:var(--element-ui-4);inset-inline-end:0}.bar{inset-block-start:0;inset-inline-start:0;position:absolute;inline-size:4px;block-size:100%;background:currentColor}.si-toast-timer-bar{background-color:var(--element-ui-0)}.toast-content{flex:1;overflow:hidden;white-space:nowrap}.toast-content p{margin-block:0;line-height:1.125rem;white-space:pre-line;overflow-wrap:break-word;word-wrap:break-word}.toast-content .toast-title{line-height:1.5rem}\n"]
    }]
  }], function () {
    return [{
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_28__.AnimationBuilder
    }];
  }, {
    toast: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    autoCloseBar: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['autoCloseBar', {
        static: true
      }]
    }]
  });
})();
class SiToastNotificationDrawerComponent {
  constructor() {
    this.animationsDisabled = areAnimationsDisabled();
    this.trackByItem = (_index, item) => item;
  }
}
SiToastNotificationDrawerComponent.ɵfac = function SiToastNotificationDrawerComponent_Factory(t) {
  return new (t || SiToastNotificationDrawerComponent)();
};
SiToastNotificationDrawerComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiToastNotificationDrawerComponent,
  selectors: [["si-toast-notification-drawer"]],
  inputs: {
    toasts: "toasts"
  },
  decls: 3,
  vars: 4,
  consts: [["aria-live", "polite", 1, "si-toast-drawer"], ["class", "position-relative", 3, "toast", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "position-relative", 3, "toast"]],
  template: function SiToastNotificationDrawerComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiToastNotificationDrawerComponent_si_toast_notification_1_Template, 1, 3, "si-toast-notification", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "async");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 2, ctx.toasts))("ngForTrackBy", ctx.trackByItem);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, SiToastNotificationComponent, _angular_common__WEBPACK_IMPORTED_MODULE_1__.AsyncPipe],
  styles: [".si-toast-drawer[_ngcontent-%COMP%]{position:fixed;inset-block-end:0;inset-inline-end:0;padding-block:32px 0;padding-inline:32px 20px;z-index:2000;overflow:hidden;pointer-events:none}"],
  data: {
    animation: [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.trigger)('toastTrigger', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.transition)(':enter', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
      opacity: 0,
      transform: 'translateY(100%)'
    }), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.animate)('500ms cubic-bezier(0.175, 0.885, 0.32, 1.275)', (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
      opacity: 1,
      transform: 'translateY(0%)'
    }))]), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.transition)(':leave', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
      'opacity': 1,
      'inset-inline-end': '0%'
    }), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.animate)('300ms', (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
      'opacity': 0,
      'inset-inline-end': '-100%'
    }))])])]
  },
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiToastNotificationDrawerComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-toast-notification-drawer',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      animations: [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.trigger)('toastTrigger', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.transition)(':enter', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
        opacity: 0,
        transform: 'translateY(100%)'
      }), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.animate)('500ms cubic-bezier(0.175, 0.885, 0.32, 1.275)', (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
        opacity: 1,
        transform: 'translateY(0%)'
      }))]), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.transition)(':leave', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
        'opacity': 1,
        'inset-inline-end': '0%'
      }), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.animate)('300ms', (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
        'opacity': 0,
        'inset-inline-end': '-100%'
      }))])])],
      template: "<div class=\"si-toast-drawer\" aria-live=\"polite\">\n  <si-toast-notification\n    *ngFor=\"let toast of toasts | async; trackBy: trackByItem\"\n    class=\"position-relative\"\n    [toast]=\"toast\"\n    @toastTrigger\n    [@.disabled]=\"animationsDisabled\"\n  ></si-toast-notification>\n</div>\n",
      styles: [".si-toast-drawer{position:fixed;inset-block-end:0;inset-inline-end:0;padding-block:32px 0;padding-inline:32px 20px;z-index:2000;overflow:hidden;pointer-events:none}\n"]
    }]
  }], null, {
    toasts: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiToastNotificationService {
  constructor(appRef, injector, environmentInjector, platformId) {
    this.appRef = appRef;
    this.injector = injector;
    this.environmentInjector = environmentInjector;
    this.activeToasts = [];
    this.activeToastsSubject = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.queuedToastSubject = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.maxToasts = 3;
    this.queuedToastSubject.subscribe(toast => {
      this.activeToasts.push(toast);
      if (this.activeToasts.length > this.maxToasts) {
        this.hideToastNotification(this.activeToasts[0]);
      }
      this.activeToastsSubject.next(this.activeToasts);
      if (!toast.disableAutoClose && toast.timeout) {
        setTimeout(() => this.hideToastNotification(toast), toast.timeout);
      }
    });
    if ((0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId)) {
      this.addToastDrawer();
    }
  }
  ngOnDestroy() {
    this.componentRef?.destroy();
  }
  queueToastNotification(state, title, message, disableAutoClose, disableManualClose, action) {
    const toast = {
      state,
      title,
      message,
      disableAutoClose,
      disableManualClose,
      action,
      hidden: new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject()
    };
    return this.showToastNotification(toast);
  }
  showToastNotification(toast) {
    toast.timeout ?? (toast.timeout = SI_TOAST_AUTO_HIDE_DELAY);
    toast.close = () => this.hideToastNotification(toast);
    this.queuedToastSubject.next(toast);
    return toast;
  }
  hideToastNotification(toast) {
    const hiddenToasts = [];
    const activeToasts = [];
    this.activeToasts.forEach(item => {
      if (!toast || item === toast) {
        hiddenToasts.push(item);
      } else {
        activeToasts.push(item);
      }
    });
    this.activeToasts = activeToasts;
    this.activeToastsSubject.next(this.activeToasts);
    hiddenToasts.forEach(item => {
      item.hidden?.next();
      item.hidden?.complete();
    });
  }
  addToastDrawer() {
    this.componentRef = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.createComponent)(SiToastNotificationDrawerComponent, {
      environmentInjector: this.environmentInjector,
      elementInjector: this.buildInjector()
    });
    this.componentRef.instance.toasts = this.activeToastsSubject;
    this.appRef.attachView(this.componentRef.hostView);
    document.body.appendChild(this.componentRef.location.nativeElement);
  }
  // TODO remove once translation must be defined at application start
  // Notification service is provided in 'root'. If no translation is defined, SiNoTranslateService is not provided
  buildInjector() {
    let injector = this.injector;
    if (!injector.get(SiTranslateService, null)) {
      injector = _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector.create({
        providers: [{
          provide: SiTranslateService,
          useClass: SiNoTranslateService,
          deps: []
        }],
        parent: this.injector
      });
    }
    return injector;
  }
}
SiToastNotificationService.ɵfac = function SiToastNotificationService_Factory(t) {
  return new (t || SiToastNotificationService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ApplicationRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.EnvironmentInjector), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID));
};
SiToastNotificationService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiToastNotificationService,
  factory: SiToastNotificationService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiToastNotificationService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ApplicationRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.EnvironmentInjector
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }];
  }, null);
})();
class SiLinkModule {}
SiLinkModule.ɵfac = function SiLinkModule_Factory(t) {
  return new (t || SiLinkModule)();
};
SiLinkModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiLinkModule
});
SiLinkModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiLinkModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [SiLinkDirective],
      exports: [SiLinkDirective]
    }]
  }], null, null);
})();
class SiIconModule {}
SiIconModule.ɵfac = function SiIconModule_Factory(t) {
  return new (t || SiIconModule)();
};
SiIconModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiIconModule
});
SiIconModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiIconModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule],
      declarations: [SiIconComponent],
      exports: [SiIconComponent]
    }]
  }], null, null);
})();
class SiToastNotificationModule {}
SiToastNotificationModule.ɵfac = function SiToastNotificationModule_Factory(t) {
  return new (t || SiToastNotificationModule)();
};
SiToastNotificationModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiToastNotificationModule
});
SiToastNotificationModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiLinkModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiToastNotificationModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiLinkModule, SiTranslateModule],
      declarations: [SiToastNotificationComponent, SiToastNotificationDrawerComponent],
      exports: [SiToastNotificationComponent, SiToastNotificationDrawerComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

const RE_UPPER_CASE = /[A-Z]/;
const RE_LOWER_CASE = /[a-z]/;
const RE_DIGITS = /[0-9]/;
const RE_SPECIAL_CHARS = /[\x21-\x2F|\x3A-\x40|\x5B-\x60]/;
const RE_WHITESPACES = /\s/;
class SiPasswordStrengthDirective {
  constructor() {
    this.maxStrength = 1;
    this.noValidation = false;
    /**
     * Define Siemens password strength.
     */
    this.siPasswordStrength = {
      minLength: 8,
      uppercase: true,
      lowercase: true,
      digits: true,
      special: true
    };
    /**
     * Output callback event called when the password changes. The number
     * indicated the number of rules which still can be met. (`-2` --> 2 rules are
     * still unmet, `0` --> all met)
     */
    this.passwordStrengthChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  ngOnChanges() {
    this.maxStrength = 1;
    this.maxStrength += this.siPasswordStrength.uppercase ? 1 : 0;
    this.maxStrength += this.siPasswordStrength.lowercase ? 1 : 0;
    this.maxStrength += this.siPasswordStrength.digits ? 1 : 0;
    this.maxStrength += this.siPasswordStrength.special ? 1 : 0;
  }
  validate(control) {
    if (this.getStrength(control.value) >= this.maxStrength) {
      return {};
    }
    return {
      siPasswordStrength: true
    };
  }
  getStrength(password) {
    let strength = 0;
    if (password && password !== '') {
      // Strength check
      strength += password.length >= this.siPasswordStrength.minLength ? 1 : 0;
      strength += this.siPasswordStrength.uppercase && password.match(RE_UPPER_CASE) ? 1 : 0;
      strength += this.siPasswordStrength.lowercase && password.match(RE_LOWER_CASE) ? 1 : 0;
      strength += this.siPasswordStrength.digits && password.match(RE_DIGITS) ? 1 : 0;
      strength += this.siPasswordStrength.special && password.match(RE_SPECIAL_CHARS) ? 1 : 0;
      // Hard limit check
      strength = password.match(RE_WHITESPACES) ? 0 : strength;
      this.noValidation = true;
      // Notify listeners
      this.passwordStrengthChanged.emit(strength - this.maxStrength);
      return strength;
    }
    this.noValidation = false;
    this.passwordStrengthChanged.emit();
    return strength;
  }
}
SiPasswordStrengthDirective.ɵfac = function SiPasswordStrengthDirective_Factory(t) {
  return new (t || SiPasswordStrengthDirective)();
};
SiPasswordStrengthDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiPasswordStrengthDirective,
  selectors: [["", "siPasswordStrength", ""]],
  hostVars: 2,
  hostBindings: function SiPasswordStrengthDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("no-validation", ctx.noValidation);
    }
  },
  inputs: {
    siPasswordStrength: "siPasswordStrength"
  },
  outputs: {
    passwordStrengthChanged: "passwordStrengthChanged"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALIDATORS,
    useExisting: SiPasswordStrengthDirective,
    multi: true
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiPasswordStrengthDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siPasswordStrength]',
      providers: [{
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALIDATORS,
        useExisting: SiPasswordStrengthDirective,
        multi: true
      }]
    }]
  }], null, {
    noValidation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.no-validation']
    }],
    siPasswordStrength: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    passwordStrengthChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiPasswordStrengthComponent {
  constructor(cdRef) {
    this.cdRef = cdRef;
    this.bad = false;
    this.weak = false;
    this.medium = false;
    this.good = false;
    this.strong = false;
  }
  ngAfterViewInit() {
    this.passwordStrengthDirective.forEach(directive => {
      directive.passwordStrengthChanged.subscribe(strength => {
        this.strong = strength === 0;
        this.good = strength === -1;
        this.medium = strength === -2;
        this.weak = strength === -3;
        this.bad = strength === -4;
        this.cdRef.markForCheck();
      });
    });
  }
}
SiPasswordStrengthComponent.ɵfac = function SiPasswordStrengthComponent_Factory(t) {
  return new (t || SiPasswordStrengthComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiPasswordStrengthComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiPasswordStrengthComponent,
  selectors: [["si-password-strength"]],
  contentQueries: function SiPasswordStrengthComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, SiPasswordStrengthDirective, 4);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.passwordStrengthDirective = _t);
    }
  },
  hostVars: 10,
  hostBindings: function SiPasswordStrengthComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("bad", ctx.bad)("weak", ctx.weak)("medium", ctx.medium)("good", ctx.good)("strong", ctx.strong);
    }
  },
  ngContentSelectors: _c1,
  decls: 1,
  vars: 0,
  template: function SiPasswordStrengthComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);
    }
  },
  styles: ["[_nghost-%COMP%]{--strength-border-radius: 0 var(--element-radius-1) var(--element-radius-1) 1px;display:block;position:relative}[_nghost-%COMP%]:before{background:var(--strength-background);inset-block-end:1px;content:\"\";block-size:3px;inset-inline-start:1px;position:absolute;transition:inline-size calc(.15s * var(--element-animations-enabled, 1)),background calc(.15s * var(--element-animations-enabled, 1)) ease-in-out;inline-size:calc(var(--strength-width) - 2px);border-radius:var(--strength-border-radius)}.bad[_nghost-%COMP%]{--strength-background: var(--element-color-bad);--strength-width: 20%}.weak[_nghost-%COMP%]{--strength-background: var(--element-color-poor);--strength-width: 40%}.medium[_nghost-%COMP%]{--strength-background: var(--element-color-average);--strength-width: 60%}.good[_nghost-%COMP%]{--strength-background: var(--element-color-good);--strength-width: 80%}.strong[_nghost-%COMP%]{--strength-background: var(--element-color-excellent);--strength-width: 100%;--strength-border-radius: 0 0 1px 1px}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiPasswordStrengthComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-password-strength',
      template: '<ng-content></ng-content>',
      styles: [":host{--strength-border-radius: 0 var(--element-radius-1) var(--element-radius-1) 1px;display:block;position:relative}:host:before{background:var(--strength-background);inset-block-end:1px;content:\"\";block-size:3px;inset-inline-start:1px;position:absolute;transition:inline-size calc(.15s * var(--element-animations-enabled, 1)),background calc(.15s * var(--element-animations-enabled, 1)) ease-in-out;inline-size:calc(var(--strength-width) - 2px);border-radius:var(--strength-border-radius)}:host.bad{--strength-background: var(--element-color-bad);--strength-width: 20%}:host.weak{--strength-background: var(--element-color-poor);--strength-width: 40%}:host.medium{--strength-background: var(--element-color-average);--strength-width: 60%}:host.good{--strength-background: var(--element-color-good);--strength-width: 80%}:host.strong{--strength-background: var(--element-color-excellent);--strength-width: 100%;--strength-border-radius: 0 0 1px 1px}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    passwordStrengthDirective: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
      args: [SiPasswordStrengthDirective]
    }],
    bad: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.bad']
    }],
    weak: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.weak']
    }],
    medium: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.medium']
    }],
    good: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.good']
    }],
    strong: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.strong']
    }]
  });
})();
class SiPasswordStrengthModule {}
SiPasswordStrengthModule.ɵfac = function SiPasswordStrengthModule_Factory(t) {
  return new (t || SiPasswordStrengthModule)();
};
SiPasswordStrengthModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiPasswordStrengthModule
});
SiPasswordStrengthModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiPasswordStrengthModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule],
      declarations: [SiPasswordStrengthComponent, SiPasswordStrengthDirective],
      exports: [SiPasswordStrengthComponent, SiPasswordStrengthDirective]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

/* eslint-disable no-console, prefer-arrow/prefer-arrow-functions, @typescript-eslint/naming-convention */
const NG_ON_INIT_NAME = 'ngOnInit';
function requiredImpl(target, prop) {
  if (target.__requiredFields) {
    target.__requiredFields.push(prop);
  } else {
    target.__requiredFields = [prop];
    const ngOnInitOriginal = target[NG_ON_INIT_NAME];
    Object.defineProperty(target, NG_ON_INIT_NAME, {
      value() {
        const missing = [];
        target.__requiredFields.forEach(field => {
          if (this[field] === null || this[field] === undefined) {
            missing.push(field);
          }
        });
        if (missing.length) {
          const error = `${target.constructor.name} - required @Input() missing: ${missing.join(', ')}`;
          // Sometimes Angular swallows the Error
          console.error(error);
          throw new Error(error);
        }
        if (ngOnInitOriginal) {
          ngOnInitOriginal.call(this);
        }
      }
    });
  }
}
// note: this _must_ be a function, not an arrow
function Required() {
  return requiredImpl;
}
const runsInElectron = () => {
  const windowAny = window;
  const processAny = windowAny.process;
  // Renderer process
  if (typeof windowAny !== 'undefined' && typeof processAny === 'object' && processAny.type === 'renderer') {
    return true;
  }
  // Main process
  if (typeof processAny !== 'undefined' && typeof processAny.versions === 'object' && !!processAny.versions.electron) {
    return true;
  }
  // Detect the user agent when the `nodeIntegration` option is set to true
  if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.includes('Electron')) {
    return true;
  }
  return false;
};
const AXIS_X = {
  axis: 'X',
  directionRegular: 'end',
  directionReverse: 'start',
  upperBound: 'left',
  lowerBound: 'right',
  size: 'width',
  windowSize: 'innerWidth'
};
const AXIS_Y = {
  axis: 'Y',
  directionRegular: 'down',
  directionReverse: 'up',
  upperBound: 'top',
  lowerBound: 'bottom',
  size: 'height',
  windowSize: 'innerHeight'
};
const BOUNDING_RECT_WINDOW = {
  getBoundingClientRect: () => ({
    top: 0,
    left: 0,
    bottom: window.innerHeight,
    right: window.innerWidth
  })
};
const resolveReference = (hostElement, reference) => {
  if (reference) {
    const childReferenceCheck = hostElement.querySelector(reference);
    if (childReferenceCheck) {
      return childReferenceCheck;
    }
    const referenceCheck = hostElement.closest(reference);
    if (referenceCheck) {
      return referenceCheck;
    }
    const all = document.querySelectorAll(reference);
    return all[all.length - 1] ?? null;
  }
  return null;
};
const getScrollParentsChain = (element, axis, scrollParentsList = []) => {
  if (element) {
    const overflowStyle = getComputedStyle(element)[axis === 'X' ? 'overflowX' : 'overflowY'] || 'visible';
    if (element[axis === 'X' ? 'clientWidth' : 'clientHeight'] && overflowStyle !== 'visible' && overflowStyle !== 'hidden') {
      scrollParentsList.push(document.documentElement === element ? BOUNDING_RECT_WINDOW : element);
    }
    if (element !== document.documentElement) {
      getScrollParentsChain(element.dropdownParentElement ?? element.parentElement ?? document.body, axis, scrollParentsList);
    }
  }
  return scrollParentsList;
};
const getCombinedBoundingClientRect = elements => {
  let top = 0;
  let bottom = 0;
  let left = 0;
  let right = 0;
  if (elements.length > 0) {
    const tops = [];
    const bottoms = [];
    const lefts = [];
    const rights = [];
    elements.forEach(element => {
      const rect = element.getBoundingClientRect();
      tops.push(rect.top);
      bottoms.push(rect.bottom);
      lefts.push(rect.left);
      rights.push(rect.right);
    });
    top = Math.min(...tops);
    bottom = Math.max(...bottoms);
    left = Math.min(...lefts);
    right = Math.max(...rights);
  }
  return {
    top,
    bottom,
    left,
    right
  };
};
const calculatePlacementRefOuterBounds = (currentAxis, placementReferenceElement) => {
  // The chain of scroll parents of the placement ref element up to and often including the body, checking for possible overlaps.
  const placementRefScrollParents = getScrollParentsChain(placementReferenceElement, currentAxis.axis);
  const placementRefScrollParentRects = placementRefScrollParents.map(item => item.getBoundingClientRect());
  // The biggest upper bound (top, left) of all scroll parents (and viewport = 0), the point before which content will be cut off.
  const placementRefScrollParentsUpperBound = Math.max(0, ...placementRefScrollParentRects.map(item => item[currentAxis.upperBound]));
  // The smallest lower bound (bottom, right) of all scroll parents (and viewport), the point after which content will be cut off.
  const placementRefScrollParentsLowerBound = Math.min(window[currentAxis.windowSize], ...placementRefScrollParentRects.map(item => item[currentAxis.lowerBound]));
  return {
    upper: placementRefScrollParentsUpperBound,
    lower: placementRefScrollParentsLowerBound
  };
};
const calculateDirectionFromPlacementRef = params => {
  const {
    currentAxis,
    positionRegular,
    positionReverse,
    contentSize,
    placementRefBounds,
    currentDirection,
    rtl
  } = params;
  // A number showing how many visible pixels would be available from the placement ref in regular / scroll (down, end) direction
  const placementRefSpaceRegular = placementRefBounds.lower - positionRegular[currentAxis.upperBound];
  // A number showing how many visible pixels would be available from the placement ref in reverse (up, start) direction
  const placementRefSpaceReverse = positionReverse[currentAxis.upperBound] - placementRefBounds.upper;
  if (placementRefSpaceReverse < contentSize && placementRefSpaceRegular < contentSize) {
    // If there would not be enough room in both directions, always prefer regular / scroll (down, end) direction,
    // since this way the element can expand and scroll while this cannot happen if there's not enough room in front.
    return rtl ? currentAxis.directionReverse : currentAxis.directionRegular;
  } else if (placementRefSpaceReverse < contentSize) {
    return currentAxis.directionRegular;
  } else if (placementRefSpaceRegular < contentSize) {
    return currentAxis.directionReverse;
  }
  // If there would be enough room in both directions, use the set direction (or the regular one if not set).
  return currentDirection;
};
const getAbsoluteContentPosition = params => {
  const {
    direction,
    placement,
    element,
    align,
    rtl
  } = params;
  const elementRect = element.getBoundingClientRect();
  const start = rtl ? elementRect.right : elementRect.left;
  const end = rtl ? elementRect.left : elementRect.right;
  let relativeLeftOffset = 0;
  if (direction === 'start' || direction === 'end') {
    relativeLeftOffset = placement.includes('end') || !placement.includes('start') && direction === 'end' ? end : start;
  } else {
    if (placement.includes('start')) {
      relativeLeftOffset = start;
    } else {
      if (placement.includes('end') || align === 'end') {
        relativeLeftOffset = end;
      } else if (align === 'center') {
        relativeLeftOffset = elementRect.left + (elementRect.right - elementRect.left) / 2;
      } else {
        relativeLeftOffset = start;
      }
    }
  }
  let relativeTopOffset = 0;
  if (direction === 'up') {
    relativeTopOffset = placement.includes('bottom') ? elementRect.bottom : elementRect.top;
  } else if (direction === 'start' || direction === 'end') {
    relativeTopOffset = !placement.includes('bottom') ? elementRect.top : elementRect.bottom;
  } else {
    relativeTopOffset = placement.includes('top') ? elementRect.top : elementRect.bottom;
  }
  return {
    left: relativeLeftOffset,
    top: relativeTopOffset
  };
};
const getRelativeContentPosition = params => {
  const {
    contentElement,
    direction,
    placement,
    placementReferenceElement,
    align,
    rtl
  } = params;
  const contentParent = contentElement.offsetParent ?? document.body;
  const contentParentRect = contentParent.getBoundingClientRect();
  const relativePosition = getAbsoluteContentPosition({
    direction,
    placement,
    element: placementReferenceElement,
    align,
    rtl
  });
  const leftOffset = relativePosition.left - contentParentRect.left + contentParent.scrollLeft;
  const topOffset = relativePosition.top - contentParentRect.top + contentParent.scrollTop;
  return {
    left: leftOffset,
    top: topOffset
  };
};
const getContentPositionString = params => {
  const {
    contentElement,
    direction,
    placement,
    placementReferenceElement,
    align,
    rtl
  } = params;
  const position = getRelativeContentPosition({
    contentElement,
    direction,
    placement,
    placementReferenceElement,
    align,
    rtl: rtl ?? isRTL()
  });
  return `translate3d(${position.left}px, ${position.top}px, 0px)`;
};
const responsivelyCheckDirection = params => {
  const {
    isScrolling,
    currentDirection,
    contentElements,
    hostElement,
    placement,
    placementReferenceElement,
    align,
    responsiveDirectionToPlacement,
    closeOnPlacementReferenceScrollOut,
    closeOnContentScrollOut,
    minSpaceThresholdFactor,
    placementReverse,
    rtl
  } = params;
  const actualRtl = rtl ?? isRTL();
  let responsiveDirection;
  const actualCurrentDirection = actualRtl ? currentDirection === 'start' ? 'end' : currentDirection === 'end' ? 'start' : currentDirection : currentDirection;
  // Defines how the properties to access are named in the current axis.
  const currentAxis = currentDirection === 'start' || currentDirection === 'end' ? AXIS_X : AXIS_Y;
  // The combined (enclosing) client rect for all component contents.
  const contentsRect = getCombinedBoundingClientRect(contentElements);
  // The chain of scroll parents of the container host element up to and often including the body, checking for possible overlaps.
  const containerScrollParents = getScrollParentsChain(hostElement, currentAxis.axis);
  const containerScrollParentRects = containerScrollParents.map(item => item.getBoundingClientRect());
  // The biggest upper bound (top, left) of all scroll parents (and viewport = 0), the point before which content will be cut off.
  const scrollParentsUpperBound = Math.max(0, ...containerScrollParentRects.map(item => item[currentAxis.upperBound]));
  // The smallest lower bound (bottom, right) of all scroll parents (and viewport), the point after which content will be cut off.
  const scrollParentsLowerBound = Math.min(window[currentAxis.windowSize], ...containerScrollParentRects.map(item => item[currentAxis.lowerBound]));
  // The point from which the component will be opened if opening in regular / scroll (down, end) direction.
  // Influenced by `componentPlacementReference`, `componentPlacement` and `componentAlign`.
  const positionRegular = getAbsoluteContentPosition({
    direction: currentAxis.directionRegular,
    placement,
    element: placementReferenceElement,
    align
  });
  // The point from which the component will be opened if opening in reverse (up, start) direction.
  // Influenced by `componentPlacementReference`, `componentPlacement` and `componentAlign`.
  const positionReverse = getAbsoluteContentPosition({
    direction: currentAxis.directionReverse,
    placement: placementReverse ?? placement,
    element: placementReferenceElement,
    align
  });
  // The enclosing size (height, width) of all contents combined
  const contentsSize = contentsRect[currentAxis.lowerBound] - contentsRect[currentAxis.upperBound];
  // A number showing how many visible pixels would be available in regular / scroll (down, end) direction
  const spaceRegular = scrollParentsLowerBound - positionRegular[currentAxis.upperBound];
  // A number showing how many visible pixels would be available in reverse (up, start) direction
  const spaceReverse = positionReverse[currentAxis.upperBound] - scrollParentsUpperBound;
  let placementRefBounds;
  if (spaceReverse < contentsSize && spaceRegular < contentsSize) {
    // If there would not be enough room in both directions, always prefer regular / scroll (down, end) direction,
    // since this way the element can expand and scroll while this cannot happen if there's not enough room in front.
    responsiveDirection = actualRtl ? currentAxis.directionReverse : currentAxis.directionRegular;
  } else if (minSpaceThresholdFactor) {
    const contentsSizeWithThreshold = contentsSize + minSpaceThresholdFactor * contentsSize;
    if (spaceReverse < contentsSizeWithThreshold && spaceRegular < contentsSizeWithThreshold) {
      // If a threshold is set and there would not be enough space including the threshold in both directions
      // use the direction with more space
      if (spaceReverse < spaceRegular) {
        responsiveDirection = currentAxis.directionRegular;
      } else {
        responsiveDirection = currentAxis.directionReverse;
      }
    } else if (spaceReverse < contentsSizeWithThreshold) {
      responsiveDirection = currentAxis.directionRegular;
    } else if (spaceRegular < contentsSizeWithThreshold) {
      responsiveDirection = currentAxis.directionReverse;
    }
  }
  if (!responsiveDirection) {
    if (spaceReverse < contentsSize) {
      responsiveDirection = currentAxis.directionRegular;
    } else if (spaceRegular < contentsSize) {
      responsiveDirection = currentAxis.directionReverse;
    } else {
      if (responsiveDirectionToPlacement && placementReferenceElement && hostElement !== placementReferenceElement) {
        placementRefBounds = calculatePlacementRefOuterBounds(currentAxis, placementReferenceElement);
        responsiveDirection = calculateDirectionFromPlacementRef({
          currentAxis,
          positionRegular,
          positionReverse,
          contentSize: contentsSize,
          placementRefBounds,
          currentDirection: actualCurrentDirection,
          rtl: actualRtl
        });
      } else {
        // If there would be enough room in both directions, use the set direction (or the regular one if not set).
        responsiveDirection = actualCurrentDirection;
      }
    }
  }
  let close = false;
  if (isScrolling) {
    // Check if the container host or placement reference is hidden and close the component. (Mostly done when scrolling.)
    if (closeOnPlacementReferenceScrollOut && placementReferenceElement && hostElement !== placementReferenceElement) {
      if (!placementRefBounds) {
        placementRefBounds = calculatePlacementRefOuterBounds(currentAxis, placementReferenceElement);
      }
      const placementRefRect = placementReferenceElement.getBoundingClientRect();
      // A number showing how many visible pixels of the placement ref would be shown in reverse (up, start) direction
      const placementRefVisibleTop = placementRefRect[currentAxis.lowerBound] - placementRefBounds.upper;
      // A number showing how many visible pixels of the placement ref would be shown in regular / scroll (down, end) direction
      const placementRefVisibleBottom = placementRefBounds.lower - placementRefRect[currentAxis.upperBound];
      if (placementRefVisibleTop < 0 || placementRefVisibleBottom < 0) {
        // Close the component if the placement ref is not visible.
        close = true;
      }
    }
    if (!close && closeOnContentScrollOut) {
      // A number showing how many visible pixels would be available the other way if set to regular / scroll (down, end) direction
      const spaceRegularOtherSide = scrollParentsLowerBound - positionReverse[currentAxis.upperBound];
      // A number showing how many visible pixels would be available the other way if set to reverse (up, start) direction
      const spaceReverseOtherSide = positionRegular[currentAxis.upperBound] - scrollParentsUpperBound;
      if (spaceRegularOtherSide < 0 || spaceReverseOtherSide < 0) {
        // Close the component if there is not enough space even in the other direction.
        close = true;
      }
    }
  }
  responsiveDirection = actualRtl ? responsiveDirection === 'start' ? 'end' : responsiveDirection === 'end' ? 'start' : responsiveDirection : responsiveDirection;
  return {
    responsiveDirection,
    close
  };
};

/**
 * Gets the width of the scrollbar.  Nesc for windows
 * http://stackoverflow.com/a/13382873/888165
 */
class ScrollbarHelper {
  constructor(document) {
    this.document = document;
    this.width = this.getWidth();
  }
  getWidth() {
    const outer = this.document.createElement('div');
    outer.style.visibility = 'hidden';
    outer.style.width = '100px';
    outer.style.msOverflowStyle = 'scrollbar';
    this.document.body.appendChild(outer);
    const widthNoScroll = outer.offsetWidth;
    outer.style.overflow = 'scroll';
    const inner = this.document.createElement('div');
    inner.style.width = '100%';
    outer.appendChild(inner);
    const widthWithScroll = inner.offsetWidth;
    outer.parentNode?.removeChild(outer);
    return widthNoScroll - widthWithScroll;
  }
}
ScrollbarHelper.ɵfac = function ScrollbarHelper_Factory(t) {
  return new (t || ScrollbarHelper)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
};
ScrollbarHelper.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: ScrollbarHelper,
  factory: ScrollbarHelper.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ScrollbarHelper, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: Document,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT]
      }]
    }];
  }, null);
})();
class SiAccordionService {
  constructor() {
    this.toggle$ = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.fullHeight$ = new rxjs__WEBPACK_IMPORTED_MODULE_30__.ReplaySubject(1);
  }
}
SiAccordionService.ɵfac = function SiAccordionService_Factory(t) {
  return new (t || SiAccordionService)();
};
SiAccordionService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiAccordionService,
  factory: SiAccordionService.ɵfac,
  providedIn: null
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAccordionService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: null
    }]
  }], null, null);
})();
class SiAccordionHCollapseService {
  constructor() {
    this.hcollapsed$ = new rxjs__WEBPACK_IMPORTED_MODULE_30__.ReplaySubject(1);
    this.open$ = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
  }
}
SiAccordionHCollapseService.ɵfac = function SiAccordionHCollapseService_Factory(t) {
  return new (t || SiAccordionHCollapseService)();
};
SiAccordionHCollapseService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiAccordionHCollapseService,
  factory: SiAccordionHCollapseService.ɵfac,
  providedIn: null
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAccordionHCollapseService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: null
    }]
  }], null, null);
})();
let controlIdCounter$1 = 1;
class SiCollapsiblePanelComponent {
  constructor(cdRef, accordionService, accordionHCollapseService) {
    this.cdRef = cdRef;
    this.accordionService = accordionService;
    this.accordionHCollapseService = accordionHCollapseService;
    this.headerCssClasses = '';
    this.contentBgClasses = '';
    this.contentCssClasses = '';
    this.opened = false;
    this.disabled = false;
    this.toggle = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.hcollapsed = false;
    this.fullHeight = false;
    this.toggleSubscription = new rxjs__WEBPACK_IMPORTED_MODULE_31__.Subscription();
    this.enableAnimation = true;
    this.animationsGloballyDisabled = areAnimationsDisabled();
    this.lastScrollPos = 0;
    if (accordionService) {
      this.toggleSubscription.add(accordionService.fullHeight$.subscribe(resp => {
        this.fullHeight = resp;
        this.cdRef.markForCheck();
      }));
      this.toggleSubscription.add(accordionService.toggle$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.filter)(item => item !== this)).subscribe(() => this.openClose(false)));
    }
    if (accordionHCollapseService) {
      this.toggleSubscription.add(accordionHCollapseService.hcollapsed$.subscribe(state => {
        this.hcollapsed = state;
        this.cdRef.markForCheck();
      }));
    }
    this.controlId = '__si-collapsible-' + controlIdCounter$1++;
    this.headerId = this.controlId + '-header';
  }
  get showHide() {
    if (this.enableAnimation && !this.animationsGloballyDisabled) {
      return this.opened ? 'show' : 'hide';
    }
    return 'disabled';
  }
  get isHCollapsible() {
    return !!this.accordionHCollapseService;
  }
  ngOnDestroy() {
    this.toggleSubscription?.unsubscribe();
  }
  openClose(open, enableAnimation = true) {
    this.opened = open;
    this.enableAnimation = enableAnimation;
    this.cdRef.markForCheck();
    if (open) {
      setTimeout(() => {
        this.contentRef.nativeElement.scrollTop = this.lastScrollPos;
      });
    } else {
      this.lastScrollPos = this.contentRef.nativeElement.scrollTop;
    }
  }
  doToggle(event) {
    if (this.disabled) {
      return;
    }
    event?.preventDefault();
    this.toggle.emit();
    this.openClose(this.hcollapsed || !this.opened);
    this.accordionService?.toggle$.next(this);
    if (this.hcollapsed) {
      this.accordionHCollapseService?.open$.next(this);
    }
  }
  keydown(event) {
    if (event.key === 'Enter' || event.key === 'Space' || event.key === ' ') {
      this.doToggle(undefined);
    }
  }
}
SiCollapsiblePanelComponent.ɵfac = function SiCollapsiblePanelComponent_Factory(t) {
  return new (t || SiCollapsiblePanelComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiAccordionService, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiAccordionHCollapseService, 8));
};
SiCollapsiblePanelComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiCollapsiblePanelComponent,
  selectors: [["si-collapsible-panel"]],
  viewQuery: function SiCollapsiblePanelComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c6, 7);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.contentRef = _t.first);
    }
  },
  hostVars: 8,
  hostBindings: function SiCollapsiblePanelComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMap"](ctx.colorVariant);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("opened", ctx.opened)("hcollapsed", ctx.hcollapsed)("full-height", ctx.fullHeight);
    }
  },
  inputs: {
    heading: "heading",
    headerCssClasses: "headerCssClasses",
    contentBgClasses: "contentBgClasses",
    contentCssClasses: "contentCssClasses",
    opened: "opened",
    icon: "icon",
    disabled: "disabled",
    colorVariant: "colorVariant"
  },
  outputs: {
    toggle: "toggle"
  },
  ngContentSelectors: _c1,
  decls: 12,
  vars: 27,
  consts: [["role", "button", 1, "collapsible-header", "focus-inside", "ps-6", "pe-5", 3, "ngClass", "id", "title", "keydown", "click"], ["class", "icon ms-n2 me-2", "aria-hidden", "true", 3, "collapsed-icon", "ngClass", 4, "ngIf"], [1, "si-title-2"], [1, "ms-auto", "overflow-hidden"], ["aria-hidden", "true", 1, "icon", "dropdown-caret", "element-down-2"], ["role", "region", 1, "collapsible-content", 3, "id", "ngClass"], ["content", ""], [4, "ngIf"], ["aria-hidden", "true", 1, "icon", "ms-n2", "me-2", 3, "ngClass"], [3, "ngClass"]],
  template: function SiCollapsiblePanelComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown", function SiCollapsiblePanelComponent_Template_div_keydown_0_listener($event) {
        return ctx.keydown($event);
      })("click", function SiCollapsiblePanelComponent_Template_div_click_0_listener($event) {
        return ctx.doToggle($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiCollapsiblePanelComponent_i_3_Template, 1, 3, "i", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "span", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "span", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](8, "span", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 5, 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, SiCollapsiblePanelComponent_div_11_Template, 3, 1, "div", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("open", ctx.opened)("disabled", ctx.disabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx.headerCssClasses)("id", ctx.headerId)("title", ctx.hcollapsed ? _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 21, ctx.heading) : "");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx.disabled ? "" : "0")("aria-expanded", ctx.opened && !ctx.hcollapsed)("aria-disabled", ctx.disabled)("aria-controls", ctx.controlId)("aria-label", ctx.hcollapsed ? _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 23, ctx.heading) : "");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.icon);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 25, ctx.heading));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("full-height", ctx.fullHeight);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx.controlId)("ngClass", ctx.contentBgClasses)("@showHide", ctx.showHide);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-labelledby", ctx.headerId);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.opened);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column;background:var(--cp-base, var(--element-base-1))}.base-0[_nghost-%COMP%]{--cp-base: var(--element-base-0);--cp-header: var(--element-base-1)}.base-1[_nghost-%COMP%]{--cp-base: var(--element-base-1);--cp-header: var(--element-base-0)}[_nghost-%COMP%]:not(:first-of-type){padding-block-start:2px}[_nghost-%COMP%]:not(.hcollapsed)   .collapsed-icon[_ngcontent-%COMP%]{display:none}.hcollapsed[_nghost-%COMP%]   .collapsible-header[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .hcollapsed[_nghost-%COMP%]   .collapsible-content[_ngcontent-%COMP%]{display:none}.hcollapsed[_nghost-%COMP%]   .collapsible-header[_ngcontent-%COMP%]{background:var(--element-base-1);padding-block:8px}.hcollapsed[_nghost-%COMP%]   .collapsible-header[_ngcontent-%COMP%]:hover{background:var(--element-base-1-hover)}.full-height[_nghost-%COMP%]{transition:flex-grow calc(.5s * var(--element-animations-enabled, 1))}.full-height.opened[_nghost-%COMP%], .full-height[_nghost-%COMP%]   .collapsible-content[_ngcontent-%COMP%]{flex:1 1 0}.full-height[_nghost-%COMP%]   .collapsible-content[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{flex:1 0 0}.collapsible-header[_ngcontent-%COMP%]{display:flex;align-items:center;background:var(--cp-header, var(--element-base-0));color:var(--element-text-primary);padding-block:12px}.collapsible-header.disabled[_ngcontent-%COMP%]{color:var(--element-text-disabled)}.collapsible-header[_ngcontent-%COMP%]:not(.disabled){cursor:pointer}.collapsible-header[_ngcontent-%COMP%]:not(.disabled):hover{text-decoration:none;background:var(--element-base-1-selected)}.dropdown-caret[_ngcontent-%COMP%]{transition:transform calc(.5s * var(--element-animations-enabled, 1));color:var(--element-ui-0)}.open[_ngcontent-%COMP%]   .dropdown-caret[_ngcontent-%COMP%]{transform:rotate(180deg);color:var(--element-ui-0-hover)}.collapsible-content[_ngcontent-%COMP%]{overflow:hidden;display:flex;flex-direction:column}.collapsible-content.full-height[_ngcontent-%COMP%]{overflow:auto}"],
  data: {
    animation: [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.trigger)('showHide', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.transition)('*=>hide', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
      overflow: 'hidden'
    }), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.query)(':leave', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
      blockSize: '*'
    }), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.animate)('0.5s ease', (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
      blockSize: '0'
    }))], {
      optional: true
    })]), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.transition)('*=>show', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
      overflow: 'hidden'
    }), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.query)(':enter', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
      blockSize: '0'
    }), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.animate)('0.5s ease', (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
      blockSize: '*'
    }))], {
      optional: true
    })])])]
  },
  changeDetection: 0
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiCollapsiblePanelComponent.prototype, "heading", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiCollapsiblePanelComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-collapsible-panel',
      animations: [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.trigger)('showHide', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.transition)('*=>hide', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
        overflow: 'hidden'
      }), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.query)(':leave', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
        blockSize: '*'
      }), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.animate)('0.5s ease', (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
        blockSize: '0'
      }))], {
        optional: true
      })]), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.transition)('*=>show', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
        overflow: 'hidden'
      }), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.query)(':enter', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
        blockSize: '0'
      }), (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.animate)('0.5s ease', (0,_angular_animations__WEBPACK_IMPORTED_MODULE_28__.style)({
        blockSize: '*'
      }))], {
        optional: true
      })])])],
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div\n  class=\"collapsible-header focus-inside ps-6 pe-5\"\n  [ngClass]=\"headerCssClasses\"\n  [attr.tabindex]=\"disabled ? '' : '0'\"\n  [id]=\"headerId\"\n  [class.open]=\"opened\"\n  [class.disabled]=\"disabled\"\n  [title]=\"hcollapsed ? (heading | translate) : ''\"\n  role=\"button\"\n  [attr.aria-expanded]=\"opened && !hcollapsed\"\n  [attr.aria-disabled]=\"disabled\"\n  [attr.aria-controls]=\"controlId\"\n  [attr.aria-label]=\"hcollapsed ? (heading | translate) : ''\"\n  (keydown)=\"keydown($event)\"\n  (click)=\"doToggle($event)\"\n>\n  <i\n    *ngIf=\"icon\"\n    class=\"icon ms-n2 me-2\"\n    aria-hidden=\"true\"\n    [class.collapsed-icon]=\"isHCollapsible\"\n    [ngClass]=\"icon\"\n  ></i>\n  <span class=\"si-title-2\">{{ heading | translate }}</span>\n  <span class=\"ms-auto overflow-hidden\">\n    <span class=\"icon dropdown-caret element-down-2\" aria-hidden=\"true\"></span>\n  </span>\n</div>\n<div\n  #content\n  [id]=\"controlId\"\n  class=\"collapsible-content\"\n  [ngClass]=\"contentBgClasses\"\n  role=\"region\"\n  [@showHide]=\"showHide\"\n  [attr.aria-labelledby]=\"headerId\"\n  [class.full-height]=\"fullHeight\"\n>\n  <div *ngIf=\"opened\">\n    <div [ngClass]=\"contentCssClasses\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n",
      styles: [":host{display:flex;flex-direction:column;background:var(--cp-base, var(--element-base-1))}:host.base-0{--cp-base: var(--element-base-0);--cp-header: var(--element-base-1)}:host.base-1{--cp-base: var(--element-base-1);--cp-header: var(--element-base-0)}:host:not(:first-of-type){padding-block-start:2px}:host:not(.hcollapsed) .collapsed-icon{display:none}:host.hcollapsed .collapsible-header span,:host.hcollapsed .collapsible-content{display:none}:host.hcollapsed .collapsible-header{background:var(--element-base-1);padding-block:8px}:host.hcollapsed .collapsible-header:hover{background:var(--element-base-1-hover)}:host.full-height{transition:flex-grow calc(.5s * var(--element-animations-enabled, 1))}:host.full-height.opened,:host.full-height .collapsible-content{flex:1 1 0}:host.full-height .collapsible-content>div{flex:1 0 0}.collapsible-header{display:flex;align-items:center;background:var(--cp-header, var(--element-base-0));color:var(--element-text-primary);padding-block:12px}.collapsible-header.disabled{color:var(--element-text-disabled)}.collapsible-header:not(.disabled){cursor:pointer}.collapsible-header:not(.disabled):hover{text-decoration:none;background:var(--element-base-1-selected)}.dropdown-caret{transition:transform calc(.5s * var(--element-animations-enabled, 1));color:var(--element-ui-0)}.open .dropdown-caret{transform:rotate(180deg);color:var(--element-ui-0-hover)}.collapsible-content{overflow:hidden;display:flex;flex-direction:column}.collapsible-content.full-height{overflow:auto}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }, {
      type: SiAccordionService,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }, {
      type: SiAccordionHCollapseService,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }];
  }, {
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    headerCssClasses: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    contentBgClasses: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    contentCssClasses: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    opened: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.opened']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    icon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    colorVariant: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    toggle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    hcollapsed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.hcollapsed']
    }],
    fullHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.full-height']
    }],
    contentRef: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['content', {
        static: true
      }]
    }]
  });
})();
class SiAboutComponent {
  constructor(http, sanitizer, cdRef) {
    this.http = http;
    this.sanitizer = sanitizer;
    this.cdRef = cdRef;
    /**
     * Additional links listed in the about section.
     */
    this.links = [];
    this.licenseApi = [];
    this.trackByIndex = index => index;
  }
  ngOnInit() {
    if (this.licenseInfo.api) {
      this.http.get(this.licenseInfo.api, {
        responseType: 'json'
      }).subscribe(data => {
        this.licenseApi = data;
        if (this.licenseApi.length === 1) {
          const apiInfo = this.licenseApi[0];
          apiInfo.isOpen = false;
          this.toggleLoadLicenseApi(apiInfo);
        }
        this.cdRef.markForCheck();
      });
    }
  }
  ngOnChanges() {
    if (this.licenseInfo.iframe != null) {
      this.sanitizedUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.licenseInfo.iframe);
    }
  }
  toggleLoadLicenseApi(apiInfo) {
    if (!apiInfo.isOpen && !apiInfo.files) {
      this.http.get(apiInfo.href, {
        responseType: 'json'
      }).subscribe(files => {
        apiInfo.files = files;
        this.cdRef.markForCheck();
      });
    }
    apiInfo.isOpen = !apiInfo.isOpen;
    this.cdRef.markForCheck();
  }
  toggleLoadLicenseContent(apiInfo) {
    apiInfo.isOpen = !apiInfo.isOpen;
    if (!apiInfo.content) {
      this.http.get(apiInfo.href, {
        responseType: 'text'
      }).subscribe(content => {
        apiInfo.content = content;
        this.cdRef.markForCheck();
      });
    }
    this.cdRef.markForCheck();
  }
}
SiAboutComponent.ɵfac = function SiAboutComponent_Factory(t) {
  return new (t || SiAboutComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_33__.HttpClient), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_34__.DomSanitizer), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiAboutComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiAboutComponent,
  selectors: [["si-about"]],
  inputs: {
    aboutTitle: "aboutTitle",
    licenseInfo: "licenseInfo",
    icon: "icon",
    iconName: "iconName",
    appName: "appName",
    subheading: "subheading",
    acceptableUsePolicyLink: "acceptableUsePolicyLink",
    imprintLink: "imprintLink",
    privacyLink: "privacyLink",
    cookieNoticeLink: "cookieNoticeLink",
    termsLink: "termsLink",
    links: "links"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 28,
  vars: 19,
  consts: [[1, "row", "mx-6", "mt-6"], [1, "col-md-6", "mb-6"], [1, "card", "elevation-1", "overflow-hidden"], [1, "card-header", "text-truncate"], [1, "list-group-item", "text-center"], ["class", "rounded-circle", "height", "150", 3, "src", "alt", 4, "ngIf"], ["class", "app-icon", "role", "presentation", 3, "ngClass", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "h-100"], ["class", "list-group-item", 4, "ngIf"], ["class", "w-100 h-100", 3, "src", "title", 4, "ngIf"], [4, "ngIf"], ["linkTemplate", ""], ["height", "150", 1, "rounded-circle", 3, "src", "alt"], ["role", "presentation", 1, "app-icon", 3, "ngClass"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "list-group-item"], [1, "w-100", "h-100", 3, "src", "title"], ["colorVariant", "base-0", 3, "heading", "toggle"], ["colorVariant", "base-0", 3, "icon", "heading", "toggle", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["colorVariant", "base-0", 3, "icon", "heading", "toggle"], [1, "px-6", "pt-6"], ["siLinkDefaultTarget", "_blank", 1, "list-group-item", "si-title-2", "text-body", "focus-inside", 3, "siLink"]],
  template: function SiAboutComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div")(6, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiAboutComponent_img_7_Template, 1, 2, "img", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, SiAboutComponent_i_8_Template, 1, 1, "i", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "h3");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](10);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, SiAboutComponent_p_11_Template, 2, 1, "p", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](12, SiAboutComponent_ng_container_12_Template, 1, 4, "ng-container", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](13, SiAboutComponent_ng_container_13_Template, 1, 4, "ng-container", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](14, SiAboutComponent_ng_container_14_Template, 1, 4, "ng-container", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](15, SiAboutComponent_ng_container_15_Template, 1, 4, "ng-container", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](16, SiAboutComponent_ng_container_16_Template, 1, 4, "ng-container", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](17, SiAboutComponent_ng_container_17_Template, 1, 4, "ng-container", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](18, "div", 1)(19, "div", 2)(20, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](21);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "div", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](23, SiAboutComponent_pre_23_Template, 2, 1, "pre", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](24, SiAboutComponent_iframe_24_Template, 1, 2, "iframe", 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](25, SiAboutComponent_ng_container_25_Template, 2, 2, "ng-container", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](26, SiAboutComponent_ng_template_26_Template, 3, 4, "ng-template", null, 14, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx.aboutTitle, " ");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.icon);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.icon && ctx.iconName);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.appName);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.subheading)("ngForTrackBy", ctx.trackByIndex);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.imprintLink);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.privacyLink);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.cookieNoticeLink);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.termsLink);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.acceptableUsePolicyLink);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.links)("ngForTrackBy", ctx.trackByIndex);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("h-100", ctx.licenseInfo.iframe);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx.licenseInfo.title, " ");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.licenseInfo.text);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.licenseInfo.iframe);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.licenseInfo.api);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, SiCollapsiblePanelComponent, SiLinkDirective, SiTranslatePipe],
  styles: [".list-group-item[_ngcontent-%COMP%]{border-width:0 0 1px;padding-inline:16px}.list-group-item.with-border[_ngcontent-%COMP%]:first-child{border-block-start-width:1px}.list-group-item[_ngcontent-%COMP%]:last-child{border-block-end-width:0}.app-icon[_ngcontent-%COMP%]{font-size:150px}iframe[_ngcontent-%COMP%]{border-style:none;min-block-size:500px;margin-block-end:-5px}pre[_ngcontent-%COMP%]{word-break:break-word;white-space:pre-wrap}"]
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiAboutComponent.prototype, "aboutTitle", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiAboutComponent.prototype, "licenseInfo", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiAboutComponent.prototype, "appName", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAboutComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-about',
      template: "<div class=\"row mx-6 mt-6\">\n  <div class=\"col-md-6 mb-6\">\n    <div class=\"card elevation-1 overflow-hidden\">\n      <div class=\"card-header text-truncate\">\n        {{ aboutTitle }}\n      </div>\n\n      <div>\n        <div class=\"list-group-item text-center\">\n          <img *ngIf=\"icon\" class=\"rounded-circle\" [src]=\"icon\" [alt]=\"appName + '\\'s Logo'\" height=\"150\">\n          <i *ngIf=\"!icon && iconName\" class=\"app-icon\" [ngClass]=\"iconName\" role=\"presentation\"></i>\n          <h3>{{ appName }}</h3>\n          <p *ngFor=\"let item of subheading; trackBy: trackByIndex\">{{ item }}</p>\n        </div>\n\n        <ng-container *ngIf=\"imprintLink\" [ngTemplateOutlet]=\"linkTemplate\" [ngTemplateOutletContext]=\"{ link: imprintLink }\">\n        </ng-container>\n        <ng-container *ngIf=\"privacyLink\" [ngTemplateOutlet]=\"linkTemplate\" [ngTemplateOutletContext]=\"{ link: privacyLink }\">\n        </ng-container>\n        <ng-container *ngIf=\"cookieNoticeLink\" [ngTemplateOutlet]=\"linkTemplate\" [ngTemplateOutletContext]=\"{ link: cookieNoticeLink }\">\n        </ng-container>\n        <ng-container *ngIf=\"termsLink\" [ngTemplateOutlet]=\"linkTemplate\" [ngTemplateOutletContext]=\"{ link: termsLink }\">\n        </ng-container>\n        <ng-container *ngIf=\"acceptableUsePolicyLink\" [ngTemplateOutlet]=\"linkTemplate\" [ngTemplateOutletContext]=\"{ link: acceptableUsePolicyLink }\">\n        </ng-container>\n        <ng-container *ngFor=\"let item of links; trackBy: trackByIndex\" [ngTemplateOutlet]=\"linkTemplate\" [ngTemplateOutletContext]=\"{ link: item }\">\n        </ng-container>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"col-md-6 mb-6\">\n    <div class=\"card elevation-1 overflow-hidden\" [class.h-100]=\"licenseInfo.iframe\">\n      <div class=\"card-header text-truncate\">\n        {{ licenseInfo.title }}\n      </div>\n\n      <div class=\"h-100\">\n        <pre *ngIf=\"licenseInfo.text\" class=\"list-group-item\">{{ licenseInfo.text }}</pre>\n\n        <iframe *ngIf=\"licenseInfo.iframe\" class=\"w-100 h-100\" [src]=\"sanitizedUrl\" [title]=\"licenseInfo.title\"></iframe>\n\n        <ng-container *ngIf=\"licenseInfo.api\">\n          <ng-container *ngFor=\"let api of licenseApi; trackBy: trackByIndex\">\n            <si-collapsible-panel\n              [heading]=\"api.name\"\n              colorVariant=\"base-0\"\n              (toggle)=\"toggleLoadLicenseApi(api)\"\n            >\n              <si-collapsible-panel\n                *ngFor=\"let file of api.files; trackBy: trackByIndex\"\n                [icon]=\"licenseInfo.icon ? licenseInfo.icon : 'element-document'\"\n                [heading]=\"file.name\"\n                colorVariant=\"base-0\"\n                (toggle)=\"toggleLoadLicenseContent(file)\"\n              >\n                <pre class=\"px-6 pt-6\">{{ file.content }}</pre>\n              </si-collapsible-panel>\n            </si-collapsible-panel>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #linkTemplate let-link=\"link\">\n  <a class=\"list-group-item si-title-2 text-body focus-inside\" [siLink]=\"link\" siLinkDefaultTarget=\"_blank\">\n    {{ (link.title ?? '') | translate }}\n  </a>\n</ng-template>\n",
      styles: [".list-group-item{border-width:0 0 1px;padding-inline:16px}.list-group-item.with-border:first-child{border-block-start-width:1px}.list-group-item:last-child{border-block-end-width:0}.app-icon{font-size:150px}iframe{border-style:none;min-block-size:500px;margin-block-end:-5px}pre{word-break:break-word;white-space:pre-wrap}\n"]
    }]
  }], function () {
    return [{
      type: _angular_common_http__WEBPACK_IMPORTED_MODULE_33__.HttpClient
    }, {
      type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_34__.DomSanitizer
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    aboutTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    licenseInfo: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    icon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    iconName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    appName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    subheading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    acceptableUsePolicyLink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    imprintLink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    privacyLink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    cookieNoticeLink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    termsLink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    links: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
const PANEL_MIN_HEIGHT = 100;
class SiAccordionComponent {
  constructor(service, resizeObserver, element, cdRef, accordionHCollapseService) {
    this.service = service;
    this.resizeObserver = resizeObserver;
    this.element = element;
    this.cdRef = cdRef;
    this.accordionHCollapseService = accordionHCollapseService;
    this.expandFirstPanel = true;
    this.fullHeight = false;
    this.hcollapsed = false;
    this.responsive = false;
  }
  ngOnDestroy() {
    this.subscription?.unsubscribe();
  }
  ngOnChanges() {
    this.service.fullHeight$.next(this.fullHeight && !this.responsive);
  }
  ngAfterContentInit() {
    this.subscription = this.resizeObserver.observe(this.element.nativeElement, 100, true, true).subscribe(() => this.calcFullHeight());
    if (this.accordionHCollapseService) {
      this.subscription.add(this.accordionHCollapseService.hcollapsed$.subscribe(state => {
        this.hcollapsed = state;
        this.cdRef.markForCheck();
      }));
    }
    if (this.panels.length) {
      this.panels.first.openClose(this.expandFirstPanel, false);
    }
  }
  calcFullHeight() {
    if (this.panels?.length) {
      const height = this.element.nativeElement.offsetHeight;
      this.responsive = !this.hcollapsed && height < this.panels.length * PANEL_MIN_HEIGHT;
      this.service.fullHeight$.next(this.fullHeight && !this.responsive);
    }
  }
}
SiAccordionComponent.ɵfac = function SiAccordionComponent_Factory(t) {
  return new (t || SiAccordionComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiAccordionService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ResizeObserverService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiAccordionHCollapseService, 8));
};
SiAccordionComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiAccordionComponent,
  selectors: [["si-accordion"]],
  contentQueries: function SiAccordionComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, SiCollapsiblePanelComponent, 4);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.panels = _t);
    }
  },
  hostVars: 6,
  hostBindings: function SiAccordionComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMap"](ctx.colorVariant);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("full-height", ctx.fullHeight)("hcollapsed", ctx.hcollapsed);
    }
  },
  inputs: {
    expandFirstPanel: "expandFirstPanel",
    fullHeight: "fullHeight",
    hcollapsed: "hcollapsed",
    colorVariant: "colorVariant"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([SiAccordionService]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  ngContentSelectors: _c1,
  decls: 2,
  vars: 0,
  template: function SiAccordionComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
  },
  styles: ["[_nghost-%COMP%], [_nghost-%COMP%] > div[_ngcontent-%COMP%]{display:flex;flex-direction:column}.full-height[_nghost-%COMP%]{block-size:100%}.full-height[_nghost-%COMP%] > div[_ngcontent-%COMP%]{overflow-y:auto;flex:1 1 0}.full-height.hcollapsed[_nghost-%COMP%] > div[_ngcontent-%COMP%]{overflow-y:unset;flex-basis:auto}.base-0[_nghost-%COMP%]{--cp-base: var(--element-base-0);--cp-header: var(--element-base-1)}.base-1[_nghost-%COMP%]{--cp-base: var(--element-base-1);--cp-header: var(--element-base-0)}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAccordionComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-accordion',
      template: '<div><ng-content></ng-content></div>',
      providers: [SiAccordionService],
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      styles: [":host,:host>div{display:flex;flex-direction:column}:host.full-height{block-size:100%}:host.full-height>div{overflow-y:auto;flex:1 1 0}:host.full-height.hcollapsed>div{overflow-y:unset;flex-basis:auto}:host.base-0{--cp-base: var(--element-base-0);--cp-header: var(--element-base-1)}:host.base-1{--cp-base: var(--element-base-1);--cp-header: var(--element-base-0)}\n"]
    }]
  }], function () {
    return [{
      type: SiAccordionService
    }, {
      type: ResizeObserverService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }, {
      type: SiAccordionHCollapseService,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }];
  }, {
    expandFirstPanel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    fullHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.full-height']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    hcollapsed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.hcollapsed']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    colorVariant: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    panels: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
      args: [SiCollapsiblePanelComponent]
    }]
  });
})();
class SiAccordionModule {}
SiAccordionModule.ɵfac = function SiAccordionModule_Factory(t) {
  return new (t || SiAccordionModule)();
};
SiAccordionModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiAccordionModule
});
SiAccordionModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAccordionModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule],
      declarations: [SiAccordionComponent, SiCollapsiblePanelComponent],
      exports: [SiAccordionComponent, SiCollapsiblePanelComponent]
    }]
  }], null, null);
})();
class SiAboutModule {}
SiAboutModule.ɵfac = function SiAboutModule_Factory(t) {
  return new (t || SiAboutModule)();
};
SiAboutModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiAboutModule
});
SiAboutModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiAccordionModule, SiLinkModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAboutModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiAccordionModule, SiLinkModule, SiTranslateModule],
      declarations: [SiAboutComponent],
      exports: [SiAboutComponent]
    }]
  }], null, null);
})();

// -------------------------------------------------------------------------------

/**
 * Directive to emit events on element size change. Use like this:
 *   `<div (siResizeObserver)="handleResize($event)">`
 * When the size of the element changes, an event in the format
 *   `{ width: number, height: number }`
 * will be emitted. Also an initial event will be emitted on init.
 *
 * By default, events are throttled and to an event every 100ms. To change
 * this, add `[resizeThrottle]="200"` on the same element. Input in milliseconds.
 */
class SiResizeObserverDirective {
  constructor(element, service) {
    this.element = element;
    this.service = service;
    this.resizeThrottle = 100;
    this.siResizeObserver = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  ngOnInit() {
    this.subs = this.service.observe(this.element.nativeElement, this.resizeThrottle, true).subscribe(this.siResizeObserver);
  }
  ngOnDestroy() {
    this.subs?.unsubscribe();
  }
}
SiResizeObserverDirective.ɵfac = function SiResizeObserverDirective_Factory(t) {
  return new (t || SiResizeObserverDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ResizeObserverService));
};
SiResizeObserverDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiResizeObserverDirective,
  selectors: [["", "siResizeObserver", ""]],
  inputs: {
    resizeThrottle: "resizeThrottle"
  },
  outputs: {
    siResizeObserver: "siResizeObserver"
  }
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiResizeObserverDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siResizeObserver]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: ResizeObserverService
    }];
  }, {
    resizeThrottle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    siResizeObserver: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();

/**
 * Defines how many items should be displayed at the end of the breadcrumb if possible.
 */
const NUMBER_OF_SHOWN_ITEMS_AT_END = 2;
/**
 * Defines how long a display item can be without it being shortened.
 * Cannot be lower than 4.
 * If this is 0, titles will not be shortened
 */
const ITEM_MAX_LENGTH = 30;
/**
 * Defines how many characters of an item are always displayed in the beginning.
 * Must be at least 2 less than ITEM_MAX_LENGTH
 */
const ITEM_CHARACTERS_ALWAYS_DISPLAYED_IN_BEGINNING = 10;
/**
 * Defines the width of the root icon in pixels.
 */
const ROOT_ICON_WIDTH = 24;
let controlIdCounter = 1;
class SiBreadcrumbComponent {
  constructor(changeDetector, translate) {
    this.changeDetector = changeDetector;
    this.translate = translate;
    /** Shows the "root" route as the provided title string instead of an icon. */
    this.showRootAsText = false;
    /** Aria label for the main breadcrumb navigation. Needed for a11y. */
    this.ariaLabel = 'breadcrumbs';
    this.itemsProcessed = false;
    this.enumeratedItems = [];
    this.itemsShown = [];
    this.itemsHidden = [];
    this.itemsShortened = [];
    this.breadcrumbShortened = false;
    this.numberOfItems = 0;
    this.ellipsesLevel = 0;
    this.breadcrumbDropdownOpen = [];
    this.addExpandDropdown = false;
    this.controlId = `__si-breadcrumb-${controlIdCounter++}-`;
    this.trackByIndex = index => index;
  }
  ngOnChanges() {
    // Reprocess items on every change and on init
    this.processItems();
  }
  ngOnDestroy() {
    this.translationSubscription?.unsubscribe();
  }
  processItems() {
    this.numberOfItems = this.items.length;
    this.translationSubscription?.unsubscribe();
    this.translationSubscription = this.translate.translateAsync(this.items.map(item => item.title)).subscribe(translatedTitles => {
      // Add the level to the items and check if they need to be shortened.
      // If they need to be shortened, shorten them at a convenient place.
      // Set the lastItem tag to true for the last item
      let counter = -1;
      const enumeratedItems = this.items.map(item => {
        counter++;
        const title = translatedTitles[item.title];
        let shortened = false;
        let shortenedTitle = title;
        // If this is not the last item and the title too long, shorten the title
        if (counter !== this.numberOfItems - 1 && title && title.length > ITEM_MAX_LENGTH) {
          shortened = true;
          // This regex gets the last space, dash or underscore.
          const regexMatch = title.slice(ITEM_CHARACTERS_ALWAYS_DISPLAYED_IN_BEGINNING, ITEM_MAX_LENGTH - 2).match(/^.*[- _](?=.*?$)/);
          if (regexMatch) {
            shortenedTitle = title.slice(0, ITEM_CHARACTERS_ALWAYS_DISPLAYED_IN_BEGINNING + regexMatch[0].length - 1);
          } else {
            shortenedTitle = title.slice(0, ITEM_MAX_LENGTH - 3);
          }
        }
        // If the root element should be displayed as text, set level not to 0.
        // This is used to distinguish in the template between icon and text.
        const level = counter === 0 && this.showRootAsText ? -1 : counter;
        return {
          ...item,
          title,
          level,
          hide: false,
          shortened,
          shortenedTitle,
          lastItem: counter === this.numberOfItems - 1
        };
      });
      this.itemsShown = enumeratedItems;
      this.itemsHidden = [];
      this.breadcrumbShortened = false;
      this.breadcrumbDropdownOpen = enumeratedItems.map(item => false);
      this.itemsProcessed = true;
      this.resetBreadcrumb();
    });
  }
  /*
   * Toggle dropdown (on click of ellipses), either for
   * the general dropdown list if itemLevel is at ellipsesLevel
   * or otherwise the name expansion at the specified item level.
   * Close any open dropdown before opening a new one.
   */
  toggleBreadcrumbDropdown(itemLevel) {
    const previousState = this.breadcrumbDropdownOpen[itemLevel];
    this.breadcrumbDropdownOpen.splice(itemLevel, 1);
    if (this.breadcrumbDropdownOpen.some(item => item)) {
      this.breadcrumbDropdownOpen = this.breadcrumbDropdownOpen.map(item => false);
    }
    this.breadcrumbDropdownOpen.splice(itemLevel, 0, !previousState);
  }
  // Close dropdown on click anywhere else
  documentClick(targetElement) {
    if (this.breadcrumbDropdownOpen.some(item => item)) {
      if (!this.breadcrumbElement?.nativeElement.contains(targetElement)) {
        this.breadcrumbDropdownOpen = this.breadcrumbDropdownOpen.map(item => false);
      }
    }
  }
  resetBreadcrumb() {
    if (this.itemsProcessed) {
      this.numberOfItems = this.items.length;
      // Add an additional the ellipses item to the end of the shownItems (breadcrumb items).
      // Disable addExpandDropdown for now, to make every item a proper SiBreadcrumbItemComponent.
      const ellipsesItem = {
        title: '...',
        level: this.numberOfItems,
        shortenedTitle: ''
      };
      this.itemsShown.push(ellipsesItem);
      if (this.breadcrumbShortened) {
        // If the breadcrumb was shortened before, remove the ellipses and add back itemsHidden (breadcrumb dropdown items).
        this.breadcrumbShortened = false;
        this.itemsShown.splice(this.ellipsesLevel, 1, ...this.itemsHidden);
        this.itemsHidden = [];
      }
      this.addExpandDropdown = false;
      // Wait for the next change detection cycle to measure the updated item length.
      this.changeDetector.detectChanges();
      this.calculateBreadcrumb();
    }
  }
  calculateBreadcrumb() {
    this.addExpandDropdown = true;
    const maxWidth = this.breadcrumbElement.nativeElement.clientWidth;
    const breadcrumbElementsList = this.breadcrumbElements.map(item => item);
    // Measure the length of the last additional ellipses item, then remove it from itemsShown (breadcrumb items).
    const ellipsesWidth = breadcrumbElementsList[this.numberOfItems].nativeElement.offsetWidth;
    this.itemsShown.splice(this.numberOfItems, 1);
    let currentWidth = this.showRootAsText ? 0 : ROOT_ICON_WIDTH;
    const numberOfItemsKeptAtEnd = Math.min(NUMBER_OF_SHOWN_ITEMS_AT_END, this.numberOfItems - 1);
    let reverseCounter = this.numberOfItems;
    // Test for numberOfItemsKeptAtEnd items from the end if they still fit, if not, set breadcrumbShortened to true.
    breadcrumbElementsList.slice(this.numberOfItems - numberOfItemsKeptAtEnd, this.numberOfItems).reverse().map(item => {
      if (!this.breadcrumbShortened) {
        const currentItemWidth = item.nativeElement.offsetWidth;
        if (currentWidth + currentItemWidth > maxWidth) {
          this.breadcrumbShortened = true;
          // Test if the ellipses item still fits, if not remove last (actually next in original order) item as well.
          if (currentWidth + ellipsesWidth > maxWidth) {
            reverseCounter++;
          }
        } else {
          currentWidth += currentItemWidth;
          reverseCounter--;
        }
      }
    });
    const start = this.showRootAsText ? 0 : 1;
    let counter = start;
    // If breadcrumbShortened is not true yet, test for the rest of the items from the start
    // Whether they still fit, if not, set breadcrumbShortened to true.
    breadcrumbElementsList.slice(start, this.numberOfItems - numberOfItemsKeptAtEnd).map(item => {
      if (!this.breadcrumbShortened) {
        const currentItemWidth = item.nativeElement.offsetWidth;
        if (currentWidth + currentItemWidth > maxWidth) {
          this.breadcrumbShortened = true;
          // Test if the ellipses item still fits, if not remove last item as well.
          // If the counter is still on 1, instead remove last (actually next in original order) from
          // the previous reverse calculation
          if (currentWidth + ellipsesWidth > maxWidth) {
            if (counter > 1) {
              counter--;
            } else {
              reverseCounter++;
            }
          }
        } else {
          currentWidth += currentItemWidth;
          counter++;
        }
      }
    });
    // If breadcrumbShortened is true, move the items that do not fit to itemsHidden (breadcrumb dropdown items) and add ellipses item.
    if (this.breadcrumbShortened) {
      this.ellipsesLevel = counter;
      this.itemsHidden = this.itemsShown.slice(this.ellipsesLevel, reverseCounter);
      const ellipsesItem = {
        title: '...',
        level: this.ellipsesLevel,
        shortenedTitle: ''
      };
      this.itemsShown.splice(this.ellipsesLevel, reverseCounter - this.ellipsesLevel, ellipsesItem);
    }
    // Manually detect changes to prevent them from not being detected on language change
    this.changeDetector.detectChanges();
  }
}
SiBreadcrumbComponent.ɵfac = function SiBreadcrumbComponent_Factory(t) {
  return new (t || SiBreadcrumbComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiTranslateService));
};
SiBreadcrumbComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiBreadcrumbComponent,
  selectors: [["si-breadcrumb"]],
  viewQuery: function SiBreadcrumbComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c8, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c9, 5, _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.breadcrumbElement = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.breadcrumbElements = _t);
    }
  },
  hostBindings: function SiBreadcrumbComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiBreadcrumbComponent_click_HostBindingHandler($event) {
        return ctx.documentClick($event.target);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveDocument"]);
    }
  },
  inputs: {
    items: "items",
    showRootAsText: "showRootAsText",
    ariaLabel: "ariaLabel"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 11,
  vars: 5,
  consts: [["role", "navigation"], [1, "breadcrumb", 3, "siResizeObserver"], ["breadcrumb", ""], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["itemTemplate", ""], ["toggleTemplate", ""], ["dropdownTemplate", ""], [4, "ngIf"], ["class", "item breadcrumb-ellipses-item", 4, "ngIf"], ["class", "item", 4, "ngIf"], [1, "item", "text-nowrap", "shortened"], ["breadcrumbItem", ""], ["role", "separator", "class", "separator element-right-2 flip-rtl", 4, "ngIf"], [1, "breadcrumb-dropdown-wrapper"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "dropdown-menu", "role", "menu", 3, "id", "show", 4, "ngIf"], ["role", "separator", 1, "separator", "element-right-2", "flip-rtl"], ["role", "menu", 1, "dropdown-menu", 3, "id"], [1, "item"], [1, "item", "breadcrumb-ellipses-item"], ["activeClass", "active", "ariaCurrent", "page", 1, "breadcrumb-link", "text-nowrap", 3, "siLink", "exactMatch"], ["class", "icon element-breadcrumb-root flip-rtl", 4, "ngIf"], [1, "icon", "element-breadcrumb-root", "flip-rtl"], ["role", "button", "aria-haspopup", "true", "tabindex", "0", 1, "breadcrumb-dropdown-toggle", "link", 3, "keydown.enter", "click"], ["activeClass", "active", "ariaCurrent", "page", "role", "menuitem", 1, "dropdown-item", "breadcrumb-link", "focus-inside", 3, "siLink", "exactMatch"]],
  template: function SiBreadcrumbComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "nav", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "ol", 1, 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("siResizeObserver", function SiBreadcrumbComponent_Template_ol_siResizeObserver_2_listener() {
        return ctx.resetBreadcrumb();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiBreadcrumbComponent_ng_container_4_Template, 3, 2, "ng-container", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiBreadcrumbComponent_ng_template_5_Template, 3, 10, "ng-template", null, 4, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiBreadcrumbComponent_ng_template_7_Template, 2, 3, "ng-template", null, 5, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](9, SiBreadcrumbComponent_ng_template_9_Template, 2, 6, "ng-template", null, 6, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 3, ctx.ariaLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.itemsShown)("ngForTrackBy", ctx.trackByIndex);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, SiLinkDirective, SiResizeObserverDirective, SiTranslatePipe],
  styles: [".breadcrumb[_ngcontent-%COMP%]{flex-wrap:nowrap}.dropdown-menu.show[_ngcontent-%COMP%] > .dropdown-item[_ngcontent-%COMP%]{background-color:var(--element-base-1)}.item[_ngcontent-%COMP%]{display:flex;align-items:center}.separator[_ngcontent-%COMP%]{font-size:1.5rem;color:var(--element-ui-2);margin-block:-.25rem;margin-inline:0}.breadcrumb-dropdown-toggle[_ngcontent-%COMP%]{cursor:pointer}.breadcrumb-dropdown-toggle[_ngcontent-%COMP%]:focus{outline:none}.dropdown-item.active[_ngcontent-%COMP%], .dropdown-item[_ngcontent-%COMP%]:active{background-color:var(--element-base-1)}.dropdown-item[_ngcontent-%COMP%]:hover, .dropdown-item[_ngcontent-%COMP%]:focus{background-color:var(--element-base-0)!important;text-decoration:underline}.disable-router-link[_ngcontent-%COMP%], .disable-router-link[_ngcontent-%COMP%]:hover{pointer-events:none;color:var(--element-text-disabled)}"]
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiBreadcrumbComponent.prototype, "items", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiBreadcrumbComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-breadcrumb',
      template: "<nav role=\"navigation\" [attr.aria-label]=\"ariaLabel | translate\">\n  <ol class=\"breadcrumb\" #breadcrumb (siResizeObserver)=\"resetBreadcrumb()\">\n    <ng-container *ngFor=\"let item of itemsShown; trackBy: trackByIndex; first as isFirst\">\n      <ng-container *ngIf=\"!breadcrumbShortened || item.level !== ellipsesLevel\">\n        <ng-container *ngIf=\"item.shortened\">\n          <li #breadcrumbItem class=\"item text-nowrap shortened\">\n            <i *ngIf=\"!isFirst\" role=\"separator\" class=\"separator element-right-2 flip-rtl\"></i>\n            <div class=\"breadcrumb-dropdown-wrapper\">\n              <ng-container\n                *ngTemplateOutlet=\"toggleTemplate; context: { item: item, title: item.shortenedTitle }\"\n              ></ng-container>\n              <div\n                *ngIf=\"addExpandDropdown\"\n                class=\"dropdown-menu\"\n                [id]=\"controlId + item.level\"\n                [class.show]=\"breadcrumbDropdownOpen[item.level]\"\n                role=\"menu\"\n              >\n                <ng-container *ngTemplateOutlet=\"dropdownTemplate; context: { item: item }\"></ng-container>\n              </div>\n            </div>\n          </li>\n        </ng-container>\n        <li *ngIf=\"!item.shortened\" #breadcrumbItem class=\"item\">\n          <i *ngIf=\"!isFirst\" role=\"separator\" class=\"separator element-right-2 flip-rtl\"></i>\n          <ng-container *ngTemplateOutlet=\"itemTemplate; context: { item: item }\"></ng-container>\n        </li>\n      </ng-container>\n      <li\n        *ngIf=\"breadcrumbShortened && item.level === ellipsesLevel\"\n        class=\"item breadcrumb-ellipses-item\"\n      >\n        <i *ngIf=\"!isFirst\" role=\"separator\" class=\"separator element-right-2 flip-rtl\"></i>\n        <div class=\"breadcrumb-dropdown-wrapper\">\n          <ng-container *ngTemplateOutlet=\"toggleTemplate; context: { item: item, title: '' }\"></ng-container>\n          <div\n            class=\"dropdown-menu\"\n            [id]=\"controlId + item.level\"\n            [class.show]=\"breadcrumbDropdownOpen[item.level]\"\n            role=\"menu\"\n          >\n            <ng-container *ngFor=\"let item of itemsHidden; trackBy: trackByIndex\">\n              <ng-container *ngTemplateOutlet=\"dropdownTemplate; context: { item: item }\"></ng-container>\n            </ng-container>\n          </div>\n        </div>\n      </li>\n    </ng-container>\n  </ol>\n</nav>\n\n<ng-template #itemTemplate let-item=\"item\">\n  <a\n    class=\"breadcrumb-link text-nowrap\"\n    [class.disable-router-link]=\"!item.link && !item.action && !item.href\"\n    [class.text-secondary]=\"item.lastItem\"\n    [siLink]=\"item\"\n    activeClass=\"active\"\n    [exactMatch]=\"true\"\n    [attr.aria-label]=\"item.title\"\n    [attr.aria-disabled]=\"!item.link && !item.href && !item.action\"\n    ariaCurrent=\"page\"\n  >\n    <i *ngIf=\"item.level === 0\" class=\"icon element-breadcrumb-root flip-rtl\"></i>\n    <span *ngIf=\"item.level !== 0\">{{ item.title }}</span>\n  </a>\n</ng-template>\n\n<ng-template #toggleTemplate let-item=\"item\" let-title=\"title\">\n  <div\n    class=\"breadcrumb-dropdown-toggle link\"\n    role=\"button\"\n    aria-haspopup=\"true\"\n    [attr.aria-controls]=\"controlId + item.level\"\n    [attr.aria-expanded]=\"breadcrumbDropdownOpen[item.level]\"\n    (keydown.enter)=\"toggleBreadcrumbDropdown(item.level)\"\n    (click)=\"toggleBreadcrumbDropdown(item.level)\"\n    tabindex=\"0\"\n  >{{ title }}...</div>\n</ng-template>\n\n<ng-template #dropdownTemplate let-item=\"item\">\n  <a\n    class=\"dropdown-item breadcrumb-link focus-inside\"\n    [class.disable-router-link]=\"!item.link && !item.action && !item.href\"\n    [siLink]=\"item\"\n    activeClass=\"active\"\n    [exactMatch]=\"true\"\n    [attr.aria-disabled]=\"!item.link && !item.action && !item.href\"\n    ariaCurrent=\"page\"\n    role=\"menuitem\"\n  >{{ item.title }}</a>\n</ng-template>\n",
      styles: [".breadcrumb{flex-wrap:nowrap}.dropdown-menu.show>.dropdown-item{background-color:var(--element-base-1)}.item{display:flex;align-items:center}.separator{font-size:1.5rem;color:var(--element-ui-2);margin-block:-.25rem;margin-inline:0}.breadcrumb-dropdown-toggle{cursor:pointer}.breadcrumb-dropdown-toggle:focus{outline:none}.dropdown-item.active,.dropdown-item:active{background-color:var(--element-base-1)}.dropdown-item:hover,.dropdown-item:focus{background-color:var(--element-base-0)!important;text-decoration:underline}.disable-router-link,.disable-router-link:hover{pointer-events:none;color:var(--element-text-disabled)}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }, {
      type: SiTranslateService
    }];
  }, {
    items: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showRootAsText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    ariaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    breadcrumbElement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['breadcrumb']
    }],
    breadcrumbElements: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChildren,
      args: ['breadcrumbItem', {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
      }]
    }],
    documentClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['document:click', ['$event.target']]
    }]
  });
})();

// keep in sync with the Bootstrap variables
const BOOTSTRAP_BREAKPOINTS = {
  smMinimum: 576,
  mdMinimum: 768,
  lgMinimum: 992,
  xlMinimum: 1200,
  xxlMinimum: 1400
};
/**
 * Directive to automatically set `si-container-*` classes so Bootstrap column classes work
 * in the context of the container instead of viewport size.
 */
class SiResponsiveContainerDirective {
  constructor(element, service) {
    this.element = element;
    this.service = service;
    this.isXs = false;
    this.isSm = false;
    this.isMd = false;
    this.isLg = false;
    this.isXl = false;
    this.isXxl = false;
    this.resizeThrottle = 100;
  }
  ngOnInit() {
    this.subs = this.service.observe(this.element.nativeElement, this.resizeThrottle, true).subscribe(event => this.setResponsiveSize(event.width, event.height));
  }
  ngOnDestroy() {
    this.subs?.unsubscribe();
  }
  setResponsiveSize(width, height) {
    if (!width && !height) {
      // element is not visible, no point in changing anything
      return;
    }
    const breakpoints = this.breakpoints ?? BOOTSTRAP_BREAKPOINTS;
    this.isXs = width < breakpoints.smMinimum;
    this.isSm = width >= breakpoints.smMinimum && width < breakpoints.mdMinimum;
    this.isMd = width >= breakpoints.mdMinimum && width < breakpoints.lgMinimum;
    this.isLg = width >= breakpoints.lgMinimum && width < breakpoints.xlMinimum;
    this.isXl = width >= breakpoints.xlMinimum && width < breakpoints.xxlMinimum;
    this.isXxl = width >= breakpoints.xxlMinimum;
  }
}
SiResponsiveContainerDirective.ɵfac = function SiResponsiveContainerDirective_Factory(t) {
  return new (t || SiResponsiveContainerDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ResizeObserverService));
};
SiResponsiveContainerDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiResponsiveContainerDirective,
  selectors: [["", "siResponsiveContainer", ""]],
  hostVars: 12,
  hostBindings: function SiResponsiveContainerDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("si-container-xs", ctx.isXs)("si-container-sm", ctx.isSm)("si-container-md", ctx.isMd)("si-container-lg", ctx.isLg)("si-container-xl", ctx.isXl)("si-container-xxl", ctx.isXxl);
    }
  },
  inputs: {
    resizeThrottle: "resizeThrottle",
    breakpoints: "breakpoints"
  },
  exportAs: ["siResponsiveContainer"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiResponsiveContainerDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siResponsiveContainer]',
      exportAs: 'siResponsiveContainer'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: ResizeObserverService
    }];
  }, {
    isXs: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.si-container-xs']
    }],
    isSm: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.si-container-sm']
    }],
    isMd: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.si-container-md']
    }],
    isLg: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.si-container-lg']
    }],
    isXl: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.si-container-xl']
    }],
    isXxl: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.si-container-xxl']
    }],
    resizeThrottle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    breakpoints: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiResizeObserverModule {}
SiResizeObserverModule.ɵfac = function SiResizeObserverModule_Factory(t) {
  return new (t || SiResizeObserverModule)();
};
SiResizeObserverModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiResizeObserverModule
});
SiResizeObserverModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiResizeObserverModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [SiResizeObserverDirective, SiResponsiveContainerDirective],
      exports: [SiResizeObserverDirective, SiResponsiveContainerDirective]
    }]
  }], null, null);
})();
class SiBreadcrumbModule {}
SiBreadcrumbModule.ɵfac = function SiBreadcrumbModule_Factory(t) {
  return new (t || SiBreadcrumbModule)();
};
SiBreadcrumbModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiBreadcrumbModule
});
SiBreadcrumbModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterModule, SiLinkModule, SiResizeObserverModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiBreadcrumbModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterModule, SiLinkModule, SiResizeObserverModule, SiTranslateModule],
      declarations: [SiBreadcrumbComponent],
      exports: [SiBreadcrumbComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

class SiComfortScoreStatusComponent {
  constructor() {
    this.size = 'medium';
  }
  get sizeClass() {
    return 'size-' + this.size;
  }
}
SiComfortScoreStatusComponent.ɵfac = function SiComfortScoreStatusComponent_Factory(t) {
  return new (t || SiComfortScoreStatusComponent)();
};
SiComfortScoreStatusComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiComfortScoreStatusComponent,
  selectors: [["si-comfort-score-status"]],
  hostVars: 2,
  hostBindings: function SiComfortScoreStatusComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMap"](ctx.sizeClass);
    }
  },
  inputs: {
    item: "item",
    size: "size"
  },
  decls: 7,
  vars: 9,
  consts: [["class", "me-4", "role", "presentation", 3, "ngClass", "item-disabled", 4, "ngIf"], [1, "flex-fill", "d-flex", "flex-column"], [1, "score-title", "d-flex", "mb-3"], ["class", "score si-caption mt-2", 3, "text-secondary", "text-muted", 4, "ngIf"], ["class", "score-description", 4, "ngIf"], ["role", "presentation", 1, "me-4", 3, "ngClass"], [1, "score", "si-caption", "mt-2"], [1, "score-description"]],
  template: function SiComfortScoreStatusComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiComfortScoreStatusComponent_i_0_Template, 1, 7, "i", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1)(2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiComfortScoreStatusComponent_div_5_Template, 2, 6, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiComfortScoreStatusComponent_div_6_Template, 3, 3, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.item.icon);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-muted", ctx.item.disabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-disabled", ctx.item.disabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 7, ctx.item.title), " ");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.size !== "large");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.size !== "small" && ctx.item.description);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:flex;max-inline-size:192px}.size-small[_nghost-%COMP%]{--title-weight: normal;--icon-size: 1.25rem;--score-dir: column;align-items:center}.size-medium[_nghost-%COMP%]{--title-weight: bold;--icon-size: 2rem;--title-order: 1;--score-dir: row}.size-large[_nghost-%COMP%]{--title-weight: bold;--title-size: 1.75rem;--icon-size: 2rem;--title-order: 0}i[_ngcontent-%COMP%]{font-size:var(--icon-size)}.score-title[_ngcontent-%COMP%]{flex-direction:var(--score-dir);align-items:baseline;justify-content:space-between;font-weight:var(--title-weight);font-size:var(--title-size);order:var(--title-order);line-height:1}.item-disabled[_ngcontent-%COMP%]{color:var(--element-ui-3)!important}"]
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiComfortScoreStatusComponent.prototype, "item", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiComfortScoreStatusComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-comfort-score-status',
      template: "<i\n  *ngIf=\"item.icon\"\n  class=\"me-4\"\n  [ngClass]=\"[item.icon, 'status-' + item.status, item.selected ? item.icon + '-filled' : '']\"\n  [class.item-disabled]=\"item.disabled\"\n  role=\"presentation\"\n></i>\n<div\n  class=\"flex-fill d-flex flex-column\"\n  [class.text-muted]=\"item.disabled\"\n  [attr.aria-disabled]=\"item.disabled\"\n>\n  <div class=\"score-title d-flex mb-3\">\n    {{ item.title | translate }}\n    <div\n      *ngIf=\"size !== 'large'\"\n      class=\"score si-caption mt-2\"\n      [class.text-secondary]=\"!item.disabled\"\n      [class.text-muted]=\"item.disabled\"\n    >\n      {{ item.value }}{{ item.unit ?? ' / 100' }}\n    </div>\n  </div>\n  <div\n    *ngIf=\"size !== 'small' && item.description\"\n    class=\"score-description\"\n  >\n    {{ item.description | translate }}\n  </div>\n</div>\n",
      styles: [":host{display:flex;max-inline-size:192px}:host.size-small{--title-weight: normal;--icon-size: 1.25rem;--score-dir: column;align-items:center}:host.size-medium{--title-weight: bold;--icon-size: 2rem;--title-order: 1;--score-dir: row}:host.size-large{--title-weight: bold;--title-size: 1.75rem;--icon-size: 2rem;--title-order: 0}i{font-size:var(--icon-size)}.score-title{flex-direction:var(--score-dir);align-items:baseline;justify-content:space-between;font-weight:var(--title-weight);font-size:var(--title-size);order:var(--title-order);line-height:1}.item-disabled{color:var(--element-ui-3)!important}\n"]
    }]
  }], null, {
    item: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    size: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    sizeClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class']
    }]
  });
})();
class SiComfortScoreComponent {
  constructor() {
    this.items = [];
    this.showValues = true;
    this.labelOnly = false;
    this.gridParts = 2;
    this.selected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.trackByItem = (_index, item) => item;
    this.trackByIndex = index => index;
    this.gridPartArray = new Array(this.gridParts);
  }
  ngOnChanges(changes) {
    if (changes.gridParts) {
      this.gridPartArray = new Array(this.gridParts);
    }
  }
}
SiComfortScoreComponent.ɵfac = function SiComfortScoreComponent_Factory(t) {
  return new (t || SiComfortScoreComponent)();
};
SiComfortScoreComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiComfortScoreComponent,
  selectors: [["si-comfort-score"]],
  inputs: {
    items: "items",
    showValues: "showValues",
    labelOnly: "labelOnly",
    gridParts: "gridParts"
  },
  outputs: {
    selected: "selected"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 5,
  vars: 9,
  consts: [[1, "wrapper"], [1, "grid", "d-flex", "flex-column", "position-relative", "text-secondary", "small"], ["class", "border-top flex-fill", 4, "ngFor", "ngForOf", "ngForTrackBy"], [4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "border-top", "flex-fill"], [1, "axis-label", "position-absolute", "text-end", "label-100"], [1, "axis-label", "position-absolute", "text-end", "label-0"], [1, "bar-outer", "position-relative"], [1, "bar", "position-absolute", "d-flex", "flex-column", "text-center", 3, "click"], [1, "bar-inner", "flex-fill", 3, "ngClass"], ["class", "value text-body small", 4, "ngIf"], ["tabindex", "0", 1, "status", 3, "click", "keydown.enter"], ["size", "large", 3, "item", 4, "ngIf"], ["class", "small text-center", 3, "text-muted", 4, "ngIf"], [1, "value", "text-body", "small"], ["size", "large", 3, "item"], [1, "small", "text-center"]],
  template: function SiComfortScoreComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiComfortScoreComponent_div_2_Template, 1, 0, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiComfortScoreComponent_ng_container_3_Template, 5, 0, "ng-container", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiComfortScoreComponent_ng_container_4_Template, 8, 15, "ng-container", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("labels", ctx.showValues);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("grid-column-end", ctx.items.length + 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.gridPartArray)("ngForTrackBy", ctx.trackByIndex);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.showValues);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.items)("ngForTrackBy", ctx.trackByItem);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiComfortScoreStatusComponent, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:block}.wrapper[_ngcontent-%COMP%]{block-size:100%;display:grid;grid-row-gap:16px;grid-template-rows:1fr;margin-block:2rem 8px}.wrapper.labels[_ngcontent-%COMP%]{margin-inline-start:40px}.bar-outer[_ngcontent-%COMP%]{grid-row:1;min-block-size:100px}.bar[_ngcontent-%COMP%], .status[_ngcontent-%COMP%]{cursor:pointer}.status[_ngcontent-%COMP%]{grid-row:2}.bar[_ngcontent-%COMP%]{inset-block-end:0;transition:block-size calc(.5s * var(--element-animations-enabled, 1))}.bar.detail[_ngcontent-%COMP%]{margin-inline-start:40px}.bar[_ngcontent-%COMP%]:not(.detail){inset-inline-start:calc(50% - 24px)}.bar-inner[_ngcontent-%COMP%]{inline-size:48px;background:var(--element-base-0);border-block-start:2px solid currentColor;margin-block-end:1px}.bar-inner.selected[_ngcontent-%COMP%]{background:currentColor}.bar-inner.disabled[_ngcontent-%COMP%]{border-block-start-color:var(--element-base-0);background:var(--element-base-0)}.value[_ngcontent-%COMP%]{margin-block-start:-1.25rem;line-height:1}.grid[_ngcontent-%COMP%]{grid-row:1;grid-column-start:1;border-block-end:1px solid var(--element-ui-1)}.axis-label[_ngcontent-%COMP%]{inset-inline-start:-40px;inline-size:40px;line-height:1;padding-inline-end:12px}.label-0[_ngcontent-%COMP%]{inset-block-end:-.5em}.label-100[_ngcontent-%COMP%]{inset-block-start:-.5em}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiComfortScoreComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-comfort-score',
      template: "<div class=\"wrapper\" [class.labels]=\"showValues\">\n  <div\n    class=\"grid d-flex flex-column position-relative text-secondary small\"\n    [style.grid-column-end]=\"items.length + 1\"\n  >\n    <div *ngFor=\"let p of gridPartArray; trackBy: trackByIndex\" class=\"border-top flex-fill\"></div>\n    <ng-container *ngIf=\"showValues\">\n      <div class=\"axis-label position-absolute text-end label-100\">100</div>\n      <div class=\"axis-label position-absolute text-end label-0\">0</div>\n    </ng-container>\n  </div>\n  <ng-container *ngFor=\"let item of items; trackBy: trackByItem; index as i\">\n    <div\n      class=\"bar-outer position-relative\"\n      [style.grid-column]=\"i + 1\"\n    >\n      <div\n        class=\"bar position-absolute d-flex flex-column text-center\"\n        [class.detail]=\"!labelOnly\"\n        [style.height.%]=\"item.value\"\n        (click)=\"selected.emit(item)\"\n      >\n        <div\n          class=\"bar-inner flex-fill\"\n          [class.selected]=\"item.selected\"\n          [class.disabled]=\"item.disabled\"\n          [ngClass]=\"'status-' + item.status\"\n        >\n          <div *ngIf=\"showValues && !item.disabled\" class=\"value text-body small\">\n            {{ item.value }}{{ item.unit ?? '' }}\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"status\"\n      tabindex=\"0\"\n      (click)=\"selected.emit(item)\"\n      (keydown.enter)=\"selected.emit(item)\"\n      [attr.aria-disabled]=\"item.disabled\"\n    >\n      <si-comfort-score-status\n        *ngIf=\"!labelOnly\"\n        [item]=\"item\"\n        size=\"large\"\n      ></si-comfort-score-status>\n      <div\n        *ngIf=\"labelOnly\"\n        class=\"small text-center\"\n        [class.text-muted]=\"item.disabled\"\n      >{{ item.title | translate }}</div>\n    </div>\n  </ng-container>\n</div>\n",
      styles: [":host{display:block}.wrapper{block-size:100%;display:grid;grid-row-gap:16px;grid-template-rows:1fr;margin-block:2rem 8px}.wrapper.labels{margin-inline-start:40px}.bar-outer{grid-row:1;min-block-size:100px}.bar,.status{cursor:pointer}.status{grid-row:2}.bar{inset-block-end:0;transition:block-size calc(.5s * var(--element-animations-enabled, 1))}.bar.detail{margin-inline-start:40px}.bar:not(.detail){inset-inline-start:calc(50% - 24px)}.bar-inner{inline-size:48px;background:var(--element-base-0);border-block-start:2px solid currentColor;margin-block-end:1px}.bar-inner.selected{background:currentColor}.bar-inner.disabled{border-block-start-color:var(--element-base-0);background:var(--element-base-0)}.value{margin-block-start:-1.25rem;line-height:1}.grid{grid-row:1;grid-column-start:1;border-block-end:1px solid var(--element-ui-1)}.axis-label{inset-inline-start:-40px;inline-size:40px;line-height:1;padding-inline-end:12px}.label-0{inset-block-end:-.5em}.label-100{inset-block-start:-.5em}\n"]
    }]
  }], null, {
    items: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showValues: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    labelOnly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    gridParts: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    selected: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiComfortScoreModule {}
SiComfortScoreModule.ɵfac = function SiComfortScoreModule_Factory(t) {
  return new (t || SiComfortScoreModule)();
};
SiComfortScoreModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiComfortScoreModule
});
SiComfortScoreModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiComfortScoreModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [SiComfortScoreComponent, SiComfortScoreStatusComponent],
      exports: [SiComfortScoreComponent, SiComfortScoreStatusComponent],
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule]
    }]
  }], null, null);
})();
const CONNECTION_STRENGTH_MAP = {
  'none': 0,
  'low': 1,
  'medium': 2,
  'strong': 3
};
class SiConnectionStrengthComponent {
  constructor() {
    /**
     * Shows the signal representation in an alternative *WLAN* format
     */
    this.wlan = false;
    /**
     * Main value representing the current connection strength.
     */
    this.value = 'none';
  }
  get numberValue() {
    return CONNECTION_STRENGTH_MAP[this.value] ?? 0;
  }
}
SiConnectionStrengthComponent.ɵfac = function SiConnectionStrengthComponent_Factory(t) {
  return new (t || SiConnectionStrengthComponent)();
};
SiConnectionStrengthComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiConnectionStrengthComponent,
  selectors: [["si-connection-strength"]],
  inputs: {
    wlan: "wlan",
    value: "value"
  },
  decls: 2,
  vars: 2,
  consts: [["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 512 512", 3, "none", 4, "ngIf"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 512 512"], ["d", "M318.63,304a108.1,108.1,0,0,0-125.1,0,12,12,0,0,0,13.9,19.56,84.09,84.09,0,0,1,97.3,0A12,12,0,1,0,318.63,304Z"], ["d", "M377,247.56a188,188,0,0,0-240.64,0A12,12,0,1,0,151.68,266a164,164,0,0,1,209.92,0A12,12,0,0,0,377,247.56Z"], ["d", "M433.21,191a268,268,0,0,0-354.42,0,12,12,0,1,0,15.86,18,244,244,0,0,1,322.7,0,12,12,0,0,0,15.86-18Z"], ["cx", "256", "cy", "372.22", "r", "16"], [4, "ngIf"], ["d", "M412,352a12,12,0,0,0,12-12V263.78a12,12,0,0,0-24,0V340A12,12,0,0,0,412,352Z"], ["d", "M412.18,400H412a12,12,0,0,0,0,24h.18a12,12,0,1,0,0-24Z"], ["d", "M128,228a12,12,0,0,0,0,24A132.14,132.14,0,0,1,260,384a12,12,0,0,0,24,0C284,298,214,228,128,228Z"], ["d", "M128,116a12,12,0,0,0,0,24A244,244,0,0,1,372,384a12,12,0,0,0,24,0A268,268,0,0,0,128,116Z"], ["cx", "144", "cy", "368", "r", "28"], ["d", "M412,188.11a12,12,0,0,0,12-12V99.89a12,12,0,1,0-24,0v76.22A12,12,0,0,0,412,188.11Z"], ["d", "M412.18,236.11H412a12,12,0,0,0,0,24h.18a12,12,0,0,0,0-24Z"]],
  template: function SiConnectionStrengthComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiConnectionStrengthComponent__svg_svg_0_Template, 6, 7, "svg", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiConnectionStrengthComponent__svg_svg_1_Template, 5, 7, "svg", 0);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.wlan);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.wlan);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf],
  styles: ["svg[_ngcontent-%COMP%]{inline-size:1em;block-size:1em;fill:var(--element-ui-1)}svg.none[_ngcontent-%COMP%], svg.none[_ngcontent-%COMP%]   .inactive[_ngcontent-%COMP%]{fill:var(--element-status-danger)}svg[_ngcontent-%COMP%]   .inactive[_ngcontent-%COMP%]{fill:var(--element-ui-3)}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiConnectionStrengthComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-connection-strength',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" *ngIf=\"wlan\" [class.none]=\"numberValue < 1\">\n  <path d=\"M318.63,304a108.1,108.1,0,0,0-125.1,0,12,12,0,0,0,13.9,19.56,84.09,84.09,0,0,1,97.3,0A12,12,0,1,0,318.63,304Z\" />\n  <path [class.inactive]=\"numberValue < 2\" d=\"M377,247.56a188,188,0,0,0-240.64,0A12,12,0,1,0,151.68,266a164,164,0,0,1,209.92,0A12,12,0,0,0,377,247.56Z\" />\n  <path [class.inactive]=\"numberValue < 3\" d=\"M433.21,191a268,268,0,0,0-354.42,0,12,12,0,1,0,15.86,18,244,244,0,0,1,322.7,0,12,12,0,0,0,15.86-18Z\" />\n  <circle cx=\"256\" cy=\"372.22\" r=\"16\" />\n  <g *ngIf=\"numberValue < 1\">\n    <path d=\"M412,352a12,12,0,0,0,12-12V263.78a12,12,0,0,0-24,0V340A12,12,0,0,0,412,352Z\" />\n    <path d=\"M412.18,400H412a12,12,0,0,0,0,24h.18a12,12,0,1,0,0-24Z\" />\n  </g>\n</svg>\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" *ngIf=\"!wlan\" [class.none]=\"numberValue < 1\">\n  <path [class.inactive]=\"numberValue < 2\" d=\"M128,228a12,12,0,0,0,0,24A132.14,132.14,0,0,1,260,384a12,12,0,0,0,24,0C284,298,214,228,128,228Z\" />\n  <path [class.inactive]=\"numberValue < 3\" d=\"M128,116a12,12,0,0,0,0,24A244,244,0,0,1,372,384a12,12,0,0,0,24,0A268,268,0,0,0,128,116Z\" />\n  <circle cx=\"144\" cy=\"368\" r=\"28\" />\n  <g *ngIf=\"numberValue < 1\">\n    <path d=\"M412,188.11a12,12,0,0,0,12-12V99.89a12,12,0,1,0-24,0v76.22A12,12,0,0,0,412,188.11Z\" />\n    <path d=\"M412.18,236.11H412a12,12,0,0,0,0,24h.18a12,12,0,0,0,0-24Z\" />\n  </g>\n</svg>\n",
      styles: ["svg{inline-size:1em;block-size:1em;fill:var(--element-ui-1)}svg.none,svg.none .inactive{fill:var(--element-status-danger)}svg .inactive{fill:var(--element-ui-3)}\n"]
    }]
  }], null, {
    wlan: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiConnectionStrengthModule {}
SiConnectionStrengthModule.ɵfac = function SiConnectionStrengthModule_Factory(t) {
  return new (t || SiConnectionStrengthModule)();
};
SiConnectionStrengthModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiConnectionStrengthModule
});
SiConnectionStrengthModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiConnectionStrengthModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule],
      declarations: [SiConnectionStrengthComponent],
      exports: [SiConnectionStrengthComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

class SiDropdownContainerComponent {
  get isDropup() {
    return this.parent?.isDropup ?? false;
  }
  get isDropstart() {
    return this.parent?.isDropstart ?? false;
  }
  get isDropend() {
    return this.parent?.isDropend ?? false;
  }
  constructor(element) {
    this.elementTransform = '';
    this.hide = false;
    this.content = element.nativeElement;
  }
  ngOnInit() {
    // Set a property of the HTML element for others to follow the chain without having to use the service.
    this.content.dropdownParentElement = this.parent.hostElement;
    this.addMenus();
  }
  ngOnDestroy() {
    this.removeMenus();
  }
  onKeyboardEvent(event) {
    if (this.parent) {
      const newEvent = new KeyboardEvent(event.type, event);
      event.stopPropagation();
      Object.defineProperty(newEvent, 'target', {
        writable: false,
        value: event.target
      });
      this.parent.hostElement.dispatchEvent(newEvent);
    }
  }
  onFocusEvent(event) {
    if (this.parent) {
      const newEvent = new FocusEvent(event.type, event);
      event.stopPropagation();
      Object.defineProperty(newEvent, 'target', {
        writable: false,
        value: event.target
      });
      this.parent.hostElement.dispatchEvent(newEvent);
    }
  }
  onMouseEvent(event) {
    if (this.parent) {
      const newEvent = new MouseEvent(event.type, event);
      event.stopPropagation();
      Object.defineProperty(newEvent, 'target', {
        writable: false,
        value: event.target
      });
      this.parent.hostElement.dispatchEvent(newEvent);
    }
  }
  removeMenus() {
    if (this.parent) {
      this.parent.menus.forEach(menuContent => menuContent.parentElement?.appendChild(menuContent.content));
    }
  }
  addMenus() {
    if (this.parent) {
      this.parent.menus.forEach(menuContent => this.menu.nativeElement.appendChild(menuContent.content));
    }
  }
  setParent(parent) {
    this.parent = parent;
  }
}
SiDropdownContainerComponent.ɵfac = function SiDropdownContainerComponent_Factory(t) {
  return new (t || SiDropdownContainerComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
};
SiDropdownContainerComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiDropdownContainerComponent,
  selectors: [["si-dropdown-container"]],
  viewQuery: function SiDropdownContainerComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c13, 7, _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.menu = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function SiDropdownContainerComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown", function SiDropdownContainerComponent_keydown_HostBindingHandler($event) {
        return ctx.onKeyboardEvent($event);
      })("keyup", function SiDropdownContainerComponent_keyup_HostBindingHandler($event) {
        return ctx.onKeyboardEvent($event);
      })("keypress", function SiDropdownContainerComponent_keypress_HostBindingHandler($event) {
        return ctx.onKeyboardEvent($event);
      })("focus", function SiDropdownContainerComponent_focus_HostBindingHandler($event) {
        return ctx.onFocusEvent($event);
      })("blur", function SiDropdownContainerComponent_blur_HostBindingHandler($event) {
        return ctx.onFocusEvent($event);
      })("focusin", function SiDropdownContainerComponent_focusin_HostBindingHandler($event) {
        return ctx.onFocusEvent($event);
      })("focusout", function SiDropdownContainerComponent_focusout_HostBindingHandler($event) {
        return ctx.onFocusEvent($event);
      })("mousedown", function SiDropdownContainerComponent_mousedown_HostBindingHandler($event) {
        return ctx.onMouseEvent($event);
      })("mouseup", function SiDropdownContainerComponent_mouseup_HostBindingHandler($event) {
        return ctx.onMouseEvent($event);
      })("click", function SiDropdownContainerComponent_click_HostBindingHandler($event) {
        return ctx.onMouseEvent($event);
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("hidden", ctx.hide);
    }
  },
  decls: 2,
  vars: 8,
  consts: [[1, "dropdown"], ["menu", ""]],
  template: function SiDropdownContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 0, 1);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("transform", ctx.elementTransform);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dropup", ctx.isDropup)("dropstart", ctx.isDropstart)("dropend", ctx.isDropend);
    }
  },
  styles: [".hidden[_nghost-%COMP%]{visibility:hidden}.dropdown[_ngcontent-%COMP%]{position:absolute;top:0;left:0;block-size:auto;z-index:1065}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDropdownContainerComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-dropdown-container',
      template: "<div\n  #menu\n  class=\"dropdown\"\n  [style.transform]=\"elementTransform\"\n  [class.dropup]=\"isDropup\"\n  [class.dropstart]=\"isDropstart\"\n  [class.dropend]=\"isDropend\"\n></div>\n",
      styles: [":host.hidden{visibility:hidden}.dropdown{position:absolute;top:0;left:0;block-size:auto;z-index:1065}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }];
  }, {
    hide: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.hidden']
    }],
    menu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['menu', {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef,
        static: true
      }]
    }],
    onKeyboardEvent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keydown', ['$event']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keyup', ['$event']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keypress', ['$event']]
    }],
    onFocusEvent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focus', ['$event']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['blur', ['$event']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focusin', ['$event']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focusout', ['$event']]
    }],
    onMouseEvent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['mousedown', ['$event']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['mouseup', ['$event']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['click', ['$event']]
    }]
  });
})();
const RESIZE_THROTTLE_TIMEOUT$1 = 100;
const DEPRECATED_WARNING_PREFIX = '@simpl/element-ng - SiDropdownDirective: ';
class SiDropdownDirective {
  /**
   * Specifies the direction of the dropdown, can be `down`, `up`, `start`, `end`.
   * Per default it opens downwards.
   * @defaultref {@link _dropdownDirection}
   */
  set dropdownDirection(direction) {
    const deprecatedWarning = DEPRECATED_WARNING_PREFIX + 'Setting dropdownDirection to "left" or "right" is deprecated, use "start" or "end" instead';
    if (direction === 'left') {
      console.warn(deprecatedWarning);
      this._dropdownDirection = 'start';
    } else if (direction === 'right') {
      console.warn(deprecatedWarning);
      this._dropdownDirection = 'end';
    } else {
      this._dropdownDirection = direction;
    }
  }
  get dropdownDirection() {
    return this._dropdownDirection;
  }
  /**
   * Aligns the dropdown to a side, only works if the direction is not `start` or `end`.
   * Can be `start`, `center` and `end`, per default it aligns to the start.
   * @defaultref {@link _dropdownAlign}
   */
  set dropdownAlign(align) {
    const deprecatedWarning = DEPRECATED_WARNING_PREFIX + 'Setting dropdownAlign to "left" or "right" is deprecated, use "start" or "end" instead';
    if (align === 'left') {
      console.warn(deprecatedWarning);
      this._dropdownAlign = 'start';
    } else if (align === 'right') {
      console.warn(deprecatedWarning);
      this._dropdownAlign = 'end';
    } else {
      this._dropdownAlign = align;
    }
  }
  get dropdownAlign() {
    return this._dropdownAlign;
  }
  /**
   * Specifies custom placement of the dropdown menu(s). This overrides the placement
   * specified by the direction. Can include `start`, `end`, `top` and `bottom`.
   * @defaultref {@link _dropdownPlacement}
   */
  set dropdownPlacement(placement) {
    if (placement.includes('left') || placement.includes('right')) {
      console.warn(DEPRECATED_WARNING_PREFIX + 'Setting dropdownPlacement to values containing "left" or "right" is deprecated, use "start" or "end" instead');
      this._dropdownPlacement = placement.replace(/left/g, 'start').replace(/right/g, 'end');
    } else {
      this._dropdownPlacement = placement;
    }
  }
  get dropdownPlacement() {
    return this._dropdownPlacement;
  }
  /** Whether the dropdown is actually open. */
  get isOpen() {
    return this.isOpenForConsumer;
  }
  /** Whether the dropdown appears open. */
  get appearsOpen() {
    return this._menus.every(menu => menu.content.classList.contains('show'));
  }
  /**
   * @defaultref {@link _responsiveDirection}
   */
  set responsiveDirection(direction) {
    this._responsiveDirection = direction || 'down';
    this.cdRef.markForCheck();
    this.dropdownResponsiveDirectionChange.emit(this._responsiveDirection);
  }
  get responsiveDirection() {
    return this._responsiveDirection;
  }
  get menus() {
    return this._menus;
  }
  get toggles() {
    return this._toggles;
  }
  get isDropup() {
    return this.responsiveDirection === 'up';
  }
  get isDropstart() {
    return this.responsiveDirection === 'start';
  }
  get isDropend() {
    return this.responsiveDirection === 'end';
  }
  get dropdownShowClass() {
    return this.dropdownOpen;
  }
  // Document needs to be any because the Angular compiler does not know Document
  constructor(host, viewContainer, renderer, resizeObserver, zone, cdRef, parent, platformId) {
    this.viewContainer = viewContainer;
    this.renderer = renderer;
    this.resizeObserver = resizeObserver;
    this.zone = zone;
    this.cdRef = cdRef;
    this.parent = parent;
    /**
     * Disables the dropdown so it cannot be opened.
     */
    this.dropdownIsDisabled = false;
    /**
     * Opens the dropdown on changes, can be changed at any time.
     * To open it only on first load use {@link dropdownOpenOnLoad}
     */
    this.dropdownIsOpen = false;
    /**
     * Opens the dropdown when it first loads, to open it later use {@link dropdownIsOpen}.
     */
    this.dropdownOpenOnLoad = false;
    /**
     * Specifies whether the dropdown should be closed on selection of a dropdown item.
     */
    this.dropdownCloseOnSelect = true;
    /**
     * Specifies whether the dropdown should be closed on click outside.
     */
    this.dropdownCloseOnClickOut = true;
    /**
     * Specifies whether the dropdown should be closed on escape.
     */
    this.dropdownCloseOnEsc = true;
    this._dropdownDirection = 'down';
    this._dropdownAlign = 'start';
    /**
     * Specifies whether the dropdown menu(s) should be appended to another container.
     * It will still be positioned the same.
     */
    this.dropdownContainer = '';
    /**
     * Specifies whether the direction should automatically be flipped if there is not enough space in the container or its parents.
     */
    this.dropdownResponsiveDirection = false;
    /**
     * Specifies whether the direction should automatically be flipped also according to the placement reference and its parents.
     * Only relevant when `dropdownResponsiveDirection` is set to `true`.
     */
    this.dropdownResponsiveDirectionToPlacement = true;
    this._dropdownPlacement = '';
    /**
     * Specifies what the placement of the dropdown menu(s) should be relative to.
     */
    this.dropdownPlacementReference = '';
    /**
     * Specifies the selector to determine which elements inside the dropdown menu(s) are dropdown items.
     * The default selector targets the bootstrap `dropdown-item` class.
     */
    this.dropdownItemSelector = '.dropdown-item';
    /**
     * Specifies the selector to determine which elements inside the dropdown menu(s) are not dropdown items.
     * The default selector excepts the `dropdown-item-no-link` class.
     */
    this.dropdownItemSelectorException = '.dropdown-item-no-link';
    /**
     * Focuses the first menu on open of the dropdown.
     */
    this.dropdownFocusOnOpen = true;
    /**
     * Focuses the first toggle on close of the dropdown.
     */
    this.dropdownFocusOnClose = true;
    /**
     * Closes the dropdown when the menu(s) are not visible anymore.
     */
    this.closeOnMenuScrollOut = true;
    /**
     * Closes the dropdown when the placement reference is not visible anymore.
     * Only works when either `placementReference` or `dropdownContainer` is set.
     */
    this.closeOnPlacementReferenceScrollOut = true;
    /**
     * Emits the current dropdown state whenever it is opened or closed.
     */
    this.dropdownOnToggle = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Emits when any dropdown item inside the dropdown menu(s) is selected.
     * The event is the element of the dropdown item.
     */
    this.dropdownOnSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Emits when any the direction of the dropdown is changed, automatically or manually.
     * The event contains the new direction.
     */
    this.dropdownResponsiveDirectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Whether the dropdown has previously been opened.
     */
    this.dropdownOpened = false;
    // the consumer facing state
    this.isOpenForConsumer = false;
    this.dropdownOpen = false;
    this.loaded = false;
    this.containerHostElement = null;
    this.stateChangeTimeout = 0;
    this.displayContainerComponent = false;
    this.containerComponentDisplayed = false;
    this.reopenAfterContainerTimeout = 0;
    this.changeDirectionTimeout = 0;
    this.closeDropdownTimeout = 0;
    this._responsiveDirection = 'down';
    this.suppressOutsideClickInCurrentTick = false;
    this.focusOnOpenTimeout = 0;
    this._menus = [];
    this._toggles = [];
    this.children = [];
    this.dropdownClass = true;
    this.onPlacementReferenceScroll = () => this.placementReferenceScrollHandler();
    this.onClickOut = event => this.clickOutHandler(event);
    this.hostElement = host.nativeElement;
    this.isBrowser = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId);
    this.parent?.addChild(this);
  }
  ngOnInit() {
    this.updateInputs();
  }
  ngOnChanges() {
    this.updateInputs();
  }
  ngOnDestroy() {
    clearTimeout(this.changeDirectionTimeout);
    clearTimeout(this.stateChangeTimeout);
    clearTimeout(this.reopenAfterContainerTimeout);
    clearTimeout(this.focusOnOpenTimeout);
    clearTimeout(this.closeDropdownTimeout);
    this.parent?.removeChild(this);
    this.removeContainer();
    if (this.isBrowser) {
      removeEventListener('click', this.onClickOut);
      this.zone.runOutsideAngular(() => {
        removeEventListener('resize', this.onPlacementReferenceScroll);
        if (this.containerComponentDisplayed) {
          removeEventListener('scroll', this.onPlacementReferenceScroll, true);
        }
      });
    }
    this.resizeSubs?.unsubscribe();
  }
  updateInputs() {
    let close = false;
    if (!this.loaded) {
      this.loaded = true;
      if ((this.dropdownOpenOnLoad || this.dropdownIsOpen) && !this.dropdownIsDisabled) {
        this.open();
      }
    } else {
      if (this.dropdownOpen && this.dropdownIsDisabled) {
        this.close();
        close = true;
      } else if (!this.dropdownOpen && this.dropdownIsOpen) {
        this.open();
      }
    }
    this.responsiveDirection = this.dropdownDirection;
    this.resetContainerAndPlacement(close);
  }
  getPlacementReferenceElement() {
    return resolveReference(this.hostElement, this.dropdownPlacementReference) ?? this.hostElement;
  }
  resetContainerAndPlacement(close = false) {
    const wasOpen = this.dropdownOpen;
    if (wasOpen) {
      this.closeDropdown();
    }
    this.displayContainerComponent = false;
    const containerHost = resolveReference(this.hostElement, this.dropdownContainer);
    if (containerHost) {
      this.containerHostElement = containerHost;
      this.displayContainerComponent = true;
    } else if (this.dropdownResponsiveDirection || this.dropdownPlacement || this.dropdownPlacementReference || this.dropdownAlign === 'end' || this.dropdownAlign === 'center') {
      this.containerHostElement = this.hostElement;
      this.displayContainerComponent = true;
    } else {
      this.containerHostElement = null;
    }
    if (wasOpen && !close) {
      this.reopenAfterContainerTimeout = setTimeout(() => this.attemptDropdownOpen());
    }
  }
  responsivelyChangeDirection(placementReferenceElement, isScrolling = false) {
    if (this.dropdownResponsiveDirection && this.containerComponentDisplayed && this.dropdownOpen) {
      const {
        responsiveDirection,
        close
      } = responsivelyCheckDirection({
        isScrolling,
        currentDirection: this.dropdownDirection,
        contentElements: this._menus.map(menu => menu.content),
        hostElement: this.containerHostElement,
        placement: this.dropdownPlacement,
        placementReferenceElement,
        align: this.dropdownAlign,
        responsiveDirectionToPlacement: this.dropdownResponsiveDirectionToPlacement,
        closeOnPlacementReferenceScrollOut: this.closeOnPlacementReferenceScrollOut,
        closeOnContentScrollOut: this.closeOnMenuScrollOut
      });
      if (responsiveDirection && responsiveDirection !== this.responsiveDirection) {
        // wont emit but value is there for position update; emit in zone
        this._responsiveDirection = responsiveDirection;
        this.zone.run(() => {
          if (close) {
            this.closeDropdown();
          }
          this.responsiveDirection = responsiveDirection;
        });
      } else if (close) {
        this.zone.run(() => this.closeDropdown());
      }
    }
  }
  addMenu(menu) {
    this._menus.push(menu);
    if (this.containerComponentDisplayed) {
      this.containerComponent.removeMenus();
      this.containerComponent.addMenus();
    }
    menu.updateState(this.dropdownOpen, this.getActualAlign());
  }
  removeMenu(menu) {
    const menuIndex = this._menus.indexOf(menu);
    if (menuIndex >= 0) {
      this._menus.splice(menuIndex, 1);
      if (this.containerComponentDisplayed) {
        this.containerComponent.removeMenus();
        this.containerComponent.addMenus();
      }
    }
  }
  placementReferenceScrollHandler() {
    if (this.dropdownOpen && this.containerComponentDisplayed) {
      const placementReferenceElement = this.getPlacementReferenceElement();
      this.responsivelyChangeDirection(placementReferenceElement, true);
      const position = getContentPositionString({
        contentElement: this.containerComponent.content,
        direction: this.responsiveDirection,
        placement: this.dropdownPlacement,
        placementReferenceElement,
        align: this.dropdownAlign
      });
      if (position !== this.containerComponent.elementTransform) {
        this.zone.run(() => {
          this.containerComponent.elementTransform = position;
          this.cdRef.markForCheck();
        });
      }
    }
  }
  addContainer() {
    if (!this.containerComponentDisplayed) {
      this.containerComponentRef = this.viewContainer.createComponent(SiDropdownContainerComponent);
      this.containerComponent = this.containerComponentRef.instance;
      this.containerComponent.setParent(this);
      this.renderer.appendChild(this.containerHostElement, this.containerComponent.content);
      this.containerComponentDisplayed = true;
      // Set a property of the HTML element for others to follow the chain without having to use the service.
      this.hostElement.dropdownChildren = this.containerComponent.content.children;
    }
  }
  removeContainer() {
    if (this.containerComponentDisplayed) {
      if (this.containerHostElement.contains(this.containerComponent.content)) {
        this.renderer.removeChild(this.containerHostElement, this.containerComponent.content);
      }
      this.containerComponentRef.destroy();
      this.containerComponentDisplayed = false;
      delete this.hostElement.dropdownChildren;
    }
  }
  clickOutHandler(event) {
    const target = event.target;
    if (!this.suppressOutsideClickInCurrentTick && this.dropdownOpen && this.dropdownCloseOnClickOut && !this.isElementOfAnyDropdownInHierarchy(target)) {
      this.closeDropdown();
    }
  }
  onKeydown(event) {
    const target = event.target;
    if (this.dropdownCloseOnEsc && !this.isElementOfAnyChildDropdownInHierarchy(target)) {
      this.closeDropdown();
    }
  }
  /** Toggles the dropdown. */
  toggle() {
    if (!this.dropdownIsDisabled) {
      if (this.dropdownOpen) {
        this.closeDropdown();
      } else {
        this.attemptDropdownOpen();
      }
    }
  }
  /** Opens the dropdown. */
  open() {
    if (!this.dropdownIsDisabled) {
      this.attemptDropdownOpen();
    }
  }
  /** Closes the dropdown. */
  close() {
    this.closeDropdown();
  }
  addToggle(toggle) {
    this._toggles.push(toggle);
  }
  removeToggle(toggle) {
    this._toggles.splice(this._toggles.indexOf(toggle));
  }
  addChild(child) {
    this.children.push(child);
  }
  removeChild(child) {
    this.children.splice(this.children.indexOf(child));
  }
  waitForVisibilityChange() {
    if (this.containerHostElement && (this.containerHostElement.offsetParent || window.getComputedStyle(this.containerHostElement).position === 'fixed' && window.getComputedStyle(this.containerHostElement).display !== 'none' || this.containerHostElement === document.body || this.containerHostElement === document.documentElement)) {
      this.resizeSubs?.unsubscribe();
      this.openDropdown();
    }
  }
  attemptDropdownOpen() {
    if (this.containerHostElement && this.containerHostElement !== document.body && this.containerHostElement !== document.documentElement && !(this.containerHostElement.offsetParent || window.getComputedStyle(this.containerHostElement).position === 'fixed' || window.getComputedStyle(this.containerHostElement).display !== 'none')) {
      this.resizeSubs?.unsubscribe();
      this.resizeSubs = this.resizeObserver.observe(this.containerHostElement, RESIZE_THROTTLE_TIMEOUT$1, true, true).subscribe(() => this.waitForVisibilityChange());
    } else {
      this.openDropdown();
    }
  }
  openDropdown() {
    this.suppressOutsideClickInCurrentTick = true;
    setTimeout(() => this.suppressOutsideClickInCurrentTick = false);
    if (!this.dropdownOpen) {
      if (this.displayContainerComponent) {
        this.addContainer();
        if (this.dropdownResponsiveDirection) {
          this.containerComponent.hide = true;
        }
      }
      this.responsiveDirection = this.dropdownDirection;
      clearTimeout(this.closeDropdownTimeout);
      this.dropdownOpen = true;
      this.dropdownOpened = true;
      if (this.displayContainerComponent) {
        setTimeout(() => {
          this.isOpenForConsumer = true;
          this.dropdownOnToggle.emit(this.isOpenForConsumer);
        });
      } else {
        this.isOpenForConsumer = true;
        this.dropdownOnToggle.emit(this.isOpenForConsumer);
      }
      setTimeout(() => addEventListener('click', this.onClickOut));
      this._toggles.forEach(dropdownToggle => dropdownToggle.updateState(true));
      const align = this.getActualAlign();
      this._menus.forEach(dropdownMenu => dropdownMenu.updateState(true, align));
      if (this.containerComponentDisplayed) {
        this.zone.runOutsideAngular(() => {
          // Add event listener to window as capturing to handle tested element scrolling
          addEventListener('scroll', this.onPlacementReferenceScroll, true);
          // here we _actually_ want window.resize, nothing else since this is about a fixed position
          addEventListener('resize', this.onPlacementReferenceScroll);
        });
        this.containerComponent.elementTransform = getContentPositionString({
          contentElement: this.containerComponent.content,
          direction: this.responsiveDirection,
          placement: this.dropdownPlacement,
          placementReferenceElement: this.getPlacementReferenceElement(),
          align: this.dropdownAlign
        });
      }
      this.changeDirectionTimeout = setTimeout(() => {
        this.changeDirectionTimeout = 0;
        const placementReferenceElement = this.getPlacementReferenceElement();
        this.responsivelyChangeDirection(placementReferenceElement);
        if (this.containerComponentDisplayed) {
          this.containerComponent.elementTransform = getContentPositionString({
            contentElement: this.containerComponent.content,
            direction: this.responsiveDirection,
            placement: this.dropdownPlacement,
            placementReferenceElement,
            align: this.dropdownAlign
          });
        }
        if (this.containerComponent) {
          this.containerComponent.hide = false;
          this.cdRef.detectChanges();
        }
      });
      if (this.dropdownFocusOnOpen) {
        this.focusOnOpenTimeout = window.setTimeout(() => {
          this.focusOnOpenTimeout = 0;
          if (this._menus.length) {
            this._menus[0].content.focus();
          }
        });
      }
    }
  }
  closeDropdown() {
    if (this.dropdownOpen) {
      this.responsiveDirection = this.dropdownDirection;
      clearTimeout(this.closeDropdownTimeout);
      this.dropdownOpen = false;
      this.closeDropdownTimeout = setTimeout(() => {
        this.isOpenForConsumer = false;
        this.dropdownOnToggle.emit(this.isOpenForConsumer);
      });
      removeEventListener('click', this.onClickOut);
      this._toggles.forEach(dropdownToggle => dropdownToggle.updateState(false));
      this._menus.forEach(dropdownMenu => dropdownMenu.updateState(false));
      if (this.containerComponentDisplayed) {
        this.zone.runOutsideAngular(() => {
          removeEventListener('scroll', this.onPlacementReferenceScroll, true);
          removeEventListener('resize', this.onPlacementReferenceScroll);
        });
      }
      if (this.displayContainerComponent) {
        this.removeContainer();
      }
      if (this.dropdownFocusOnClose && this._toggles.length) {
        this._toggles[0].content.focus();
      }
      this.children.forEach(child => child.closeDropdown());
      this.cdRef.markForCheck();
    }
  }
  getActualAlign() {
    return this.responsiveDirection === 'start' || this.responsiveDirection === 'end' ? 'none' : this.dropdownAlign;
  }
  /** Selects a dropdown item. */
  selectItem(item) {
    this.dropdownOnSelect.emit(item);
    if (this.isElementOfDropdown(item) && !this.isDropdownToggleForDirectChild(item) && !this.isElementOfAnyChildDropdownInHierarchy(item)) {
      this.close();
    }
  }
  isElementOfAnyDropdownInHierarchy(item) {
    return this.isElementOfDropdown(item) || this.isElementOfAnyChildDropdownInHierarchy(item);
  }
  isElementOfAnyChildDropdownInHierarchy(item) {
    return this.children.some(child => child.isElementOfAnyDropdownInHierarchy(item));
  }
  isElementOfDropdown(item) {
    return this._menus.some(menu => menu.content.contains(item));
  }
  isDropdownToggleForDirectChild(item) {
    return this.children.some(child => child.toggles.some(toggle => toggle.content.contains(item)));
  }
}
SiDropdownDirective.ɵfac = function SiDropdownDirective_Factory(t) {
  return new (t || SiDropdownDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ResizeObserverService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiDropdownDirective, 12), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID));
};
SiDropdownDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiDropdownDirective,
  selectors: [["", "siDropdown", ""]],
  hostVars: 10,
  hostBindings: function SiDropdownDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.escape", function SiDropdownDirective_keydown_escape_HostBindingHandler($event) {
        return ctx.onKeydown($event);
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dropdown", ctx.dropdownClass)("dropup", ctx.isDropup)("dropstart", ctx.isDropstart)("dropend", ctx.isDropend)("show", ctx.dropdownShowClass);
    }
  },
  inputs: {
    dropdownIsDisabled: "dropdownIsDisabled",
    dropdownIsOpen: "dropdownIsOpen",
    dropdownOpenOnLoad: "dropdownOpenOnLoad",
    dropdownCloseOnSelect: "dropdownCloseOnSelect",
    dropdownCloseOnClickOut: "dropdownCloseOnClickOut",
    dropdownCloseOnEsc: "dropdownCloseOnEsc",
    dropdownDirection: "dropdownDirection",
    dropdownAlign: "dropdownAlign",
    dropdownContainer: "dropdownContainer",
    dropdownResponsiveDirection: "dropdownResponsiveDirection",
    dropdownResponsiveDirectionToPlacement: "dropdownResponsiveDirectionToPlacement",
    dropdownPlacement: "dropdownPlacement",
    dropdownPlacementReference: "dropdownPlacementReference",
    dropdownItemSelector: "dropdownItemSelector",
    dropdownItemSelectorException: "dropdownItemSelectorException",
    dropdownFocusOnOpen: "dropdownFocusOnOpen",
    dropdownFocusOnClose: "dropdownFocusOnClose",
    closeOnMenuScrollOut: "closeOnMenuScrollOut",
    closeOnPlacementReferenceScrollOut: "closeOnPlacementReferenceScrollOut"
  },
  outputs: {
    dropdownOnToggle: "dropdownOnToggle",
    dropdownOnSelect: "dropdownOnSelect",
    dropdownResponsiveDirectionChange: "dropdownResponsiveDirectionChange"
  },
  exportAs: ["si-dropdown"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDropdownDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siDropdown]',
      exportAs: 'si-dropdown'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2
    }, {
      type: ResizeObserverService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }, {
      type: SiDropdownDirective,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }];
  }, {
    dropdownIsDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownIsOpen: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownOpenOnLoad: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownCloseOnSelect: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownCloseOnClickOut: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownCloseOnEsc: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownDirection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownAlign: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownContainer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownResponsiveDirection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownResponsiveDirectionToPlacement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownPlacement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownPlacementReference: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownItemSelector: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownItemSelectorException: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownFocusOnOpen: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownFocusOnClose: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    closeOnMenuScrollOut: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    closeOnPlacementReferenceScrollOut: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownOnToggle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    dropdownOnSelect: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    dropdownResponsiveDirectionChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    dropdownClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.dropdown']
    }],
    isDropup: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.dropup']
    }],
    isDropstart: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.dropstart']
    }],
    isDropend: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.dropend']
    }],
    dropdownShowClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.show']
    }],
    onKeydown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keydown.escape', ['$event']]
    }]
  });
})();
class SiDropdownMenuDirective {
  constructor(element, siDropdownDirective) {
    this.siDropdownDirective = siDropdownDirective;
    /**
     * Whether the dropdown has previously been opened.
     */
    this.dropdownOpened = false;
    this.dropdownMenuClass = true;
    this.dropdownOpen = false;
    this.alignStart = true;
    this.alignEnd = false;
    this.alignCenter = false;
    this.tabindex = -1;
    this.content = element.nativeElement;
  }
  ngOnInit() {
    this.siDropdownDirective.addMenu(this);
    this.parentElement = this.content.parentElement;
  }
  ngOnDestroy() {
    this.siDropdownDirective.removeMenu(this);
  }
  updateState(state, align = '') {
    this.alignCenter = align === 'center';
    this.alignStart = !align || align === 'start';
    this.alignEnd = align === 'end';
    this.dropdownOpen = state;
    if (state) {
      this.dropdownOpened = true;
    }
  }
  onClickOrKeydown(event) {
    let currentTarget = event.target;
    const itemSelector = this.siDropdownDirective.dropdownItemSelector;
    const itemSelectorException = this.siDropdownDirective.dropdownItemSelectorException;
    while (currentTarget && currentTarget !== this.content && (!currentTarget.matches(itemSelector) || currentTarget.matches(itemSelectorException))) {
      currentTarget = currentTarget.parentElement;
    }
    if (currentTarget && currentTarget !== this.content && currentTarget.matches(itemSelector) && !currentTarget.matches(itemSelectorException)) {
      if (!currentTarget.classList.contains('disabled')) {
        this.siDropdownDirective.selectItem(currentTarget);
      }
    }
  }
}
SiDropdownMenuDirective.ɵfac = function SiDropdownMenuDirective_Factory(t) {
  return new (t || SiDropdownMenuDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiDropdownDirective));
};
SiDropdownMenuDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiDropdownMenuDirective,
  selectors: [["", "siDropdownMenu", ""]],
  hostVars: 11,
  hostBindings: function SiDropdownMenuDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDropdownMenuDirective_click_HostBindingHandler($event) {
        return ctx.onClickOrKeydown($event);
      })("keydown.enter", function SiDropdownMenuDirective_keydown_enter_HostBindingHandler($event) {
        return ctx.onClickOrKeydown($event);
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵhostProperty"]("tabindex", ctx.tabindex);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dropdown-menu", ctx.dropdownMenuClass)("show", ctx.dropdownOpen)("align-start", ctx.alignStart)("align-end", ctx.alignEnd)("align-center", ctx.alignCenter);
    }
  },
  inputs: {
    tabindex: "tabindex"
  },
  exportAs: ["si-dropdown-menu"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDropdownMenuDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siDropdownMenu]',
      exportAs: 'si-dropdown-menu'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: SiDropdownDirective
    }];
  }, {
    dropdownMenuClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.dropdown-menu']
    }],
    dropdownOpen: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.show']
    }],
    alignStart: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.align-start']
    }],
    alignEnd: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.align-end']
    }],
    alignCenter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.align-center']
    }],
    tabindex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['tabindex']
    }],
    onClickOrKeydown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['click', ['$event']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keydown.enter', ['$event']]
    }]
  });
})();
class SiDropdownToggleDirective {
  constructor(element, siDropdownDirective) {
    this.siDropdownDirective = siDropdownDirective;
    this.toggleExecutedInTick = false;
    this.dropdownOpen = false;
    this.content = element.nativeElement;
  }
  ngAfterViewInit() {
    this.setA11y(false);
  }
  ngOnDestroy() {
    this.siDropdownDirective.removeToggle(this);
  }
  ngOnInit() {
    this.siDropdownDirective.addToggle(this);
  }
  updateState(state) {
    this.dropdownOpen = state;
    this.setA11y(state);
  }
  setA11y(state) {
    const menuItem = this.content.querySelector('[role=menuitem]');
    if (menuItem) {
      menuItem.setAttribute('aria-expanded', `${state}`);
      menuItem.setAttribute('aria-haspopup', 'true');
    } else {
      this.content.setAttribute('aria-expanded', `${state}`);
      this.content.setAttribute('aria-haspopup', 'true');
    }
  }
  open() {
    this.siDropdownDirective.open();
  }
  close() {
    this.siDropdownDirective.close();
  }
  onClick() {
    // when toggle is used on a button, enter also fires a click event --> suppressing it.
    if (!this.toggleExecutedInTick) {
      this.siDropdownDirective.toggle();
      this.toggleExecutedInTick = true;
      setTimeout(() => this.toggleExecutedInTick = false);
    }
  }
}
SiDropdownToggleDirective.ɵfac = function SiDropdownToggleDirective_Factory(t) {
  return new (t || SiDropdownToggleDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiDropdownDirective));
};
SiDropdownToggleDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiDropdownToggleDirective,
  selectors: [["", "siDropdownToggle", ""]],
  hostVars: 2,
  hostBindings: function SiDropdownToggleDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDropdownToggleDirective_click_HostBindingHandler() {
        return ctx.onClick();
      })("keydown.enter", function SiDropdownToggleDirective_keydown_enter_HostBindingHandler() {
        return ctx.onClick();
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("show", ctx.dropdownOpen);
    }
  },
  exportAs: ["si-dropdown-toggle"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDropdownToggleDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siDropdownToggle]',
      exportAs: 'si-dropdown-toggle'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: SiDropdownDirective
    }];
  }, {
    dropdownOpen: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.show']
    }],
    onClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['click']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keydown.enter']
    }]
  });
})();
class SiListInteractionService {
  constructor() {
    this.interactableLists = [];
    this.interactableListItems = [];
    this.changeQueue = [];
  }
  /**
   * Add an interactable list and add it to `listsAndItemsChanges`.
   * Return the interactable list object.
   */
  addInteractableList(directive, element, triggerDefined, position, orientation, focusLastFromParent, isSubList, calculatedCallback) {
    const list = {
      directive,
      element,
      items: [],
      integratedNestedItems: [],
      integratedParentItem: null,
      allItemsQueryList: new _angular_core__WEBPACK_IMPORTED_MODULE_0__.QueryList(),
      nested: [],
      nestedDisconnected: [],
      parent: null,
      parentDisconnected: null,
      trigger: null,
      triggerDefined: new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(triggerDefined),
      position: new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(position),
      orientation: new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(orientation),
      focusLastFromParent: new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(focusLastFromParent),
      changeToProcess: true,
      isSubList,
      calculatedCallback
    };
    this.enqueueChange({
      object: list,
      type: 'list',
      change: 'add'
    });
    return list;
  }
  /**
   * Remove an interactable list and add it to `listsAndItemsChanges`.
   */
  removeInteractableList(list) {
    this.enqueueChange({
      object: list,
      type: 'list',
      change: 'remove'
    });
  }
  /**
   * Add an interactable list item and add it to `listsAndItemsChanges`.
   * Return the interactable list item object.
   */
  addInteractableListItem(directive, element) {
    const item = {
      directive,
      element,
      parent: null,
      child: null,
      parentIntegrationIndex: -1,
      nestedIntegration: false
    };
    this.enqueueChange({
      object: item,
      type: 'item',
      change: 'add'
    });
    return item;
  }
  /**
   * Remove an interactable list item and add it to `listsAndItemsChanges`.
   */
  removeInteractableListItem(item) {
    this.enqueueChange({
      object: item,
      type: 'item',
      change: 'remove'
    });
  }
  /**
   * Check if a HTMLElement is a child of a interactable list item.
   * First properly follows any possible dropdown containers through the DOM chain,
   * then continues of the list interaction chain.
   */
  isChildElementOfItem(item, element) {
    let currentItem = this.getClosestRelativeItem(element, true);
    if (currentItem) {
      do {
        if (currentItem.element === item.element) {
          return true;
        }
        currentItem = currentItem.parent ? currentItem.parent.trigger ?? (currentItem.parent.parentDisconnected ? currentItem.parent.parentDisconnected.trigger : null) : null;
      } while (currentItem);
    }
    return false;
  }
  enqueueChange(change) {
    this.changeQueue.push(change);
    if (this.queueTimer) {
      return;
    }
    this.queueTimer = setTimeout(() => {
      this.processChanges(this.changeQueue);
      this.changeQueue = [];
      this.queueTimer = undefined;
    });
  }
  /**
   * Process the changes after the buffer and queue up all the necessary
   * operations and callbacks. Then execute them.
   */
  processChanges(changes) {
    const operations = ['listSetChildItems', 'listSetNestedLists', 'listSetTriggerItem', 'listSetIntegratedItems'];
    const allOperations = {
      'listSetChildItems': [],
      'listSetNestedLists': [],
      'listSetTriggerItem': [],
      'listSetIntegratedItems': []
    };
    const operationsToProcess = {
      'listSetChildItems': {
        lists: [],
        callbacks: []
      },
      'listSetNestedLists': {
        lists: [],
        callbacks: []
      },
      'listSetTriggerItem': {
        lists: [],
        callbacks: []
      },
      'listSetIntegratedItems': {
        lists: [],
        callbacks: []
      }
    };
    /**
     * Add a callback function to an operation in `operationsToProcess`.
     */
    const addOperationCallback = (operation, callback) => {
      operationsToProcess[operation].callbacks.push(callback);
    };
    /**
     * Add a list to an operation in `operationsToProcess`, only if there is not
     * already one inside.
     */
    const addOperation = (operation, list, callback) => {
      const operationObject = operationsToProcess[operation];
      const allArray = allOperations[operation];
      if (!allArray.find(operationList => operationList.element === list.element)) {
        operationObject.lists.push(list);
        allArray.push(list);
      }
      if (operation === 'listSetChildItems' || operation === 'listSetNestedLists') {
        removeOperation('listSetIntegratedItems', list);
      }
      if (callback) {
        addOperationCallback(operation, callback);
      }
    };
    /**
     * Remove a list from an operation in `allOperations`.
     */
    const removeOperation = (operation, list) => {
      const operationObject = allOperations[operation];
      const listIndex = operationObject.findIndex(searchList => searchList.element === list.element);
      if (listIndex !== -1) {
        operationObject.splice(listIndex, 1);
      }
    };
    /**
     * The precedence of the changes.
     */
    const changePrecedence = {
      'remove': 1,
      'add': 2,
      'changes': 3
    };
    /**
     * The changes to process after they have been filtered to remove
     * duplicate (and unnecessary) changes. Sort them according to
     * `changePrecedence`.
     */
    const sortedAndFilteredChanges = changes.filter((change, index) => {
      const isChanges = change.change === 'changes';
      const duplicates = [];
      const duplicateAddRemove = [];
      const duplicateChange = [];
      changes.forEach((searchChange, searchChangeIndex) => {
        if (searchChange.object.element === change.object.element) {
          const item = {
            change: searchChange,
            index: searchChangeIndex
          };
          duplicates.push(item);
          if (searchChange.change !== 'changes') {
            duplicateAddRemove.push(item);
          } else if (isChanges) {
            duplicateChange.push(item);
          }
        }
      });
      if (duplicates.length > 1) {
        const addRemoveStart = duplicateAddRemove.length ? duplicateAddRemove[0].change.change : '';
        const addRemoveEnd = duplicateAddRemove.length ? duplicateAddRemove[duplicateAddRemove.length - 1].change.change : '';
        if (isChanges) {
          if (addRemoveStart !== '' && addRemoveStart === addRemoveEnd) {
            return false;
          } else if (duplicateChange[duplicateChange.length - 1].index !== index) {
            return false;
          }
        } else {
          if (addRemoveStart === '' || addRemoveStart !== addRemoveEnd) {
            return false;
          } else if (duplicates[duplicates.length - 1].index !== index) {
            return false;
          }
        }
      }
      return true;
    }).sort((a, b) => changePrecedence[a.change] - changePrecedence[b.change]);
    /**
     * Go through the changes in `sortedAndFilteredChanges` and add operations
     * and callbacks for every change.
     */
    sortedAndFilteredChanges.forEach(change => {
      const actualChange = change.change;
      switch (actualChange) {
        case 'add':
          if (change.type === 'list') {
            const list = change.object;
            this.interactableLists.push(list);
            list.triggerDefined.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_35__.skip)(1)).subscribe(() => {
              this.enqueueChange({
                object: list,
                type: 'list',
                change: 'changes'
              });
            });
            list.position.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_35__.skip)(1)).subscribe(() => {
              this.enqueueChange({
                object: list,
                type: 'list',
                change: 'changes'
              });
            });
            list.orientation.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_35__.skip)(1)).subscribe(() => {
              this.enqueueChange({
                object: list,
                type: 'list',
                change: 'changes'
              });
            });
            list.focusLastFromParent.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_35__.skip)(1)).subscribe(() => {
              this.enqueueChange({
                object: list,
                type: 'list',
                change: 'changes'
              });
            });
            addOperation('listSetChildItems', list);
            addOperation('listSetNestedLists', list, () => list.nested.forEach(nestedList => addOperation('listSetTriggerItem', nestedList)));
            addOperation('listSetIntegratedItems', list, () => {
              if (list.isSubList) {
                const parent = list.parent ?? this.getClosestParent(list.element);
                if (parent) {
                  addOperation('listSetNestedLists', parent);
                  addOperation('listSetTriggerItem', list);
                  addOperation('listSetIntegratedItems', parent);
                }
              } else {
                const parentDisconnected = list.parentDisconnected ?? this.getClosestParent(list.element);
                if (parentDisconnected) {
                  addOperation('listSetNestedLists', parentDisconnected);
                  addOperation('listSetIntegratedItems', parentDisconnected);
                }
              }
            });
          } else {
            const item = change.object;
            this.interactableListItems.push(item);
            addOperationCallback('listSetChildItems', () => {
              const parent = item.parent ?? this.getClosestParent(item.element);
              if (parent) {
                addOperation('listSetChildItems', parent);
                addOperationCallback('listSetNestedLists', () => {
                  parent.nested.forEach(parentNestedList => addOperation('listSetTriggerItem', parentNestedList));
                  const grandparent = parent.parent;
                  if (grandparent) {
                    addOperation('listSetIntegratedItems', grandparent);
                  }
                });
                addOperation('listSetIntegratedItems', parent);
              }
            });
          }
          break;
        case 'remove':
          if (change.type === 'list') {
            const listIndex = this.interactableLists.findIndex(interactableList => interactableList.element === change.object.element);
            const list = change.object;
            this.interactableLists.splice(listIndex, 1);
            list.nested.forEach(nestedList => addOperation('listSetTriggerItem', nestedList));
            list.items.forEach(item => item.parent = null);
            list.integratedNestedItems.forEach(item => item.parentIntegrationIndex = -1);
            const integratedParentItem = list.integratedParentItem;
            if (integratedParentItem) {
              integratedParentItem.nestedIntegration = false;
            }
            const parent = list.parent;
            if (parent) {
              addOperation('listSetChildItems', parent);
              addOperation('listSetNestedLists', parent);
              addOperation('listSetIntegratedItems', parent);
              const grandparent = parent.parent;
              if (grandparent) {
                addOperation('listSetIntegratedItems', grandparent);
              }
              list.parent = null;
            } else {
              const parentDisconnected = list.parent;
              if (parentDisconnected) {
                addOperation('listSetChildItems', parentDisconnected);
                addOperation('listSetNestedLists', parentDisconnected);
                addOperation('listSetIntegratedItems', parentDisconnected);
                list.parentDisconnected = null;
              }
              list.triggerDefined.complete();
              list.position.complete();
              list.orientation.complete();
              list.focusLastFromParent.complete();
            }
            const parentItem = list.trigger;
            if (parentItem) {
              const listTrigger = list.trigger;
              if (listTrigger && listTrigger.child?.element === list.element) {
                listTrigger.child = null;
              }
            }
          } else {
            const itemIndex = this.interactableListItems.findIndex(interactableListItem => interactableListItem.element === change.object.element);
            const item = change.object;
            this.interactableListItems.splice(itemIndex, 1);
            const parent = item.parent;
            if (parent) {
              addOperation('listSetChildItems', parent);
              const grandparent = parent.parent;
              if (grandparent) {
                addOperation('listSetIntegratedItems', grandparent);
              }
              const childList = item.child;
              if (childList) {
                item.child = null;
                addOperation('listSetTriggerItem', childList);
                addOperation('listSetIntegratedItems', parent);
              }
            }
          }
          break;
        case 'changes':
          const changeList = change.object;
          addOperation('listSetTriggerItem', changeList, () => {
            const changeParent = changeList.parent;
            if (changeParent) {
              addOperation('listSetIntegratedItems', changeParent);
            }
          });
          addOperation('listSetIntegratedItems', changeList);
          break;
      }
    });
    /**
     * Execute the queued operations and callbacks in order.
     * (Important) Callbacks can add operations, also for previously
     * executed operations.
     */
    const executeOperations = () => {
      for (let i = 0; i < operations.length; i++) {
        const currentOperation = operations[i];
        const operationObject = operationsToProcess[currentOperation];
        operationObject.lists.forEach(list => this[currentOperation](list));
        operationObject.lists = [];
        operationObject.callbacks.forEach(callback => callback());
        operationObject.callbacks = [];
        for (let u = 0; u < i + 1; u++) {
          const currentCheckOperation = operations[u];
          if (operationsToProcess[currentCheckOperation].lists.length > 0) {
            executeOperations();
            break;
          }
        }
      }
    };
    executeOperations();
    /**
     * Execute `listSetAllItemsQueryList` for every list that had
     * relevant changes.
     */
    this.interactableLists.forEach(interactableList => {
      if (interactableList.changeToProcess) {
        interactableList.changeToProcess = false;
        this.listSetAllItemsQueryList(interactableList);
      }
    });
    sortedAndFilteredChanges.forEach(change => {
      if (change.change === 'add' && change.type === 'list' && change.object.calculatedCallback) {
        change.object.calculatedCallback();
      }
    });
  }
  /**
   * Set all the child items of an interactable list.
   */
  listSetChildItems(list) {
    list.items.forEach(item => {
      if (item.parent?.element === list?.element) {
        item.parent = null;
      }
    });
    list.changeToProcess = true;
    list.items = this.getChildItems(list.element);
    list.items.forEach(item => {
      const oldParent = item.parent;
      if (oldParent && oldParent.element !== list.element) {
        const oldParentChildIndex = oldParent.items.findIndex(parentChildItem => parentChildItem.element === item.element);
        if (oldParentChildIndex >= 0) {
          oldParent.changeToProcess = true;
          oldParent.items.splice(oldParentChildIndex, 1);
        }
      }
      item.parent = list;
    });
  }
  /**
   * Set all the nested lists of an interactable list.
   */
  listSetNestedLists(list) {
    list.nested.forEach(nestedList => {
      if (nestedList.parent?.element === list?.element) {
        nestedList.parent = null;
      }
    });
    list.nestedDisconnected.forEach(nestedList => {
      if (nestedList.parentDisconnected?.element === list?.element) {
        nestedList.parentDisconnected = null;
      }
    });
    const subList = [];
    const nonSubList = [];
    for (const item of this.getNestedLists(list.element)) {
      if (item.isSubList) {
        subList.push(item);
      } else {
        nonSubList.push(item);
      }
    }
    list.nested = subList;
    subList.forEach(nestedList => {
      const oldParent = nestedList.parent;
      if (oldParent) {
        const oldParentNestedListIndex = oldParent.nested.findIndex(parentNestedList => parentNestedList.element === nestedList.element);
        if (oldParentNestedListIndex >= 0) {
          oldParent.nested.splice(oldParentNestedListIndex, 1);
        }
      }
      nestedList.parent = list;
    });
    list.nestedDisconnected = nonSubList;
    nonSubList.forEach(nestedList => {
      const oldParent = nestedList.parentDisconnected;
      if (oldParent) {
        const oldParentNestedListIndex = oldParent.nestedDisconnected.findIndex(parentNestedList => parentNestedList.element === nestedList.element);
        if (oldParentNestedListIndex >= 0) {
          oldParent.nestedDisconnected.splice(oldParentNestedListIndex, 1);
        }
      }
      nestedList.parentDisconnected = list;
    });
  }
  /**
   * Set the trigger/parent item of an interactable list.
   */
  listSetTriggerItem(list) {
    const listTrigger = list.trigger;
    if (listTrigger && listTrigger.child?.element === list.element) {
      listTrigger.child = null;
    }
    list.trigger = null;
    const setParentItem = list.triggerDefined.value;
    let parentItem;
    if (setParentItem) {
      const setParentItemHost = setParentItem.getHostElement();
      parentItem = this.interactableListItems.find(item => item.element === setParentItemHost);
    } else {
      parentItem = this.getClosestRelativeItem(list.element);
    }
    if (parentItem) {
      const oldChild = parentItem.child;
      if (oldChild) {
        oldChild.trigger = null;
      }
      parentItem.child = list;
      list.trigger = parentItem;
    } else {
      list.trigger = null;
    }
  }
  /**
   * Set the integrated items (nested or parent) of an interactable list.
   * This is used to connect sub/parent interactable lists depending on
   * the position of the nested interactable lists.
   */
  listSetIntegratedItems(list) {
    list.integratedNestedItems.forEach(integratedNestedItem => {
      integratedNestedItem.parentIntegrationIndex = -1;
    });
    list.integratedNestedItems = [];
    list.changeToProcess = true;
    list.nested.forEach(nestedList => {
      const integratedParentItem = nestedList.integratedParentItem;
      if (integratedParentItem) {
        integratedParentItem.nestedIntegration = false;
      }
      nestedList.integratedParentItem = null;
      nestedList.changeToProcess = true;
      const nestedListTrigger = nestedList.trigger;
      if (nestedListTrigger && nestedList.items.length > 0) {
        if (this.areParentIntegratedItemsAppropriate(nestedList)) {
          if (nestedList.position.value === 'integrated') {
            let actualReverse = nestedList.orientation.value === 'ets';
            if (nestedList.focusLastFromParent.value) {
              actualReverse = !actualReverse;
            }
            const integratedNestedItem = (actualReverse ? nestedList.items.slice().reverse() : nestedList.items).find(nestedListItem => !nestedListItem.child);
            if (integratedNestedItem) {
              const parentIntegrationIndex = list.items.findIndex(item => item.element === nestedListTrigger.element);
              if (parentIntegrationIndex >= 0) {
                integratedNestedItem.parentIntegrationIndex = parentIntegrationIndex;
                list.integratedNestedItems.push(integratedNestedItem);
              }
            }
          } else {
            nestedList.integratedParentItem = nestedListTrigger;
            nestedListTrigger.nestedIntegration = true;
          }
        }
      }
    });
  }
  /**
   * Set the `allItemsQueryList` of an interactable list.
   */
  listSetAllItemsQueryList(list) {
    const allItems = list.items.slice();
    let indexAddition = 0;
    const iter = integratedItem => {
      allItems.splice((integratedItem.parentIntegrationIndex === -1 ? list.orientation.value === 'ets' ? allItems.length : -1 : integratedItem.parentIntegrationIndex) + indexAddition + 1, 0, integratedItem);
      indexAddition++;
    };
    if (list.orientation.value !== 'ets' && list.integratedParentItem) {
      iter(list.integratedParentItem);
    }
    list.integratedNestedItems.forEach(iter);
    if (list.orientation.value === 'ets' && list.integratedParentItem) {
      iter(list.integratedParentItem);
    }
    list.allItemsQueryList.reset(allItems.map(item => item.directive));
  }
  /**
   * Check if integrated items are appropriate in the parent of an interactable list.
   */
  areParentIntegratedItemsAppropriate(list) {
    const parent = list.parent;
    if (parent) {
      const orientation = list.orientation.value;
      const parentOrientation = parent.orientation.value;
      return orientation === 'vert' && parentOrientation !== 'vert' || orientation !== 'vert' && parentOrientation === 'vert';
    }
    return false;
  }
  /**
   * Get the child items of an interactable list.
   */
  getChildItems(element, ret = []) {
    if (this.interactableListItems.length) {
      const iter = child => {
        const childResult = this.interactableListItems.find(item => item.element === child);
        if (childResult) {
          ret.push(childResult);
        } else if (!this.interactableLists.find(list => list.element === child)) {
          this.getChildItems(child, ret);
        }
      };
      Array.from(element.children).forEach(iter);
      Array.from(element.dropdownChildren || []).forEach(iter);
    }
    return ret;
  }
  /**
   * Get the nested lists of an interactable list.
   */
  getNestedLists(element, ret = []) {
    if (this.interactableLists.length) {
      const iter = child => {
        const childResult = this.interactableLists.find(list => list.element === child);
        if (childResult) {
          ret.push(childResult);
        } else {
          this.getNestedLists(child, ret);
        }
      };
      Array.from(element.children).forEach(iter);
      Array.from(element.dropdownChildren || []).forEach(iter);
    }
    return ret;
  }
  /**
   * Get the closest relative/parent/trigger item of an interactable list.
   * @param onlyCheckParent Determines if the children of parents should also be checked or ignored.
   */
  getClosestRelativeItem(element, onlyCheckParent = false) {
    if (this.interactableListItems.length) {
      let previousElement;
      let currentElement = element;
      let outOfMenu = false;
      while (currentElement.parentElement && !outOfMenu) {
        previousElement = currentElement;
        const checkElement = currentElement = currentElement.dropdownParentElement ?? currentElement.parentElement;
        const item = this.interactableListItems.find(interactableListItem => interactableListItem.element === checkElement && interactableListItem.parent);
        if (item) {
          return item;
        }
        if (!onlyCheckParent) {
          const childResult = this.getClosestChildItemIndex(currentElement, previousElement);
          if (childResult !== null && childResult >= 0) {
            return this.interactableListItems[childResult];
          }
          if (currentElement !== element && this.interactableLists.find(interactableList => interactableList.element === checkElement)) {
            outOfMenu = true;
          }
        }
      }
    }
    return null;
  }
  /**
   * Get the closest parent list of an interactable list.
   */
  getClosestParent(element) {
    if (this.interactableLists.length > 0) {
      let currentElement = element;
      while (currentElement.parentElement) {
        const checkElement = currentElement = currentElement.dropdownParentElement ?? currentElement.parentElement;
        const parent = this.interactableLists.find(interactableList => interactableList.element === checkElement);
        if (parent) {
          return parent;
        }
      }
    }
    return null;
  }
  /**
   * Get the index of the closest child item.
   */
  getClosestChildItemIndex(element, currentChild, reverse = false) {
    if (this.interactableListItems.length < 0) {
      return null;
    }
    if (!element.children.length && !element.dropdownChildren?.length) {
      return null;
    }
    const children = [...Array.from(element.children), ...Array.from(element.dropdownChildren || [])];
    if (currentChild) {
      const currentElementIndex = children.indexOf(currentChild);
      let currentChildAppeared = false;
      const result = [];
      children.forEach((child, index) => {
        if (child !== currentChild) {
          const childIndex = this.interactableListItems.findIndex(item => item.element === child);
          if (childIndex === -1) {
            const subResult = this.getClosestChildItemIndex(child, undefined, !currentChildAppeared);
            if (subResult !== null) {
              result.push({
                itemIndex: subResult,
                elementIndex: index
              });
            }
          } else {
            result.push({
              itemIndex: childIndex,
              elementIndex: index
            });
          }
        } else {
          currentChildAppeared = true;
        }
      });
      result.sort((firstItem, secondItem) => Math.abs(currentElementIndex - firstItem.elementIndex) - Math.abs(currentElementIndex - secondItem.elementIndex));
      return result.length ? result[0].itemIndex : null;
    } else {
      const correctedChildren = reverse ? children.reverse() : children;
      for (const child of correctedChildren) {
        const childIndex = this.interactableListItems.findIndex(item => item.element === child);
        if (childIndex === -1) {
          const subResult = this.getClosestChildItemIndex(child, undefined, reverse);
          if (subResult !== null) {
            return subResult;
          }
        } else {
          return childIndex;
        }
      }
    }
    return null;
  }
}
SiListInteractionService.ɵfac = function SiListInteractionService_Factory(t) {
  return new (t || SiListInteractionService)();
};
SiListInteractionService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiListInteractionService,
  factory: SiListInteractionService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiListInteractionService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();
class SiListInteractionDirective {
  /**
   * Specifies whether sub menus should be displayed on the start side.
   * @defaultref {@link listInteractionSubListStart}
   * @deprecated Use the new Input {@link listInteractionSubListStart}
   */
  set listInteractionSubListLeft(value) {
    this.listInteractionSubListStart = value;
  }
  get listInteractionSubListLeft() {
    return this.listInteractionSubListStart;
  }
  get start() {
    return this.orientation === 'vert' && this.listInteractionSubListStart;
  }
  /**
   * Specifies if the last item should be focused when navigating to this list from a parent list (instead of the first).
   * @defaultref {@link _focusLastFromParent}
   */
  set listInteractionFocusLastFromParent(focusLastFromParent) {
    this._focusLastFromParent = focusLastFromParent;
    if (this.interactableList) {
      this.interactableList.focusLastFromParent.next(focusLastFromParent);
    }
  }
  get listInteractionFocusLastFromParent() {
    return this._focusLastFromParent;
  }
  get autofocusFromParent() {
    return this.listInteractionAutofocusFromParent;
  }
  /**
   * Specifies a specific item that is the parent of the menu if the automatic one is incorrect.
   * @defaultref {@link _parentItem}
   */
  set listInteractionParentItem(item) {
    this._parentItem = item;
    if (this.interactableList) {
      this.interactableList.triggerDefined.next(item);
    }
  }
  get listInteractionParentItem() {
    if (!this._parentItem && this.interactableList && this.interactableList.trigger) {
      return this.interactableList.trigger.directive;
    }
    return this._parentItem;
  }
  get parentItem() {
    return this.listInteractionParentItem;
  }
  /**
   * Specifies the position of the list relative to the parent.
   * Only relevant if this is a sub list and the parent has a different orientation.
   * @defaultref {@link _position}
   */
  set listInteractionPosition(position) {
    this._position = position;
    if (this.interactableList) {
      this.interactableList.position.next(position);
    }
  }
  get listInteractionPosition() {
    return this._position;
  }
  /**
   * Specifies the orientation of the list, which signifies how it should be navigated.
   * The default is horizontal start to end.
   * @defaultref {@link _orientation}
   */
  set listInteractionOrientation(orientation) {
    const deprecatedMessage = '@simpl/element-ng - SiListInteractionDirective: \
Setting listInteractionOrientation to "ltr" or "rtl" is deprecated, use "ste" or "ets" instead';
    if (orientation === 'ltr') {
      console.warn(deprecatedMessage);
      this._orientation = 'ste';
    } else if (orientation === 'rtl') {
      console.warn(deprecatedMessage);
      this._orientation = 'ets';
    } else {
      this._orientation = orientation;
    }
    if (this.interactableList) {
      this.interactableList.orientation.next(this._orientation);
    }
  }
  get listInteractionOrientation() {
    return this._orientation;
  }
  get orientation() {
    return this._orientation;
  }
  setKeepOpen(state) {
    if (state && !this.keepOpen) {
      this.keepOpen = true;
      this.hadShowClassBefore = this._elementRef.nativeElement.classList.contains('show');
      this._elementRef.nativeElement.classList.add('show');
    } else if (!state && this.keepOpen) {
      this.keepOpen = false;
      if (!this.hadShowClassBefore) {
        this._elementRef.nativeElement.classList.remove('show');
      }
      this.hadShowClassBefore = false;
    }
  }
  get parentList() {
    if (this.interactableList?.parent) {
      return this.interactableList.parent.directive;
    }
    return null;
  }
  get parentListAll() {
    if (this.interactableList && (this.interactableList.parent || this.interactableList.parentDisconnected)) {
      return this.interactableList.parent ? this.interactableList.parent.directive : this.interactableList.parentDisconnected.directive;
    }
    return null;
  }
  constructor(_elementRef, _changeDetector, listInteractionService, platformId) {
    this._elementRef = _elementRef;
    this._changeDetector = _changeDetector;
    this.listInteractionService = listInteractionService;
    /**
     * Specifies whether sub lists are displayed on the start side.
     */
    this.listInteractionSubListStart = false;
    /**
     * Specifies whether the component should automatically be focused as soon as it is loaded.
     */
    this.listInteractionFocusOnLoad = false;
    /**
     * Specifies if any and which item should be focused when the component is focused,
     */
    this.listInteractionFocus = '';
    this._focusLastFromParent = false;
    this.listInteractionAutofocusFromParent = false;
    /**
     * Specifies whether the list is a sub list and a parent item should automatically be searched or be defined.
     */
    this.listInteractionIsSubList = false;
    this._parentItem = null;
    this._position = 'integrated';
    this._orientation = 'ste';
    /**
     * Automatically refocus after pressing enter on one of the items.
     * Use when losing focus causes issues with keyboard interaction.
     */
    this.listInteractionRefocusAfterEnter = false;
    /**
     * Wether a hidden `dropdown-menu` or `si-menu` sub-menu
     * should be shown when the parent item is focused.
     */
    this.listInteractionShowSubListOnParentFocus = true;
    /**
     * Specifies whether the currently open item should be closed on click outside.
     */
    this.listInteractionCloseOnClickOut = true;
    this.hadShowClassBefore = false;
    this.keepOpen = false;
    this.tabindex = '';
    this.connectionsCalculated = false;
    this._ignoreKeydown = undefined;
    this.ignoreNextChange = false;
    this.onClickOut = event => this.clickOutHandler(event);
    this.isBrowser = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId);
  }
  ngAfterViewInit() {
    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_36__.FocusKeyManager(this.interactableList.allItemsQueryList).withWrap().withAllowedModifierKeys(['shiftKey']);
    this._orientationChangeSubscription = this.interactableList.orientation.subscribe(orientation => {
      this._orientation = orientation;
      if (orientation === 'vert') {
        this._keyManager.withHorizontalOrientation(null).withVerticalOrientation();
      } else {
        this._keyManager.withVerticalOrientation(false).withHorizontalOrientation(orientation === 'ste' ? 'ltr' : 'rtl');
      }
    });
    this._changeSubscription = this._keyManager.change.subscribe(() => {
      if (this.listInteractionShowSubListOnParentFocus && !this.ignoreNextChange) {
        this.openCloseAndFocusChildren();
        addEventListener('click', this.onClickOut);
      }
      this.ignoreNextChange = false;
    });
    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {
      this.closePreviousChild();
      removeEventListener('click', this.onClickOut);
    });
  }
  ngOnInit() {
    this.interactableList = this.listInteractionService.addInteractableList(this, this._elementRef.nativeElement, this._parentItem, this._position, this._orientation, this._focusLastFromParent, this.listInteractionIsSubList, () => this.calculated());
    const newTabindex = !this.listInteractionIsSubList ? '0' : '';
    if (this.tabindex !== newTabindex) {
      this.tabindex = newTabindex;
    }
  }
  ngOnDestroy() {
    this._orientationChangeSubscription?.unsubscribe();
    this._changeSubscription?.unsubscribe();
    this._tabOutSubscription?.unsubscribe();
    if (this.interactableList) {
      this.listInteractionService.removeInteractableList(this.interactableList);
    }
    if (this.isBrowser) {
      removeEventListener('click', this.onClickOut);
    }
  }
  calculated() {
    this.connectionsCalculated = true;
    const newTabindex = !this.listInteractionIsSubList || !this.parentList ? '0' : '';
    if (this.tabindex !== newTabindex) {
      this.tabindex = newTabindex;
    }
    if (this.isBrowser && document.activeElement === this.getHostElement()) {
      if (this.listInteractionFocus) {
        this.focusFirstItem('program', this.listInteractionFocus === 'last');
      }
    } else if (this.listInteractionFocusOnLoad) {
      this._elementRef.nativeElement.focus();
    }
  }
  /** Ignore the next keydown in this and all parent lists. Called from sub list. */
  ignoreKeydown(event) {
    if (this.parentListAll) {
      this.parentListAll.ignoreKeydown(event);
    }
    this._ignoreKeydown = event;
  }
  /** Handle a keyboard event from the list, delegating to the appropriate action. */
  handleKeydown(event) {
    if (this._ignoreKeydown?.key === event.key && this._ignoreKeydown.target === event.target) {
      this._ignoreKeydown = undefined;
      return;
    }
    if (this.parentListAll) {
      // If this is a sub list ignore the keydown in all parent lists (due to event bubbling).
      this.parentListAll.ignoreKeydown(event);
    }
    const manager = this._keyManager;
    const rtlCorrectedKey = correctKeyRTL(event.key);
    switch (rtlCorrectedKey) {
      case 'Escape':
        if (!event.altKey && !event.shiftKey && !event.ctrlKey && !event.metaKey) {
          event.preventDefault();
          this.goDownLevel();
        }
        break;
      case 'ArrowUp':
        if (this._orientation !== 'vert') {
          this.goDownLevel();
        } else {
          manager.onKeydown(event);
        }
        break;
      case 'ArrowDown':
        if (this.orientation !== 'vert') {
          this.goUpLevel();
        } else {
          manager.onKeydown(event);
        }
        break;
      case 'ArrowLeft':
        if (this._orientation === 'vert') {
          if (this.listInteractionSubListStart) {
            this.goUpLevel(false, true);
          } else {
            this.goDownLevel();
          }
        } else {
          manager.onKeydown(event);
        }
        break;
      case 'ArrowRight':
        if (this._orientation === 'vert') {
          if (this.listInteractionSubListStart) {
            this.goDownLevel(false, true);
          } else {
            this.goUpLevel();
          }
        } else {
          manager.onKeydown(event);
        }
        break;
      case 'Enter':
        if (this.listInteractionRefocusAfterEnter) {
          setTimeout(() => {
            if (this.isBrowser && (!document.activeElement || document.activeElement === document.body)) {
              this.focusActiveItem();
              this.openCloseAndFocusChildren(true);
            }
          });
        }
        break;
      default:
        manager.onKeydown(event);
    }
  }
  clickOutHandler(event) {
    const target = event.target;
    if (this.listInteractionCloseOnClickOut && this.interactableList && !this._keyManager?.activeItem?.hasChildElement(target)) {
      this.closePreviousChild();
      removeEventListener('click', this.onClickOut);
    }
  }
  closePreviousChild() {
    if (this._previousChild) {
      this._previousChild.close();
      this._previousChild = undefined;
      this._changeDetector.detectChanges();
    }
  }
  openCloseAndFocusChildren(skipOpenClose = false) {
    if (!skipOpenClose) {
      this.closePreviousChild();
    }
    const active = this._keyManager.activeItem;
    if (active) {
      if (active.dropdownToggle) {
        active.dropdownToggle.open();
        this._previousChild = {
          close: () => active.dropdownToggle?.close()
        };
        this._changeDetector.detectChanges();
      } else {
        const activeList = this.getItemChildren(active);
        if (activeList && activeList.getHostElement() !== this.getHostElement()) {
          if (!skipOpenClose) {
            activeList.open();
            this._previousChild = activeList;
            this._changeDetector.detectChanges();
          }
          if (activeList.autofocusFromParent) {
            Promise.resolve().then(() => activeList.focusFirstItem());
          }
        }
      }
    }
  }
  open() {
    this.setKeepOpen(true);
  }
  close() {
    this.setKeepOpen(false);
  }
  setActiveItem(activeItem, ignoreNextChange = false) {
    if (!this._keyManager.activeItem || activeItem.getHostElement() !== this._keyManager.activeItem.getHostElement()) {
      this.ignoreNextChange = ignoreNextChange;
      this._keyManager.setActiveItem(activeItem);
    }
  }
  focusActiveItem(origin = 'program', reverse = false, nestedItem) {
    let active = this._keyManager.activeItem;
    if (!active && nestedItem && this.interactableList) {
      const foundActiveItem = this.interactableList.allItemsQueryList.find(listItem => nestedItem.getHostElement() === listItem.getHostElement());
      if (foundActiveItem) {
        this._keyManager.setActiveItem(foundActiveItem);
        active = this._keyManager.activeItem;
      }
    }
    if (active) {
      if (active && nestedItem && nestedItem.getHostElement() === active?.getHostElement()) {
        if (reverse) {
          this._keyManager.setNextItemActive();
        } else {
          this._keyManager.setPreviousItemActive();
        }
      }
      const activeIndex = this._keyManager.activeItemIndex;
      const newActive = this._keyManager.activeItem;
      if (newActive) {
        if (activeIndex && this.interactableList?.allItemsQueryList.get(activeIndex)?.getHostElement() !== newActive?.getHostElement()) {
          this._keyManager.setActiveItem(newActive);
        } else {
          newActive.focus();
        }
      }
    }
  }
  /**
   * Focus the first item in the list.
   * @param origin Action from which the focus originated. Used to set the correct styling.
   */
  focusFirstItem(origin = 'program', reverse = false, fromParent = false) {
    const itemIndexes = Array.from(this.interactableList.allItemsQueryList).map((item, index) => {
      if (item.parentList && !item.disabled && item.parentList.getHostElement() === this.getHostElement()) {
        return index;
      } else {
        return -1;
      }
    }).filter(index => index !== -1);
    if (itemIndexes.length > 0) {
      let actualReverse = reverse;
      if (this.orientation === 'ets') {
        actualReverse = !actualReverse;
      }
      if (fromParent && this.listInteractionFocusLastFromParent) {
        actualReverse = !actualReverse;
      }
      const actualIndex = actualReverse ? itemIndexes[itemIndexes.length - 1] : itemIndexes[0];
      const activeItem = this.interactableList.allItemsQueryList.get(actualIndex);
      const activeItemHost = activeItem.getHostElement();
      if (this.interactableList.parent?.integratedNestedItems.find(item => item.element === activeItemHost)) {
        this.parentList.setActiveItem(activeItem);
      } else if (this.interactableList.integratedParentItem) {
        this.parentList.setActiveItem(this.interactableList.integratedParentItem.directive);
      }
      if (this._keyManager.activeItem?.getHostElement() === activeItem.getHostElement()) {
        this.focusActiveItem();
        this.openCloseAndFocusChildren();
        addEventListener('click', this.onClickOut);
      } else {
        this._keyManager.setFocusOrigin(origin).setActiveItem(activeItem);
      }
    }
  }
  getItemChildren(item) {
    return item.childList;
  }
  goDownLevel(reverse = false, start = false) {
    if (this.parentList) {
      this.closePreviousChild();
      removeEventListener('click', this.onClickOut);
      const nestedOrParentItem = this.interactableList ? (this.interactableList.integratedParentItem ? this.interactableList.integratedParentItem : this.interactableList.items.find(item => item.parentIntegrationIndex !== -1 || item.nestedIntegration))?.directive : undefined;
      let actualReverse = reverse;
      const parent = this.parentList;
      if (parent.orientation === 'ets') {
        actualReverse = !actualReverse;
      }
      if (start && !parent.start) {
        actualReverse = !actualReverse;
      }
      parent.focusActiveItem('program', actualReverse, nestedOrParentItem);
    } else {
      this.goUpLevel(true);
    }
  }
  goUpLevel(reverse = false, start = false) {
    const active = this._keyManager.activeItem;
    if (active) {
      const activeList = this.getItemChildren(active);
      if (activeList) {
        activeList.focusFirstItem('program', reverse, true);
      } else if (this.parentList) {
        this.goDownLevel(true, start);
      }
    }
  }
  focusInEvent(target) {
    if (this.connectionsCalculated) {
      if (target === this.getHostElement()) {
        if (this.listInteractionFocus) {
          this.focusFirstItem('program', this.listInteractionFocus === 'last');
        }
      } else {
        if (this.interactableList) {
          const foundItem = this.interactableList.items.find(item => item.element.contains(target));
          if (foundItem) {
            this.setActiveItem(foundItem.directive, true);
          }
        }
        Promise.resolve().then(() => {
          if (this.tabindex !== '-1') {
            this.tabindex = '-1';
          }
        });
      }
    }
  }
  focusOutEvent() {
    if (this.tabindex === '-1') {
      Promise.resolve().then(() => this.tabindex = !this.listInteractionIsSubList || !this.parentList ? '0' : '');
    }
  }
  /** Returns the host DOM element. */
  getHostElement() {
    return this._elementRef.nativeElement;
  }
}
SiListInteractionDirective.ɵfac = function SiListInteractionDirective_Factory(t) {
  return new (t || SiListInteractionDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiListInteractionService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID));
};
SiListInteractionDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiListInteractionDirective,
  selectors: [["", "siListInteraction", ""]],
  hostVars: 1,
  hostBindings: function SiListInteractionDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown", function SiListInteractionDirective_keydown_HostBindingHandler($event) {
        return ctx.handleKeydown($event);
      })("focusin", function SiListInteractionDirective_focusin_HostBindingHandler($event) {
        return ctx.focusInEvent($event.target);
      })("focusout", function SiListInteractionDirective_focusout_HostBindingHandler() {
        return ctx.focusOutEvent();
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx.tabindex);
    }
  },
  inputs: {
    listInteractionSubListLeft: "listInteractionSubListLeft",
    listInteractionSubListStart: "listInteractionSubListStart",
    listInteractionFocusOnLoad: "listInteractionFocusOnLoad",
    listInteractionFocus: "listInteractionFocus",
    listInteractionFocusLastFromParent: "listInteractionFocusLastFromParent",
    listInteractionAutofocusFromParent: "listInteractionAutofocusFromParent",
    listInteractionIsSubList: "listInteractionIsSubList",
    listInteractionParentItem: "listInteractionParentItem",
    listInteractionPosition: "listInteractionPosition",
    listInteractionOrientation: "listInteractionOrientation",
    listInteractionRefocusAfterEnter: "listInteractionRefocusAfterEnter",
    listInteractionShowSubListOnParentFocus: "listInteractionShowSubListOnParentFocus",
    listInteractionCloseOnClickOut: "listInteractionCloseOnClickOut"
  },
  exportAs: ["si-list-interaction"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiListInteractionDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siListInteraction]',
      exportAs: 'si-list-interaction'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }, {
      type: SiListInteractionService
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }];
  }, {
    listInteractionSubListLeft: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listInteractionSubListStart: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listInteractionFocusOnLoad: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listInteractionFocus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listInteractionFocusLastFromParent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listInteractionAutofocusFromParent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listInteractionIsSubList: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listInteractionParentItem: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listInteractionPosition: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listInteractionOrientation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listInteractionRefocusAfterEnter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listInteractionShowSubListOnParentFocus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listInteractionCloseOnClickOut: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    tabindex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['attr.tabindex']
    }],
    handleKeydown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keydown', ['$event']]
    }],
    focusInEvent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focusin', ['$event.target']]
    }],
    focusOutEvent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focusout']
    }]
  });
})();
class SiMenuItemComponent {
  /**
   * Specifies the dropdown caret direction.
   * @defaultref {@link _dropdownCaret}
   */
  set dropdownCaret(caret) {
    const deprecatedMessage = '@simpl/element-ng - SiMenuItemComponent: \
Setting dropdownCaret to "left" or "right" is deprecated, use "start" or "end" instead';
    if (caret === 'left') {
      console.warn(deprecatedMessage);
      this._dropdownCaret = 'start';
    } else if (caret === 'right') {
      console.warn(deprecatedMessage);
      this._dropdownCaret = 'end';
    } else {
      this._dropdownCaret = caret;
    }
  }
  get dropdownCaret() {
    return this._dropdownCaret;
  }
  get disabled() {
    return !(this._elementRef.nativeElement.offsetParent || this.isBrowser && window.getComputedStyle(this._elementRef.nativeElement).position === 'fixed' && window.getComputedStyle(this._elementRef.nativeElement).display !== 'none') || this.item.disabled || this.item.title === '-' || this.item.isHeading || (!this.item.items || this.item.items.length === 0) && !this.item.action && !this.item.link && !this.item.href && this.disableLinklessClick;
  }
  get theBadgeStyle() {
    return this.item.badgeStyle ?? this.badgeStyle;
  }
  get iconOnly() {
    return !!this.item.iconOnly && !this.forceTitle;
  }
  // The badge character limit is restricted to three characters.
  // In case when the badge is of type `string` and the number of characters are more
  // than three, then only the first three characters will be displayed
  get badgeText() {
    const badge = this.item.badge;
    return typeof badge === 'string' && badge.length > 3 ? badge.slice(0, 3) : typeof badge === 'number' && badge > 99 ? '99+' : badge;
  }
  linkActiveChange(active) {
    this.active = active;
    this.activeChange.emit(active);
  }
  get parentList() {
    if (this.interactableListItem?.parent) {
      return this.interactableListItem.parent.directive;
    }
    return null;
  }
  get childList() {
    if (this.interactableListItem?.child && this.interactableListItem.child.trigger?.element === this.interactableListItem.element) {
      return this.interactableListItem.child.directive;
    }
    return null;
  }
  get iconClass() {
    let iconClass = this.item.icon;
    // Use -filled icon if item is active
    // Keep the default icon in case that icon does not have a filled version
    if (this.item.isActive || this.link?.active || this.getHostElement().classList.contains('show')) {
      iconClass = iconClass + ' ' + iconClass + '-filled';
    }
    return iconClass;
  }
  constructor(_elementRef, platformId, listInteractionService) {
    this._elementRef = _elementRef;
    this.listInteractionService = listInteractionService;
    /**
     * Specifies the badge style.
     */
    this.badgeStyle = '';
    this._dropdownCaret = '';
    /**
     * If item has children, do not allow it to be clicked.
     */
    this.disableParentClick = false;
    /**
     * If item does not have a link, action or children, do not allow it to be clicked.
     */
    this.disableLinklessClick = false;
    /**
     * Whether to disable the list interactability, used when only using this
     * for the styling or `MenuItem` interface. Also enables this to be manually focused.
     */
    this.disableListInteraction = false;
    /**
     * Specifies whether the menu item focus styling should be inside instead of outside.
     */
    this.focusStylingInside = false;
    /**
     * Forces the active styling
     */
    this.forceActive = false;
    /**
     * Force-show title, when iconOnly is set
     */
    this.forceTitle = false;
    /**
     * Class to use on the link
     */
    this.itemClass = 'dropdown-item';
    this.activeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.active = false;
    this.isBrowser = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId);
  }
  ngOnInit() {
    if (!this.disableListInteraction) {
      this.interactableListItem = this.listInteractionService.addInteractableListItem(this, this._elementRef.nativeElement);
    }
  }
  ngOnDestroy() {
    if (this.interactableListItem) {
      this.listInteractionService.removeInteractableListItem(this.interactableListItem);
    }
  }
  /** Focuses the menu item. */
  focus(origin, options) {
    if (this.interactableListItem?.parent) {
      this.interactableListItem.parent.directive.setActiveItem(this);
    }
    this.getItemElement().focus(options);
  }
  /** Returns the item DOM element. */
  getItemElement() {
    return this.menuItem.nativeElement;
  }
  /** Returns the parent DOM element. */
  getParentElement() {
    return this._elementRef.nativeElement.parentElement;
  }
  /** Returns the host DOM element. */
  getHostElement() {
    return this._elementRef.nativeElement;
  }
  hasChildElement(element) {
    return this.interactableListItem ? this.listInteractionService.isChildElementOfItem(this.interactableListItem, element) : this._elementRef.nativeElement.contains(element);
  }
  getItemRole(item) {
    if (item.selectionState === 'check' || item.type === 'check') {
      return 'menuitemcheckbox';
    }
    if (item.selectionState === 'radio' || item.type === 'radio') {
      return 'menuitemradio';
    }
    return 'menuitem';
  }
  getAriaChecked(item) {
    if (item.selectionState === 'check' || item.selectionState === 'radio') {
      return true;
    } else if (item.type === 'check' || item.type === 'radio') {
      return false;
    }
    return null;
  }
  handleSpace() {
    if (this.item.type) {
      this.menuItem.nativeElement.click();
    }
  }
}
SiMenuItemComponent.ɵfac = function SiMenuItemComponent_Factory(t) {
  return new (t || SiMenuItemComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiListInteractionService));
};
SiMenuItemComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiMenuItemComponent,
  selectors: [["si-menu-item"]],
  viewQuery: function SiMenuItemComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c14, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](SiLinkDirective, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.menuItem = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.link = _t.first);
    }
  },
  inputs: {
    item: "item",
    badgeStyle: "badgeStyle",
    dropdownCaret: "dropdownCaret",
    actionParam: "actionParam",
    disableParentClick: "disableParentClick",
    disableLinklessClick: "disableLinklessClick",
    disableListInteraction: "disableListInteraction",
    focusStylingInside: "focusStylingInside",
    forceActive: "forceActive",
    forceTitle: "forceTitle",
    itemClass: "itemClass",
    dropdownToggle: "dropdownToggle"
  },
  outputs: {
    activeChange: "activeChange"
  },
  decls: 4,
  vars: 2,
  consts: [[3, "ngClass", "focus-inside", "active", "disabled", "dropdown-item-icon-only", "dropdown-item-no-link", "siLink", "actionParam", "activeChange", "keydown.space", 4, "ngIf"], ["class", "dropdown-item-no-link", 3, "dropdown-header", "ngClass", "focus-inside", "active", "disabled", "dropdown-item-static", "dropdown-item-icon-only", 4, "ngIf"], ["itemTemplate", ""], [3, "ngClass", "siLink", "actionParam", "activeChange", "keydown.space"], ["menuItem", ""], [4, "ngTemplateOutlet"], [1, "dropdown-item-no-link", 3, "ngClass"], ["class", "item-icon icon", 3, "ngClass", "badge-dot", 4, "ngIf"], ["class", "badge-text", 4, "ngIf"], ["class", "item-title text-truncate", 4, "ngIf"], ["class", "badge me-n2", 3, "ngClass", 4, "ngIf"], ["class", "icon menu-end-icon ms-2", 3, "element-ok", "element-record-filled", 4, "ngIf"], ["class", "icon menu-end-icon element-down-2 dropdown-caret-animation flip-rtl ms-2", 3, "dropdown-caret-end", "dropdown-caret-start", "dropdown-caret-up", 4, "ngIf"], [1, "item-icon", "icon", 3, "ngClass"], [1, "badge-text"], [1, "item-title", "text-truncate"], [1, "badge", "me-n2", 3, "ngClass"], [1, "icon", "menu-end-icon", "ms-2"], [1, "icon", "menu-end-icon", "element-down-2", "dropdown-caret-animation", "flip-rtl", "ms-2"]],
  template: function SiMenuItemComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiMenuItemComponent_a_0_Template, 4, 22, "a", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiMenuItemComponent_a_1_Template, 4, 22, "a", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiMenuItemComponent_ng_template_2_Template, 6, 6, "ng-template", null, 2, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", (!ctx.disableParentClick || !(ctx.item.items == null ? null : ctx.item.items.length)) && (!ctx.disableLinklessClick || ctx.item.action || ctx.item.link || ctx.item.href) && !ctx.item.isHeading);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.disableParentClick && (ctx.item.items == null ? null : ctx.item.items.length) || ctx.disableLinklessClick && !ctx.item.action && !ctx.item.link && !ctx.item.href || ctx.item.isHeading);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, SiLinkDirective, SiTranslatePipe],
  styles: [".dropdown-caret-animation[_ngcontent-%COMP%]:before{display:inline-block;transform:rotate(var(--caret-rotate, 0deg));transition:transform calc(.4s * var(--element-animations-enabled, 1))}.show[_nghost-%COMP%]   .dropdown-caret-animation[_ngcontent-%COMP%]:before{transform:rotate(calc(var(--caret-rotate, 0deg) + 180deg))}.dropdown-caret-end[_ngcontent-%COMP%]{--caret-rotate: -90deg}.dropdown-caret-start[_ngcontent-%COMP%]{--caret-rotate: 90deg}.dropdown-caret-up[_ngcontent-%COMP%]{--caret-rotate: 180deg}.dropdown-item[_ngcontent-%COMP%]:not(.dropdown-header):not(.dropdown-item-static):not(.disabled){cursor:pointer}"]
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiMenuItemComponent.prototype, "item", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiMenuItemComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-menu-item',
      template: "<a *ngIf=\"(!disableParentClick || !item.items?.length) && (!disableLinklessClick || item.action || item.link || item.href) && !item.isHeading\"\n  #menuItem\n  [ngClass]=\"itemClass\"\n  [class.focus-inside]=\"focusStylingInside\"\n  [class.active]=\"forceActive || active\"\n  [class.disabled]=\"item.disabled\"\n  [class.dropdown-item-icon-only]=\"iconOnly || !item.title && item.icon && !item.selectionState && !dropdownCaret && (!item.items || item.items.length === 0)\"\n  [class.dropdown-item-no-link]=\"item.type\"\n  [siLink]=\"item\"\n  [actionParam]=\"actionParam\"\n  (activeChange)=\"linkActiveChange($event)\"\n  [attr.tabindex]=\"disableListInteraction ? '': '-1'\"\n  [attr.aria-label]=\"item.title! | translate\"\n  [attr.aria-disabled]=\"item.disabled\"\n  [attr.aria-checked]=\"getAriaChecked(item)\"\n  [attr.data-id]=\"item.id\"\n  [attr.role]=\"getItemRole(item)\"\n  (keydown.space)=\"handleSpace()\"\n>\n  <ng-container *ngTemplateOutlet=\"itemTemplate\"></ng-container>\n</a>\n<a *ngIf=\"disableParentClick && item.items?.length || disableLinklessClick && !item.action && !item.link && !item.href || item.isHeading\"\n  #menuItem\n  [class.dropdown-header]=\"item.isHeading\"\n  [ngClass]=\"itemClass\"\n  class=\"dropdown-item-no-link\"\n  [class.focus-inside]=\"focusStylingInside\"\n  [class.active]=\"forceActive || active\"\n  [class.disabled]=\"item.disabled\"\n  [class.dropdown-item-static]=\"(!item.items || item.items.length === 0) && (disableLinklessClick && !item.action && !item.link && !item.href || item.isHeading)\"\n  [class.dropdown-item-icon-only]=\"iconOnly || !item.title && item.icon && !item.selectionState && !dropdownCaret && !item.items?.length\"\n  [attr.tabindex]=\"disableListInteraction ? '': '-1'\"\n  [attr.aria-label]=\"item.title! | translate\"\n  [attr.aria-disabled]=\"item.disabled\"\n  [attr.aria-checked]=\"getAriaChecked(item)\"\n  [attr.data-id]=\"item.id\"\n  [attr.role]=\"getItemRole(item)\"\n>\n  <ng-container *ngTemplateOutlet=\"itemTemplate\"></ng-container>\n</a>\n\n<ng-template #itemTemplate>\n  <span *ngIf=\"item.icon\" class=\"item-icon icon\" [ngClass]=\"iconClass!\" [class.badge-dot]=\"item.badgeDot\"></span>\n  <span\n    *ngIf=\"(theBadgeStyle === 'dot' || !theBadgeStyle && (iconOnly || (!item.title && item.icon))) && item.badge && item.icon\"\n    class=\"badge-text\"\n  >{{ badgeText }}</span>\n  <span\n    *ngIf=\"!iconOnly && (item.title || !item.icon || item.selectionState || dropdownCaret || item.items?.length)\"\n    class=\"item-title text-truncate\"\n  >{{ item.title! | translate }}</span>\n  <span\n    *ngIf=\"(theBadgeStyle === 'inline' || !theBadgeStyle && !iconOnly && (item.title || !item.icon)) && item.badge\"\n    class=\"badge me-n2\"\n    [ngClass]=\"'bg-' + (item.badgeColor || 'default')\"\n  >{{ item.badge }}</span>\n  <span *ngIf=\"!iconOnly && item.selectionState && !dropdownCaret && !item.items?.length\"\n    class=\"icon menu-end-icon ms-2\"\n    [class.element-ok]=\"item.selectionState === 'check'\"\n    [class.element-record-filled]=\"item.selectionState === 'radio'\"\n  ></span>\n  <span *ngIf=\"!iconOnly && (item.items?.length || dropdownCaret) && dropdownCaret !== 'none'\"\n    class=\"icon menu-end-icon element-down-2 dropdown-caret-animation flip-rtl ms-2\"\n    [class.dropdown-caret-end]=\"dropdownCaret === 'end'\"\n    [class.dropdown-caret-start]=\"dropdownCaret === 'start'\"\n    [class.dropdown-caret-up]=\"dropdownCaret === 'up'\"\n  ></span>\n</ng-template>\n",
      styles: [".dropdown-caret-animation:before{display:inline-block;transform:rotate(var(--caret-rotate, 0deg));transition:transform calc(.4s * var(--element-animations-enabled, 1))}:host.show .dropdown-caret-animation:before{transform:rotate(calc(var(--caret-rotate, 0deg) + 180deg))}.dropdown-caret-end{--caret-rotate: -90deg}.dropdown-caret-start{--caret-rotate: 90deg}.dropdown-caret-up{--caret-rotate: 180deg}.dropdown-item:not(.dropdown-header):not(.dropdown-item-static):not(.disabled){cursor:pointer}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }, {
      type: SiListInteractionService
    }];
  }, {
    item: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    badgeStyle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownCaret: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    actionParam: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disableParentClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disableLinklessClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disableListInteraction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    focusStylingInside: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    forceActive: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    forceTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    itemClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropdownToggle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    activeChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    menuItem: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['menuItem']
    }],
    link: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: [SiLinkDirective]
    }]
  });
})();
class SiMenuComponent {
  /**
   * Specifies whether sub menus should be displayed on the start side.
   * @defaultref {@link dropstart}
   * @deprecated Use the new Input {@link dropstart}
   */
  set dropleft(value) {
    this.dropstart = value;
  }
  get dropleft() {
    return this.dropstart;
  }
  get start() {
    return this.actualDropstart;
  }
  /**
   * Specifies whether sub menus should be displayed on the start side.
   * @defaultref {@link responsiveDropstart}
   * @deprecated Use the new Input {@link responsiveDropstart}
   */
  set responsiveDropleft(value) {
    this.responsiveDropstart = value;
  }
  get responsiveDropleft() {
    return this.responsiveDropstart;
  }
  /**
   * Specifies if the last item should be focused when navigating to this menu from a parent list (instead of the first).
   * @defaultref {@link _focusLastFromParent}
   */
  set focusLastFromParent(focusLastFromParent) {
    this._focusLastFromParent = focusLastFromParent;
    if (this.interactableList) {
      this.interactableList.focusLastFromParent.next(focusLastFromParent);
    }
  }
  get focusLastFromParent() {
    return this._focusLastFromParent;
  }
  /**
   * Specifies a specific item that is the parent of the menu if the automatic one is incorrect.
   * @defaultref {@link _parentItem}
   */
  set parentItem(item) {
    this._parentItem = item;
    if (this.interactableList) {
      this.interactableList.triggerDefined.next(item);
    }
  }
  get parentItem() {
    if (!this._parentItem && this.interactableList && this.interactableList.trigger) {
      return this.interactableList.trigger.directive;
    }
    return this._parentItem;
  }
  /**
   * Specifies the position of the list relative to the parent.
   * Only relevant if this is a sub list and the parent has a different orientation.
   * @defaultref {@link _position}
   */
  set position(position) {
    this._position = position;
    if (this.interactableList) {
      this.interactableList.position.next(position);
    }
  }
  get position() {
    return this._position;
  }
  linkActiveChange(active) {
    const newActive = active || this.interactableList.items.some(item => item.directive.active) || this.interactableList.nested.some(list => list.directive.active) || false;
    if (newActive !== this.active) {
      this.active = newActive;
      this.activeChange.emit(this.active);
    }
  }
  get parentList() {
    if (this.interactableList?.parent) {
      return this.interactableList.parent.directive;
    }
    return null;
  }
  get parentListAll() {
    if (this.interactableList && (this.interactableList.parent || this.interactableList.parentDisconnected)) {
      return this.interactableList.parent ? this.interactableList.parent.directive : this.interactableList.parentDisconnected.directive;
    }
    return null;
  }
  constructor(_elementRef, _changeDetector, listInteractionService, zone, platformId) {
    this._elementRef = _elementRef;
    this._changeDetector = _changeDetector;
    this.listInteractionService = listInteractionService;
    this.zone = zone;
    /**
     * Array of menu items to display.
     */
    this.items = [];
    /**
     * Specifies whether sub menus should be displayed on the start side.
     */
    this.dropstart = false;
    /**
     * If `true`, the sub-menus will automatically open on the other side, if there is not enough space on the preferred one.
     */
    this.responsiveDropstart = true;
    /**
     * If `true`, the sub-menus will automatically open upwards, if there is not enough space below.
     */
    this.responsivelyDropUpwards = true;
    /**
     * Specifies whether the component should automatically be focused as soon as it is loaded.
     */
    this.focusOnLoad = false;
    /**
     * Specifies if any and which item should be focused when the component is focused.
     */
    this.focus = '';
    this._focusLastFromParent = false;
    /**
     * Specifies whether the menu is a sub list and a parent item should automatically be searched or be defined.
     */
    this.isSubList = false;
    this._parentItem = null;
    /**
     * Automatically refocus after pressing enter on one of the items.
     * Use when losing focus causes issues with keyboard interaction.
     */
    this.refocusAfterEnter = true;
    this.orientation = 'vert';
    this._position = 'integrated';
    this.autofocusFromParent = false;
    /**
     * Specifies whether the menu should use relative positioning and be open by default.
     * Used when not combined with a dropdown.
     */
    this.relativePositioning = false;
    /**
     * Force-show title, when iconOnly is set
     */
    this.forceTitle = false;
    this.activeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.hostDropdownMenu = true;
    this.keepOpen = false;
    this.tabindex = '';
    this.active = false;
    this.connectionsCalculated = false;
    this.ignoreNextChange = false;
    this._ignoreKeydown = undefined;
    this.childrenHidden = false;
    this.listenersSet = false;
    this.entries = [];
    /**
     * Indicate whether the child menu open to left or right.
     */
    this.actualDropstart = false;
    this.trackByIndex = index => index;
    this.onParentScrollOrResize = () => {
      if (this.responsiveDropstart || this.responsivelyDropUpwards) {
        const visibleEntries = this.entries.filter(item => item.isVisible);
        if (visibleEntries.length) {
          setTimeout(() => {
            this.zone.run(() => {
              if (this.responsiveDropstart) {
                this.responsivelyChangeDirection(visibleEntries.map(item => item.element));
              }
              if (this.responsivelyDropUpwards) {
                visibleEntries.forEach(entry => {
                  this.responsivelyCheckIfUpwards(entry.element, entry.itemElement, entry.item);
                });
              }
            });
          });
        }
      }
    };
    this.onClickOut = event => this.clickOutHandler(event);
    this.isBrowser = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId);
  }
  ngAfterViewInit() {
    this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_36__.FocusKeyManager(this.interactableList.allItemsQueryList).withWrap();
    this._changeSubscription = this._keyManager.change.subscribe(() => {
      if (!this.ignoreNextChange) {
        this.openAndCloseChildren();
        addEventListener('click', this.onClickOut);
      }
      this.ignoreNextChange = false;
    });
    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {
      this.closePreviousChild();
      removeEventListener('click', this.onClickOut);
    });
  }
  ngOnInit() {
    this.interactableList = this.listInteractionService.addInteractableList(this, this._elementRef.nativeElement, this._parentItem, this._position, 'vert', this.focusLastFromParent, this.isSubList, () => this.calculated());
    this.interactableList.orientation.next('vert');
    const newTabindex = !this.isSubList ? '0' : '';
    if (this.tabindex !== newTabindex) {
      this.tabindex = newTabindex;
    }
  }
  ngOnDestroy() {
    this._changeSubscription?.unsubscribe();
    this._tabOutSubscription?.unsubscribe();
    if (this.interactableList) {
      this.listInteractionService.removeInteractableList(this.interactableList);
    }
    if (this.isBrowser) {
      removeEventListener('click', this.onClickOut);
      this.zone.runOutsideAngular(() => {
        removeEventListener('scroll', this.onParentScrollOrResize, true);
        removeEventListener('resize', this.onParentScrollOrResize);
      });
    }
  }
  ngOnChanges(changes) {
    if (changes.items || changes.dropstart || changes.responsiveDropstart || changes.responsivelyDropUpwards) {
      this.actualDropstart = this.dropstart;
      this.observer?.disconnect();
      this.observer = undefined;
      this.childrenHidden = false;
      setTimeout(() => {
        this.entries = [];
        if (!this.responsiveDropstart && !this.responsivelyDropUpwards || !this.hasAnyChildren() || !this.isBrowser) {
          return;
        }
        const menu = this.getHostElement();
        if (!menu?.firstElementChild) {
          return;
        }
        const children = Array.from(menu.firstElementChild.children);
        if (!children) {
          return;
        }
        this.items.forEach((item, index) => {
          const found = item.items?.length ? children[index]?.querySelector('SI-MENU') : undefined;
          if (found) {
            const foundItem = children[index]?.querySelector('SI-MENU-ITEM');
            if (foundItem) {
              this.entries.push({
                element: found,
                itemElement: foundItem,
                item,
                isVisible: false
              });
            }
          }
        });
        if (!this.entries.length) {
          return;
        }
        this.childrenHidden = true;
        this.observer = new IntersectionObserver(visibilities => {
          let didChanges = false;
          visibilities.forEach(visibility => {
            const entry = this.entries.find(item => item.element === visibility.target);
            if (entry) {
              if (visibility.isIntersecting) {
                if (!entry.isVisible) {
                  if (entry.itemElement !== this._keyManager.activeItem?.getHostElement()) {
                    this.closePreviousChild();
                  }
                  entry.isVisible = true;
                  didChanges = true;
                  if (this.responsivelyDropUpwards) {
                    this.responsivelyCheckIfUpwards(entry.element, entry.itemElement, entry.item);
                  }
                }
              } else if (entry.isVisible) {
                entry.isVisible = false;
                didChanges = true;
              }
            }
          });
          if (didChanges && (this.responsiveDropstart || this.responsivelyDropUpwards)) {
            const visibleEntries = this.entries.filter(item => item.isVisible).map(item => item.element);
            if (visibleEntries.length) {
              if (this.responsiveDropstart) {
                this.responsivelyChangeDirection(visibleEntries);
              }
              if (this.childrenHidden) {
                this.childrenHidden = false;
              }
              if (!this.listenersSet && this.isBrowser) {
                this.zone.runOutsideAngular(() => {
                  // Add event listener to window as capturing to handle tested element scrolling
                  addEventListener('scroll', this.onParentScrollOrResize, true);
                  // here we _actually_ want window.resize, nothing else since this is about a fixed position
                  addEventListener('resize', this.onParentScrollOrResize);
                });
                this.listenersSet = true;
              }
            } else if (!this.childrenHidden) {
              this.childrenHidden = true;
            }
          }
        });
        this.entries.forEach(entry => {
          this.observer.observe(entry.element);
        });
      });
    }
  }
  calculated() {
    this.connectionsCalculated = true;
    const newTabindex = !this.isSubList || !this.parentList ? '0' : '';
    if (this.tabindex !== newTabindex) {
      this.tabindex = newTabindex;
    }
    if (this.isBrowser && document.activeElement === this.getHostElement()) {
      if (this.focus) {
        this.focusFirstItem('program', this.focus === 'last');
      }
    } else if (this.focusOnLoad) {
      this._elementRef.nativeElement.focus();
    }
  }
  /** Ignore the next keydown in this and all parent menus. Called from sub menu. */
  ignoreKeydown(event) {
    if (this.parentListAll) {
      this.parentListAll.ignoreKeydown(event);
    }
    this._ignoreKeydown = event;
  }
  /** Handle a keyboard event from the menu, delegating to the appropriate action. */
  handleKeydown(event) {
    if (this._ignoreKeydown?.key === event.key && this._ignoreKeydown.target === event.target) {
      this._ignoreKeydown = undefined;
    } else {
      if (this.parentListAll) {
        // If this is a sub menu ignore the keydown in all parent menus (due to event bubbling).
        this.parentListAll.ignoreKeydown(event);
      }
      const key = event.key;
      const manager = this._keyManager;
      const rtlCorrectedKey = correctKeyRTL(key);
      switch (rtlCorrectedKey) {
        case 'Escape':
          if (!event.altKey && !event.shiftKey && !event.ctrlKey && !event.metaKey) {
            event.preventDefault();
            this.goDownLevel();
          }
          break;
        case 'ArrowLeft':
          if (this.actualDropstart) {
            this.goUpLevel(false, true);
          } else {
            this.goDownLevel();
          }
          break;
        case 'ArrowRight':
          if (this.actualDropstart) {
            this.goDownLevel(false, true);
          } else {
            this.goUpLevel();
          }
          break;
        case 'Enter':
          if (this.refocusAfterEnter && this.isBrowser) {
            setTimeout(() => {
              if (!document.activeElement || document.activeElement === document.body) {
                this.focusActiveItem();
              }
            });
          }
          break;
        default:
          manager.onKeydown(event);
      }
    }
  }
  hasChildren(item) {
    return item.items?.length && item.items.some(child => child.title && child.title !== '-');
  }
  closePreviousChild() {
    if (this._previousChild) {
      this._previousChild.close();
      this._previousChild = undefined;
      this._changeDetector.detectChanges();
    }
  }
  openAndCloseChildren() {
    this.closePreviousChild();
    const active = this._keyManager.activeItem;
    if (active) {
      const activeList = active.childList;
      if (activeList && activeList.getHostElement() !== this.getHostElement()) {
        activeList.open();
        this._previousChild = activeList;
        this._changeDetector.detectChanges();
      }
    }
  }
  open() {
    this.keepOpen = true;
  }
  close() {
    this.keepOpen = false;
  }
  setActiveItem(activeItem, ignoreNextChange = false) {
    if (!this._keyManager.activeItem || activeItem.getHostElement() !== this._keyManager.activeItem.getHostElement()) {
      this.ignoreNextChange = ignoreNextChange;
      this._keyManager.setActiveItem(activeItem);
    }
  }
  focusActiveItem(origin = 'program') {
    this._keyManager.activeItem?.focus();
  }
  /**
   * Focus the first item in the menu.
   * @param origin Action from which the focus originated. Used to set the correct styling.
   */
  focusFirstItem(origin = 'program', reverse = false, fromParent = false) {
    const itemIndexes = Array.from(this.interactableList.allItemsQueryList).map((item, index) => {
      if (item.parentList && !item.disabled && item.parentList.getHostElement() === this.getHostElement()) {
        return index;
      } else {
        return -1;
      }
    }).filter(index => index !== -1);
    if (itemIndexes.length > 0) {
      let actualReverse = reverse;
      if (fromParent && this.focusLastFromParent) {
        actualReverse = !actualReverse;
      }
      const actualIndex = actualReverse ? itemIndexes[itemIndexes.length - 1] : itemIndexes[0];
      const activeItem = this.interactableList.allItemsQueryList.get(actualIndex);
      if (this._keyManager.activeItemIndex === actualIndex) {
        this.focusActiveItem();
        this.openAndCloseChildren();
        addEventListener('click', this.onClickOut);
      } else {
        this._keyManager.setFocusOrigin(origin).setActiveItem(activeItem);
      }
      const activeItemHost = activeItem.getHostElement();
      if (this.interactableList.parent?.integratedNestedItems.find(item => item.element === activeItemHost)) {
        this.parentList.setActiveItem(activeItem);
      } else if (this.interactableList.integratedParentItem) {
        this.parentList.setActiveItem(this.interactableList.integratedParentItem.directive);
      }
    }
  }
  hasAnyChildren() {
    return this.items.some(item => item.items?.length);
  }
  levelOfChildren(counter = -1, items = this.entries.filter(entry => entry.isVisible).map(entry => entry.item)) {
    return Math.max(0, ...items.map(subitem => {
      if (!subitem.disabled && subitem.items?.length) {
        return this.levelOfChildren(counter + 1, subitem.items);
      } else {
        return counter + 1;
      }
    }));
  }
  responsivelyChangeDirection(elements) {
    const menu = this.getHostElement();
    const levelOfChildren = this.levelOfChildren();
    const {
      responsiveDirection
    } = responsivelyCheckDirection({
      isScrolling: false,
      currentDirection: this.dropstart ? 'start' : 'end',
      contentElements: elements,
      hostElement: menu,
      placement: '',
      placementReferenceElement: menu,
      align: 'center',
      responsiveDirectionToPlacement: false,
      closeOnPlacementReferenceScrollOut: false,
      closeOnContentScrollOut: false,
      minSpaceThresholdFactor: levelOfChildren > 1 ? levelOfChildren - 1 : undefined
    });
    const newDropstart = responsiveDirection === 'start';
    if (this.actualDropstart !== newDropstart) {
      this.actualDropstart = newDropstart;
    }
    this._changeDetector.markForCheck();
  }
  responsivelyCheckIfUpwards(element, itemElement, item) {
    const {
      responsiveDirection
    } = responsivelyCheckDirection({
      isScrolling: false,
      currentDirection: item.dropUpwards ? 'up' : 'down',
      contentElements: [element],
      hostElement: itemElement,
      placement: 'top',
      placementReferenceElement: itemElement,
      align: 'center',
      responsiveDirectionToPlacement: false,
      closeOnPlacementReferenceScrollOut: false,
      closeOnContentScrollOut: false,
      placementReverse: 'bottom',
      rtl: false
    });
    const newDropUpwards = responsiveDirection === 'up';
    if (item.dropUpwards !== newDropUpwards) {
      item.dropUpwards = newDropUpwards;
      const recursivelyApply = subitem => {
        if (subitem.items?.length) {
          subitem.items?.forEach(subsubitem => {
            subsubitem.dropUpwards = newDropUpwards;
            if (!subsubitem.disabled) {
              recursivelyApply(subsubitem);
            }
          });
        }
      };
      recursivelyApply(item);
    }
  }
  goDownLevel(reverse = false, start = false) {
    if (this.parentList) {
      this.closePreviousChild();
      const nestedOrParentItem = this.interactableList ? (this.interactableList.integratedParentItem ? this.interactableList.integratedParentItem : this.interactableList.items.find(item => item.parentIntegrationIndex !== -1 || item.nestedIntegration))?.directive : undefined;
      let actualReverse = reverse;
      const parent = this.parentList;
      if (parent.orientation === 'ets') {
        actualReverse = !actualReverse;
      }
      if (start && !parent.start) {
        actualReverse = !actualReverse;
      }
      parent.focusActiveItem('program', actualReverse, nestedOrParentItem);
    } else {
      this.goUpLevel(true);
    }
  }
  goUpLevel(reverse = false, start = false) {
    const active = this._keyManager.activeItem;
    if (active) {
      const activeList = active.childList;
      if (activeList) {
        activeList.focusFirstItem('program', reverse, true);
      } else if (this.parentList) {
        this.goDownLevel(true, start);
      }
    }
  }
  clickOutHandler(event) {
    const target = event.target;
    if (this.interactableList && !this._keyManager?.activeItem?.hasChildElement(target)) {
      this.closePreviousChild();
      removeEventListener('click', this.onClickOut);
    }
  }
  focusInEvent(target) {
    if (this.connectionsCalculated) {
      if (target === this.getHostElement()) {
        if (this.focus) {
          this.focusFirstItem('program', this.focus === 'last');
        }
      } else {
        if (this.interactableList) {
          const foundItem = this.interactableList.items.find(item => item.element.contains(target));
          if (foundItem) {
            this.setActiveItem(foundItem.directive);
          }
        }
        if (this.tabindex !== '-1') {
          this.tabindex = '-1';
        }
      }
    }
  }
  focusOutEvent() {
    if (this.tabindex === '-1') {
      Promise.resolve().then(() => this.tabindex = !this.isSubList || !this.parentList ? '0' : '');
    }
  }
  /** Returns the host DOM element. */
  getHostElement() {
    return this._elementRef.nativeElement;
  }
}
SiMenuComponent.ɵfac = function SiMenuComponent_Factory(t) {
  return new (t || SiMenuComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiListInteractionService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID));
};
SiMenuComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiMenuComponent,
  selectors: [["si-menu"]],
  hostVars: 7,
  hostBindings: function SiMenuComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown", function SiMenuComponent_keydown_HostBindingHandler($event) {
        return ctx.handleKeydown($event);
      })("focusin", function SiMenuComponent_focusin_HostBindingHandler($event) {
        return ctx.focusInEvent($event.target);
      })("focusout", function SiMenuComponent_focusout_HostBindingHandler() {
        return ctx.focusOutEvent();
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx.tabindex);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dropdown-menu-relative", ctx.relativePositioning)("dropdown-menu", ctx.hostDropdownMenu)("show", ctx.keepOpen);
    }
  },
  inputs: {
    items: "items",
    dropleft: "dropleft",
    dropstart: "dropstart",
    responsiveDropleft: "responsiveDropleft",
    responsiveDropstart: "responsiveDropstart",
    responsivelyDropUpwards: "responsivelyDropUpwards",
    actionParam: "actionParam",
    focusOnLoad: "focusOnLoad",
    focus: "focus",
    focusLastFromParent: "focusLastFromParent",
    isSubList: "isSubList",
    parentItem: "parentItem",
    refocusAfterEnter: "refocusAfterEnter",
    position: "position",
    autofocusFromParent: "autofocusFromParent",
    relativePositioning: "relativePositioning",
    forceTitle: "forceTitle"
  },
  outputs: {
    activeChange: "activeChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 2,
  vars: 2,
  consts: [["role", "menu", 1, "dropdown-menu-child"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "dropdown-divider", 4, "ngIf", "ngIfElse"], ["childrenTemplate", ""], ["badgeStyle", "inline", 3, "item", "actionParam", "disableParentClick", "disableLinklessClick", "forceTitle", "activeChange", 4, "ngIf"], ["badgeStyle", "inline", 3, "item", "actionParam", "disableParentClick", "disableLinklessClick", "forceTitle", "activeChange"], ["role", "presentation"], ["badgeStyle", "inline", "dropdownCaret", "end", 3, "item", "actionParam", "disableParentClick", "disableLinklessClick", "activeChange"], ["parentItem", ""], [3, "items", "dropstart", "responsiveDropstart", "focusLastFromParent", "responsivelyDropUpwards", "actionParam", "isSubList", "parentItem", "forceTitle", "activeChange"]],
  template: function SiMenuComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "ul", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiMenuComponent_ng_container_1_Template, 4, 2, "ng-container", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.items)("ngForTrackBy", ctx.trackByIndex);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiMenuComponent, SiMenuItemComponent],
  styles: ["[_nghost-%COMP%]{outline:none}.dropdown-menu-relative[_nghost-%COMP%]{display:inline-block;position:relative;inset-block-start:0}.dropupwards[_nghost-%COMP%]{inset-block:auto 0}.hidden[_nghost-%COMP%]{visibility:hidden}.dropdown-menu-child[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]{margin-inline:0}.dropdown-menu-child[_ngcontent-%COMP%] > li[_ngcontent-%COMP%]:not(.disabled):active > .dropdown-menu[_ngcontent-%COMP%], .dropdown-menu-child[_ngcontent-%COMP%] > li[_ngcontent-%COMP%]:not(.disabled):hover > .dropdown-menu[_ngcontent-%COMP%]{display:block}.dropdown-menu-child[_ngcontent-%COMP%]{list-style:none;padding:0;margin:0}"]
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiMenuComponent.prototype, "items", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiMenuComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-menu',
      template: "<ul class=\"dropdown-menu-child\" role=\"menu\">\n  <ng-container *ngFor=\"let item of items; trackBy: trackByIndex\">\n    <li\n      *ngIf=\"!hasChildren(item); else childrenTemplate\"\n      [attr.role]=\"item.title === '-' ? 'separator' : 'presentation'\"\n      [class.dropdown-divider]=\"item.title === '-'\"\n    >\n      <si-menu-item\n        *ngIf=\"item.title !== '-'\"\n        [item]=\"item\"\n        [actionParam]=\"actionParam\"\n        [disableParentClick]=\"true\"\n        [disableLinklessClick]=\"true\"\n        [forceTitle]=\"forceTitle\"\n        badgeStyle=\"inline\"\n        (activeChange)=\"linkActiveChange($event)\"\n      ></si-menu-item>\n    </li>\n    <ng-template #childrenTemplate>\n      <li\n        role=\"presentation\"\n        [class.dropstart]=\"actualDropstart\"\n        [class.dropend]=\"!actualDropstart\"\n        [class.disabled]=\"item.disabled\"\n      >\n        <si-menu-item\n          #parentItem\n          [item]=\"item\"\n          [actionParam]=\"actionParam\"\n          [disableParentClick]=\"true\"\n          [disableLinklessClick]=\"true\"\n          badgeStyle=\"inline\"\n          dropdownCaret=\"end\"\n          (activeChange)=\"linkActiveChange($event)\"\n        ></si-menu-item>\n        <si-menu\n          [class.hidden]=\"childrenHidden\"\n          [items]=\"item.items!\"\n          [dropstart]=\"actualDropstart\"\n          [responsiveDropstart]=\"responsiveDropstart\"\n          [class.dropupwards]=\"item.dropUpwards\"\n          [focusLastFromParent]=\"!!item.dropUpwards\"\n          [responsivelyDropUpwards]=\"responsivelyDropUpwards\"\n          [actionParam]=\"actionParam\"\n          [isSubList]=\"true\"\n          [parentItem]=\"parentItem\"\n          [forceTitle]=\"forceTitle\"\n          (activeChange)=\"linkActiveChange($event)\"\n        ></si-menu>\n      </li>\n    </ng-template>\n  </ng-container>\n</ul>\n",
      styles: [":host{outline:none}:host.dropdown-menu-relative{display:inline-block;position:relative;inset-block-start:0}:host.dropupwards{inset-block:auto 0}:host.hidden{visibility:hidden}.dropdown-menu-child .dropdown-menu{margin-inline:0}.dropdown-menu-child>li:not(.disabled):active>.dropdown-menu,.dropdown-menu-child>li:not(.disabled):hover>.dropdown-menu{display:block}.dropdown-menu-child{list-style:none;padding:0;margin:0}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }, {
      type: SiListInteractionService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }];
  }, {
    items: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropleft: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dropstart: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    responsiveDropleft: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    responsiveDropstart: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    responsivelyDropUpwards: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    actionParam: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    focusOnLoad: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    focus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    focusLastFromParent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    isSubList: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    parentItem: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    refocusAfterEnter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    position: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    autofocusFromParent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    relativePositioning: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.dropdown-menu-relative']
    }],
    forceTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    activeChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    hostDropdownMenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.dropdown-menu']
    }],
    keepOpen: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.show']
    }],
    tabindex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['attr.tabindex']
    }],
    handleKeydown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keydown', ['$event']]
    }],
    focusInEvent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focusin', ['$event.target']]
    }],
    focusOutEvent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focusout']
    }]
  });
})();
class SiContentActionBarMenuComponent {
  constructor() {
    /**
     * Secondary toggle icon aria label, required for a11y
     */
    this.toggleItemLabel = 'toggle';
    this.secondaryToggleItem = {
      title: this.toggleItemLabel,
      icon: 'element-options-vertical',
      iconOnly: true
    };
    this.trackByIndex = index => index;
  }
  ngOnChanges(changes) {
    if (changes.toggleItemLabel) {
      this.secondaryToggleItem.title = this.toggleItemLabel;
    }
  }
}
SiContentActionBarMenuComponent.ɵfac = function SiContentActionBarMenuComponent_Factory(t) {
  return new (t || SiContentActionBarMenuComponent)();
};
SiContentActionBarMenuComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiContentActionBarMenuComponent,
  selectors: [["", "si-content-action-bar-menu", ""]],
  inputs: {
    primaryActions: "primaryActions",
    secondaryActions: "secondaryActions",
    actionParam: "actionParam",
    toggleItemLabel: "toggleItemLabel"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  attrs: _c15,
  decls: 2,
  vars: 2,
  consts: [[4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "main-menu", 4, "ngIf"], ["class", "dropdown main-menu", "siDropdown", "", "dropdownAlign", "end", "dropdownContainer", "body", 3, "disabled", "active", "dropdownResponsiveDirection", "dropdownFocusOnOpen", 4, "ngIf"], [1, "main-menu"], [3, "item", "actionParam", "focusStylingInside"], ["siDropdown", "", "dropdownAlign", "end", "dropdownContainer", "body", 1, "dropdown", "main-menu", 3, "dropdownResponsiveDirection", "dropdownFocusOnOpen"], ["dropdownPrimary", "si-dropdown"], ["siDropdownToggle", "", 3, "item", "actionParam", "disableParentClick", "dropdownToggle", "focusStylingInside", 4, "ngIf"], [3, "item", "actionParam", "disableParentClick", "focusStylingInside", 4, "ngIf"], ["position", "adjacent", "siDropdownMenu", "", 3, "items", "dropstart", "actionParam", "isSubList", "forceTitle", 4, "ngIf"], ["siDropdownToggle", "", 3, "item", "actionParam", "disableParentClick", "dropdownToggle", "focusStylingInside"], ["dropdownToggle", "si-dropdown-toggle"], [3, "item", "actionParam", "disableParentClick", "focusStylingInside"], ["position", "adjacent", "siDropdownMenu", "", 3, "items", "dropstart", "actionParam", "isSubList", "forceTitle"], ["siDropdown", "", "dropdownAlign", "end", "dropdownContainer", "body", 1, "dropdown", "main-menu", "menu-icon", 3, "dropdownResponsiveDirection", "dropdownFocusOnOpen"], ["dropdownSecondary", "si-dropdown"], ["siDropdownToggle", "", 1, "secondary-toggle", 3, "item", "actionParam", "dropdownToggle", "focusStylingInside"]],
  template: function SiContentActionBarMenuComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiContentActionBarMenuComponent_ng_container_0_Template, 3, 6, "ng-container", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiContentActionBarMenuComponent_ng_container_1_Template, 6, 7, "ng-container", 0);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.primaryActions == null ? null : ctx.primaryActions.length);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.secondaryActions == null ? null : ctx.secondaryActions.length);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiDropdownDirective, SiDropdownMenuDirective, SiDropdownToggleDirective, SiMenuComponent, SiMenuItemComponent, _angular_common__WEBPACK_IMPORTED_MODULE_1__.SlicePipe],
  styles: [".main-menu[_ngcontent-%COMP%] ~ .main-menu[_ngcontent-%COMP%]{margin-inline-start:1px}.main-menu[_ngcontent-%COMP%]   si-menu-item[_ngcontent-%COMP%]  .dropdown-item{padding-block:6px;padding-inline:8px;block-size:32px;line-height:1.143;border-radius:var(--cab-radius)}.main-menu[_ngcontent-%COMP%]   si-menu-item[_ngcontent-%COMP%]  .dropdown-item.dropdown-item-icon-only{padding-inline:8px}.main-menu[_ngcontent-%COMP%]   si-menu-item[_ngcontent-%COMP%]  .dropdown-item.dropdown-item-icon-only .item-icon{margin-inline:0}.main-menu[_ngcontent-%COMP%]   si-menu-item[_ngcontent-%COMP%]  .dropdown-item .item-icon{margin-inline-start:-4px}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiContentActionBarMenuComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: '[si-content-action-bar-menu]',
      template: "<ng-container *ngIf=\"primaryActions?.length\">\n  <ng-container *ngFor=\"let item of primaryActions | slice:0:4; trackBy: trackByIndex\">\n    <div *ngIf=\"!item.items\" class=\"main-menu\">\n      <si-menu-item [item]=\"item\" [actionParam]=\"actionParam\" [focusStylingInside]=\"true\"></si-menu-item>\n    </div>\n    <div\n      *ngIf=\"item.items\"\n      class=\"dropdown main-menu\"\n      [class.disabled]=\"item.disabled\"\n      [class.active]=\"item.isActive\"\n      siDropdown\n      dropdownAlign=\"end\"\n      dropdownContainer=\"body\"\n      [dropdownResponsiveDirection]=\"true\"\n      [dropdownFocusOnOpen]=\"false\"\n      #dropdownPrimary=\"si-dropdown\"\n    >\n      <si-menu-item\n        *ngIf=\"!item.disabled\"\n        siDropdownToggle\n        #dropdownToggle=\"si-dropdown-toggle\"\n        [item]=\"item\"\n        [actionParam]=\"actionParam\"\n        [disableParentClick]=\"false\"\n        [dropdownToggle]=\"dropdownToggle\"\n        [focusStylingInside]=\"true\"\n      ></si-menu-item>\n      <si-menu-item\n        *ngIf=\"item.disabled\"\n        [item]=\"item\"\n        [actionParam]=\"actionParam\"\n        [disableParentClick]=\"false\"\n        [focusStylingInside]=\"true\"\n      ></si-menu-item>\n      <si-menu\n        *ngIf=\"dropdownPrimary.isOpen\"\n        [items]=\"item.items\"\n        [dropstart]=\"true\"\n        [actionParam]=\"actionParam\"\n        position=\"adjacent\"\n        [isSubList]=\"true\"\n        [forceTitle]=\"true\"\n        siDropdownMenu\n      ></si-menu>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"secondaryActions?.length\">\n  <div\n    class=\"dropdown main-menu menu-icon\"\n    siDropdown\n    dropdownAlign=\"end\"\n    dropdownContainer=\"body\"\n    [dropdownResponsiveDirection]=\"true\"\n    [dropdownFocusOnOpen]=\"false\"\n    #dropdownSecondary=\"si-dropdown\"\n  >\n    <si-menu-item\n      class=\"secondary-toggle\"\n      siDropdownToggle\n      #dropdownToggle=\"si-dropdown-toggle\"\n      [item]=\"secondaryToggleItem\"\n      [actionParam]=\"actionParam\"\n      [dropdownToggle]=\"dropdownToggle\"\n      [focusStylingInside]=\"true\"\n    ></si-menu-item>\n    <si-menu\n      *ngIf=\"dropdownSecondary.isOpen\"\n      [items]=\"secondaryActions!\"\n      [dropstart]=\"true\"\n      [actionParam]=\"actionParam\"\n      position=\"adjacent\"\n      [isSubList]=\"true\"\n      [forceTitle]=\"true\"\n      siDropdownMenu\n    ></si-menu>\n  </div>\n</ng-container>\n",
      styles: [".main-menu~.main-menu{margin-inline-start:1px}.main-menu si-menu-item::ng-deep .dropdown-item{padding-block:6px;padding-inline:8px;block-size:32px;line-height:1.143;border-radius:var(--cab-radius)}.main-menu si-menu-item::ng-deep .dropdown-item.dropdown-item-icon-only{padding-inline:8px}.main-menu si-menu-item::ng-deep .dropdown-item.dropdown-item-icon-only .item-icon{margin-inline:0}.main-menu si-menu-item::ng-deep .dropdown-item .item-icon{margin-inline-start:-4px}\n"]
    }]
  }], null, {
    primaryActions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    secondaryActions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    actionParam: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    toggleItemLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
const RESIZE_THROTTLE_TIMEOUT = 100;
const MIN_TEXT_WIDTH = 20;
const MAX_TEXT_WIDTH = 180;
class SiContentActionBarComponent {
  constructor(resizeObserver, translate, measureService, changeDetectorRef) {
    this.resizeObserver = resizeObserver;
    this.translate = translate;
    this.measureService = measureService;
    this.changeDetectorRef = changeDetectorRef;
    /**
     * Selection of view type as 'collapsible', 'expanded' or 'mobile'.
     */
    this.viewType = 'expanded';
    /**
     * Specifies whether the component should automatically be focused as soon as it is loaded.
     */
    this.focusOnLoad = false;
    /**
     * Toggle icon aria-label, required for a11y
     */
    this.toggleItemLabel = 'toggle';
    this.isMobile = false;
    this.isExpanded = false;
    this.isCollapsible = false;
    this.isExpandedCollapsible = false;
    this.toggleItem = {
      title: this.toggleItemLabel,
      icon: 'element-options-vertical',
      iconOnly: true,
      action: () => {
        if (this.isCollapsible) {
          this.isExpandedCollapsible = !this.isExpandedCollapsible;
          this.toggleItem.icon = this.isExpandedCollapsible ? 'element-cancel' : 'element-options-vertical';
          this.changeDetectorRef.markForCheck();
        }
      }
    };
    this.mobileActions = [];
  }
  ngOnInit() {
    if (this.viewType === 'mobile') {
      // if mobile mode is requested initially, directly apply for instant display
      this.actualViewType = 'mobile';
      this.isMobile = true;
    } else {
      this.setResponsiveSize();
      this.setupObservers();
    }
  }
  ngOnDestroy() {
    this.resizeSubs?.unsubscribe();
    this.grandParentSubs?.unsubscribe();
  }
  visibilityChange() {
    const grandParent = this.elementRef.nativeElement.parentElement?.parentElement;
    if (grandParent) {
      if (grandParent === this.grandParent) {
        // no change, already observing the right thing
        return;
      }
      // change in grand parent (also on init): forget old, observe new
      this.grandParentSubs?.unsubscribe();
      this.grandParentSubs = this.resizeObserver.observe(grandParent, RESIZE_THROTTLE_TIMEOUT, true, true).subscribe(() => {
        this.setResponsiveSize();
        this.changeDetectorRef.markForCheck();
      });
    } else {
      // grand parent gone away, i.e. outer container is invisible (e.g. inactive tab)
      this.grandParentSubs?.unsubscribe();
      this.grandParentSubs = undefined;
    }
    this.grandParent = grandParent;
    this.changeDetectorRef.markForCheck();
  }
  ngOnChanges(changes) {
    if (changes.toggleItemLabel) {
      this.toggleItem.title = this.toggleItemLabel;
    }
    if (changes.viewType && !changes.viewType.firstChange) {
      if (!this.viewType) {
        this.viewType = 'expanded';
      }
      if (this.mobileDropdown) {
        this.mobileDropdown.close();
      }
      this.setResponsiveSize();
      this.setupObservers();
    }
    if (changes.primaryActions && !changes.primaryActions.firstChange) {
      this.setResponsiveSize();
    }
    if (this.primaryActions?.length && this.secondaryActions?.length) {
      this.mobileActions = this.primaryActions.slice();
      this.mobileActions.push({
        title: '-'
      });
      this.mobileActions.push(...this.secondaryActions);
    } else if (this.primaryActions?.length) {
      this.mobileActions = this.primaryActions;
    } else if (this.secondaryActions?.length) {
      this.mobileActions = this.secondaryActions;
    }
    this.changeDetectorRef.markForCheck();
  }
  mobileDropdownToggle(state) {
    this.toggleItem.icon = state ? 'element-cancel' : 'element-options-vertical';
  }
  setupObservers() {
    this.resizeSubs?.unsubscribe();
    this.grandParentSubs?.unsubscribe();
    if (this.viewType && this.viewType !== 'mobile') {
      this.resizeSubs = this.resizeObserver.observe(this.elementRef.nativeElement, RESIZE_THROTTLE_TIMEOUT, true, true).subscribe(() => this.visibilityChange());
    }
  }
  setResponsiveSize() {
    const grandParent = this.elementRef.nativeElement.parentElement?.parentElement;
    let grandParentPadding = 0;
    if (grandParent) {
      const style = getComputedStyle(grandParent);
      grandParentPadding = parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) || 0;
    }
    let parentWidth = Math.max((grandParent?.clientWidth ?? 0) - grandParentPadding, 0);
    const parentHeight = grandParent?.clientHeight ?? 0;
    let requiredWidth = 0;
    let minRequiredWidth = 0;
    if (parentWidth && this.primaryActions?.length && this.viewType !== 'mobile') {
      requiredWidth += this.calcAdditionalWidth();
      minRequiredWidth = requiredWidth;
      for (const item of this.primaryActions) {
        requiredWidth += this.calcItemWidth(item, MAX_TEXT_WIDTH);
        minRequiredWidth += this.calcItemWidth(item, MIN_TEXT_WIDTH);
      }
    }
    if (!parentWidth && !parentHeight || !this.primaryActions || !this.primaryActions.length) {
      // not visible or no primary items -> fall back to mobile
      parentWidth = 0;
    }
    if (parentWidth && requiredWidth > parentWidth && minRequiredWidth < parentWidth) {
      // only look at the real thing if there isn't enough space using max. values but stuff
      // _might_ fit anyway.
      this.calculateActualRequiredWidth(parentWidth, requiredWidth);
    } else {
      this.applyResponsiveSize(parentWidth, requiredWidth);
    }
    this.changeDetectorRef.markForCheck();
  }
  calcAdditionalWidth() {
    let width = -1; // last item
    if (this.secondaryActions?.length) {
      width += 41;
    }
    if (this.viewType === 'collapsible') {
      width += 41;
    }
    return width;
  }
  calcItemWidth(item, textWidth) {
    let width = 1; // spacer between items
    if (item.iconOnly) {
      width += 40;
    } else {
      width += Math.min(textWidth, MAX_TEXT_WIDTH);
      if (item.icon) {
        width += 28; // icon, negative left margin, spacing to text
      }

      width += 16; // padding
    }

    if (item.items?.length) {
      width += 22; // the dropdown arrow, margin left, negative margin right
    }

    return width;
  }
  calculateActualRequiredWidth(parentWidth, maxReqWidth) {
    const keys = this.primaryActions?.map(item => item.title ?? '');
    if (!keys?.length) {
      this.applyResponsiveSize(parentWidth, maxReqWidth);
      return;
    }
    if (keys.length > 4) {
      keys.length = 4;
    }
    this.translate.translateAsync(keys).subscribe(translations => {
      const requiredWidth = keys.reduce((acc, item, index) => {
        const textWidth = item ? this.measureService.measureText(translations[item]) : 0;
        const itemWidth = this.calcItemWidth(this.primaryActions[index], textWidth);
        return acc + itemWidth;
      }, this.calcAdditionalWidth());
      this.applyResponsiveSize(parentWidth, requiredWidth);
    });
  }
  applyResponsiveSize(parentWidth, requiredWidth) {
    const enoughWidth = parentWidth > requiredWidth || !this.hasMobileMenu();
    this.isMobile = this.viewType === 'mobile' || !enoughWidth;
    this.isExpanded = !this.isMobile && this.viewType === 'expanded' && enoughWidth;
    this.isCollapsible = !this.isMobile && this.viewType === 'collapsible' && enoughWidth;
    if (!this.isCollapsible) {
      this.isExpandedCollapsible = false;
    }
    this.toggleItem.icon = this.isExpandedCollapsible ? 'element-cancel' : 'element-options-vertical';
    const newActualViewType = this.isMobile ? 'mobile' : this.isExpanded ? 'expanded' : 'collapsible';
    if (newActualViewType !== this.actualViewType) {
      this.actualViewType = newActualViewType;
      if (this.mobileDropdown) {
        this.mobileDropdown.close();
      }
    }
    this.changeDetectorRef.markForCheck();
  }
  hasMobileMenu() {
    if (!(this.mobileActions?.length !== 0)) {
      return false;
    } else if (this.mobileActions.length === 1) {
      return !this.mobileActions[0].iconOnly;
    } else {
      return true;
    }
  }
}
SiContentActionBarComponent.ɵfac = function SiContentActionBarComponent_Factory(t) {
  return new (t || SiContentActionBarComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ResizeObserverService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiTranslateService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](TextMeasureService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiContentActionBarComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiContentActionBarComponent,
  selectors: [["si-content-action-bar"]],
  viewQuery: function SiContentActionBarComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c16, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c17, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.elementRef = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.mobileDropdown = _t.first);
    }
  },
  inputs: {
    primaryActions: "primaryActions",
    secondaryActions: "secondaryActions",
    actionParam: "actionParam",
    viewType: "viewType",
    focusOnLoad: "focusOnLoad",
    toggleItemLabel: "toggleItemLabel"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 4,
  vars: 11,
  consts: [["siListInteraction", "", 3, "listInteractionFocusOnLoad", "listInteractionFocus", "listInteractionRefocusAfterEnter"], ["main", ""], ["class", "main-container", "siDropdown", "", "dropdownAlign", "end", "dropdownContainer", "body", "dropdownPlacementReference", ".menu-nav.toggle.mobile", 3, "dropdownResponsiveDirection", "dropdownFocusOnOpen", "dropdownOnToggle", 4, "ngIf"], ["class", "main-container", 4, "ngIf"], ["siDropdown", "", "dropdownAlign", "end", "dropdownContainer", "body", "dropdownPlacementReference", ".menu-nav.toggle.mobile", 1, "main-container", 3, "dropdownResponsiveDirection", "dropdownFocusOnOpen", "dropdownOnToggle"], ["mobileDropdown", "si-dropdown"], ["position", "adjacent", "siDropdownMenu", "", 3, "items", "dropstart", "actionParam", "isSubList", "forceTitle", 4, "ngIf"], ["siDropdownToggle", "", "class", "menu-nav toggle mobile menu-icon expand-toggle", "role", "menu", 4, "ngIf"], ["position", "adjacent", "siDropdownMenu", "", 3, "items", "dropstart", "actionParam", "isSubList", "forceTitle"], ["siDropdownToggle", "", "role", "menu", 1, "menu-nav", "toggle", "mobile", "menu-icon", "expand-toggle"], [3, "item", "focusStylingInside"], [1, "main-container"], ["si-content-action-bar-menu", "", "role", "menu", 1, "menu-nav", "menu-links", 3, "actionParam", "primaryActions", "secondaryActions", "toggleItemLabel"], ["contentActionBarMenu", ""], ["role", "menu", 1, "menu-nav", "toggle", "menu-icon", "expand-toggle"]],
  template: function SiContentActionBarComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiContentActionBarComponent_div_2_Template, 4, 4, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiContentActionBarComponent_div_3_Template, 5, 12, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mobile", ctx.isMobile)("expanded", ctx.isExpanded)("collapsible", ctx.isCollapsible);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("listInteractionFocusOnLoad", ctx.focusOnLoad)("listInteractionFocus", ctx.isCollapsible ? "last" : ctx.isMobile ? "first" : !(ctx.secondaryActions == null ? null : ctx.secondaryActions.length) && (ctx.primaryActions == null ? null : ctx.primaryActions.length) === 1 ? "first" : "")("listInteractionRefocusAfterEnter", ctx.isCollapsible || ctx.isMobile);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.isMobile);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.actualViewType && !ctx.isMobile);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiDropdownDirective, SiDropdownMenuDirective, SiDropdownToggleDirective, SiListInteractionDirective, SiMenuComponent, SiMenuItemComponent, SiContentActionBarMenuComponent],
  styles: ["[_nghost-%COMP%]{--cab-radius: calc(var(--element-input-radius) - var(--element-radius-1))}[_nghost-%COMP%] > div[_ngcontent-%COMP%]{block-size:32px}.main-container[_ngcontent-%COMP%]{display:flex;position:relative;flex-wrap:nowrap}.main-container[_ngcontent-%COMP%] > .menu-nav[_ngcontent-%COMP%]{block-size:32px}.expand-toggle[_ngcontent-%COMP%]   si-menu-item[_ngcontent-%COMP%]{border-radius:var(--cab-radius)}.expand-toggle[_ngcontent-%COMP%]     .dropdown-item{padding-block:6px;padding-inline:8px;block-size:32px;border-radius:var(--cab-radius)}.expand-toggle.active[_ngcontent-%COMP%]:not(.mobile)   si-menu-item[_ngcontent-%COMP%]{border-start-start-radius:0;border-end-start-radius:0}.menu-nav[_ngcontent-%COMP%]     si-menu-item .dropdown-item:hover:not(.dropdown-item-static), .menu-nav[_ngcontent-%COMP%]     si-menu-item.show .dropdown-item{background:var(--element-action-secondary-hover);color:var(--element-action-secondary-text-hover)}.menu-nav[_ngcontent-%COMP%]     .main-menu:first-child si-menu-item{border-start-start-radius:var(--cab-radius);border-end-start-radius:var(--cab-radius)}.menu-nav[_ngcontent-%COMP%]     si-menu-item{display:flex;background:var(--element-base-1)}.menu-nav[_ngcontent-%COMP%]     si-menu-item .dropdown-item{color:var(--element-action-secondary-text)}.menu-nav[_ngcontent-%COMP%]     si-menu-item .dropdown-item.active{background:var(--element-base-1-hover)}.menu-nav[_ngcontent-%COMP%]     si-menu-item .dropdown-item.disabled{opacity:var(--element-action-disabled-opacity)}.menu-nav[_ngcontent-%COMP%]     si-menu-item .item-title{max-inline-size:180px}.menu-nav[_ngcontent-%COMP%]     .dropdown.show>a{background:var(--element-ui-4)}.menu-nav.expanded[_ngcontent-%COMP%]     .main-menu:last-child si-menu-item{border-start-end-radius:var(--cab-radius);border-end-end-radius:var(--cab-radius)}.element-options-vertical[_ngcontent-%COMP%], .element-cancel[_ngcontent-%COMP%]{font-size:1.5rem}.collapsible[_ngcontent-%COMP%]   .menu-links[_ngcontent-%COMP%]{display:none}.collapsible[_ngcontent-%COMP%]   .menu-links.active[_ngcontent-%COMP%]{display:flex}.expanded[_ngcontent-%COMP%]   .menu-nav.toggle[_ngcontent-%COMP%]{display:none}.expanded[_ngcontent-%COMP%]   .menu-links.active[_ngcontent-%COMP%]{display:flex}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiContentActionBarComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-content-action-bar',
      template: "<div #main\n  [class.mobile]=\"isMobile\"\n  [class.expanded]=\"isExpanded\"\n  [class.collapsible]=\"isCollapsible\"\n  siListInteraction\n  [listInteractionFocusOnLoad]=\"focusOnLoad\"\n  [listInteractionFocus]=\"isCollapsible ? 'last' : (isMobile ? 'first' : !secondaryActions?.length && primaryActions?.length === 1 ? 'first' : '')\"\n  [listInteractionRefocusAfterEnter]=\"isCollapsible || isMobile\"\n>\n  <div *ngIf=\"isMobile\"\n    class=\"main-container\"\n    siDropdown\n    dropdownAlign=\"end\"\n    dropdownContainer=\"body\"\n    dropdownPlacementReference=\".menu-nav.toggle.mobile\"\n    [dropdownResponsiveDirection]=\"true\"\n    [dropdownFocusOnOpen]=\"false\"\n    (dropdownOnToggle)=\"mobileDropdownToggle($event)\"\n    #mobileDropdown=\"si-dropdown\"\n  >\n    <si-menu\n      *ngIf=\"mobileDropdown.isOpen\"\n      [items]=\"mobileActions\"\n      [dropstart]=\"true\"\n      [actionParam]=\"actionParam\"\n      [isSubList]=\"true\"\n      position=\"adjacent\"\n      [forceTitle]=\"true\"\n      siDropdownMenu\n    ></si-menu>\n    <div\n      *ngIf=\"primaryActions?.length || secondaryActions?.length\"\n      siDropdownToggle\n      class=\"menu-nav toggle mobile menu-icon expand-toggle\"\n      role=\"menu\"\n    >\n      <si-menu-item [item]=\"toggleItem\" [focusStylingInside]=\"true\"></si-menu-item>\n    </div>\n  </div>\n  <div *ngIf=\"actualViewType && !isMobile\" class=\"main-container\">\n    <div class=\"menu-nav menu-links\"\n      [class.expanded]=\"isExpanded\"\n      [class.active]=\"isExpanded || isExpandedCollapsible\"\n      si-content-action-bar-menu\n      #contentActionBarMenu\n      [actionParam]=\"actionParam\"\n      [primaryActions]=\"primaryActions\"\n      [secondaryActions]=\"secondaryActions\"\n      [toggleItemLabel]=\"toggleItemLabel\"\n      role=\"menu\"\n    ></div>\n    <div\n      class=\"menu-nav toggle menu-icon expand-toggle\"\n      [class.active]=\"isExpanded || isExpandedCollapsible\"\n      role=\"menu\"\n    >\n      <si-menu-item [item]=\"toggleItem\" [focusStylingInside]=\"true\"></si-menu-item>\n    </div>\n  </div>\n</div>\n",
      styles: [":host{--cab-radius: calc(var(--element-input-radius) - var(--element-radius-1))}:host>div{block-size:32px}.main-container{display:flex;position:relative;flex-wrap:nowrap}.main-container>.menu-nav{block-size:32px}.expand-toggle si-menu-item{border-radius:var(--cab-radius)}.expand-toggle ::ng-deep .dropdown-item{padding-block:6px;padding-inline:8px;block-size:32px;border-radius:var(--cab-radius)}.expand-toggle.active:not(.mobile) si-menu-item{border-start-start-radius:0;border-end-start-radius:0}.menu-nav ::ng-deep si-menu-item .dropdown-item:hover:not(.dropdown-item-static),.menu-nav ::ng-deep si-menu-item.show .dropdown-item{background:var(--element-action-secondary-hover);color:var(--element-action-secondary-text-hover)}.menu-nav ::ng-deep .main-menu:first-child si-menu-item{border-start-start-radius:var(--cab-radius);border-end-start-radius:var(--cab-radius)}.menu-nav ::ng-deep si-menu-item{display:flex;background:var(--element-base-1)}.menu-nav ::ng-deep si-menu-item .dropdown-item{color:var(--element-action-secondary-text)}.menu-nav ::ng-deep si-menu-item .dropdown-item.active{background:var(--element-base-1-hover)}.menu-nav ::ng-deep si-menu-item .dropdown-item.disabled{opacity:var(--element-action-disabled-opacity)}.menu-nav ::ng-deep si-menu-item .item-title{max-inline-size:180px}.menu-nav ::ng-deep .dropdown.show>a{background:var(--element-ui-4)}.menu-nav.expanded ::ng-deep .main-menu:last-child si-menu-item{border-start-end-radius:var(--cab-radius);border-end-end-radius:var(--cab-radius)}.element-options-vertical,.element-cancel{font-size:1.5rem}.collapsible .menu-links{display:none}.collapsible .menu-links.active{display:flex}.expanded .menu-nav.toggle{display:none}.expanded .menu-links.active{display:flex}\n"]
    }]
  }], function () {
    return [{
      type: ResizeObserverService
    }, {
      type: SiTranslateService
    }, {
      type: TextMeasureService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    primaryActions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    secondaryActions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    actionParam: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    viewType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    focusOnLoad: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    toggleItemLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    elementRef: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['main', {
        static: true
      }]
    }],
    mobileDropdown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['mobileDropdown']
    }]
  });
})();
class SiListInteractionItemDirective {
  get disabled() {
    return !(this.element.nativeElement.offsetParent || this.isBrowser && window.getComputedStyle(this.element.nativeElement).position === 'fixed' && window.getComputedStyle(this.element.nativeElement).display !== 'none') || this.listInteractionItemDisabled;
  }
  get dropdownToggle() {
    return this.listInteractionItemDropdownToggle;
  }
  get parentList() {
    if (this.interactableListItem?.parent) {
      return this.interactableListItem.parent.directive;
    }
    return null;
  }
  get childList() {
    if (this.interactableListItem?.child && this.interactableListItem.child.trigger?.element === this.interactableListItem.element) {
      return this.interactableListItem.child.directive;
    }
    return null;
  }
  constructor(element, listInteractionService, platformId) {
    this.element = element;
    this.listInteractionService = listInteractionService;
    /**
     * Whether the list item interaction is disabled.
     */
    this.listInteractionItemDisabled = false;
    this.tabindex = '-1';
    this.isBrowser = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId);
  }
  ngOnInit() {
    this.interactableListItem = this.listInteractionService.addInteractableListItem(this, this.element.nativeElement);
  }
  ngOnDestroy() {
    if (this.interactableListItem) {
      this.listInteractionService.removeInteractableListItem(this.interactableListItem);
    }
  }
  /** Focuses the list item. */
  focus(origin, options) {
    if (this.interactableListItem.parent) {
      this.interactableListItem.parent.directive.setActiveItem(this);
    }
    this.element.nativeElement.focus(options);
  }
  /** Returns the host DOM element. */
  getHostElement() {
    return this.element.nativeElement;
  }
  hasChildElement(element) {
    return this.interactableListItem ? this.listInteractionService.isChildElementOfItem(this.interactableListItem, element) : this.element.nativeElement.contains(element);
  }
  getItemElement() {
    return this.getHostElement();
  }
}
SiListInteractionItemDirective.ɵfac = function SiListInteractionItemDirective_Factory(t) {
  return new (t || SiListInteractionItemDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiListInteractionService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID));
};
SiListInteractionItemDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiListInteractionItemDirective,
  selectors: [["", "siListInteractionItem", ""]],
  hostVars: 1,
  hostBindings: function SiListInteractionItemDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx.tabindex);
    }
  },
  inputs: {
    listInteractionItemDisabled: "listInteractionItemDisabled",
    listInteractionItemDropdownToggle: "listInteractionItemDropdownToggle"
  },
  exportAs: ["si-list-interaction-item"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiListInteractionItemDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siListInteractionItem]',
      exportAs: 'si-list-interaction-item'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: SiListInteractionService
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }];
  }, {
    listInteractionItemDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listInteractionItemDropdownToggle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    tabindex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['attr.tabindex']
    }]
  });
})();
class SiListInteractionModule {}
SiListInteractionModule.ɵfac = function SiListInteractionModule_Factory(t) {
  return new (t || SiListInteractionModule)();
};
SiListInteractionModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiListInteractionModule
});
SiListInteractionModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiListInteractionModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule],
      declarations: [SiListInteractionDirective, SiListInteractionItemDirective],
      exports: [SiListInteractionDirective, SiListInteractionItemDirective]
    }]
  }], null, null);
})();
class SiDropdownModule {}
SiDropdownModule.ɵfac = function SiDropdownModule_Factory(t) {
  return new (t || SiDropdownModule)();
};
SiDropdownModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiDropdownModule
});
SiDropdownModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDropdownModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule],
      declarations: [SiDropdownContainerComponent, SiDropdownDirective, SiDropdownMenuDirective, SiDropdownToggleDirective],
      exports: [SiDropdownDirective, SiDropdownMenuDirective, SiDropdownToggleDirective]
    }]
  }], null, null);
})();
class SiMenuModule {}
SiMenuModule.ɵfac = function SiMenuModule_Factory(t) {
  return new (t || SiMenuModule)();
};
SiMenuModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiMenuModule
});
SiMenuModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiLinkModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiMenuModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiLinkModule, SiTranslateModule],
      declarations: [SiMenuComponent, SiMenuItemComponent],
      exports: [SiMenuComponent, SiMenuItemComponent]
    }]
  }], null, null);
})();
class SiContentActionBarModule {}
SiContentActionBarModule.ɵfac = function SiContentActionBarModule_Factory(t) {
  return new (t || SiContentActionBarModule)();
};
SiContentActionBarModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiContentActionBarModule
});
SiContentActionBarModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiDropdownModule, SiListInteractionModule, SiMenuModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiContentActionBarModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiDropdownModule, SiListInteractionModule, SiMenuModule, SiTranslateModule],
      declarations: [SiContentActionBarComponent, SiContentActionBarMenuComponent],
      exports: [SiContentActionBarComponent]
    }]
  }], null, null);
})();

// -------------------------------------------------------------------------------

const WEEK_ISO = [{
  id: 'monday',
  index: 1,
  offset: 0,
  isWeekend: false
}, {
  id: 'tuesday',
  index: 2,
  offset: 1,
  isWeekend: false
}, {
  id: 'wednesday',
  index: 3,
  offset: 2,
  isWeekend: false
}, {
  id: 'thursday',
  index: 4,
  offset: 3,
  isWeekend: false
}, {
  id: 'friday',
  index: 5,
  offset: 4,
  isWeekend: false
}, {
  id: 'saturday',
  index: 6,
  offset: 5,
  isWeekend: true
}, {
  id: 'sunday',
  index: 7,
  offset: 6,
  isWeekend: true
}];
const WEEK_START_OFFSET = {
  'monday': 0,
  'saturday': 5,
  'sunday': 6
};
const UNITS = {
  millisecondsPerDay: 86400000,
  daysPerWeek: 7,
  thursday: 4
};
const dayOfWeekMap = {};
const getDaysOfWeek = weekStart => {
  weekStart = weekStart ?? 'monday';
  let weekdays = dayOfWeekMap[weekStart];
  if (!weekdays) {
    dayOfWeekMap[weekStart] = weekdays = [];
    const offset = WEEK_START_OFFSET[weekStart];
    for (let i = 0; i < 7; i++) {
      weekdays.push({
        ...WEEK_ISO[(i + offset) % 7],
        offset: i
      });
    }
  }
  return weekdays;
};
/**
 * Gets the first day in the specified month.
 * Expects the month as a value between 1 and 12.
 * The year is required to handle leap years.
 *
 * @returns The first day of the month as a Date.
 */
const getFirstDayInMonth = (year, month) => new Date(year, month - 1, 1);
/**
 * Gets the week number of the specified date.
 * Week number according to the ISO-8601 standard, weeks starting on Monday.
 * The first week of a year is the week that contains the first Thursday of the year (='First 4-day week').
 * The highest week number in a year is either 52 or 53.
 *
 * @param date The JavaScript date object.
 * @param weekStart Name of the first day of the week
 * @returns The number of the Week
 */
const getWeekOfYear = (date, weekStart) => {
  // Algorithm rewritten from C# example given at http://en.wikipedia.org/wiki/Talk:ISO_week_date
  const dayOfWeek = getWeekDayOffset(date, weekStart) + 1;
  const nearestThu = new Date(date);
  nearestThu.setDate(date.getDate() + (UNITS.thursday - dayOfWeek)); // get nearest Thursday (-3..+3 days)
  const year = nearestThu.getFullYear();
  const janfirst = getFirstDayInMonth(year, 1);
  const days = Math.floor((nearestThu - janfirst) / UNITS.millisecondsPerDay);
  const week = 1 + Math.floor(days / UNITS.daysPerWeek); // Count of Thursdays
  return week;
};
const getWeekDayOffset = (date, weekStart) => {
  const offset = WEEK_START_OFFSET[weekStart ?? 'monday'];
  return (date.getDay() + 6 - offset) % 7;
};
/** returns the date string in format YYYY-MM-DD for given date */
const getStringforDate = date => {
  let month = '' + (date.getMonth() + 1);
  let day = '' + date.getDate();
  const year = date.getFullYear();
  if (month.length < 2) {
    month = '0' + month;
  }
  if (day.length < 2) {
    day = '0' + day;
  }
  return `${year}-${month}-${day}`;
};
/**
 * Create a new date without time.
 * @param value date object
 * @param hours numeric value of the hours.
 * @param minutes numeric value of the minutes.
 * @param seconds numeric value of the seconds.
 * @param milliseconds numeric value of the milliseconds.
 * @returns
 */
const createDate = (value, hours = 0, minutes = 0, seconds = 0, milliseconds = 0) => {
  const newDate = new Date(value.getFullYear(), value.getMonth(), value.getDate(), hours, minutes, seconds, milliseconds);
  // Seems redundant, but makes sure that increasing
  // the hours does no change the date when switching
  // from 11pm up.
  newDate.setFullYear(value.getFullYear());
  newDate.setMonth(value.getMonth());
  newDate.setDate(value.getDate());
  return newDate;
};
const NAMED_FORMATS = {};
/**
 * @param input String containing a date or dateTime value (Ex. "05/15/2020"
 * @param format Format of the input value (Ex. "M/d/YYYY")
 * @param locale Locale of the input value
 * @returns A JS Date in accordance of the three parameters
 */
const parseDate = (input, format, locale) => {
  if (!input) {
    return undefined;
  }
  const splitFormat = format.split(/[^MydhHmsSa]+/);
  const splitDate = input.toUpperCase().match(/\d+|\w+/g);
  if (!splitDate) {
    return undefined;
  }
  // in case of some locales where meridian is with special chars
  const dateAndMeridian = input.split(/ +/);
  if (splitDate?.length > 0 && dateAndMeridian.length > 0) {
    const parsedMeridian = dateAndMeridian[dateAndMeridian.length - 1].toUpperCase();
    if (splitDate[splitDate?.length - 1] !== parsedMeridian && getMeridian(parsedMeridian, locale)) {
      splitDate?.push(parsedMeridian);
    }
  }
  let year = 0;
  let month = 0;
  let day = 0;
  let hour = 0;
  let minute = 0;
  let second = 0;
  let milliseconds = 0;
  // check if date is invalid and return if it is invalid
  for (let i = 0; i < splitDate?.length; i++) {
    if (i === splitDate?.length - 1) {
      const parsedMeridian = splitDate[splitDate?.length - 1];
      // skip if its meridian
      if (getMeridian(parsedMeridian, locale)) {
        continue;
      }
    }
    const parsedDateVal = parseInt(splitDate[i], 10);
    if (isNaN(parsedDateVal)) {
      return undefined;
    }
  }
  for (let i = 0; i < splitFormat.length; i++) {
    const f = splitFormat[i];
    let parsedNumber = parseInt(splitDate[i], 10);
    if (f !== 'a' && isNaN(parsedNumber)) {
      // auto fill seconds and milliseconds if not passed by user
      if (f === 'ss' || f === 'SSS') {
        parsedNumber = 0;
      } else {
        return undefined;
      }
    }
    if (f === 'M' || f === 'MM') {
      month = parsedNumber;
    } else if (f === 'd' || f === 'dd') {
      day = parsedNumber;
    } else if (f === 'y' || f === 'yy' || f === 'yyyy') {
      // JS adds 1900 for numbers between 0 and 99. Adjust to be more user-friendly
      year = parsedNumber < 50 ? parsedNumber + 2000 : parsedNumber < 100 ? parsedNumber + 1900 : parsedNumber;
    } else if (f === 'h' || f === 'HH') {
      hour = parsedNumber;
    } else if (f === 'mm') {
      minute = parsedNumber;
    } else if (f === 'ss') {
      second = parsedNumber;
    } else if (f === 'SSS') {
      milliseconds = parsedNumber;
    } else if (f === 'a') {
      if (!isNaN(parseInt(splitDate[splitDate?.length - 1], 10))) {
        continue;
      }
      const parsedMeridian = splitDate[splitDate?.length - 1];
      const meridian = getMeridian(parsedMeridian, locale);
      if (hour === 12 && meridian === 'AM') {
        hour = 0;
      } else if (meridian === 'PM') {
        hour = hour % 12 + 12;
      } else if (!meridian) {
        return;
      }
    }
  }
  if (month > 12 || day > 31 || day > new Date(year, month, 0).getDate()) {
    return undefined;
  }
  return new Date(year, month - 1, day, hour, minute, second, milliseconds);
};
const getMeridian = (parsedMeridian, locale) => {
  const meridian = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.getLocaleDayPeriods)(locale, _angular_common__WEBPACK_IMPORTED_MODULE_1__.FormStyle.Format, _angular_common__WEBPACK_IMPORTED_MODULE_1__.TranslationWidth.Short);
  const usingAM = parsedMeridian === meridian[0].toUpperCase();
  if (usingAM) {
    return 'AM';
  } else {
    const usingPM = parsedMeridian === meridian[1].toUpperCase();
    return usingPM ? 'PM' : undefined;
  }
};
// Adapted from: https://github.com/angular/angular/blob/91954cf20e17a386d71cc8ea25d1d17b9ae1e31c/packages/common/src/i18n/format_date.ts
// unfortunately it is not exported there
const getNamedFormat = (locale, format) => {
  const localeId = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.getLocaleId)(locale);
  NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};
  if (NAMED_FORMATS[localeId][format]) {
    return NAMED_FORMATS[localeId][format];
  }
  let formatValue = '';
  switch (format) {
    case 'shortDate':
      formatValue = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.getLocaleDateFormat)(locale, _angular_common__WEBPACK_IMPORTED_MODULE_1__.FormatWidth.Short);
      break;
    case 'shortTime':
      formatValue = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.getLocaleTimeFormat)(locale, _angular_common__WEBPACK_IMPORTED_MODULE_1__.FormatWidth.Short);
      break;
    case 'mediumTime':
      formatValue = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.getLocaleTimeFormat)(locale, _angular_common__WEBPACK_IMPORTED_MODULE_1__.FormatWidth.Medium);
      break;
    case 'longTime':
      formatValue = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.getLocaleTimeFormat)(locale, _angular_common__WEBPACK_IMPORTED_MODULE_1__.FormatWidth.Long);
      break;
    case 'fullTime':
      formatValue = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.getLocaleTimeFormat)(locale, _angular_common__WEBPACK_IMPORTED_MODULE_1__.FormatWidth.Full);
      break;
    case 'short':
    case 'medium':
      const shortTime = getNamedFormat(locale, format === 'short' ? 'shortTime' : 'mediumTime');
      const shortDate = getNamedFormat(locale, 'shortDate');
      formatValue = formatDateTime((0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.getLocaleDateTimeFormat)(locale, _angular_common__WEBPACK_IMPORTED_MODULE_1__.FormatWidth.Short), [shortTime, shortDate]);
      break;
  }
  if (formatValue) {
    NAMED_FORMATS[localeId][format] = formatValue;
  }
  return formatValue;
};
const formatDateTime = (str, optVals) => {
  if (optVals) {
    str = str.replace(/\{([^}]+)}/g, (match, key) => optVals != null && key in optVals ? optVals[key] : match);
  }
  return str;
};
const getDateWithoutTime = date => createDate(date, 0, 0, 0, 0);
/**
 * Get today
 * @returns date of today
 */
const today = () => new Date();
/**
 * Calculate a new date based on the offset while considering the min and max date.
 * @param current input date.
 * @param offsetDays numeric offset of days.
 * @returinputns new date if the range is valid or original date
 */
const addDaysInRange = (current, daysOffset, minDate, maxDate) => {
  const newDate = addDays(current, daysOffset);
  // Make sure the new date is within the specified limits
  // MinDate < new data < MaxDate
  if (isSameOrBetween(newDate, minDate, maxDate)) {
    return newDate;
  }
  return current;
};
/**
 * Get date delta based on the offset.
 * @param date source date object.
 * @param days numeric offset of days.
 * @returns new date.
 */
const addDays = (date, days) => {
  const d = createDate(date);
  d.setDate(d.getDate() + days);
  return d;
};
/**
 * Get the first date of the week based on the input date.
 * @param current a date object from where the last date of a week is derived.
 * @param weekStartDay optional when a week shall start.
 * @returns
 */
const getWeekStartDate = (current, weekStartDay = 'monday') => {
  const weekStartDate = createDate(current);
  const diff = current.getDate() - getWeekDayOffset(current, weekStartDay);
  weekStartDate.setDate(diff);
  return weekStartDate;
};
/**
 * Get the last date of the week based on the input date.
 * @param current a date object from where the last date of a week is derived.
 * @param weekStartDay optional when a week shall start.
 * @returns the last date within the week.
 */
const getWeekEndDate = (current, weekStartDay = 'monday') => {
  const weekStartDate = createDate(current);
  weekStartDate.setDate(current.getDate() + 6 - getWeekDayOffset(current, weekStartDay));
  return weekStartDate;
};
/**
 * Get the beginning of the month.
 * @param current a date object from where the first date in a month is derived.
 * @returns a new date object which starts a the first.
 */
const getFirstDateInMonth = current => new Date(current.getFullYear(), current.getMonth(), 1);
/**
 * Get the last date of the month.
 * @param current a date object from where we derive the last date in a month.
 * @returns a new date object which is the last day in the current month.
 */
const getLastDateInMonth = current => new Date(current.getFullYear(), current.getMonth() + 1, 0);
/**
 * Are the two dates identical without considering time.
 */
const isSameDate = (current, compareTo) => {
  if (!compareTo) {
    return false;
  }
  return current.getFullYear() === compareTo.getFullYear() && current.getMonth() === compareTo.getMonth() && current.getDate() === compareTo.getDate();
};
/**
 * Compares two dates.
 * @param first The first date to compare.
 * @param second The second date to compare.
 * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,
 * a number greater than 0 if the first date is later.
 */
const compareDate = (first, second) => first.getFullYear() - second.getFullYear() || first.getMonth() - second.getMonth() || first.getDate() - second.getDate();
/**
 * Compare the current date is the same date or between start and end date.
 * @param d the date object.
 * @param minDate optional min date, if no value is provided we assume true for the min value.
 * @param maxDate optional max date, if no value is provided we assume true for the max value.
 * @returns true if the date is in the provided range.
 */
const isSameOrBetween = (current, from, to) => {
  // from <= d
  const isInMinRange = from ? compareDate(from, current) <= 0 : true;
  // d <= to
  const isInMaxRange = to ? compareDate(current, to) <= 0 : true;
  return isInMinRange && isInMaxRange;
};
/**
 * Compare the current date is between start and end date.
 * from < current < to
 */
const isBetween = (current, from, to) => {
  const isInMinRange = from ? compareDate(current, from) > 0 : true;
  const isInMaxRange = to ? compareDate(current, to) < 0 : true;
  return isInMinRange && isInMaxRange;
};
/**
 * Is first date after the second date (without considering the time).
 * current > compareTo
 */
const isAfter = (current, compareTo) => compareDate(current, compareTo) > 0;
/**
 * Is first date equal or before the second date (without considering the time).
 * current >= compareTo
 */
const isSameOrBefore = (current, compareTo) => compareDate(current, compareTo) <= 0;
/**
 * Are the two dates in different months.
 */
const isAnotherMonth = (current, compareTo) => current.getMonth() !== compareTo.getMonth();
/**
 * Are the two dates in different years.
 */
const isAnotherYear = (current, compareTo) => current.getFullYear() !== compareTo.getFullYear();
/**
 * Are the two dates either in different months or years.
 */
const isAnotherMonthOrYear = (current, compareTo) => isAnotherMonth(current, compareTo) || isAnotherYear(current, compareTo);

/**
 * Returns date / datetime format to be used for rendering a date object as text
 * to an Html input element, which has the `SiDatepickerDirective`.
 *
 * @see https://angular.io/api/common/DatePipe#pre-defined-format-options
 * @param locale The locale for which the format is returned.
 * @param config The config object of the datepicker.
 * @param timeWhenDisabled If `true`, a format with time (medium or short) is returned, even if the `disabledTime` config is `true`.
 * @returns Either
 *   - a custom format provided by the config,
 *   - the localized `medium` format when time and seconds included
 *   - the localized `short` format when time and no seconds included
 */
const getDatepickerFormat = (locale, config, timeWhenDisabled = false) => {
  // try format from consumer
  let dateFormat = config?.showTime && !config.disabledTime ? config.dateTimeFormat : config?.dateFormat;
  if (!dateFormat) {
    // no format from consumer - use default depending on configuration
    let named;
    if (config?.showTime && (!config.disabledTime || timeWhenDisabled)) {
      named = config.showSeconds ? 'medium' : 'short';
    } else {
      named = 'shortDate';
    }
    dateFormat = getNamedFormat(locale, named);
  }
  // patch 2-digit year to 4-digit year
  if (!dateFormat.includes('yyyy')) {
    dateFormat = dateFormat.replace('yy', 'yyyy');
  }
  return dateFormat;
};
class SiDateInputDirective {
  constructor() {
    /**
     * Output cancel event on clicking backdrop.
     */
    this.siDatepickerClose = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.siDatepickerDisabledTime = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.siDatepickerRangeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onTouched = () => {};
    this.onModelChange = () => {};
    this.subscriptions = [];
    this._disabled = false;
    this._readonly = false;
    this.cdRef = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef);
    this.elementRef = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef);
    this.renderer = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2);
    this.locale = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID);
  }
  updateInstance(input) {}
  get disabled() {
    return this._disabled;
  }
  /**
   * @defaultref {@link _disabled}
   */
  set disabled(value) {
    this.setDisabledState(value !== false);
  }
  get readOnlyState() {
    return this._readonly ? true : null;
  }
  get readonly() {
    return this._readonly;
  }
  /** @defaultref {@link _readonly} */
  set readonly(value) {
    this._readonly = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__.coerceBooleanProperty)(value);
  }
  ngOnDestroy() {
    this.subscriptions?.forEach(sub => sub.unsubscribe());
  }
  validate(control) {
    const date = this.elementRef.nativeElement.value;
    const invalidFormat = !!(!control?.value && date);
    let minDate = this.siDatepickerConfig?.minDate;
    let maxDate = this.siDatepickerConfig?.maxDate;
    let dateTime = control.value ?? 0;
    if (!this.siDatepickerConfig?.enableTimeValidation || (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__.coerceBooleanProperty)(this.siDatepickerConfig?.disabledTime)) {
      if (minDate) {
        minDate = getDateWithoutTime(minDate);
      }
      if (maxDate) {
        maxDate = getDateWithoutTime(maxDate);
      }
      if (dateTime) {
        dateTime = getDateWithoutTime(dateTime);
      }
    }
    const invalidMinDate = !invalidFormat && minDate && dateTime < minDate;
    const invalidMaxDate = !invalidFormat && maxDate && dateTime > maxDate;
    const errorObj = invalidFormat || invalidMinDate || invalidMaxDate ? {
      ...(invalidFormat && {
        invalidFormat
      }),
      ...(invalidMinDate && {
        invalidMinDate
      }),
      ...(invalidMaxDate && {
        invalidMaxDate
      })
    } : null;
    return errorObj;
  }
  /**
   * Set the function to be called when the control receives a change event.
   */
  registerOnChange(fn) {
    this.onModelChange = fn;
  }
  /**
   * Set the function to be called when the control receives a touch event.
   */
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  setDisabledState(isDisabled) {
    this._disabled = isDisabled;
    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    this.cdRef.markForCheck();
  }
  writeValue(value) {
    // remove date when user input is empty
    let emptyString = false;
    // Flag to define invalid string
    let invalidDate = false;
    if (typeof value === 'string') {
      emptyString = value.trim().length === 0;
      value = parseDate(value, this.getFormat(), this.locale);
      invalidDate = !value;
    }
    this.date = value;
    let dtStr = '';
    if (this.date) {
      dtStr = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.formatDate)(this.date, this.getFormat(), this.locale);
      this.updateInstance(this.date);
    }
    // We should not change the content of the input field when the user typed
    // a wrong input. Otherwise the typed content changes and the user cannot
    // correct the content.
    if (!invalidDate || emptyString) {
      this.renderer.setProperty(this.elementRef.nativeElement, 'value', dtStr);
    }
    this.cdRef.markForCheck();
  }
  onKeyup(event) {
    this.writeValue(event.target.value);
  }
  onChange(event) {
    this.writeValue(event.target.value);
    this.onModelChange(this.date);
    this.onTouched();
  }
  getFormat() {
    if (!this.dateFormat) {
      this.dateFormat = getDatepickerFormat(this.locale, this.siDatepickerConfig);
    }
    return this.dateFormat;
  }
}
SiDateInputDirective.ɵfac = function SiDateInputDirective_Factory(t) {
  return new (t || SiDateInputDirective)();
};
SiDateInputDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiDateInputDirective,
  selectors: [["", "siDateInput", ""]],
  hostVars: 3,
  hostBindings: function SiDateInputDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keyups", function SiDateInputDirective_keyups_HostBindingHandler($event) {
        return ctx.onKeyup($event);
      })("change", function SiDateInputDirective_change_HostBindingHandler($event) {
        return ctx.onChange($event);
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("readonly", ctx.readOnlyState);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("readonly", ctx._readonly);
    }
  },
  inputs: {
    siDatepickerConfig: "siDatepickerConfig",
    dateRange: "dateRange",
    rangeType: "rangeType",
    disabled: "disabled",
    readonly: "readonly"
  },
  outputs: {
    siDatepickerClose: "siDatepickerClose",
    siDatepickerDisabledTime: "siDatepickerDisabledTime",
    siDatepickerRangeChange: "siDatepickerRangeChange"
  },
  exportAs: ["siDateInput"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
    useExisting: SiDateInputDirective,
    multi: true
  }, {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALIDATORS,
    useExisting: SiDateInputDirective,
    multi: true
  }])]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDateInputDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siDateInput]',
      exportAs: 'siDateInput',
      providers: [{
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
        useExisting: SiDateInputDirective,
        multi: true
      }, {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALIDATORS,
        useExisting: SiDateInputDirective,
        multi: true
      }]
    }]
  }], null, {
    siDatepickerConfig: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    siDatepickerClose: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    siDatepickerDisabledTime: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    siDatepickerRangeChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    dateRange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    rangeType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    _readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.readonly']
    }],
    readOnlyState: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['attr.readonly']
    }],
    readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    onKeyup: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keyups', ['$event']]
    }],
    onChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['change', ['$event']]
    }]
  });
})();
const positionStart = {
  overlayX: 'end',
  overlayY: 'center',
  originX: 'start',
  originY: 'center'
};
const positionEnd = {
  overlayX: 'start',
  overlayY: 'center',
  originX: 'end',
  originY: 'center'
};
const positionTopCenter = {
  overlayX: 'center',
  overlayY: 'bottom',
  originX: 'center',
  originY: 'top'
};
const positionTopStart = {
  overlayX: 'start',
  overlayY: 'bottom',
  originX: 'center',
  originY: 'top'
};
const positionTopEnd = {
  overlayX: 'end',
  overlayY: 'bottom',
  originX: 'center',
  originY: 'top'
};
const positionBottomCenter = {
  overlayX: 'center',
  overlayY: 'top',
  originX: 'center',
  originY: 'bottom'
};
const positionBottomStart = {
  overlayX: 'start',
  overlayY: 'top',
  originX: 'center',
  originY: 'bottom'
};
const positionBottomEnd = {
  overlayX: 'end',
  overlayY: 'top',
  originX: 'center',
  originY: 'bottom'
};
const positions = {
  top: [positionTopCenter, positionTopStart, positionTopEnd, positionBottomCenter, positionBottomStart, positionBottomEnd, positionStart, positionEnd],
  end: [positionEnd, positionTopCenter, positionTopStart, positionTopEnd, positionBottomCenter, positionBottomStart, positionBottomEnd, positionStart],
  bottom: [positionBottomCenter, positionBottomStart, positionBottomEnd, positionTopCenter, positionTopStart, positionTopEnd, positionStart, positionEnd],
  start: [positionStart, positionTopCenter, positionTopStart, positionTopEnd, positionBottomCenter, positionBottomStart, positionBottomEnd, positionEnd],
  auto: [positionTopCenter, positionTopStart, positionTopEnd, positionBottomCenter, positionBottomStart, positionBottomEnd, positionStart, positionEnd]
};

/* eslint-disable no-console, prefer-arrow/prefer-arrow-functions, @typescript-eslint/naming-convention */
function getOverlay(elementRef, overlay, hasBackdrop, placement, constrain = false, center = true) {
  const popoverPositions = getOverlayPositions(elementRef, placement, center);
  const config = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.OverlayConfig();
  let positionStrategy = overlay.position().flexibleConnectedTo(elementRef).withPush(false).withGrowAfterOpen(true).withFlexibleDimensions(constrain).withPositions(popoverPositions);
  if (constrain) {
    positionStrategy = positionStrategy.withViewportMargin(8);
  }
  config.positionStrategy = positionStrategy;
  config.scrollStrategy = overlay.scrollStrategies.reposition();
  config.direction = isRTL() ? 'rtl' : 'ltr';
  if (hasBackdrop) {
    config.hasBackdrop = true;
    config.backdropClass = 'cdk-overlay-transparent-backdrop';
  } else {
    config.hasBackdrop = false;
  }
  return overlay.create(config);
}
function getPositionStrategy(overlayref) {
  return overlayref.getConfig().positionStrategy;
}
function getOverlayPositions(elementRef, placement, center = true) {
  if (elementRef.nativeElement && center) {
    const halfWidth = Math.round(elementRef.nativeElement.offsetWidth / 2);
    positionTopStart.offsetX = -halfWidth;
    positionTopEnd.offsetX = halfWidth;
    positionBottomStart.offsetX = -halfWidth;
    positionBottomEnd.offsetX = halfWidth;
  } else {
    positionTopStart.offsetX = undefined;
    positionTopEnd.offsetX = undefined;
    positionBottomStart.offsetX = undefined;
    positionBottomEnd.offsetX = undefined;
  }
  return typeof placement === 'string' ? positions[placement] : placement;
}
function hasTrigger(trigger, triggers) {
  return (triggers?.split(/\s+/) ?? []).includes(trigger);
}
class SiTimepickerComponent {
  get showMeridian() {
    if (this._showMeridian === undefined) {
      return !this.is24HoursLocale;
    } else {
      return this._showMeridian;
    }
  }
  set showMeridian(showMeridian) {
    this._showMeridian = showMeridian;
  }
  get readonly() {
    return this._readonly;
  }
  /**
   * @defaultref {@link _readonly}
   */
  set readonly(value) {
    this._readonly = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__.coerceBooleanProperty)(value);
  }
  get periods() {
    return this.meridians?.length ? this.meridians : this.periodDefaults;
  }
  constructor(locale) {
    this.locale = locale;
    this.invalidHours = false;
    this.invalidMinutes = false;
    this.invalidSeconds = false;
    this.invalidMilliseconds = false;
    /**
     * All input fields will be disabled if set to true.
     */
    this.disabled = false;
    this.hoursLabel = 'hh';
    this.minutesLabel = 'mm';
    this.secondsLabel = 'ss';
    this.millisecondsLabel = 'ms';
    this.hideLabels = false;
    this.hoursAriaLabel = 'hours';
    this.minutesAriaLabel = 'minutes';
    this.secondsAriaLabel = 'seconds';
    this.millisecondsAriaLabel = 'milliseconds';
    this.hoursPlaceholder = 'hh';
    this.minutesPlaceholder = 'mm';
    this.secondsPlaceholder = 'ss';
    this.millisecondsPlaceholder = 'ms';
    this.meridiansLabel = 'am/pm';
    this.meridiansAriaLabel = 'period';
    this.showMinutes = true;
    this.showSeconds = false;
    this.showMilliseconds = false;
    this._readonly = false;
    this.isValid = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.meridianChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onChange = () => {};
    this.onTouched = () => {};
    // The following are the time values for the ui.
    this.hours = '';
    this.minutes = '';
    this.seconds = '';
    this.milliseconds = '';
    this.meridian = '';
    this.trackByIndex = index => index;
    this.toHtmlInputElement = target => target;
    const timeFormat = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.getLocaleTimeFormat)(locale, _angular_common__WEBPACK_IMPORTED_MODULE_1__.FormatWidth.Full);
    this.is24HoursLocale = !timeFormat.includes('a');
    this.periodDefaults = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.getLocaleDayPeriods)(locale, _angular_common__WEBPACK_IMPORTED_MODULE_1__.FormStyle.Format, _angular_common__WEBPACK_IMPORTED_MODULE_1__.TranslationWidth.Short).slice();
  }
  /**
   * Invoked when setting a new
   */
  writeValue(obj) {
    if (this.isValidDate(obj)) {
      this.setTime(this.parseTime(obj));
    } else if (obj == null) {
      this.setTime();
    }
    if (obj) {
      this.isInputValid(this.hours, this.minutes, this.seconds, this.milliseconds, this.isPM());
    }
  }
  isPM() {
    return !!this.showMeridian && this.meridian === 'pm';
  }
  /**
   * Set the function to be called when the control receives a change event.
   */
  registerOnChange(fn) {
    this.onChange = fn;
  }
  /**
   * Set the function to be called when the control receives a touch event.
   */
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  setDisabledState(isDisabled) {
    this.disabled = isDisabled;
  }
  upDown(event) {
    if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {
      event.preventDefault();
      const key = event.target.name;
      this.changeTimeComponent(key, event.key === 'ArrowUp');
    }
  }
  updateHours(value) {
    value = value.toString();
    if (this.hours !== value) {
      this.hours = value;
      const isValid = this.isHourInputValid(this.hours, this.isPM()) && this.isValidLimit();
      if (!isValid) {
        this.invalidHours = true;
        this.isValid.emit(false);
        this.onChange(null);
      } else {
        this.invalidHours = false;
        this.updateTime();
      }
    }
  }
  updateMinutes(value) {
    value = value.toString();
    if (this.minutes !== value) {
      this.minutes = value;
      const isValid = this.isMinuteInputValid(this.minutes) && this.isValidLimit();
      if (!isValid) {
        this.invalidMinutes = true;
        this.isValid.emit(false);
        this.onChange(null);
      } else {
        this.invalidMinutes = false;
        this.updateTime();
      }
    }
  }
  updateSeconds(value) {
    value = value.toString();
    if (this.seconds !== value) {
      this.seconds = value.toString();
      const isValid = this.isSecondInputValid(this.seconds) && this.isValidLimit();
      if (!isValid) {
        this.invalidSeconds = true;
        this.isValid.emit(false);
        this.onChange(null);
      } else {
        this.invalidSeconds = false;
        this.updateTime();
      }
    }
  }
  updateMilliseconds(value) {
    value = value.toString();
    if (this.milliseconds !== value) {
      this.milliseconds = value.toString();
      const isValid = this.isMillisecondInputValid(this.milliseconds) && this.isValidLimit();
      if (!isValid) {
        this.invalidMilliseconds = true;
        this.isValid.emit(false);
        this.onChange(null);
      } else {
        this.invalidMilliseconds = false;
        this.updateTime();
      }
    }
  }
  toggleMeridian() {
    if (!this.showMeridian) {
      return;
    }
    const time = this.changeTime(this.time, {
      hour: 12
    });
    this.setTime(time);
  }
  /**
   * Takes the current UI values and updates the time object value
   * accordingly, if they UI input values are valid.
   */
  updateTime() {
    const minutes = this.showMinutes ? this.minutes : undefined;
    const seconds = this.showSeconds ? this.seconds : undefined;
    const milliseconds = this.showMilliseconds ? this.milliseconds : undefined;
    if (!this.isInputValid(this.hours, minutes, seconds, milliseconds, this.isPM())) {
      this.isValid.emit(false);
      this.onChange(null);
      return;
    }
    const time = this.createDateUpdate(this.time, {
      hour: this.hours,
      minute: this.minutes,
      seconds: this.seconds,
      milliseconds: this.milliseconds,
      isPM: this.isPM()
    });
    this.setTime(time);
  }
  /**
   * Sets a new time object as model value, updates the user interface
   * and invokes onChange to let timepicker clients know about the update.
   * @param time The new time to be set.
   */
  setTime(time) {
    if (this.time !== time) {
      this.time = time;
      this.updateUI(this.time);
      this.onChange(this.time);
    }
  }
  /**
   * Updates the user interface by filling the time components
   * into the time input fields. Sets empty values if the date
   * is undefined or invalid.
   *
   * @param value The date object or string from with the time components are taken.
   */
  updateUI(value) {
    if (!value || !this.isValidDate(value)) {
      this.hours = '';
      this.minutes = '';
      this.seconds = '';
      this.milliseconds = '';
      this.meridian = 'am';
      this.meridianChange.emit(this.meridian);
    } else {
      const time = this.parseTime(value);
      if (!time) {
        return;
      }
      let hours = time.getHours();
      if (this.showMeridian) {
        this.meridian = hours >= 12 ? 'pm' : 'am';
        this.meridianChange.emit(this.meridian);
        hours = hours % 12;
        if (hours === 0) {
          hours = 12;
        }
      }
      this.hours = hours.toString().padStart(2, '0');
      this.minutes = time.getMinutes().toString().padStart(2, '0');
      this.seconds = time.getUTCSeconds().toString().padStart(2, '0');
      this.milliseconds = time.getUTCMilliseconds().toString().padStart(3, '0');
    }
  }
  isValidDate(value) {
    if (!value) {
      return false;
    }
    if (typeof value === 'string') {
      return this.isValidDate(new Date(value));
    }
    if (value instanceof Date && isNaN(value.getHours())) {
      return false;
    }
    return true;
  }
  parseTime(value) {
    if (typeof value === 'string') {
      return new Date(value);
    }
    return value;
  }
  parseHours(value, isPM = false) {
    const hour = this.toNumber(value);
    if (isNaN(hour) || hour < 0 || hour > (isPM ? 12 : 24)) {
      return NaN;
    }
    return hour;
  }
  parseMinutes(value) {
    const minute = this.toNumber(value);
    if (isNaN(minute) || minute < 0 || minute > 60) {
      return NaN;
    }
    return minute;
  }
  parseSeconds(value) {
    const seconds = this.toNumber(value);
    if (isNaN(seconds) || seconds < 0 || seconds > 60) {
      return NaN;
    }
    return seconds;
  }
  parseMilliseconds(value) {
    const milliseconds = this.toNumber(value);
    if (isNaN(milliseconds) || milliseconds < 0 || milliseconds > 1000) {
      return NaN;
    }
    return milliseconds;
  }
  createDateUpdate(date, time) {
    let hour = this.parseHours(time.hour);
    const minute = this.parseMinutes(time.minute);
    const seconds = this.parseSeconds(time.seconds) || 0;
    const milliseconds = this.parseMilliseconds(time.milliseconds) || 0;
    if (time.isPM && hour !== 12) {
      hour += 12;
    }
    if (!date) {
      if (!isNaN(hour) && !isNaN(minute)) {
        return createDate(new Date(), hour, minute, seconds, milliseconds);
      } else {
        return date;
      }
    } else if (isNaN(hour) || isNaN(minute)) {
      return date;
    } else {
      return createDate(date, hour, minute, seconds, milliseconds);
    }
  }
  toNumber(value) {
    if (typeof value === 'undefined') {
      return NaN;
    } else if (typeof value === 'number') {
      return value;
    }
    return parseInt(value, 10);
  }
  isInputValid(hours, minutes = '0', seconds = '0', milliseconds = '0', isPM) {
    if (!this.isValidLimit()) {
      this.invalidHours = true;
      this.invalidMinutes = true;
      this.invalidSeconds = true;
      this.invalidMilliseconds = true;
    } else {
      this.invalidHours = !this.isHourInputValid(hours, isPM);
      this.invalidMinutes = !this.isMinuteInputValid(minutes);
      this.invalidSeconds = !this.isSecondInputValid(seconds);
      this.invalidMilliseconds = !this.isMillisecondInputValid(milliseconds);
    }
    return !this.invalidHours && !this.invalidMinutes && !this.invalidSeconds && !this.invalidMilliseconds;
  }
  isHourInputValid(hours, isPM) {
    return !isNaN(this.parseHours(hours, isPM));
  }
  isMinuteInputValid(minutes) {
    return !isNaN(this.parseMinutes(minutes));
  }
  isSecondInputValid(seconds) {
    return !isNaN(this.parseSeconds(seconds));
  }
  isMillisecondInputValid(milliseconds) {
    return !isNaN(this.parseMilliseconds(milliseconds));
  }
  isValidLimit() {
    const refDate = new Date();
    const newDate = this.createDateUpdate(refDate, {
      hour: this.hours,
      minute: this.minutes,
      seconds: this.seconds,
      milliseconds: this.milliseconds,
      isPM: this.isPM()
    });
    if (!newDate) {
      return false;
    }
    let refMax;
    if (this.max) {
      refMax = new Date(refDate);
      refMax.setHours(this.max.getHours());
      refMax.setMinutes(this.max.getMinutes());
      refMax.setSeconds(this.max.getSeconds());
      refMax.setMilliseconds(this.max.getMilliseconds());
    }
    let refMin;
    if (this.min) {
      refMin = new Date(refDate);
      refMin.setHours(this.min.getHours());
      refMin.setMinutes(this.min.getMinutes());
      refMin.setSeconds(this.min.getSeconds());
      refMin.setMilliseconds(this.min.getMilliseconds());
    }
    if (refMax && newDate > refMax) {
      return false;
    } else if (refMin && newDate < refMin) {
      return false;
    }
    return true;
  }
  changeTimeComponent(key, up) {
    const change = up ? 1 : -1;
    const date = this.createDateUpdate(new Date(), {
      hour: this.hours,
      minute: this.minutes,
      seconds: this.seconds,
      milliseconds: this.milliseconds,
      isPM: this.isPM()
    });
    switch (key) {
      case 'hours':
        {
          const newTime = this.changeTime(date, {
            hour: change
          });
          let hour = newTime.getHours();
          if (this.showMeridian) {
            hour = hour % 12;
            if (hour === 0 && !this.isPM()) {
              hour = 12;
            } else if (hour === 0 && this.isPM()) {
              this.toggleMeridian();
            }
          }
          this.updateHours(hour);
          break;
        }
      case 'minutes':
        {
          const newTime = this.changeTime(date, {
            minute: change
          });
          this.updateMinutes(newTime.getMinutes());
          break;
        }
      case 'seconds':
        {
          const newTime = this.changeTime(date, {
            seconds: change
          });
          this.updateSeconds(newTime.getSeconds());
          break;
        }
      case 'milliseconds':
        {
          const newTime = this.changeTime(date, {
            milliseconds: change
          });
          this.updateMilliseconds(newTime.getMilliseconds());
          break;
        }
      default:
        break;
    }
  }
  changeTime(value, diff) {
    if (!value) {
      return this.changeTime(createDate(new Date(), 0, 0, 0, 0), diff);
    }
    if (!diff) {
      return value;
    }
    let hour = value.getHours();
    let minutes = value.getMinutes();
    let seconds = value.getSeconds();
    let milliseconds = value.getMilliseconds();
    if (diff.hour) {
      hour = hour + this.toNumber(diff.hour);
    }
    if (diff.minute) {
      minutes = minutes + this.toNumber(diff.minute);
    }
    if (diff.seconds) {
      seconds = seconds + this.toNumber(diff.seconds);
    }
    if (diff.milliseconds) {
      milliseconds = milliseconds + this.toNumber(diff.milliseconds);
    }
    return createDate(value, hour, minutes, seconds, milliseconds);
  }
}
SiTimepickerComponent.ɵfac = function SiTimepickerComponent_Factory(t) {
  return new (t || SiTimepickerComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID));
};
SiTimepickerComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiTimepickerComponent,
  selectors: [["si-timepicker"]],
  hostVars: 2,
  hostBindings: function SiTimepickerComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("readonly", ctx._readonly);
    }
  },
  inputs: {
    disabled: "disabled",
    hoursLabel: "hoursLabel",
    minutesLabel: "minutesLabel",
    secondsLabel: "secondsLabel",
    millisecondsLabel: "millisecondsLabel",
    hideLabels: "hideLabels",
    hoursAriaLabel: "hoursAriaLabel",
    minutesAriaLabel: "minutesAriaLabel",
    secondsAriaLabel: "secondsAriaLabel",
    millisecondsAriaLabel: "millisecondsAriaLabel",
    hoursPlaceholder: "hoursPlaceholder",
    minutesPlaceholder: "minutesPlaceholder",
    secondsPlaceholder: "secondsPlaceholder",
    millisecondsPlaceholder: "millisecondsPlaceholder",
    meridians: "meridians",
    meridiansLabel: "meridiansLabel",
    meridiansAriaLabel: "meridiansAriaLabel",
    showMinutes: "showMinutes",
    showSeconds: "showSeconds",
    showMilliseconds: "showMilliseconds",
    showMeridian: "showMeridian",
    min: "min",
    max: "max",
    readonly: "readonly"
  },
  outputs: {
    isValid: "isValid",
    meridianChange: "meridianChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
    useExisting: SiTimepickerComponent,
    multi: true
  }])],
  decls: 11,
  vars: 14,
  consts: [[1, "d-flex", "flex-row", "flex-wrap"], [1, "min-width"], ["class", "form-label", 4, "ngIf"], ["name", "hours", "maxlength", "2", "autocomplete", "off", 1, "form-control", 3, "disabled", "readonly", "placeholder", "value", "change", "blur", "keydown"], [4, "ngIf"], ["class", "ms-2", 4, "ngIf"], ["separator", ""], [1, "form-label"], [4, "ngTemplateOutlet"], ["name", "minutes", "maxlength", "2", "autocomplete", "off", 1, "form-control", 3, "disabled", "readonly", "placeholder", "value", "change", "blur", "keydown"], ["name", "seconds", "maxlength", "2", "autocomplete", "off", 1, "form-control", 3, "disabled", "readonly", "placeholder", "value", "change", "blur", "keydown"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["name", "milliseconds", "maxlength", "3", "autocomplete", "off", 1, "form-control", 3, "disabled", "readonly", "placeholder", "value", "change", "blur", "keydown"], [1, "ms-2"], [1, "form-control", 3, "disabled", "change"], ["value", "am", 3, "selected"], ["value", "pm", 3, "selected"], ["aria-hidden", "true", 1, "align-self-end", "pb-3", "px-1"]],
  template: function SiTimepickerComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "label", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiTimepickerComponent_span_2_Template, 3, 3, "span", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "input", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SiTimepickerComponent_Template_input_change_3_listener($event) {
        return ctx.updateHours(ctx.toHtmlInputElement($event.target).value);
      })("blur", function SiTimepickerComponent_Template_input_blur_3_listener($event) {
        return ctx.updateHours(ctx.toHtmlInputElement($event.target).value);
      })("keydown", function SiTimepickerComponent_Template_input_keydown_3_listener($event) {
        return ctx.upDown($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiTimepickerComponent_ng_container_5_Template, 6, 11, "ng-container", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiTimepickerComponent_ng_container_6_Template, 6, 11, "ng-container", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiTimepickerComponent_ng_container_7_Template, 6, 13, "ng-container", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, SiTimepickerComponent_label_8_Template, 8, 9, "label", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](9, SiTimepickerComponent_ng_template_9_Template, 2, 1, "ng-template", null, 6, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.hideLabels);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("is-invalid", ctx.invalidHours);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx.disabled)("readonly", ctx.readonly)("placeholder", ctx.hoursPlaceholder)("value", ctx.hours);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 12, ctx.hoursAriaLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.showMinutes);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.showSeconds);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.showMilliseconds);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.showMeridian);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgSelectOption, _angular_forms__WEBPACK_IMPORTED_MODULE_29__["ɵNgSelectMultipleOption"], SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:block}.min-width[_ngcontent-%COMP%]{inline-size:100%;max-inline-size:45px;min-inline-size:35px}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTimepickerComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-timepicker',
      providers: [{
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
        useExisting: SiTimepickerComponent,
        multi: true
      }],
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div class=\"d-flex flex-row flex-wrap\">\n  <label class=\"min-width\">\n    <span *ngIf=\"!hideLabels\" class=\"form-label\">{{ (hoursLabel | translate) || '&nbsp;' }}</span>\n    <input\n      class=\"form-control\"\n      name=\"hours\"\n      maxlength=\"2\"\n      autocomplete=\"off\"\n      [attr.aria-label]=\"hoursAriaLabel | translate\"\n      [class.is-invalid]=\"invalidHours\"\n      [disabled]=\"disabled\"\n      [readonly]=\"readonly\"\n      [placeholder]=\"hoursPlaceholder\"\n      [value]=\"hours\"\n      (change)=\"updateHours(toHtmlInputElement($event.target).value)\"\n      (blur)=\"updateHours(toHtmlInputElement($event.target).value)\"\n      (keydown)=\"upDown($event)\"\n    >\n  </label>\n\n  <ng-container *ngIf=\"showMinutes\">\n    <ng-container *ngTemplateOutlet=\"separator\"></ng-container>\n    <label class=\"min-width\">\n      <span *ngIf=\"!hideLabels\" class=\"form-label\">{{ (minutesLabel | translate) || '&nbsp;' }}</span>\n      <input\n        class=\"form-control\"\n        name=\"minutes\"\n        maxlength=\"2\"\n        autocomplete=\"off\"\n        [attr.aria-label]=\"minutesAriaLabel | translate\"\n        [class.is-invalid]=\"invalidMinutes\"\n        [disabled]=\"disabled\"\n        [readonly]=\"readonly\"\n        [placeholder]=\"minutesPlaceholder\"\n        [value]=\"minutes\"\n        (change)=\"updateMinutes(toHtmlInputElement($event.target).value)\"\n        (blur)=\"updateMinutes(toHtmlInputElement($event.target).value)\"\n        (keydown)=\"upDown($event)\"\n      >\n    </label>\n  </ng-container>\n\n  <ng-container *ngIf=\"showSeconds\">\n    <ng-container *ngTemplateOutlet=\"separator\"></ng-container>\n    <label class=\"min-width\">\n      <span *ngIf=\"!hideLabels\" class=\"form-label\">{{ (secondsLabel | translate) || '&nbsp;' }}</span>\n      <input\n        class=\"form-control\"\n        name=\"seconds\"\n        maxlength=\"2\"\n        autocomplete=\"off\"\n        [attr.aria-label]=\"secondsAriaLabel | translate\"\n        [class.is-invalid]=\"invalidSeconds\"\n        [disabled]=\"disabled\"\n        [readonly]=\"readonly\"\n        [placeholder]=\"secondsPlaceholder\"\n        [value]=\"seconds\"\n        (change)=\"updateSeconds(toHtmlInputElement($event.target).value)\"\n        (blur)=\"updateSeconds(toHtmlInputElement($event.target).value)\"\n        (keydown)=\"upDown($event)\"\n      >\n    </label>\n  </ng-container>\n\n  <ng-container *ngIf=\"showMilliseconds\">\n    <ng-container *ngTemplateOutlet=\"separator; context: {separator: '.'}\"></ng-container>\n    <label class=\"min-width\">\n      <span *ngIf=\"!hideLabels\" class=\"form-label\">{{ (millisecondsLabel | translate) || '&nbsp;' }}</span>\n      <input\n        class=\"form-control\"\n        name=\"milliseconds\"\n        maxlength=\"3\"\n        autocomplete=\"off\"\n        [attr.aria-label]=\"millisecondsAriaLabel | translate\"\n        [class.is-invalid]=\"invalidMilliseconds\"\n        [disabled]=\"disabled\"\n        [readonly]=\"readonly\"\n        [placeholder]=\"millisecondsPlaceholder\"\n        [value]=\"milliseconds\"\n        (change)=\"updateMilliseconds(toHtmlInputElement($event.target).value)\"\n        (blur)=\"updateMilliseconds(toHtmlInputElement($event.target).value)\"\n        (keydown)=\"upDown($event)\"\n      >\n    </label>\n  </ng-container>\n\n  <label *ngIf=\"showMeridian\" class=\"ms-2\">\n    <span *ngIf=\"!hideLabels\" class=\"form-label\">{{ (meridiansLabel | translate) || '&nbsp;' }}</span>\n    <select class=\"form-control\" (change)=\"toggleMeridian()\" [attr.aria-label]=\"meridiansAriaLabel | translate\" [disabled]=\"disabled || readonly\">\n      <option [selected]=\"meridian === 'am'\" value=\"am\">{{ periods[0] }}</option>\n      <option [selected]=\"meridian === 'pm'\" value=\"pm\">{{ periods[1] }}</option>\n    </select>\n  </label>\n</div>\n\n<ng-template #separator let-separator=\"separator\">\n  <div class=\"align-self-end pb-3 px-1\" aria-hidden=\"true\">{{ separator ? separator : ':' }}</div>\n</ng-template>\n",
      styles: [":host{display:block}.min-width{inline-size:100%;max-inline-size:45px;min-inline-size:35px}\n"]
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
      }]
    }];
  }, {
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    hoursLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    minutesLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    secondsLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    millisecondsLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    hideLabels: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    hoursAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    minutesAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    secondsAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    millisecondsAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    hoursPlaceholder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    minutesPlaceholder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    secondsPlaceholder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    millisecondsPlaceholder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    meridians: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    meridiansLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    meridiansAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showMinutes: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showSeconds: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showMilliseconds: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showMeridian: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    min: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    max: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    _readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.readonly']
    }],
    readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    isValid: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    meridianChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
const NUM_YEARS = 12;
const START_YEAR = 1900;
const END_YEAR = 2154;
let idCounter$2 = 1;
class SiDatepickerComponent {
  get rangeType() {
    return this._rangeType;
  }
  set rangeType(rangeType) {
    this._rangeType = rangeType;
    if (this.config.enableDateRange) {
      setTimeout(() => {
        if (this.dateRange?.start && !this.dateRange?.end || this.rangeType === 'START') {
          this.calcDays(this.dateRange?.start);
        } else if (this.dateRange?.end) {
          this.calcDays(this.dateRange?.end);
        }
        this.cdRef.markForCheck();
      }, 1);
    }
  }
  get includeTimeLabel() {
    return this.disabledTime ? this.config.disabledTimeText ?? 'Ignore time' : this.config.enabledTimeText ?? 'Consider time';
  }
  get weekStartDay() {
    return this.config.weekStartDay ?? this.localeWeekStart;
  }
  get hideWeekNumbers() {
    return this.config.hideWeekNumbers ?? false;
  }
  get disabledTime() {
    return this.config.disabledTime ?? false;
  }
  constructor(locale, cdRef) {
    this.locale = locale;
    this.cdRef = cdRef;
    /**
     * Emits the new value of `date` whenever its value changes.
     */
    this.dateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Emits the new value of `dateRange` whenever its value changes.
     */
    this.dateRangeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Emits an event to notify about disabling the time from the datepicker.
     * When time is disable, we construct a pure date object in UTC 00:00:00 time.
     */
    this.disabledTimeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Object to configure the datepicker.
     */
    this.config = {};
    /**
     * Aria label for the previous button. Needed for a11y.
     */
    this.previousLabel = 'previous';
    /**
     * Aria label for the next button. Needed for a11y.
     */
    this.nextLabel = 'next';
    /**
     * Use this to force date range operation to select either start date or end date
     */
    this._rangeType = 'START';
    /**
     * Sets the focus state by tracking focusin and focusout events.
     */
    this.hasFocus = false;
    this.daysOfWeek = [];
    this.view = 'week';
    this.weeks = [];
    this.weekNums = [];
    this.years = [];
    this.showToday = false;
    this.minYear = START_YEAR;
    this.maxYear = END_YEAR;
    this.switchId = `__si-datepicker-switch-id-${idCounter$2++}`;
    this.trackByIndex = index => index;
    this.days = Object.assign([], (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.getLocaleDayNames)(this.locale, _angular_common__WEBPACK_IMPORTED_MODULE_1__.FormStyle.Format, _angular_common__WEBPACK_IMPORTED_MODULE_1__.TranslationWidth.Abbreviated));
    this.days.push(this.days.shift());
    this.months = Object.assign([], (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.getLocaleMonthNames)(this.locale, _angular_common__WEBPACK_IMPORTED_MODULE_1__.FormStyle.Format, _angular_common__WEBPACK_IMPORTED_MODULE_1__.TranslationWidth.Wide));
    const weekStart = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.getLocaleFirstDayOfWeek)(this.locale);
    this.localeWeekStart = weekStart === _angular_common__WEBPACK_IMPORTED_MODULE_1__.WeekDay.Sunday ? 'sunday' : weekStart === _angular_common__WEBPACK_IMPORTED_MODULE_1__.WeekDay.Saturday ? 'saturday' : 'monday';
  }
  ngOnInit() {
    if (this.config.enableDateRange && this.dateRange) {
      this.dateRange = {
        start: this.dateRange.start ? createDate(this.dateRange.start) : undefined,
        end: this.dateRange.end ? createDate(this.dateRange.end) : undefined
      };
      this.calcDays(this.dateRange.start);
    }
    if (!this.config.enableDateRange) {
      this.calcDays(this.date);
    }
  }
  ngOnChanges(changes) {
    let calc = false;
    if (changes.date && !this.config.enableDateRange) {
      if (this.date) {
        if (changes.date.isFirstChange()) {
          this.previousTime = new Date(this.date);
          this.time = this.date;
        }
        if (this.time?.getTime() !== this.date?.getTime()) {
          this.time = this.date;
        }
      }
      calc = true;
    }
    if (changes.date && this.config.enableDateRange) {
      if (!changes.date.isFirstChange()) {
        this.calcDays(changes.date.currentValue);
      }
    }
    if (changes.config) {
      const disabledChange = !!changes.config.previousValue?.disabledTime !== this.disabledTime;
      if (disabledChange) {
        this.onDisabledTimeChanged();
      }
      calc = true;
    }
    if (calc) {
      this.calcDays(this.date);
    }
    this.cdRef.markForCheck();
  }
  setDate(date) {
    const dateWithoutTime = createDate(date);
    const validForMinDate = !(this.config?.minDate && dateWithoutTime < getDateWithoutTime(this.config.minDate));
    const validForMaxDate = !(this.config?.maxDate && dateWithoutTime > getDateWithoutTime(this.config.maxDate));
    if (this.date !== date && validForMinDate && validForMaxDate) {
      const previousValue = this.date;
      this.date = date;
      // eslint-disable-next-line @angular-eslint/no-lifecycle-call
      this.ngOnChanges({
        date: new _angular_core__WEBPACK_IMPORTED_MODULE_0__.SimpleChange(previousValue, this.date, previousValue === undefined)
      });
      this.dateChange.next(this.date);
    } else if (!validForMinDate || !validForMaxDate) {
      // eslint-disable-next-line @angular-eslint/no-lifecycle-call
      this.ngOnChanges({
        date: new _angular_core__WEBPACK_IMPORTED_MODULE_0__.SimpleChange(undefined, this.date, true)
      });
    }
    if (this.config.enableTimeValidation && this.timePicker && (this.config.minDate || this.config.maxDate)) {
      this.validateTime(date);
    }
  }
  dateSelected(day) {
    const selectedDateWithoutTime = getDateWithoutTime(day);
    const isValidRange = isSameOrBetween(selectedDateWithoutTime, this.config?.minDate, this.config?.maxDate);
    if (!isValidRange) {
      return;
    }
    const date = createDate(day, this.time?.getHours(), this.time?.getMinutes(), this.time?.getSeconds(), this.time?.getMilliseconds());
    if (!this.config.enableDateRange) {
      this.setDate(date);
    } else {
      // eslint-disable-next-line max-len
      if (!this.dateRange?.start && this.rangeType !== 'END' || this.dateRange?.start && this.dateRange.end && this.rangeType !== 'END') {
        this.setDateRange({
          start: date,
          end: undefined
        });
      } else if (this.rangeType === 'END' || this.dateRange?.start && !this.dateRange.end) {
        this.setDateRange({
          start: this.dateRange?.start,
          end: date
        });
        this.rangeType = undefined;
      }
    }
  }
  setDateRange(dtRange) {
    let calcDate;
    if (this.config.enableDateRange && dtRange) {
      const dateRange = {
        start: undefined,
        end: undefined,
        ...this.dateRange
      };
      if (dtRange.start && dtRange.end && dtRange.end < dtRange.start) {
        dateRange.end = undefined;
        dateRange.start = createDate(dtRange.end);
        calcDate = dateRange.start;
      } else {
        if (dtRange.start) {
          dateRange.start = createDate(dtRange.start);
          dateRange.end = undefined;
          calcDate = dateRange.start;
        }
        if (dtRange.end) {
          dateRange.end = createDate(dtRange.end);
          calcDate = dateRange.end;
        }
      }
      this.dateRange = dateRange;
      this.dateRangeChange.next(dateRange);
      if (calcDate) {
        this.calcDays(calcDate);
      }
    }
  }
  isRangeHover(day) {
    // eslint-disable-next-line max-len
    return this.dateRange?.start && this.activeHover && day.date > this.dateRange.start && !this.dateRange.end && day.date <= this.activeHover;
  }
  isRangeSelected(day) {
    if (!this.config.enableDateRange) {
      return false;
    }
    return isSameDate(day.date, this.dateRange?.start) || isSameDate(day.date, this.dateRange?.end);
  }
  inRange(day) {
    if (!this.config.enableDateRange || !this.dateRange?.start || !this.dateRange.end) {
      return false;
    }
    return isBetween(day.date, this.dateRange?.start, this.dateRange.end);
  }
  timeSelected(newTime) {
    if (!newTime) {
      return;
    }
    if (this.time?.getTime() !== newTime.getTime()) {
      this.previousTime = this.time;
      this.time = newTime;
      let newDate;
      if (this.disabledTime) {
        // if time is disabled, ensure that 00:00:00 is displayed in any timezone
        newDate = createDate(this.date);
        this.time = newDate;
      } else {
        newDate = createDate(this.date, this.time.getHours(), this.time.getMinutes(), this.time.getSeconds(), this.time.getMilliseconds());
      }
      this.dateSelected(newDate);
    } else {
      this.validateTime(newTime);
    }
  }
  toggleDisabledTime() {
    this.config.disabledTime = !this.disabledTime;
    this.onDisabledTimeChanged();
  }
  onDisabledTimeChanged() {
    if (this.disabledTime) {
      const newTime = new Date(Date.UTC(this.date.getFullYear(), this.date.getMonth(), this.date.getDate(), 0, 0, 0, 0));
      this.timeSelected(newTime);
    } else if (this.previousTime) {
      this.timeSelected(this.previousTime);
    } else {
      this.timeSelected(new Date());
    }
    this.disabledTimeChange.next(this.disabledTime);
  }
  validateTime(date) {
    if (!this.disabledTime && (this.config.minDate && date < this.config.minDate || this.config.maxDate && date > this.config.maxDate)) {
      // wait for a cycle to initialize timepicker
      setTimeout(() => {
        this.timePicker.invalidHours = this.timePicker.invalidMinutes = true;
        this.timePicker.invalidSeconds = this.timePicker.invalidMilliseconds = true;
        this.cdRef.markForCheck();
      });
    } else {
      this.timePicker.invalidHours = this.timePicker.invalidMinutes = false;
      this.timePicker.invalidSeconds = this.timePicker.invalidMilliseconds = false;
    }
  }
  onClick(event) {
    this.hasFocus = true;
    event.stopPropagation();
  }
  updateLimits() {
    if (this.config?.minDate) {
      this.minYear = this.config.minDate.getFullYear();
      this.minMonth = this.config.minDate.getMonth() + 1;
      this.minDay = this.config.minDate.getDate();
    }
    if (this.config?.maxDate) {
      this.maxYear = this.config.maxDate.getFullYear();
      this.maxMonth = this.config.maxDate.getMonth() + 1;
      this.maxDay = this.config.maxDate.getDate();
    }
  }
  calcDays(initialDate) {
    this.updateLimits();
    const today$1 = today();
    if (!initialDate) {
      initialDate = today$1;
    }
    const monthStart = getFirstDateInMonth(initialDate);
    const monthEnd = getLastDateInMonth(initialDate);
    /**
     * We start the month with the first day in the week which has the effect that dates are
     * visible which aren't in the active month.
     */
    const startDate = getWeekStartDate(monthStart, this.weekStartDay);
    const lastDate = getWeekEndDate(monthEnd, this.weekStartDay);
    this.daysOfWeek = getDaysOfWeek(this.weekStartDay);
    // Hide Today button, when today's date falls within selected month and selected date
    // equals today's date
    const isTodayWithinLimits = isSameOrBetween(today$1, this.config?.minDate, this.config.maxDate);
    const isTodaySelected = isSameDate(today$1, this.date);
    this.showToday = isTodayWithinLimits && !isTodaySelected;
    this.weeks = [];
    this.weekNums = [];
    let week = [];
    if (this.dateRange) {
      if (this.dateRange.start) {
        this.dateRange.start = createDate(this.dateRange?.start);
      }
      if (this.dateRange.end) {
        this.dateRange.end = createDate(this.dateRange?.end);
      }
    }
    for (let i = 0, date = new Date(startDate); date <= lastDate; i++, date.setDate(date.getDate() + 1)) {
      const firstDayOfWeek = i % 7 === 0;
      if (i && firstDayOfWeek) {
        this.weeks.push(week);
        week = [];
      }
      if (firstDayOfWeek && !this.hideWeekNumbers) {
        this.weekNums.push(getWeekOfYear(date, this.weekStartDay));
      }
      const isToday = isSameDate(date, today$1);
      const isSelected = isSameDate(date, this.date);
      const outOfRange = !isSameOrBetween(date, this.config.minDate, this.config.maxDate);
      week.push({
        date: createDate(date),
        selected: isSelected,
        day: date.getDate(),
        isToday,
        otherMonth: isAnotherMonth(date, monthStart),
        disabled: outOfRange
      });
    }
    this.weeks.push(week);
    this.currentMonth = monthStart;
    this.monthNumber = this.currentMonth.getMonth() + 1;
    this.year = this.currentMonth.getFullYear();
    this.updateYears(this.year - NUM_YEARS / 2);
    this.activeHover = undefined;
  }
  updateYears(start) {
    if (start < this.minYear) {
      start = this.minYear;
    } else if (start + NUM_YEARS > this.maxYear) {
      start = this.maxYear - NUM_YEARS + 1;
    }
    this.years = [];
    for (let i = 0; i < NUM_YEARS; i++) {
      this.years.push(start + i);
    }
  }
  setMonthOffset(offset) {
    const month = new Date(this.currentMonth);
    month.setMonth(month.getMonth() + offset);
    this.calcDays(month);
  }
  setMonth(m) {
    if (this.year <= this.minYear && this.minMonth && m < this.minMonth || this.year >= this.maxYear && this.maxMonth && m > this.maxMonth) {
      return;
    }
    const month = new Date(this.currentMonth);
    month.setMonth(m - 1);
    this.calcDays(month);
    this.view = 'week';
  }
  setYear(year) {
    if (year <= this.maxYear && year >= this.minYear) {
      const month = new Date(this.currentMonth);
      month.setFullYear(year);
      this.calcDays(month);
      this.view = 'month';
    }
  }
  prevYears() {
    this.updateYears(this.years[0] - NUM_YEARS);
  }
  nextYears() {
    this.updateYears(this.years[0] + NUM_YEARS);
  }
  monthSelection() {
    this.view = 'month';
  }
  yearSelection() {
    this.view = 'year';
  }
  goToToday() {
    this.dateSelected(today());
  }
}
SiDatepickerComponent.ɵfac = function SiDatepickerComponent_Factory(t) {
  return new (t || SiDatepickerComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiDatepickerComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiDatepickerComponent,
  selectors: [["si-datepicker"]],
  viewQuery: function SiDatepickerComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c19, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.timePicker = _t.first);
    }
  },
  hostBindings: function SiDatepickerComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDatepickerComponent_click_HostBindingHandler($event) {
        return ctx.onClick($event);
      });
    }
  },
  inputs: {
    date: "date",
    dateRange: "dateRange",
    config: "config",
    previousLabel: "previousLabel",
    nextLabel: "nextLabel",
    time12h: "time12h",
    rangeType: "rangeType"
  },
  outputs: {
    dateChange: "dateChange",
    dateRangeChange: "dateRangeChange",
    disabledTimeChange: "disabledTimeChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 4,
  vars: 4,
  consts: [["class", "text-center", 4, "ngIf"], ["class", "text-center pb-6", 4, "ngIf"], ["class", "border-top pt-6", 4, "ngIf"], [1, "text-center"], [1, "header", "border-bottom", "mb-6", "px-8", "py-5"], ["type", "button", 1, "btn", "btn-circle", "btn-sm", "btn-tertiary", 3, "disabled", "click"], [1, "icon", "element-left-2", "flip-rtl"], [1, "year", "flex-fill", "si-title-1", "text-secondary"], [1, "icon", "element-right-2", "flip-rtl"], ["siListInteraction", "", "listInteractionOrientation", "ste", 1, "selection", "d-flex", "flex-wrap", "px-4", "pb-4"], ["class", "year si-title-1", "siListInteractionItem", "", 3, "disabled", "tabindex", "listInteractionItemDisabled", "click", "keydown.enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["siListInteractionItem", "", 1, "year", "si-title-1", 3, "tabindex", "listInteractionItemDisabled", "click", "keydown.enter"], ["tabindex", "0", 1, "year", "flex-fill", "si-title-1", 3, "click"], ["class", "month si-title-1", "siListInteractionItem", "", 3, "disabled", "tabindex", "listInteractionItemDisabled", "click", "keydown.enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["siListInteractionItem", "", 1, "month", "si-title-1", 3, "tabindex", "listInteractionItemDisabled", "click", "keydown.enter"], [1, "text-center", "pb-6"], ["role", "button", 1, "btn", "btn-circle", "btn-sm", "btn-tertiary", "p-2", 3, "tabindex", "click", "keydown.enter"], [1, "flex-fill"], ["tabindex", "0", 1, "month", "flex-fill", "text-end", "pe-1", "si-title-1", 3, "click", "keydown.enter"], ["tabindex", "0", 1, "year", "flex-fill", "text-start", "ps-1", "si-title-1", 3, "click", "keydown.enter"], ["siListInteraction", "", "listInteractionOrientation", "ste", 1, "ps-8", "pe-8"], ["class", "week-num", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "selected", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "footer pt-2 ps-8 pe-8", 4, "ngIf"], [1, "week-num"], [1, "si-hidden-xs", "si-hidden-sm"], [3, "range-hover", "range", "range-start-end", "mouseover", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "mouseover"], ["siListInteractionItem", "", 3, "listInteractionItemDisabled", "click", "keydown.enter"], [1, "footer", "pt-2", "ps-8", "pe-8"], ["type", "button", 1, "btn", "btn-tertiary", "flex-fill", 3, "click"], [1, "border-top", "pt-6"], [1, "ps-8", "pe-8", "pb-8"], ["class", "ms-3 mb-5 form-switch", 4, "ngIf"], [3, "ngModel", "disabled", "showMinutes", "showSeconds", "showMilliseconds", "showMeridian", "ngModelChange"], ["timePicker", ""], [1, "ms-3", "mb-5", "form-switch"], ["type", "checkbox", "role", "switch", 1, "form-check-input", 3, "id", "checked", "change"], [3, "for"]],
  template: function SiDatepickerComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiDatepickerComponent_div_0_Template, 12, 12, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiDatepickerComponent_div_1_Template, 12, 12, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiDatepickerComponent_div_2_Template, 21, 20, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiDatepickerComponent_div_3_Template, 5, 7, "div", 2);
    }
    if (rf & 2) {
      let tmp_3_0;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.view === "year");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.view === "month");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.view === "week");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.config.showTime && ((tmp_3_0 = !ctx.config.enableDateRange) !== null && tmp_3_0 !== undefined ? tmp_3_0 : false));
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgModel, SiListInteractionDirective, SiListInteractionItemDirective, SiTimepickerComponent, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{background:var(--element-base-1);border:1px solid var(--element-ui-4);border-radius:var(--element-radius-2);display:block;inline-size:348px}.header[_ngcontent-%COMP%], .footer[_ngcontent-%COMP%]{display:flex;align-items:center}.header[_ngcontent-%COMP%]{block-size:60px}.header[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none;cursor:pointer}.footer[_ngcontent-%COMP%]{margin-block-start:4px;text-align:center}table[_ngcontent-%COMP%]{inline-size:100%;border-collapse:separate;border-spacing:0 3px;table-layout:fixed;margin-block-end:-3px}.selection[_ngcontent-%COMP%]   .month[_ngcontent-%COMP%]:not(.disabled):hover, .selection[_ngcontent-%COMP%]   .year[_ngcontent-%COMP%]:not(.disabled):hover, td[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:not(.disabled):not(.selected):hover{background:var(--element-base-1-hover);color:var(--element-ui-0)}td[_ngcontent-%COMP%]{block-size:32px;text-align:center}td[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{inline-size:32px;block-size:32px;line-height:32px;margin-inline:auto;position:relative;cursor:pointer}td[_ngcontent-%COMP%]   div.selected[_ngcontent-%COMP%]{background:var(--element-ui-0);color:var(--element-base-1)}th[_ngcontent-%COMP%]{font-weight:400;text-align:center;block-size:32px}.week-num[_ngcontent-%COMP%], th[_ngcontent-%COMP%]{font-size:.75rem;color:var(--element-text-secondary);inline-size:32px;cursor:default}.today.selected[_ngcontent-%COMP%]:before{border-color:var(--element-ui-5)}.today[_ngcontent-%COMP%]:before{position:absolute;content:\"\";inset:1px;border:1px solid var(--element-ui-1);border-radius:var(--element-radius-2);display:inline-block}.selection[_ngcontent-%COMP%]   .month[_ngcontent-%COMP%], .selection[_ngcontent-%COMP%]   .year[_ngcontent-%COMP%]{block-size:30px;line-height:30px;cursor:pointer}.selection[_ngcontent-%COMP%]   .month[_ngcontent-%COMP%]{inline-size:50%}.selection[_ngcontent-%COMP%]   .year[_ngcontent-%COMP%]{inline-size:33.3%}.disabled[_ngcontent-%COMP%]{color:var(--element-text-disabled);font-weight:400!important;cursor:default!important}.range[_ngcontent-%COMP%]{background-color:var(--element-ui-4)}.range[_ngcontent-%COMP%]:hover{background:var(--element-base-1-hover)}.range[_ngcontent-%COMP%]:hover   div.si-title-1[_ngcontent-%COMP%]:hover{background:transparent}.range-hover[_ngcontent-%COMP%]{background-color:var(--element-base-1-hover)}td.range-start-end[_ngcontent-%COMP%]{background:var(--element-ui-0);color:var(--element-base-1)}td.range-start-end[_ngcontent-%COMP%]   div.si-title-1[_ngcontent-%COMP%]:hover, td.range-start-end[_ngcontent-%COMP%]   div.si-body-1[_ngcontent-%COMP%]:hover{background:transparent;color:var(--element-base-1)}td.range-start-end[_ngcontent-%COMP%]   .today[_ngcontent-%COMP%]:before{border-color:var(--element-ui-5)}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDatepickerComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-datepicker',
      template: "<div *ngIf=\"view === 'year'\" class=\"text-center\">\n  <div class=\"header border-bottom mb-6 px-8 py-5\">\n    <button\n      type=\"button\"\n      class=\"btn btn-circle btn-sm btn-tertiary\"\n      [disabled]=\"years[0] <= minYear\"\n      [attr.aria-label]=\"previousLabel | translate\"\n      (click)=\"prevYears()\"\n    >\n      <i class=\"icon element-left-2 flip-rtl\"></i>\n    </button>\n    <span class=\"year flex-fill si-title-1 text-secondary\">\n      {{ years[0] }} - {{ years[years.length - 1] }}\n    </span>\n    <button\n      type=\"button\"\n      class=\"btn btn-circle btn-sm btn-tertiary\"\n      [disabled]=\"years[years.length - 1] >= maxYear\"\n      [attr.aria-label]=\"nextLabel | translate\"\n      (click)=\"nextYears()\"\n    >\n      <i class=\"icon element-right-2 flip-rtl\"></i>\n    </button>\n  </div>\n  <div class=\"selection d-flex flex-wrap px-4 pb-4\" siListInteraction listInteractionOrientation=\"ste\">\n    <div\n      *ngFor=\"let year of years; trackBy: trackByIndex\"\n      class=\"year si-title-1\"\n      [class.disabled]=\"year > maxYear || year < minYear\"\n      [tabindex]=\"year > maxYear || year < minYear ? null : '0'\"\n      (click)=\"setYear(year)\"\n      (keydown.enter)=\"setYear(year)\"\n      siListInteractionItem\n      [listInteractionItemDisabled]=\"year > maxYear || year < minYear\"\n    >{{ year }}</div>\n  </div>\n</div>\n<div *ngIf=\"view === 'month'\" class=\"text-center\">\n  <div class=\"header border-bottom mb-6 px-8 py-5\">\n    <button\n      type=\"button\"\n      class=\"btn btn-circle btn-sm btn-tertiary\"\n      [disabled]=\"year <= minYear\"\n      [attr.aria-label]=\"previousLabel | translate\"\n      (click)=\"setYear(year - 1)\"\n    >\n      <i class=\"icon element-left-2 flip-rtl\"></i>\n    </button>\n    <a class=\"year flex-fill si-title-1\" (click)=\"yearSelection()\" tabindex=\"0\">\n      {{ year }}\n    </a>\n    <button\n      type=\"button\"\n      class=\"btn btn-circle btn-sm btn-tertiary\"\n      [disabled]=\"year >= maxYear\"\n      [attr.aria-label]=\"nextLabel | translate\"\n      (click)=\"setYear(year + 1)\"\n    >\n      <i class=\"icon element-right-2 flip-rtl\"></i>\n    </button>\n  </div>\n  <div class=\"selection d-flex flex-wrap px-4 pb-4\" siListInteraction listInteractionOrientation=\"ste\">\n    <div\n      *ngFor=\"let m of [1,2,3,4,5,6,7,8,9,10,11,12]; trackBy: trackByIndex\"\n      class=\"month si-title-1\"\n      [class.disabled]=\"(year >= maxYear && maxMonth && m > maxMonth) || (year <=minYear && minMonth && m < minMonth)\"\n      [tabindex]=\"(year >= maxYear && maxMonth && m > maxMonth) || (year <=minYear && minMonth && m < minMonth) ? null : '0'\"\n      (click)=\"setMonth(m)\"\n      (keydown.enter)=\"setMonth(m)\"\n      siListInteractionItem\n      [listInteractionItemDisabled]=\"!!(year >= maxYear && maxMonth && m > maxMonth) || !!(year <= minYear && minMonth && m < minMonth)\"\n    >\n      {{ months[m - 1] }}\n    </div>\n  </div>\n</div>\n<div *ngIf=\"view === 'week'\" class=\"text-center pb-6\">\n  <div class=\"header border-bottom mb-6 px-8 py-5\">\n    <a\n      role=\"button\"\n      [class.disabled]=\"year <= minYear && minMonth && monthNumber <= minMonth ?? null\"\n      [tabindex]=\"year <= minYear && minMonth && monthNumber <= minMonth ? null : '0'\"\n      class=\"btn btn-circle btn-sm btn-tertiary p-2\"\n      [attr.aria-label]=\"previousLabel | translate\"\n      (click)=\"setMonthOffset(-1)\"\n      (keydown.enter)=\"setMonthOffset(-1)\"\n    >\n      <i class=\"icon element-left-2 flip-rtl\"></i>\n    </a>\n    <div class=\"flex-fill\">\n      <a\n        class=\"month flex-fill text-end pe-1 si-title-1\"\n        tabindex=\"0\"\n        (click)=\"monthSelection()\"\n        (keydown.enter)=\"monthSelection()\"\n      >\n        {{ months[monthNumber - 1] }}\n      </a>\n      <a\n        class=\"year flex-fill text-start ps-1 si-title-1\"\n        tabindex=\"0\"\n        (click)=\"yearSelection()\"\n        (keydown.enter)=\"yearSelection()\"\n      >\n        {{ year }}\n      </a>\n    </div>\n    <a\n      role=\"button\"\n      class=\"btn btn-circle btn-sm btn-tertiary p-2\"\n      [class.disabled]=\"year >= maxYear && maxMonth && monthNumber >= maxMonth ?? null\"\n      [tabindex]=\"year >= maxYear && maxMonth && monthNumber >= maxMonth ? null : '0'\"\n      [attr.aria-label]=\"nextLabel | translate\"\n      (click)=\"year >= maxYear && maxMonth && monthNumber >= maxMonth ? false : setMonthOffset(1)\"\n      (keydown.enter)=\"year >= maxYear && maxMonth && monthNumber >= maxMonth ? false : setMonthOffset(1)\"\n    >\n      <i class=\"icon element-right-2 flip-rtl\"></i>\n    </a>\n  </div>\n  <table class=\"ps-8 pe-8\" siListInteraction listInteractionOrientation=\"ste\">\n    <thead>\n      <tr>\n        <td *ngIf=\"!hideWeekNumbers\" class=\"week-num\"></td>\n        <th *ngFor=\"let day of daysOfWeek; trackBy: trackByIndex\">\n          <span class=\"si-hidden-xs si-hidden-sm\">{{ days[day.index - 1] }}</span>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let week of weeks; let index = index; trackBy: trackByIndex\" [class.selected]=\"week[0].selected\">\n        <td *ngIf=\"!hideWeekNumbers\" class=\"week-num\">{{ weekNums[index] }}</td>\n        <td *ngFor=\"let day of week; trackBy: trackByIndex\"\n            [class.range-hover]=\"config.enableDateRange && isRangeHover(day)\"\n            [class.range]=\"inRange(day)\"\n            [class.range-start-end]=\"isRangeSelected(day)\"\n            (mouseover)=\"activeHover = day.date;\"\n            >\n          <div\n            [class.text-secondary]=\"day.otherMonth && !day.disabled && !isRangeSelected(day)\"\n            [class.si-body-1]=\"day.otherMonth\"\n            [class.si-title-1]=\"!day.otherMonth\"\n            [attr.aria-disabled]=\"day.disabled\"\n            [class.today]=\"day.isToday\"\n            [class.selected]=\"day.selected && !config.enableDateRange\"\n            [class.disabled]=\"day.disabled\"\n            (click)=\"dateSelected(day.date)\"\n            (keydown.enter)=\"dateSelected(day.date)\"\n            siListInteractionItem\n            [listInteractionItemDisabled]=\"day.disabled\"\n          >\n            {{ day.day }}\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <div *ngIf=\"showToday\" class=\"footer pt-2 ps-8 pe-8\">\n    <button type=\"button\" class=\"btn btn-tertiary flex-fill\" (click)=\"goToToday()\">\n      {{ config.todayText ?? 'Today' | translate }}\n    </button>\n  </div>\n</div>\n<div *ngIf=\"this.config.showTime && !this.config.enableDateRange ?? false\" class=\"border-top pt-6\">\n  <div class=\"ps-8 pe-8 pb-8\">\n    <div *ngIf=\"!config.mandatoryTime ?? false\" class=\"ms-3 mb-5 form-switch\">\n      <input\n        type=\"checkbox\"\n        class=\"form-check-input\"\n        role=\"switch\"\n        [id]=\"switchId\"\n        [checked]=\"!disabledTime\"\n        (change)=\"toggleDisabledTime()\"\n      >\n      <label [for]=\"switchId\">{{ includeTimeLabel | translate }}</label>\n    </div>\n    <si-timepicker\n      [ngModel]=\"time\"\n      (ngModelChange)=\"timeSelected($event)\"\n      [disabled]=\"disabledTime\"\n      [showMinutes]=\"config.showMinutes ?? true\"\n      [showSeconds]=\"config.showSeconds ?? false\"\n      [showMilliseconds]=\"config.showMilliseconds ?? false\"\n      [showMeridian]=\"time12h\"\n      #timePicker\n      ></si-timepicker>\n  </div>\n</div>\n",
      styles: [":host{background:var(--element-base-1);border:1px solid var(--element-ui-4);border-radius:var(--element-radius-2);display:block;inline-size:348px}.header,.footer{display:flex;align-items:center}.header{block-size:60px}.header a{text-decoration:none;cursor:pointer}.footer{margin-block-start:4px;text-align:center}table{inline-size:100%;border-collapse:separate;border-spacing:0 3px;table-layout:fixed;margin-block-end:-3px}.selection .month:not(.disabled):hover,.selection .year:not(.disabled):hover,td div:not(.disabled):not(.selected):hover{background:var(--element-base-1-hover);color:var(--element-ui-0)}td{block-size:32px;text-align:center}td div{inline-size:32px;block-size:32px;line-height:32px;margin-inline:auto;position:relative;cursor:pointer}td div.selected{background:var(--element-ui-0);color:var(--element-base-1)}th{font-weight:400;text-align:center;block-size:32px}.week-num,th{font-size:.75rem;color:var(--element-text-secondary);inline-size:32px;cursor:default}.today.selected:before{border-color:var(--element-ui-5)}.today:before{position:absolute;content:\"\";inset:1px;border:1px solid var(--element-ui-1);border-radius:var(--element-radius-2);display:inline-block}.selection .month,.selection .year{block-size:30px;line-height:30px;cursor:pointer}.selection .month{inline-size:50%}.selection .year{inline-size:33.3%}.disabled{color:var(--element-text-disabled);font-weight:400!important;cursor:default!important}.range{background-color:var(--element-ui-4)}.range:hover{background:var(--element-base-1-hover)}.range:hover div.si-title-1:hover{background:transparent}.range-hover{background-color:var(--element-base-1-hover)}td.range-start-end{background:var(--element-ui-0);color:var(--element-base-1)}td.range-start-end div.si-title-1:hover,td.range-start-end div.si-body-1:hover{background:transparent;color:var(--element-base-1)}td.range-start-end .today:before{border-color:var(--element-ui-5)}\n"]
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    date: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dateRange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dateChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    dateRangeChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    disabledTimeChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    config: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    previousLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    nextLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    time12h: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    rangeType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    timePicker: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['timePicker']
    }],
    onClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['click', ['$event']]
    }]
  });
})();
class SiDatepickerOverlayComponent {
  constructor(elementRef, cdRef) {
    this.elementRef = elementRef;
    this.cdRef = cdRef;
    this.dateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.disabledTimeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.dateRangeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.subscriptions = [];
  }
  ngAfterViewInit() {
    setTimeout(() => {
      if (!this.datepicker) {
        return;
      }
      if (this.config) {
        this.datepicker.config = this.config;
      }
      this.datepicker.time12h = this.time12h;
      this.datepicker.setDate(this.date ? this.date : new Date());
      this.datepicker.rangeType = this.rangeType ?? 'START';
      this.datepicker.dateRange = this.dateRange;
      this.subscriptions.push(this.datepicker.dateChange.subscribe(dt => {
        this.dateChange.next(dt);
      }));
      this.subscriptions.push(this.datepicker.dateRangeChange.subscribe(dtRange => {
        this.dateRangeChange.next(dtRange);
      }));
      this.subscriptions.push(this.datepicker.disabledTimeChange.subscribe(disabled => {
        this.disabledTimeChange.next(disabled);
      }));
      this.cdRef.markForCheck();
    }, 1);
  }
  ngOnDestroy() {
    this.subscriptions?.forEach(sub => sub.unsubscribe());
  }
}
SiDatepickerOverlayComponent.ɵfac = function SiDatepickerOverlayComponent_Factory(t) {
  return new (t || SiDatepickerOverlayComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiDatepickerOverlayComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiDatepickerOverlayComponent,
  selectors: [["si-datepicker-overlay"]],
  viewQuery: function SiDatepickerOverlayComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c21, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.datepicker = _t.first);
    }
  },
  inputs: {
    date: "date",
    dateRange: "dateRange",
    rangeType: "rangeType"
  },
  outputs: {
    dateChange: "dateChange",
    disabledTimeChange: "disabledTimeChange",
    dateRangeChange: "dateRangeChange"
  },
  decls: 2,
  vars: 0,
  consts: [["tabindex", "-1", 1, "mt-1", "elevation-2", "mh-100", "overflow-auto"], ["datepicker", ""]],
  template: function SiDatepickerOverlayComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-datepicker", 0, 1);
    }
  },
  dependencies: [SiDatepickerComponent],
  encapsulation: 2,
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDatepickerOverlayComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-datepicker-overlay',
      template: `
  <si-datepicker #datepicker class="mt-1 elevation-2 mh-100 overflow-auto" tabindex="-1"></si-datepicker>
  `,
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    datepicker: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['datepicker', {
        static: false
      }]
    }],
    date: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dateRange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    rangeType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    dateChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    disabledTimeChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    dateRangeChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiDatepickerDirective extends SiDateInputDirective {
  constructor() {
    super(...arguments);
    this.overlay = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.Overlay);
  }
  ngOnDestroy() {
    this.overlayref?.dispose();
  }
  updateInstance(date) {
    if (this.datepickerOverlay) {
      this.datepickerOverlay.instance.date = date;
      this.datepickerOverlay.instance.datepicker?.setDate(date);
    }
  }
  onFocus() {
    this.showDatepicker();
  }
  onKeydown(event) {
    if (event.key === 'Enter') {
      if (this.overlayref?.hasAttached()) {
        this.hideDatepicker();
      } else {
        this.showDatepicker();
      }
    }
  }
  onBlur(event) {
    this.onTouched();
    setTimeout(() => {
      // Close the datepicker, when the user tabs from the input element to the next element, unless the datepicker got the tab.
      // Occurs when tabbing through a form with multiple input elements of within the filtered search.
      if (!this.datepickerOverlay?.instance.elementRef.nativeElement.contains(document.activeElement) && !this.datepickerOverlay?.instance.datepicker?.hasFocus) {
        this.hideDatepicker();
      }
      this.cdRef.markForCheck();
    });
  }
  onDatepickerChange(date) {
    // update input element
    this.writeValue(date);
    // update the Forms ngModel
    this.onModelChange(this.date);
  }
  showDatepicker() {
    if (this.readonly) {
      return;
    }
    if (!this.overlayref?.hasAttached()) {
      this.overlayref = getOverlay(this.elementRef, this.overlay, true, [positionBottomCenter, positionBottomStart, positionBottomEnd, positionTopCenter, positionTopStart, positionTopEnd], true);
    }
    if (this.overlayref.hasAttached()) {
      if (this.datepickerOverlay?.instance.config?.enableDateRange) {
        this.datepickerOverlay.instance.dateRange = this.dateRange;
        if (this.datepickerOverlay.instance.datepicker) {
          this.datepickerOverlay.instance.datepicker.dateRange = this.dateRange;
        } else {
          // component is constructing
          setTimeout(() => {
            if (this.datepickerOverlay?.instance.datepicker) {
              this.datepickerOverlay.instance.datepicker.dateRange = this.dateRange;
            }
            this.cdRef.markForCheck();
          });
        }
      }
      return;
    }
    this.overlayref.backdropClick().subscribe(() => {
      this.hideDatepicker();
    });
    const portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.ComponentPortal(SiDatepickerOverlayComponent);
    const datepickerRef = this.overlayref.attach(portal);
    datepickerRef.instance.date = this.date;
    datepickerRef.instance.dateRange = this.dateRange;
    datepickerRef.instance.rangeType = this.rangeType;
    datepickerRef.instance.config = this.siDatepickerConfig;
    datepickerRef.instance.time12h = this.getTime12h();
    this.datepickerOverlay = datepickerRef;
    this.subscriptions.push(datepickerRef.instance.dateChange.subscribe(dt => this.onDatepickerChange(dt)));
    this.subscriptions.push(datepickerRef.instance.dateRangeChange.subscribe(dtRange => this.siDatepickerRangeChange.next(dtRange)));
    this.subscriptions.push(datepickerRef.instance.disabledTimeChange.subscribe(disabledTime => {
      if (!this.siDatepickerConfig) {
        this.siDatepickerConfig = {};
      }
      this.siDatepickerConfig.disabledTime = disabledTime;
      // clear the date formatter cache
      this.dateFormat = undefined;
      // Write updated format to input element
      this.writeValue(this.date);
      this.siDatepickerDisabledTime.next(disabledTime);
    }));
  }
  hideDatepicker() {
    this.overlayref?.detach();
    this.datepickerOverlay = undefined;
    this.siDatepickerClose.next();
  }
  getTime12h() {
    const dateFormat = getDatepickerFormat(this.locale, this.siDatepickerConfig, true);
    return dateFormat?.includes('a');
  }
}
SiDatepickerDirective.ɵfac = /* @__PURE__ */function () {
  let ɵSiDatepickerDirective_BaseFactory;
  return function SiDatepickerDirective_Factory(t) {
    return (ɵSiDatepickerDirective_BaseFactory || (ɵSiDatepickerDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](SiDatepickerDirective)))(t || SiDatepickerDirective);
  };
}();
SiDatepickerDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiDatepickerDirective,
  selectors: [["", "siDatepicker", ""]],
  hostBindings: function SiDatepickerDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("focus", function SiDatepickerDirective_focus_HostBindingHandler() {
        return ctx.onFocus();
      })("keydown", function SiDatepickerDirective_keydown_HostBindingHandler($event) {
        return ctx.onKeydown($event);
      })("blur", function SiDatepickerDirective_blur_HostBindingHandler($event) {
        return ctx.onBlur($event);
      });
    }
  },
  exportAs: ["siDatepicker"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
    useExisting: SiDatepickerDirective,
    multi: true
  }, {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALIDATORS,
    useExisting: SiDatepickerDirective,
    multi: true
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDatepickerDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siDatepicker]',
      exportAs: 'siDatepicker',
      providers: [{
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
        useExisting: SiDatepickerDirective,
        multi: true
      }, {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALIDATORS,
        useExisting: SiDatepickerDirective,
        multi: true
      }]
    }]
  }], null, {
    onFocus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focus']
    }],
    onKeydown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keydown', ['$event']]
    }],
    onBlur: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['blur', ['$event']]
    }]
  });
})();
class SiDateRangeComponent {
  get siDatepickerConfig() {
    return this._siDatepickerConfig;
  }
  set siDatepickerConfig(val) {
    this._siDatepickerConfig = {
      ...val,
      ...this.siDatepickerConfig
    };
  }
  get disabled() {
    return this._disabled;
  }
  /**
   * @defaultref {@link _disabled}
   */
  set disabled(value) {
    this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__.coerceBooleanProperty)(value);
  }
  get readonly() {
    return this._readonly;
  }
  /**
   * @defaultref {@link _readonly}
   */
  set readonly(value) {
    this._readonly = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__.coerceBooleanProperty)(value);
  }
  constructor(cdRef) {
    this.cdRef = cdRef;
    this._siDatepickerConfig = {
      enableDateRange: true,
      showTime: false
    };
    this.startDatePlaceholder = 'Start date';
    this.endDatePlaceholder = 'End date';
    this._disabled = false;
    this._readonly = false;
    this.focusOn = false;
    this.subscriptions = [];
    this.onChange = _val => {};
    this.onTouch = () => {};
  }
  ngOnInit() {
    this.subscriptions.push(this.siDatepicker.siDatepickerRangeChange.subscribe(dtRange => {
      this.writeValue({
        ...dtRange
      });
      if (this.siDatepicker.rangeType === 'START') {
        if (dtRange) {
          this.endDateInput.nativeElement.focus();
        }
      }
    }));
  }
  ngOnDestroy() {
    this.subscriptions.forEach(subscription => subscription.unsubscribe());
  }
  showDatePicker(rangeType) {
    this.focusOn = true;
    if (this.siDatepicker) {
      //this.siDatepicker.hideDatepicker();
      this.siDatepicker.rangeType = rangeType;
      this.siDatepicker.dateRange = this.value;
      this.siDatepicker.showDatepicker();
    }
  }
  get value() {
    return this._value;
  }
  /**
   * @defaultref {@link _value}
   */
  set value(value) {
    if (value !== this._value) {
      this._value = value;
      // this allows angular's built in required validator to work correctly
      if (!value?.start && !value?.end) {
        this._value = undefined;
      }
      this.onChange(this._value);
      this.onTouch();
      this.validate(this.dateRangeControl);
      this.cdRef.markForCheck();
    }
  }
  writeValue(value) {
    this.value = value ?? this.value;
  }
  registerOnChange(fn) {
    this.onChange = fn;
  }
  registerOnTouched(fn) {
    this.onTouch = fn;
  }
  setDisabledState(isDisabled) {
    this._disabled = isDisabled;
  }
  validate(control) {
    if (control !== this.dateRangeControl) {
      this.dateRangeControl = control;
    }
    let error = this.dateRangeControl?.invalid ? this.dateRangeControl.errors : null;
    if (this.startInput.invalid && !this.value?.start) {
      error = {
        ...error,
        invalidStartDateFormat: true
      };
    }
    if (this.endInput.invalid && !this.value?.end) {
      error = {
        ...error,
        invalidEndDateFormat: true
      };
    } else if (this.endInput.value && this.endInput.value < this.startInput.value) {
      error = {
        ...error,
        endBeforeStart: {
          start: this.startInput.value,
          end: this.endInput.value
        }
      };
    }
    return error ?? null;
  }
  onFocusOut(event) {
    setTimeout(() => {
      if (!this.focusOn) {
        this.siDatepicker.onBlur(event);
        this.onTouch();
        this.validate(this.dateRangeControl);
      }
    }, 1);
  }
}
SiDateRangeComponent.ɵfac = function SiDateRangeComponent_Factory(t) {
  return new (t || SiDateRangeComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiDateRangeComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiDateRangeComponent,
  selectors: [["si-date-range"]],
  viewQuery: function SiDateRangeComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c22, 7, SiDatepickerDirective);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c23, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c24, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c25, 7);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.siDatepicker = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.startInput = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.endInput = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.endDateInput = _t.first);
    }
  },
  hostAttrs: [1, "form-control", "p-0", "border-0"],
  hostBindings: function SiDateRangeComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("focusout", function SiDateRangeComponent_focusout_HostBindingHandler() {
        return ctx.onFocusOut();
      });
    }
  },
  inputs: {
    siDatepickerConfig: "siDatepickerConfig",
    startDatePlaceholder: "startDatePlaceholder",
    endDatePlaceholder: "endDatePlaceholder",
    disabled: "disabled",
    readonly: "readonly",
    value: "value"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
    useExisting: SiDateRangeComponent,
    multi: true
  }, {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALIDATORS,
    useExisting: SiDateRangeComponent,
    multi: true
  }])],
  decls: 11,
  vars: 26,
  consts: [["siDatepicker", "", 1, "form-control", "d-flex", 3, "siDatepickerConfig", "readonly"], ["range", ""], ["type", "text", "siDateInput", "", 1, "border-0", "p-0", "focus-none", "form-control", 3, "ngModel", "siDatepickerConfig", "placeholder", "disabled", "readonly", "focus", "blur", "keyup.enter", "ngModelChange"], ["startInput", "ngModel"], [1, "mx-3"], ["type", "text", "siDateInput", "", 1, "border-0", "p-0", "focus-none", "form-control", "text-end", 3, "ngModel", "siDatepickerConfig", "placeholder", "disabled", "readonly", "focus", "blur", "keyup.enter", "ngModelChange"], ["end", "", "endInput", "ngModel"]],
  template: function SiDateRangeComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0, 1)(2, "input", 2, 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("focus", function SiDateRangeComponent_Template_input_focus_2_listener() {
        return ctx.showDatePicker("START");
      })("blur", function SiDateRangeComponent_Template_input_blur_2_listener() {
        return ctx.focusOn = false;
      })("keyup.enter", function SiDateRangeComponent_Template_input_keyup_enter_2_listener() {
        return ctx.siDatepicker.dateRange = ctx.value;
      })("ngModelChange", function SiDateRangeComponent_Template_input_ngModelChange_2_listener($event) {
        return ctx.writeValue({
          start: $event,
          end: ctx.value == null ? null : ctx.value.end
        });
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "span", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6, "-");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "input", 5, 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("focus", function SiDateRangeComponent_Template_input_focus_7_listener() {
        return ctx.showDatePicker("END");
      })("blur", function SiDateRangeComponent_Template_input_blur_7_listener() {
        return ctx.focusOn = false;
      })("keyup.enter", function SiDateRangeComponent_Template_input_keyup_enter_7_listener() {
        return ctx.siDatepicker.dateRange = ctx.value;
      })("ngModelChange", function SiDateRangeComponent_Template_input_ngModelChange_7_listener($event) {
        return ctx.writeValue({
          start: ctx.value == null ? null : ctx.value.start,
          end: $event
        });
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](10, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx.disabled)("focus", ctx.focusOn)("ng-invalid", !(ctx.dateRangeControl == null ? null : ctx.dateRangeControl.valid))("ng-touched", ctx.dateRangeControl == null ? null : ctx.dateRangeControl.touched)("ng-dirty", ctx.dateRangeControl == null ? null : ctx.dateRangeControl.dirty);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siDatepickerConfig", ctx.siDatepickerConfig)("readonly", ctx.readonly);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", ctx.dateRangeControl && ctx.dateRangeControl.value && ctx.dateRangeControl.value.start)("siDatepickerConfig", ctx.siDatepickerConfig)("placeholder", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 22, ctx.startDatePlaceholder))("disabled", ctx.disabled)("readonly", ctx.readonly);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", ctx.dateRangeControl && ctx.dateRangeControl.value && ctx.dateRangeControl.value.end)("siDatepickerConfig", ctx.siDatepickerConfig)("placeholder", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](10, 24, ctx.endDatePlaceholder))("disabled", ctx.disabled)("readonly", ctx.readonly);
    }
  },
  dependencies: [_angular_forms__WEBPACK_IMPORTED_MODULE_29__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgModel, SiDateInputDirective, SiDatepickerDirective, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:block;min-inline-size:198px}.focus-none[_ngcontent-%COMP%]{outline:0}.focus[_ngcontent-%COMP%]{box-shadow:0 0 0 var(--element-button-focus-overlay-width) var(--element-button-focus-overlay-color),0 0 0 calc(var(--element-button-focus-width) + var(--element-button-focus-overlay-width)) var(--element-focus-default)}input[_ngcontent-%COMP%]{flex-grow:1;background-color:var(--element-base-1);min-inline-size:80px}input[_ngcontent-%COMP%]:disabled, input[readonly][_ngcontent-%COMP%]{background-color:var(--element-base-1);opacity:1}input[_ngcontent-%COMP%], input[_ngcontent-%COMP%]:focus{box-shadow:none}input[_ngcontent-%COMP%]:not([readonly]):focus::placeholder, input[_ngcontent-%COMP%]:focus:not([readonly]):focus::placeholder{color:transparent}.disabled[_ngcontent-%COMP%], .disabled[_ngcontent-%COMP%]:hover, .disabled[_ngcontent-%COMP%]:focus{--border-color: var(--element-ui-3);color:var(--element-text-disabled)}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDateRangeComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-date-range',
      host: {
        class: 'form-control p-0 border-0'
      },
      providers: [{
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
        useExisting: SiDateRangeComponent,
        multi: true
      }, {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALIDATORS,
        useExisting: SiDateRangeComponent,
        multi: true
      }],
      template: "<div\n  class=\"form-control d-flex\"\n  [class.disabled]=\"disabled\"\n  [class.focus]=\"focusOn\"\n  [class.ng-invalid]=\"!dateRangeControl?.valid\"\n  [class.ng-touched]=\"dateRangeControl?.touched\"\n  [class.ng-dirty]=\"dateRangeControl?.dirty\"\n  #range\n  siDatepicker\n  [siDatepickerConfig]=\"siDatepickerConfig\"\n  [readonly]=\"readonly\"\n  >\n  <input\n    #startInput=\"ngModel\"\n    type=\"text\"\n    class=\"border-0 p-0 focus-none form-control\"\n    siDateInput\n    (focus)=\"showDatePicker('START')\"\n    (blur)=\"focusOn = false\"\n    (keyup.enter)=\"siDatepicker.dateRange = value\"\n    [ngModel]=\"dateRangeControl && dateRangeControl.value && dateRangeControl.value.start\"\n    (ngModelChange)=\"writeValue({start: $event, end: value?.end})\"\n    [siDatepickerConfig]=\"siDatepickerConfig\"\n    [placeholder]=\"startDatePlaceholder | translate\"\n    [disabled]=\"disabled\"\n    [readonly]=\"readonly\"\n  />\n  <span class=\"mx-3\">-</span>\n  <input\n    #end\n    #endInput=\"ngModel\"\n    type=\"text\"\n    class=\"border-0 p-0 focus-none form-control text-end\"\n    siDateInput\n    (focus)=\"showDatePicker('END')\"\n    (blur)=\"focusOn = false\"\n    (keyup.enter)=\"siDatepicker.dateRange = value\"\n    [ngModel]=\"dateRangeControl && dateRangeControl.value && dateRangeControl.value.end\"\n    (ngModelChange)=\"writeValue({start: value?.start, end: $event})\"\n    [siDatepickerConfig]=\"siDatepickerConfig\"\n    [placeholder]=\"endDatePlaceholder | translate\"\n    [disabled]=\"disabled\"\n    [readonly]=\"readonly\"\n  />\n</div>\n",
      styles: [":host{display:block;min-inline-size:198px}.focus-none{outline:0}.focus{box-shadow:0 0 0 var(--element-button-focus-overlay-width) var(--element-button-focus-overlay-color),0 0 0 calc(var(--element-button-focus-width) + var(--element-button-focus-overlay-width)) var(--element-focus-default)}input{flex-grow:1;background-color:var(--element-base-1);min-inline-size:80px}input:disabled,input[readonly]{background-color:var(--element-base-1);opacity:1}input,input:focus{box-shadow:none}input:not([readonly]):focus::placeholder,input:focus:not([readonly]):focus::placeholder{color:transparent}.disabled,.disabled:hover,.disabled:focus{--border-color: var(--element-ui-3);color:var(--element-text-disabled)}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    siDatepicker: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['range', {
        read: SiDatepickerDirective,
        static: true
      }]
    }],
    startInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['startInput', {
        static: true
      }]
    }],
    endInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['endInput', {
        static: true
      }]
    }],
    endDateInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['end', {
        static: true
      }]
    }],
    siDatepickerConfig: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    startDatePlaceholder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    endDatePlaceholder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    onFocusOut: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focusout']
    }]
  });
})();

/**
 * @deprecated This component should no longer be used as a native HTML solution is availalbe.
 * `<si-switch></si-switch>` can be rewritten as
 * ```html
 * <div class="from-check form-switch">
 *   <input class="form-check-input" type="checkbox" id="switch-input" role="switch">
 *   <label class="form-check-label" for="switch-input">Switch label></label>
 * </div>
 * ```
 * Expected removal in version 44.
 */
class SiSwitchComponent {
  constructor() {
    /**
     * State of switch.
     */
    this.on = false;
    /**
     * Input for disabling toggle action.
     */
    this.disabled = false;
    /**
     * Aria label needed for a11y
     */
    this.ariaLabel = 'switch';
    /**
     * Checkbox id required for accessibility
     */
    this.switchId = 'switch';
    /**
     * Callback function triggered for state changes. The emitted value shows the new state.
     */
    this.toggle = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  onToggle() {
    this.toggle.emit(this.on);
  }
  onKeydownToggle() {
    this.on = !this.on;
    this.onToggle();
  }
}
SiSwitchComponent.ɵfac = function SiSwitchComponent_Factory(t) {
  return new (t || SiSwitchComponent)();
};
SiSwitchComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiSwitchComponent,
  selectors: [["si-switch"]],
  hostAttrs: [1, "form-check", "form-switch"],
  inputs: {
    on: "on",
    disabled: "disabled",
    ariaLabel: "ariaLabel",
    switchId: "switchId"
  },
  outputs: {
    toggle: "toggle"
  },
  decls: 2,
  vars: 6,
  consts: [["type", "checkbox", "role", "switch", 1, "form-check-input", 3, "id", "disabled", "ngModel", "ngModelChange", "change"]],
  template: function SiSwitchComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "input", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function SiSwitchComponent_Template_input_ngModelChange_0_listener($event) {
        return ctx.on = $event;
      })("change", function SiSwitchComponent_Template_input_change_0_listener() {
        return ctx.onToggle();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx.switchId)("disabled", ctx.disabled)("ngModel", ctx.on);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 4, ctx.ariaLabel));
    }
  },
  dependencies: [_angular_forms__WEBPACK_IMPORTED_MODULE_29__.CheckboxControlValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgModel, SiTranslatePipe],
  encapsulation: 2,
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSwitchComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-switch',
      host: {
        class: 'form-check form-switch'
      },
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<input\n  type=\"checkbox\"\n  [id]=\"switchId\"\n  class=\"form-check-input\"\n  role=\"switch\"\n  [disabled]=\"disabled\"\n  [attr.aria-label]=\"ariaLabel | translate\"\n  [(ngModel)]=\"on\"\n  (change)=\"onToggle()\">\n"
    }]
  }], null, {
    on: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    ariaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    switchId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    toggle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiSwitchModule {}
SiSwitchModule.ɵfac = function SiSwitchModule_Factory(t) {
  return new (t || SiSwitchModule)();
};
SiSwitchModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiSwitchModule
});
SiSwitchModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSwitchModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule, SiTranslateModule],
      declarations: [SiSwitchComponent],
      exports: [SiSwitchComponent]
    }]
  }], null, null);
})();
class SiDatepickerModule {}
SiDatepickerModule.ɵfac = function SiDatepickerModule_Factory(t) {
  return new (t || SiDatepickerModule)();
};
SiDatepickerModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiDatepickerModule
});
SiDatepickerModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.OverlayModule, SiListInteractionModule, SiSwitchModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDatepickerModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.OverlayModule, SiListInteractionModule, SiSwitchModule, SiTranslateModule],
      declarations: [SiDateInputDirective, SiDatepickerComponent, SiDatepickerDirective, SiDatepickerOverlayComponent, SiDateRangeComponent, SiTimepickerComponent],
      exports: [SiDateInputDirective, SiDatepickerComponent, SiDatepickerDirective, SiDateRangeComponent, SiTimepickerComponent]
    }]
  }], null, null);
})();
class SiElectrontitlebarComponent {
  constructor() {
    /**
     * Defines if the application can go back or not
     */
    this.canGoBack = false;
    /**
     * Defines if the application can go forward or not
     */
    this.canGoForward = false;
    /**
     * Defines if the application is focused or not
     */
    this.hasFocus = true;
    /**
     * List of menu items for the dropdown
     * In this dropdown should the zoom functionality as well as the refresh function be provided
     */
    this.menuItems = [];
    /**
     * Browsing forward function
     */
    this.forward = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Browsing back function
     */
    this.back = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Aria Label for Forward Button
     */
    this.ariaLabelForward = 'forward';
    /**
     * Aria Label for Back Button
     */
    this.ariaLabelBack = 'back';
    /**
     * Aria Label for Menu Button
     */
    this.ariaLabelMenu = 'menu';
  }
}
SiElectrontitlebarComponent.ɵfac = function SiElectrontitlebarComponent_Factory(t) {
  return new (t || SiElectrontitlebarComponent)();
};
SiElectrontitlebarComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiElectrontitlebarComponent,
  selectors: [["si-electron-titlebar"]],
  inputs: {
    appTitle: "appTitle",
    canGoBack: "canGoBack",
    canGoForward: "canGoForward",
    hasFocus: "hasFocus",
    menuItems: "menuItems",
    ariaLabelForward: "ariaLabelForward",
    ariaLabelBack: "ariaLabelBack",
    ariaLabelMenu: "ariaLabelMenu"
  },
  outputs: {
    forward: "forward",
    back: "back"
  },
  decls: 8,
  vars: 12,
  consts: [[1, "electron-title-bar-container", "w-100", "bg-base-1", "border-bottom", "fixed-top"], [1, "electron-title-bar", "align-items-center", "d-flex", "h-100"], [1, "ms-6", "me-9", "si-body-2", "electron-title-bar-app-name", "text-truncate"], ["type", "button", 1, "btn", "btn-circle", "btn-xs", "btn-inline", "element-left-4", "flip-rtl", "me-6", 3, "disabled", "click"], ["type", "button", 1, "btn", "btn-circle", "btn-xs", "btn-inline", "element-right-4", "flip-rtl", "me-6", 3, "disabled", "click"], ["siDropdown", "", "class", "btn-group me-5", "dropdownDirection", "down", "dropdownContainer", "body", 4, "ngIf"], [1, "electron-title-bar-draggable", "flex-grow-1", "w-100", "h-100"], ["siDropdown", "", "dropdownDirection", "down", "dropdownContainer", "body", 1, "btn-group", "me-5"], ["dropdown", "si-dropdown"], ["siDropdownToggle", "", "type", "button", 1, "btn", "btn-circle", "electron-title-bar-btn", "btn-inline", "btn-xs", "element-options-vertical", "me-6"], ["class", "dropdown-menu m-5", "siDropdownMenu", "", 3, "items", 4, "ngIf"], ["siDropdownMenu", "", 1, "dropdown-menu", "m-5", 3, "items"]],
  template: function SiElectrontitlebarComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "span", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "button", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiElectrontitlebarComponent_Template_button_click_4_listener() {
        return ctx.back.emit();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "button", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiElectrontitlebarComponent_Template_button_click_5_listener() {
        return ctx.forward.emit();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiElectrontitlebarComponent_div_6_Template, 4, 4, "div", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](7, "div", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("unfocused", !ctx.hasFocus);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.appTitle);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("unfocused", !ctx.hasFocus);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", !ctx.canGoBack);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", ctx.ariaLabelBack);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("unfocused", !ctx.hasFocus);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", !ctx.canGoForward);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", ctx.ariaLabelForward);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.menuItems.length > 0);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiDropdownDirective, SiDropdownMenuDirective, SiDropdownToggleDirective, SiMenuComponent],
  styles: [".electron-title-bar-container[_ngcontent-%COMP%]{block-size:36px}.electron-title-bar[_ngcontent-%COMP%]{position:absolute;inset-inline-start:env(titlebar-area-x,0);inline-size:env(titlebar-area-width,100%)}.electron-title-bar-app-name[_ngcontent-%COMP%]{color:var(--element-text-secondary);-webkit-app-region:drag;-webkit-user-select:none;user-select:none}.electron-title-bar-draggable[_ngcontent-%COMP%]{flex-basis:content;-webkit-app-region:drag}.unfocused[_ngcontent-%COMP%]{color:var(--element-ui-3)}"]
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiElectrontitlebarComponent.prototype, "appTitle", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiElectrontitlebarComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-electron-titlebar',
      template: "<!-- eslint-disable @angular-eslint/template/accessibility-elements-content -->\n<div class=\"electron-title-bar-container w-100 bg-base-1 border-bottom fixed-top\">\n  <div class=\"electron-title-bar align-items-center d-flex h-100\">\n    <span [class.unfocused]=\"!hasFocus\" class=\"ms-6 me-9 si-body-2 electron-title-bar-app-name text-truncate\">{{ appTitle }}</span>\n    <button type=\"button\" [class.unfocused]=\"!hasFocus\"\n      class=\"btn btn-circle btn-xs btn-inline element-left-4 flip-rtl me-6\" [attr.aria-label]=\"ariaLabelBack\"\n      (click)=\"back.emit()\" [disabled]=\"!canGoBack\"></button>\n    <button type=\"button\" [class.unfocused]=\"!hasFocus\"\n      class=\"btn btn-circle btn-xs btn-inline element-right-4 flip-rtl me-6\" [attr.aria-label]=\"ariaLabelForward\"\n      (click)=\"forward.emit()\" [disabled]=\"!canGoForward\"></button>\n    <div *ngIf=\"menuItems.length > 0\" siDropdown #dropdown=\"si-dropdown\" class=\"btn-group me-5\" dropdownDirection=\"down\" dropdownContainer=\"body\">\n      <button siDropdownToggle type=\"button\" [class.unfocused]=\"!hasFocus\" class=\"btn btn-circle electron-title-bar-btn btn-inline btn-xs element-options-vertical me-6\" [attr.aria-label]=\"ariaLabelMenu\"></button>\n      <si-menu *ngIf=\"dropdown.isOpen\"\n        class=\"dropdown-menu m-5\"\n        siDropdownMenu\n        [items]=\"menuItems\"\n      >\n      </si-menu>\n    </div>\n    <div class=\"electron-title-bar-draggable flex-grow-1 w-100 h-100\"></div>\n  </div>\n</div>\n",
      styles: [".electron-title-bar-container{block-size:36px}.electron-title-bar{position:absolute;inset-inline-start:env(titlebar-area-x,0);inline-size:env(titlebar-area-width,100%)}.electron-title-bar-app-name{color:var(--element-text-secondary);-webkit-app-region:drag;-webkit-user-select:none;user-select:none}.electron-title-bar-draggable{flex-basis:content;-webkit-app-region:drag}.unfocused{color:var(--element-ui-3)}\n"]
    }]
  }], null, {
    appTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    canGoBack: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    canGoForward: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    hasFocus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    menuItems: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    forward: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    back: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    ariaLabelForward: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    ariaLabelBack: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    ariaLabelMenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiElectrontitlebarModule {}
SiElectrontitlebarModule.ɵfac = function SiElectrontitlebarModule_Factory(t) {
  return new (t || SiElectrontitlebarModule)();
};
SiElectrontitlebarModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiElectrontitlebarModule
});
SiElectrontitlebarModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiDropdownModule, SiMenuModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiElectrontitlebarModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [SiElectrontitlebarComponent],
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiDropdownModule, SiMenuModule],
      exports: [SiElectrontitlebarComponent]
    }]
  }], null, null);
})();

// -------------------------------------------------------------------------------

class SiPaginationComponent {
  constructor() {
    /**
     * The current active page, counting starts from 1
     */
    this.currentPage = 1;
    /**
     * The text of the back button for pagination. Required for a11y.
     */
    this.backButtonText = 'back';
    /**
     * The text of the forward button for pagination. Required for a11y.
     */
    this.forwardButtonText = 'forward';
    /**
     * When multiple paginations are used on the same page each pagination needs a distinct aria label.
     * Required for a11y.
     */
    this.navAriaLabel = 'Pagination';
    /**
     * Fired when the user changes the page
     */
    this.currentPageChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.pageButtons = [];
    this.prevDisabled = false;
    this.nextDisabled = false;
    this.trackByIndex = index => index;
  }
  ngOnChanges() {
    this.createPages();
  }
  createPages() {
    this.pageButtons = [];
    const totalPages = this.totalPages ?? Math.ceil((this.totalRowCount ?? 0) / (this.pageSize ?? 1));
    if (totalPages <= SiPaginationComponent.maxItems) {
      for (let i = 0; i < totalPages; i++) {
        this.pageButtons.push({
          page: i + 1,
          sep: false
        });
      }
    } else if (this.currentPage < SiPaginationComponent.maxItems - 2) {
      // separator only on the right (in LTR)
      for (let i = 0; i < SiPaginationComponent.maxItems - 2; i++) {
        this.pageButtons.push({
          page: i + 1,
          sep: false
        });
      }
      this.pageButtons.push({
        page: 0,
        sep: true
      });
      this.pageButtons.push({
        page: totalPages,
        sep: false
      });
    } else if (this.currentPage >= totalPages - 3) {
      // separator only on the left (in LTR)
      this.pageButtons.push({
        page: 1,
        sep: false
      });
      this.pageButtons.push({
        page: 0,
        sep: true
      });
      for (let i = totalPages - SiPaginationComponent.maxItems + 2; i < totalPages; i++) {
        this.pageButtons.push({
          page: i + 1,
          sep: false
        });
      }
    } else {
      // separator on both sides
      this.pageButtons.push({
        page: 1,
        sep: false
      });
      this.pageButtons.push({
        page: 0,
        sep: true
      });
      for (let i = -1; i <= 1; i++) {
        this.pageButtons.push({
          page: this.currentPage + i,
          sep: false
        });
      }
      this.pageButtons.push({
        page: 0,
        sep: true
      });
      this.pageButtons.push({
        page: totalPages,
        sep: false
      });
    }
    this.prevDisabled = this.currentPage === 1;
    this.nextDisabled = this.currentPage === totalPages;
  }
  direction(event, delta) {
    this.setPage(event, this.currentPage + delta);
  }
  setPage(event, page) {
    event.currentTarget.blur();
    this.currentPage = page;
    this.createPages();
    this.currentPageChange.emit(page);
  }
}
SiPaginationComponent.maxItems = 7;
SiPaginationComponent.ɵfac = function SiPaginationComponent_Factory(t) {
  return new (t || SiPaginationComponent)();
};
SiPaginationComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiPaginationComponent,
  selectors: [["si-pagination"]],
  inputs: {
    totalPages: "totalPages",
    currentPage: "currentPage",
    pageSize: "pageSize",
    totalRowCount: "totalRowCount",
    backButtonText: "backButtonText",
    forwardButtonText: "forwardButtonText",
    navAriaLabel: "navAriaLabel"
  },
  outputs: {
    currentPageChange: "currentPageChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 12,
  vars: 13,
  consts: [["role", "navigation"], [1, "pagination"], [1, "me-5"], ["type", "button", 1, "btn", "nav-button", "border-0", "mx-4", 3, "disabled", "click"], [1, "element-left-3", "flip-rtl"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "ms-5"], [1, "element-right-3", "flip-rtl"], ["type", "button", "class", "btn page-button border-0 mx-1 si-title-2 px-2", 3, "disabled", "click", 4, "ngIf"], ["class", "separator mx-2", 4, "ngIf"], ["type", "button", 1, "btn", "page-button", "border-0", "mx-1", "si-title-2", "px-2", 3, "disabled", "click"], [1, "separator", "mx-2"]],
  template: function SiPaginationComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "nav", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "ul", 1)(3, "li", 2)(4, "button", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiPaginationComponent_Template_button_click_4_listener($event) {
        return ctx.direction($event, -1);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](6, "i", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiPaginationComponent_li_7_Template, 3, 2, "li", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "li", 6)(9, "button", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiPaginationComponent_Template_button_click_9_listener($event) {
        return ctx.direction($event, 1);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](10, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "i", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 7, ctx.navAriaLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx.prevDisabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 9, ctx.backButtonText));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.pageButtons)("ngForTrackBy", ctx.trackByIndex);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx.nextDisabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](10, 11, ctx.forwardButtonText));
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiTranslatePipe],
  styles: [".pagination[_ngcontent-%COMP%]{display:flex;align-items:center;block-size:40px}.page-button[_ngcontent-%COMP%], .nav-button[_ngcontent-%COMP%], .separator[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;border-radius:12px;min-inline-size:24px!important;block-size:24px;padding-block:0;padding-inline:2px;background:transparent;font-size:.875rem}.nav-button[_ngcontent-%COMP%]{font-size:1.5rem;color:var(--element-text-primary);inline-size:24px}.nav-button[_ngcontent-%COMP%]:hover{background:var(--element-base-1-selected)}.nav-button[_ngcontent-%COMP%]:disabled{opacity:var(--element-action-disabled-opacity)}.page-button[_ngcontent-%COMP%]:hover{background:var(--element-base-1-selected)}.page-button[_ngcontent-%COMP%]:disabled{background:var(--element-base-1-selected);opacity:1}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiPaginationComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-pagination',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<nav role=\"navigation\" [attr.aria-label]=\"navAriaLabel | translate\">\n  <ul class=\"pagination\">\n    <li class=\"me-5\">\n      <button type=\"button\"\n        class=\"btn nav-button border-0 mx-4\"\n        [disabled]=\"prevDisabled\"\n        (click)=\"direction($event, -1)\"\n        [attr.aria-label]=\"backButtonText | translate\"\n      >\n        <i class=\"element-left-3 flip-rtl\"></i>\n      </button>\n    </li>\n    <li *ngFor=\"let page of pageButtons; trackBy: trackByIndex\">\n      <button *ngIf=\"!page.sep\"\n        type=\"button\"\n        class=\"btn page-button border-0 mx-1 si-title-2 px-2\"\n        [attr.aria-current]=\"page.page === currentPage ? 'page' : ''\"\n        [disabled]=\"page.page === currentPage\"\n        (click)=\"setPage($event, page.page)\"\n      >\n        {{ page.page }}\n      </button>\n      <span *ngIf=\"page.sep\" class=\"separator mx-2\">&hellip;</span>\n    </li>\n    <li class=\"ms-5\">\n      <button type=\"button\"\n        class=\"btn nav-button border-0 mx-4\"\n        [disabled]=\"nextDisabled\"\n        (click)=\"direction($event, 1)\"\n        [attr.aria-label]=\"forwardButtonText | translate\"\n      >\n        <i class=\"element-right-3 flip-rtl\"></i>\n      </button>\n    </li>\n  </ul>\n</nav>\n",
      styles: [".pagination{display:flex;align-items:center;block-size:40px}.page-button,.nav-button,.separator{display:flex;align-items:center;justify-content:center;border-radius:12px;min-inline-size:24px!important;block-size:24px;padding-block:0;padding-inline:2px;background:transparent;font-size:.875rem}.nav-button{font-size:1.5rem;color:var(--element-text-primary);inline-size:24px}.nav-button:hover{background:var(--element-base-1-selected)}.nav-button:disabled{opacity:var(--element-action-disabled-opacity)}.page-button:hover{background:var(--element-base-1-selected)}.page-button:disabled{background:var(--element-base-1-selected);opacity:1}\n"]
    }]
  }], null, {
    totalPages: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    currentPage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    pageSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    totalRowCount: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    backButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    forwardButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    navAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    currentPageChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiPaginationModule {}
SiPaginationModule.ɵfac = function SiPaginationModule_Factory(t) {
  return new (t || SiPaginationModule)();
};
SiPaginationModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiPaginationModule
});
SiPaginationModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiPaginationModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule],
      declarations: [SiPaginationComponent],
      exports: [SiPaginationComponent]
    }]
  }], null, null);
})();
class SiProgressbarComponent {
  constructor() {
    /**
     * Needed for a11y
     */
    this.ariaLabel = 'progress';
    /**
     * Max value for progressbar
     */
    this.max = 100;
    /**
     * Current value
     */
    this.value = 0;
    /**
     * Height for progress bar.
     */
    this.height = 'normal';
    this.percent = 0;
  }
  ngOnChanges(changes) {
    if (changes.value || changes.max) {
      this.percent = 100 * Number(this.value ?? 0) / Number(this.max ?? 100);
    }
  }
}
SiProgressbarComponent.ɵfac = function SiProgressbarComponent_Factory(t) {
  return new (t || SiProgressbarComponent)();
};
SiProgressbarComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiProgressbarComponent,
  selectors: [["si-progressbar"]],
  inputs: {
    ariaLabel: "ariaLabel",
    max: "max",
    value: "value",
    heading: "heading",
    progress: "progress",
    height: "height"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 4,
  vars: 12,
  consts: [["class", "d-flex align-items-baseline", 3, "justify-content-end", "justify-content-between", 4, "ngIf"], [1, "progress"], ["role", "progressbar", 1, "progress-bar"], [1, "d-flex", "align-items-baseline"], ["class", "si-title-2 mb-2", 4, "ngIf"], ["class", "text-nowrap", 4, "ngIf"], [1, "si-title-2", "mb-2"], [1, "text-nowrap"]],
  template: function SiProgressbarComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiProgressbarComponent_div_0_Template, 3, 6, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.heading || ctx.progress);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("si-progress-small", ctx.height === "small");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("width", ctx.percent, "%");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-valuemin", 0)("aria-valuemax", ctx.max)("aria-valuenow", ctx.value)("aria-valuetext", ctx.value !== undefined ? ctx.percent.toFixed(0) + "%" : null)("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 10, ctx.ariaLabel));
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiTranslatePipe],
  styles: [".si-progress-small[_ngcontent-%COMP%]{block-size:.125rem;border-radius:.0625rem}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiProgressbarComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-progressbar',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div\n  [class.justify-content-end]=\"!heading\"\n  [class.justify-content-between]=\"heading\"\n  class=\"d-flex align-items-baseline\"\n  *ngIf=\"heading || progress\"\n>\n  <span class=\"si-title-2 mb-2\" *ngIf=\"heading\">{{ heading | translate }}</span>\n  <small *ngIf=\"progress\" class=\"text-nowrap\">{{ progress }}</small>\n</div>\n<div [class.si-progress-small]=\"height === 'small'\" class=\"progress\">\n  <div\n    class=\"progress-bar\"\n    role=\"progressbar\"\n    [attr.aria-valuemin]=\"0\"\n    [attr.aria-valuemax]=\"max\"\n    [attr.aria-valuenow]=\"value\"\n    [attr.aria-valuetext]=\"value !== undefined ? percent.toFixed(0) + '%' : null\"\n    [attr.aria-label]=\"ariaLabel | translate\"\n    [style.width.%]=\"percent\"\n  >\n  </div>\n</div>\n",
      styles: [".si-progress-small{block-size:.125rem;border-radius:.0625rem}\n"]
    }]
  }], null, {
    ariaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    max: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    progress: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    height: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class TooltipComponent {
  constructor(zone) {
    this.zone = zone;
    this.tooltipText = '';
    this.tooltipPositionClass = '';
  }
  updateTooltipPosition(change) {
    const arrowClassTooltip = `tooltip-${change.connectionPair.overlayX}-${change.connectionPair.overlayY}`;
    const offsetX = change.connectionPair.offsetX;
    if (offsetX) {
      if (offsetX < 0) {
        // Need to subtract half of the width of arrow to get the center
        this.left = -1 * (offsetX + 6);
      } else {
        // Need to subtract half of the width of arrow to get the center
        this.right = offsetX - 6;
      }
    }
    if (arrowClassTooltip !== this.tooltipPositionClass) {
      this.zone.run(() => this.tooltipPositionClass = arrowClassTooltip);
    }
  }
}
TooltipComponent.ɵfac = function TooltipComponent_Factory(t) {
  return new (t || TooltipComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
};
TooltipComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: TooltipComponent,
  selectors: [["si-tooltip"]],
  inputs: {
    tooltipText: "tooltipText",
    anchor: "anchor",
    positions: "positions"
  },
  decls: 4,
  vars: 6,
  consts: [[1, "tooltip", "show", "position-relative", 3, "ngClass"], [1, "tooltip-arrow", "flip-rtl"], [1, "tooltip-inner", "si-body-2"]],
  template: function TooltipComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx.tooltipPositionClass);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("left", ctx.left, "px")("right", ctx.right, "px");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.tooltipText);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass],
  encapsulation: 2
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TooltipComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-tooltip',
      template: "<div class=\"tooltip show position-relative\" [ngClass]=\"tooltipPositionClass\">\n  <div class=\"tooltip-arrow flip-rtl\" [style.left.px]=\"left\" [style.right.px]=\"right\"></div>\n  <div class=\"tooltip-inner si-body-2\">{{ tooltipText }}</div>\n</div>\n"
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }];
  }, {
    tooltipText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    anchor: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    positions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiTooltipDirective {
  /**
   * The placement of the tooltip. One of 'top', 'start', end', 'bottom'
   */
  set placement(value) {
    const deprecatedMessage = '@simpl/element-ng - SiTooltipDirective: \
Setting placement to "left" or "right" is deprecated, use "start" or "end" instead';
    if (value === 'left') {
      console.warn(deprecatedMessage);
      this._placement = 'start';
    } else if (value === 'right') {
      console.warn(deprecatedMessage);
      this._placement = 'end';
    } else {
      this._placement = value;
    }
  }
  get placement() {
    return this._placement;
  }
  constructor(overlay, elementRef) {
    this.overlay = overlay;
    this.elementRef = elementRef;
    /**
     * The tooltip text to be displayed
     */
    this.siTooltip = '';
  }
  ngOnInit() {
    if (!this.placement || !positions[this.placement]) {
      this.placement = 'auto';
    }
  }
  ngOnDestroy() {
    this.overlayref?.dispose();
  }
  showTooltip() {
    if (!this.overlayref?.hasAttached()) {
      this.overlayref = getOverlay(this.elementRef, this.overlay, false, this.placement);
    }
    if (this.overlayref.hasAttached()) {
      return;
    }
    const toolTipPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.ComponentPortal(TooltipComponent);
    const tooltipRef = this.overlayref.attach(toolTipPortal);
    tooltipRef.instance.tooltipText = this.siTooltip;
    tooltipRef.instance.anchor = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.CdkOverlayOrigin(this.elementRef);
    tooltipRef.instance.positions = positions[this.placement];
    const positionStrategy = getPositionStrategy(this.overlayref);
    positionStrategy?.positionChanges.subscribe(change => tooltipRef.instance.updateTooltipPosition(change));
    tooltipRef.changeDetectorRef.detectChanges();
  }
  focusIn() {
    this.showTooltip();
  }
  show() {
    if (this.triggers === 'focus') {
      return;
    }
    this.showTooltip();
  }
  hide() {
    this.overlayref?.detach();
  }
  mouseOut() {
    if (this.triggers === 'focus') {
      return;
    }
    this.hide();
  }
}
SiTooltipDirective.ɵfac = function SiTooltipDirective_Factory(t) {
  return new (t || SiTooltipDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.Overlay), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
};
SiTooltipDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiTooltipDirective,
  selectors: [["", "siTooltip", ""]],
  hostBindings: function SiTooltipDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("focus", function SiTooltipDirective_focus_HostBindingHandler() {
        return ctx.focusIn();
      })("mouseenter", function SiTooltipDirective_mouseenter_HostBindingHandler() {
        return ctx.show();
      })("touchstart", function SiTooltipDirective_touchstart_HostBindingHandler() {
        return ctx.hide();
      })("focusout", function SiTooltipDirective_focusout_HostBindingHandler() {
        return ctx.hide();
      })("mouseleave", function SiTooltipDirective_mouseleave_HostBindingHandler() {
        return ctx.mouseOut();
      });
    }
  },
  inputs: {
    siTooltip: "siTooltip",
    placement: "placement",
    triggers: "triggers"
  }
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTooltipDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siTooltip]'
    }]
  }], function () {
    return [{
      type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.Overlay
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }];
  }, {
    siTooltip: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    placement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    triggers: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    focusIn: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focus']
    }],
    show: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['mouseenter']
    }],
    hide: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['touchstart']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focusout']
    }],
    mouseOut: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['mouseleave']
    }]
  });
})();
class SiTooltipModule {}
SiTooltipModule.ɵfac = function SiTooltipModule_Factory(t) {
  return new (t || SiTooltipModule)();
};
SiTooltipModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiTooltipModule
});
SiTooltipModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.OverlayModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTooltipModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.OverlayModule],
      declarations: [SiTooltipDirective, TooltipComponent],
      exports: [SiTooltipDirective, TooltipComponent]
    }]
  }], null, null);
})();

/**
 * @deprecated use the Angular built-in feature instead:`<a routerLinkActive ariaCurrentWhenActive="page">`
 *
 * @see https://github.com/angular/angular/pull/45167
 */
class SiAriaCurrentDirective {
  constructor(routerLink) {
    this.routerLink = routerLink;
  }
  get isActive() {
    return this.routerLink.isActive;
  }
  get ariaCurrent() {
    return this.isActive ? this.siAriaCurrent ? this.siAriaCurrent : 'true' : 'false';
  }
}
SiAriaCurrentDirective.ɵfac = function SiAriaCurrentDirective_Factory(t) {
  return new (t || SiAriaCurrentDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterLinkActive, 1));
};
SiAriaCurrentDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiAriaCurrentDirective,
  selectors: [["", "siAriaCurrent", ""]],
  hostVars: 1,
  hostBindings: function SiAriaCurrentDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-current", ctx.ariaCurrent);
    }
  },
  inputs: {
    siAriaCurrent: "siAriaCurrent"
  }
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAriaCurrentDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siAriaCurrent]'
    }]
  }], function () {
    return [{
      type: _angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterLinkActive,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Host
      }]
    }];
  }, {
    siAriaCurrent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    ariaCurrent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['attr.aria-current']
    }]
  });
})();

/**
 * @deprecated use the Angular built-in feature instead:`<a routerLinkActive ariaCurrentWhenActive="page">`
 *
 * @see https://github.com/angular/angular/pull/45167
 */
class SiAriaCurrentModule {}
SiAriaCurrentModule.ɵfac = function SiAriaCurrentModule_Factory(t) {
  return new (t || SiAriaCurrentModule)();
};
SiAriaCurrentModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiAriaCurrentModule
});
SiAriaCurrentModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAriaCurrentModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule],
      declarations: [SiAriaCurrentDirective],
      exports: [SiAriaCurrentDirective]
    }]
  }], null, null);
})();
class PopoverComponent {
  constructor(zone) {
    this.zone = zone;
    this.popoverTitle = '';
    this.containerClass = '';
    this.popoverPositionClass = '';
    this.isTemplate = false;
  }
  ngOnInit() {
    if (this.popover instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef) {
      this.isTemplate = true;
      this.popoverTemplate = this.popover;
    }
  }
  updateArrow(change) {
    let popoverClassTooltip = `popover-${change.connectionPair.overlayX}-${change.connectionPair.overlayY}`;
    if (this.containerClass) {
      popoverClassTooltip += ' ' + this.containerClass;
    }
    const offsetX = change.connectionPair.offsetX;
    if (offsetX) {
      if (offsetX < 0) {
        // Need to subtract half of the width of arrow to get the center
        this.left = -1 * (offsetX + 6);
      } else {
        // Need to subtract half of the width of arrow to get the center
        this.right = offsetX - 6;
      }
    }
    if (popoverClassTooltip !== this.popoverPositionClass) {
      this.zone.run(() => this.popoverPositionClass = popoverClassTooltip);
    }
  }
}
PopoverComponent.ɵfac = function PopoverComponent_Factory(t) {
  return new (t || PopoverComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
};
PopoverComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: PopoverComponent,
  selectors: [["si-popover"]],
  inputs: {
    popover: "popover",
    popoverTitle: "popoverTitle",
    anchor: "anchor",
    positions: "positions",
    containerClass: "containerClass",
    icon: "icon"
  },
  decls: 7,
  vars: 8,
  consts: [[1, "popover", "position-relative", 3, "ngClass"], [1, "popover-arrow", "flip-rtl"], ["class", "popover-header", 4, "ngIf"], [1, "popover-body"], ["class", "si-body-2", 3, "innerHTML", 4, "ngIf", "ngIfElse"], ["templateRef", ""], [1, "popover-header"], ["class", "icon me-2", 3, "ngClass", 4, "ngIf"], [1, "si-title-2"], [1, "icon", "me-2", 3, "ngClass"], [1, "si-body-2", 3, "innerHTML"], [4, "ngTemplateOutlet"]],
  template: function PopoverComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, PopoverComponent_div_2_Template, 4, 2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, PopoverComponent_div_4_Template, 1, 1, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, PopoverComponent_ng_template_5_Template, 1, 1, "ng-template", null, 5, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx.popoverPositionClass);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("left", ctx.left, "px")("right", ctx.right, "px");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.popoverTitle);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.isTemplate)("ngIfElse", _r2);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet],
  encapsulation: 2
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PopoverComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-popover',
      template: "<div class=\"popover position-relative\" [ngClass]=\"popoverPositionClass\">\n  <div class=\"popover-arrow flip-rtl\" [style.left.px]=\"left\" [style.right.px]=\"right\"></div>\n  <div *ngIf=\"popoverTitle\" class=\"popover-header\">\n    <span *ngIf=\"icon\" class=\"icon me-2\" [ngClass]=\"icon\"></span>\n    <span class=\"si-title-2\">{{ popoverTitle }}</span>\n  </div>\n  <div class=\"popover-body\">\n    <div *ngIf=\"!isTemplate; else templateRef\" class=\"si-body-2\" [innerHTML]=\"popover\"></div>\n    <ng-template #templateRef>\n      <ng-template *ngTemplateOutlet=\"popoverTemplate\"></ng-template>\n    </ng-template>\n  </div>\n</div>\n"
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }];
  }, {
    popover: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    popoverTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    anchor: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    positions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    containerClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    icon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiPopoverDirective {
  /**
   * The placement of the popover. One of 'top', 'start', end', 'bottom'
   */
  set placement(value) {
    const deprecatedMessage = '@simpl/element-ng - SiPopoverDirective: \
Setting placement to "left" or "right" is deprecated, use "start" or "end" instead';
    if (value === 'left') {
      console.warn(deprecatedMessage);
      this._placement = 'start';
    } else if (value === 'right') {
      console.warn(deprecatedMessage);
      this._placement = 'end';
    } else {
      this._placement = value;
    }
  }
  get placement() {
    return this._placement;
  }
  constructor(overlay, elementRef) {
    this.overlay = overlay;
    this.elementRef = elementRef;
    /**
     * The trigger event on which the popover shall be displayed
     */
    this.triggers = 'click';
    /**
     * The title to be displayed on top for the popover
     */
    this.popoverTitle = '';
    /**
     * The class that will be applied to container of the popover
     */
    this.containerClass = '';
    /**
     * The flag determines whether to close popover on clicking outside
     */
    this.outsideClick = true;
    /**
     * Specify whether or not the popover is currently shown
     */
    this.isOpen = false;
    /**
     * Emits an event when the popover is shown
     */
    this.shown = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Emits an event when the popover is hidden
     */
    this.hidden = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  ngOnInit() {
    if (this.placement !== 'top' && this.placement !== 'bottom' && this.placement !== 'start' && this.placement !== 'end') {
      this.placement = 'auto';
    }
    if (this.isOpen) {
      this.show();
    }
  }
  ngOnDestroy() {
    this.overlayref?.dispose();
  }
  show() {
    if (!this.overlayref?.hasAttached()) {
      const backdrop = this.outsideClick && !hasTrigger('focus', this.triggers) && !hasTrigger('hover', this.triggers);
      this.overlayref = getOverlay(this.elementRef, this.overlay, backdrop, this.placement);
      if (backdrop) {
        this.overlayref.backdropClick().subscribe(() => this.hide());
      }
    }
    if (this.overlayref.hasAttached()) {
      return;
    }
    const popoverPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.ComponentPortal(PopoverComponent);
    const popoverRef = this.overlayref.attach(popoverPortal);
    popoverRef.instance.popover = this.siPopover;
    popoverRef.instance.popoverTitle = this.popoverTitle;
    popoverRef.instance.anchor = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.CdkOverlayOrigin(this.elementRef);
    popoverRef.instance.positions = positions[this.placement];
    popoverRef.instance.icon = this.icon;
    popoverRef.instance.containerClass = this.containerClass;
    const positionStrategy = getPositionStrategy(this.overlayref);
    positionStrategy?.positionChanges.subscribe(change => popoverRef.instance.updateArrow(change));
    popoverRef.changeDetectorRef.detectChanges();
    this.shown.emit();
  }
  hide() {
    this.overlayref?.detach();
    this.hidden.emit();
  }
  updatePosition() {
    this.overlayref?.updatePosition();
  }
  onTrigger(trigger) {
    if (hasTrigger(trigger, this.triggers)) {
      if (this.overlayref?.hasAttached()) {
        this.hide();
      } else {
        this.show();
      }
    }
  }
  focusOut() {
    if (hasTrigger('focus', this.triggers)) {
      if (this.outsideClick) {
        this.hide();
      }
    }
  }
}
SiPopoverDirective.ɵfac = function SiPopoverDirective_Factory(t) {
  return new (t || SiPopoverDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.Overlay), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
};
SiPopoverDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiPopoverDirective,
  selectors: [["", "siPopover", ""]],
  hostBindings: function SiPopoverDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mouseenter", function SiPopoverDirective_mouseenter_HostBindingHandler() {
        return ctx.onTrigger("hover");
      })("mouseleave", function SiPopoverDirective_mouseleave_HostBindingHandler() {
        return ctx.onTrigger("hover");
      })("focus", function SiPopoverDirective_focus_HostBindingHandler() {
        return ctx.onTrigger("focus");
      })("click", function SiPopoverDirective_click_HostBindingHandler() {
        return ctx.onTrigger("click");
      })("touchstart", function SiPopoverDirective_touchstart_HostBindingHandler() {
        return ctx.focusOut();
      })("focusout", function SiPopoverDirective_focusout_HostBindingHandler() {
        return ctx.focusOut();
      });
    }
  },
  inputs: {
    siPopover: "siPopover",
    placement: "placement",
    triggers: "triggers",
    popoverTitle: "popoverTitle",
    containerClass: "containerClass",
    outsideClick: "outsideClick",
    icon: "icon",
    isOpen: "isOpen"
  },
  outputs: {
    shown: "shown",
    hidden: "hidden"
  },
  exportAs: ["si-popover"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiPopoverDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siPopover]',
      exportAs: 'si-popover'
    }]
  }], function () {
    return [{
      type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.Overlay
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }];
  }, {
    siPopover: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    placement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    triggers: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    popoverTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    containerClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    outsideClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    icon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    isOpen: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    shown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    hidden: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    onTrigger: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['mouseenter', ['"hover"']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['mouseleave', ['"hover"']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focus', ['"focus"']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['click', ['"click"']]
    }],
    focusOut: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['touchstart']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focusout']
    }]
  });
})();
class SiPopoverModule {}
SiPopoverModule.ɵfac = function SiPopoverModule_Factory(t) {
  return new (t || SiPopoverModule)();
};
SiPopoverModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiPopoverModule
});
SiPopoverModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.OverlayModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiPopoverModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.OverlayModule],
      declarations: [PopoverComponent, SiPopoverDirective],
      exports: [PopoverComponent, SiPopoverDirective]
    }]
  }], null, null);
})();
class SiProgressbarModule {}
SiProgressbarModule.ɵfac = function SiProgressbarModule_Factory(t) {
  return new (t || SiProgressbarModule)();
};
SiProgressbarModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiProgressbarModule
});
SiProgressbarModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiProgressbarModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule],
      declarations: [SiProgressbarComponent],
      exports: [SiProgressbarComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

class SiPromptDialogButtonsComponent {
  constructor() {
    /**
     * Input for disabling cancel button.
     */
    this.cancelDisabled = false;
    /**
     * Input for disabling confirm button.
     */
    this.confirmDisabled = false;
    /**
     * Input for disabling save button.
     */
    this.saveDisabled = false;
    /**
     * Text for aria-label of cancel button. Needed for a11y.
     */
    this.cancelLabel = 'cancel';
    /**
     * Text for aria-label of confirm button. Needed for a11y.
     */
    this.confirmLabel = 'confirm';
    /**
     * Text for aria-label of save button. Needed for a11y.
     */
    this.saveLabel = 'save';
    /**
     * Output callback event notifying you when the cancel button is pushed.
     */
    this.cancel = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Output callback event that is trigger on confirm.
     */
    this.confirm = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Output callback event this triggers when the save button was pressed.
     */
    this.save = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.showSave = false;
  }
  ngOnInit() {
    this.showSave = this.save.observers.length > 0;
  }
  clickCancel() {
    this.cancel.emit();
  }
  clickConfirm() {
    this.confirm.emit();
  }
  clickSave() {
    this.save.emit();
  }
}
SiPromptDialogButtonsComponent.ɵfac = function SiPromptDialogButtonsComponent_Factory(t) {
  return new (t || SiPromptDialogButtonsComponent)();
};
SiPromptDialogButtonsComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiPromptDialogButtonsComponent,
  selectors: [["si-prompt-dialog-buttons"]],
  inputs: {
    cancelDisabled: "cancelDisabled",
    confirmDisabled: "confirmDisabled",
    saveDisabled: "saveDisabled",
    cancelLabel: "cancelLabel",
    confirmLabel: "confirmLabel",
    saveLabel: "saveLabel"
  },
  outputs: {
    cancel: "cancel",
    confirm: "confirm",
    save: "save"
  },
  decls: 7,
  vars: 9,
  consts: [[1, "prompt-dialog"], ["type", "button", "class", "element-save btn btn-circle btn-sm btn-secondary", 3, "disabled", "click", 4, "ngIf"], ["type", "button", 1, "element-cancel", "btn", "btn-circle", "btn-sm", "btn-secondary", 3, "disabled", "click"], ["type", "button", 1, "element-ok", "btn", "btn-circle", "btn-sm", "btn-primary", "ms-4", 3, "disabled", "click"], ["type", "button", 1, "element-save", "btn", "btn-circle", "btn-sm", "btn-secondary", 3, "disabled", "click"]],
  template: function SiPromptDialogButtonsComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiPromptDialogButtonsComponent_button_1_Template, 2, 4, "button", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div")(3, "button", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiPromptDialogButtonsComponent_Template_button_click_3_listener() {
        return ctx.clickCancel();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "button", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiPromptDialogButtonsComponent_Template_button_click_5_listener() {
        return ctx.clickConfirm();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.showSave);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx.cancelDisabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 5, ctx.cancelLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx.confirmDisabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 7, ctx.confirmLabel));
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiTranslatePipe],
  styles: [".prompt-dialog[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:space-between}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiPromptDialogButtonsComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-prompt-dialog-buttons',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div class=\"prompt-dialog\">\n  <button type=\"button\"\n    *ngIf=\"showSave\"\n    class=\"element-save btn btn-circle btn-sm btn-secondary\"\n    [disabled]=\"saveDisabled\"\n    (click)=\"clickSave()\"\n    [attr.aria-label]=\"saveLabel | translate\"\n  ></button>\n\n  <div>\n    <button type=\"button\"\n      class=\"element-cancel btn btn-circle btn-sm btn-secondary\"\n      [disabled]=\"cancelDisabled\"\n      (click)=\"clickCancel()\"\n      [attr.aria-label]=\"cancelLabel | translate\"\n    ></button>\n    <button type=\"button\"\n      class=\"element-ok btn btn-circle btn-sm btn-primary ms-4\"\n      [disabled]=\"confirmDisabled\"\n      (click)=\"clickConfirm()\"\n      [attr.aria-label]=\"confirmLabel | translate\"\n    ></button>\n  </div>\n</div>\n",
      styles: [".prompt-dialog{display:flex;flex-direction:row;justify-content:space-between}\n"]
    }]
  }], null, {
    cancelDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    confirmDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    saveDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    cancelLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    confirmLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    saveLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    cancel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    confirm: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    save: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiPromptDialogButtonsModule {}
SiPromptDialogButtonsModule.ɵfac = function SiPromptDialogButtonsModule_Factory(t) {
  return new (t || SiPromptDialogButtonsModule)();
};
SiPromptDialogButtonsModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiPromptDialogButtonsModule
});
SiPromptDialogButtonsModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiPromptDialogButtonsModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule],
      declarations: [SiPromptDialogButtonsComponent],
      exports: [SiPromptDialogButtonsComponent]
    }]
  }], null, null);
})();
class SiEmptyStateComponent {}
SiEmptyStateComponent.ɵfac = function SiEmptyStateComponent_Factory(t) {
  return new (t || SiEmptyStateComponent)();
};
SiEmptyStateComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiEmptyStateComponent,
  selectors: [["si-empty-state"]],
  inputs: {
    icon: "icon",
    heading: "heading",
    content: "content"
  },
  ngContentSelectors: _c1,
  decls: 7,
  vars: 5,
  consts: [[1, "list-group-item-empty"], [1, "state-icon", 3, "ngClass"], [1, "my-6"], ["class", "text-pre-wrap text-center mb-6", 4, "ngIf"], [1, "text-pre-wrap", "text-center", "mb-6"]],
  template: function SiEmptyStateComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "span", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "h3", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiEmptyStateComponent_p_5_Template, 3, 3, "p", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx.icon);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 3, ctx.heading));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.content);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiTranslatePipe],
  styles: [".list-group-item-empty[_ngcontent-%COMP%]{block-size:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;padding:16px}.state-icon[_ngcontent-%COMP%]{color:var(--element-ui-2);font-size:80px}"],
  changeDetection: 0
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiEmptyStateComponent.prototype, "icon", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiEmptyStateComponent.prototype, "heading", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiEmptyStateComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-empty-state',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div class=\"list-group-item-empty\">\n  <span class=\"state-icon\" [ngClass]=\"icon\"></span>\n  <h3 class=\"my-6\">{{ heading | translate }}</h3>\n  <p\n    *ngIf=\"content\"\n    class=\"text-pre-wrap text-center mb-6\"\n  >{{ content | translate }}</p>\n  <ng-content></ng-content>\n</div>\n",
      styles: [".list-group-item-empty{block-size:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;padding:16px}.state-icon{color:var(--element-ui-2);font-size:80px}\n"]
    }]
  }], null, {
    icon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    content: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiEmptyStateModule {}
SiEmptyStateModule.ɵfac = function SiEmptyStateModule_Factory(t) {
  return new (t || SiEmptyStateModule)();
};
SiEmptyStateModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiEmptyStateModule
});
SiEmptyStateModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiEmptyStateModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule],
      declarations: [SiEmptyStateComponent],
      exports: [SiEmptyStateComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

class SiFilterPillComponent {
  constructor() {
    /**
     * True if variant is responsive
     */
    this.responsive = false;
    this.disabled = false;
    this.totalPills = 0;
    /**
     * Output callback event which will provide you the name of the deleted filter
     * pill if a filter was deleted.
     */
    this.deleteFilters = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  deleteClicked() {
    this.deleteFilters.emit(this.filter);
  }
}
SiFilterPillComponent.ɵfac = function SiFilterPillComponent_Factory(t) {
  return new (t || SiFilterPillComponent)();
};
SiFilterPillComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiFilterPillComponent,
  selectors: [["si-filter-pill"]],
  inputs: {
    filter: "filter",
    responsive: "responsive",
    disabled: "disabled",
    totalPills: "totalPills"
  },
  outputs: {
    deleteFilters: "deleteFilters"
  },
  decls: 11,
  vars: 13,
  consts: [[1, "filter-pill", 3, "ngClass"], [1, "wrapper"], ["class", "name", 3, "empty-desc", 4, "ngIf"], ["class", "name pe-4", 4, "ngIf"], [1, "value"], [4, "ngIf"], ["remove", ""], [1, "name"], [1, "name", "pe-4"], [4, "ngTemplateOutlet"], ["type", "button", "role", "button", "aria-label", "Remove", 1, "btn-remove", "element-cancel", "btn", "btn-circle", "btn-ghost", "focus-inside", 3, "keydown.enter", "click"]],
  template: function SiFilterPillComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiFilterPillComponent_div_2_Template, 3, 5, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiFilterPillComponent_span_3_Template, 2, 0, "span", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiFilterPillComponent_div_7_Template, 2, 0, "div", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, SiFilterPillComponent_ng_container_8_Template, 2, 1, "ng-container", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](9, SiFilterPillComponent_ng_template_9_Template, 1, 8, "ng-template", null, 6, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx.disabled)("responsive", ctx.responsive);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx.filter.status ? "filter-pill-" + ctx.filter.status : "");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-disabled", ctx.disabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.filter.title);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.responsive && ctx.filter.title && ctx.filter.description);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 11, ctx.filter.description || ""));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.filter.title && !ctx.responsive);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.responsive || !ctx.disabled);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{--filter-pill-background-color: var(--element-base-1)}.dark-background[_nghost-%COMP%]{--filter-pill-background-color: var(--element-base-0)}.filter-pill[_ngcontent-%COMP%]{margin-inline-start:8px;font-weight:500;block-size:32px;border-radius:16px;background:var(--filter-pill-background-color);display:flex;padding-block:0 4px;padding-inline:16px 0;line-height:12px}.filter-pill[_ngcontent-%COMP%]:not(.responsive)   .name[_ngcontent-%COMP%]{padding-block-start:4px}.wrapper[_ngcontent-%COMP%]{display:flex;flex-direction:column}.filter-pill.responsive[_ngcontent-%COMP%]{display:flex;align-items:center;padding-block:0;padding-inline:8px 0;block-size:24px}.filter-pill.responsive[_ngcontent-%COMP%]   .wrapper[_ngcontent-%COMP%]{flex-direction:row}.filter-pill.responsive[_ngcontent-%COMP%]   .name[_ngcontent-%COMP%]{font-weight:700;white-space:nowrap}.filter-pill.responsive[_ngcontent-%COMP%]   .value[_ngcontent-%COMP%]{color:var(--element-text-primary);white-space:nowrap;margin-inline-end:4px}.filter-pill.responsive.disabled[_ngcontent-%COMP%], .filter-pill.responsive.disabled[_ngcontent-%COMP%]   .value[_ngcontent-%COMP%]{padding-inline-end:2px;color:var(--element-text-disabled)}.name[_ngcontent-%COMP%]{margin:0}.name.empty-desc[_ngcontent-%COMP%]{margin:0;position:relative;inset-block-start:50%;transform:translateY(-50%)}.filter-pill[_ngcontent-%COMP%]   .value[_ngcontent-%COMP%], .filter-pill-default[_ngcontent-%COMP%]   .value[_ngcontent-%COMP%]{color:var(--element-text-active)}.filter-pill-success[_ngcontent-%COMP%]   .value[_ngcontent-%COMP%]{color:var(--element-text-success)}.filter-pill-info[_ngcontent-%COMP%]   .value[_ngcontent-%COMP%]{color:var(--element-text-information)}.filter-pill-warning[_ngcontent-%COMP%]   .value[_ngcontent-%COMP%]{color:var(--element-text-warning)}.filter-pill-danger[_ngcontent-%COMP%]   .value[_ngcontent-%COMP%]{color:var(--element-text-danger)}.filter-pill-inactive[_ngcontent-%COMP%]   .value[_ngcontent-%COMP%]{color:var(--element-text-secondary)}"]
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiFilterPillComponent.prototype, "filter", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiFilterPillComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-filter-pill',
      template: "<div\n  class=\"filter-pill\"\n  [class.disabled]=\"disabled\"\n  [class.responsive]=\"responsive\"\n  [ngClass]=\"filter.status ? 'filter-pill-' + filter.status : ''\"\n  [attr.aria-disabled]=\"disabled\"\n>\n  <div class=\"wrapper\">\n    <div\n      *ngIf=\"filter.title\"\n      class=\"name\"\n      [class.empty-desc]=\"!filter.description && !responsive\"\n    >{{ filter.title | translate }}</div>\n    <span\n      class=\"name pe-4\"\n      *ngIf=\"responsive && filter.title && filter.description\"\n    >:</span>\n    <div class=\"value\">{{ filter.description || '' | translate }}</div>\n    <div *ngIf=\"!filter.title && !responsive\">&#160;</div>\n  </div>\n  <ng-container *ngIf=\"!responsive || !disabled\">\n    <ng-container *ngTemplateOutlet=\"remove\"></ng-container>\n  </ng-container>\n</div>\n<ng-template #remove>\n  <button\n    type=\"button\"\n    class=\"btn-remove element-cancel btn btn-circle btn-ghost focus-inside\"\n    [class.ms-0]=\"responsive\"\n    [class.ms-2]=\"!responsive\"\n    [class.btn-xs]=\"responsive\"\n    [class.btn-sm]=\"!responsive\"\n    role=\"button\"\n    aria-label=\"Remove\"\n    (keydown.enter)=\"deleteClicked()\"\n    (click)=\"deleteClicked()\">\n  </button>\n</ng-template>\n",
      styles: [":host{--filter-pill-background-color: var(--element-base-1)}:host.dark-background{--filter-pill-background-color: var(--element-base-0)}.filter-pill{margin-inline-start:8px;font-weight:500;block-size:32px;border-radius:16px;background:var(--filter-pill-background-color);display:flex;padding-block:0 4px;padding-inline:16px 0;line-height:12px}.filter-pill:not(.responsive) .name{padding-block-start:4px}.wrapper{display:flex;flex-direction:column}.filter-pill.responsive{display:flex;align-items:center;padding-block:0;padding-inline:8px 0;block-size:24px}.filter-pill.responsive .wrapper{flex-direction:row}.filter-pill.responsive .name{font-weight:700;white-space:nowrap}.filter-pill.responsive .value{color:var(--element-text-primary);white-space:nowrap;margin-inline-end:4px}.filter-pill.responsive.disabled,.filter-pill.responsive.disabled .value{padding-inline-end:2px;color:var(--element-text-disabled)}.name{margin:0}.name.empty-desc{margin:0;position:relative;inset-block-start:50%;transform:translateY(-50%)}.filter-pill .value,.filter-pill-default .value{color:var(--element-text-active)}.filter-pill-success .value{color:var(--element-text-success)}.filter-pill-info .value{color:var(--element-text-information)}.filter-pill-warning .value{color:var(--element-text-warning)}.filter-pill-danger .value{color:var(--element-text-danger)}.filter-pill-inactive .value{color:var(--element-text-secondary)}\n"]
    }]
  }], null, {
    filter: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    responsive: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    totalPills: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    deleteFilters: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiFilterBarComponent {
  constructor() {
    /**
     * Title of filter bar.
     */
    this.filterTitle = 'Filters';
    /**
     * Custom text if no filters are selected.
     */
    this.filterDefaultText = 'No filters applied.';
    /**
     * Array of filter items to show
     */
    this.filters = [];
    /**
     * Enable to render responsive variant
     */
    this.responsive = false;
    /**
     * Text for reset button
     */
    this.resetText = 'Reset filters';
    /**
     * Set false to hide reset filters button
     */
    this.allowReset = true;
    /**
     * Color to use for component background
     */
    this.colorVariant = 'base-1';
    this._disabled = false;
    /**
     * Output callback to be executed when the filter changes
     */
    this.filtersChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Output callback to be executed when the reset filter is clicked
     */
    this.resetFilters = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.trackByIndex = index => index;
  }
  /**
   * Set to true to disable component
   * @defaultref {@link _disabled}
   */
  set disabled(val) {
    this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__.coerceBooleanProperty)(val);
  }
  get disabled() {
    return this._disabled;
  }
  deleteFilters(deletedPill) {
    this.filters.splice(this.filters.indexOf(deletedPill), 1);
    this.filtersChange.emit(this.filters);
  }
  get isEmpty() {
    return !this.filters.length;
  }
  onResetFilters() {
    this.filters = [];
    this.resetFilters.emit();
  }
  deleteOverflowFilter() {
    this.filters.splice(this.collapsableListDirective.items.toArray().findIndex(item => !item.visible));
    this.filtersChange.emit(this.filters);
  }
}
SiFilterBarComponent.ɵfac = function SiFilterBarComponent_Factory(t) {
  return new (t || SiFilterBarComponent)();
};
SiFilterBarComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiFilterBarComponent,
  selectors: [["si-filter-bar"]],
  viewQuery: function SiFilterBarComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](SiAutoCollapsableListDirective, 7);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.collapsableListDirective = _t.first);
    }
  },
  inputs: {
    filterTitle: "filterTitle",
    filterDefaultText: "filterDefaultText",
    filters: "filters",
    responsive: "responsive",
    resetText: "resetText",
    allowReset: "allowReset",
    colorVariant: "colorVariant",
    disabled: "disabled"
  },
  outputs: {
    filtersChange: "filtersChange",
    resetFilters: "resetFilters"
  },
  decls: 7,
  vars: 21,
  consts: [[3, "siAutoCollapsableList"], ["class", "list-title", 4, "ngIf"], ["class", "list-text", 4, "ngIf"], ["class", "pill-wrapper", "siAutoCollapsableListItem", "", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["siAutoCollapsableListOverflowItem", "", 3, "responsive", "disabled", "filter", "deleteFilters"], ["overflowItem", "siAutoCollapsableListOverflowItem"], ["siAutoCollapsableListAdditionalContent", "", "type", "button", "class", "text-nowrap btn btn-tertiary ms-4", 3, "disabled", "click", 4, "ngIf"], [1, "list-title"], [1, "list-text"], ["siAutoCollapsableListItem", "", 1, "pill-wrapper"], [3, "totalPills", "filter", "responsive", "disabled", "deleteFilters"], ["siAutoCollapsableListAdditionalContent", "", "type", "button", 1, "text-nowrap", "btn", "btn-tertiary", "ms-4", 3, "disabled", "click"]],
  template: function SiFilterBarComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiFilterBarComponent_span_1_Template, 2, 1, "span", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiFilterBarComponent_span_2_Template, 2, 1, "span", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiFilterBarComponent_div_3_Template, 2, 6, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "si-filter-pill", 4, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("deleteFilters", function SiFilterBarComponent_Template_si_filter_pill_deleteFilters_4_listener() {
        return ctx.deleteOverflowFilter();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiFilterBarComponent_button_6_Template, 2, 2, "button", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("rounded", !ctx.responsive)("list-header", !ctx.responsive)("responsive", ctx.responsive)("py-2", ctx.responsive);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siAutoCollapsableList", ctx.responsive);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.responsive);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.isEmpty);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.filters)("ngForTrackBy", ctx.trackByIndex);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dark-background", ctx.responsive && ctx.colorVariant === "base-0");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("responsive", ctx.responsive)("disabled", ctx.disabled)("filter", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](19, _c26, "+ " + _r3.hiddenItemCount + " filters"));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.allowReset && ctx.responsive && !ctx.isEmpty);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiAutoCollapsableListAdditionalContentDirective, SiAutoCollapsableListDirective, SiAutoCollapsableListItemDirective, SiAutoCollapsableListOverflowItemDirective, SiFilterPillComponent],
  styles: [".list-header[_ngcontent-%COMP%]{margin-block-start:12px;background:var(--element-base-0);padding-block:6px;padding-inline:12px;white-space:nowrap;overflow-y:hidden;overflow-x:auto;display:flex;align-items:center}.list-text[_ngcontent-%COMP%]{line-height:32px}.pill-wrapper[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle}.responsive[_ngcontent-%COMP%]{overflow:hidden;display:flex;align-items:center}.responsive[_ngcontent-%COMP%]   .list-text[_ngcontent-%COMP%]{color:var(--element-text-disabled)}.responsive[_ngcontent-%COMP%]   .invisible[_ngcontent-%COMP%]{position:absolute}.list-title[_ngcontent-%COMP%]{margin-inline-end:6px;font-weight:500}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiFilterBarComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-filter-bar',
      template: "<div\n  [class.rounded]=\"!responsive\"\n  [class.list-header]=\"!responsive\"\n  [class.responsive]=\"responsive\"\n  [class.py-2]=\"responsive\"\n  [siAutoCollapsableList]=\"responsive\"\n>\n  <span *ngIf=\"!responsive\" class=\"list-title\">{{ filterTitle }}:</span>\n  <span class=\"list-text\" *ngIf=\"isEmpty\">{{ filterDefaultText }}</span>\n  <div\n    class=\"pill-wrapper\"\n    *ngFor=\"let filter of filters;let i= index; trackBy: trackByIndex\"\n    siAutoCollapsableListItem\n  >\n    <si-filter-pill\n      [class.dark-background]=\"responsive && colorVariant === 'base-0'\"\n      [totalPills]=\"filters.length\"\n      [filter]=\"filter\"\n      [responsive]=\"responsive\"\n      [disabled]=\"disabled\"\n      (deleteFilters)=\"deleteFilters($event)\"\n    >\n    </si-filter-pill>\n  </div>\n  <si-filter-pill\n    siAutoCollapsableListOverflowItem #overflowItem=\"siAutoCollapsableListOverflowItem\"\n    [class.dark-background]=\"responsive && colorVariant === 'base-0'\"\n    [responsive]=\"responsive\"\n    [disabled]=\"disabled\"\n    [filter]=\"{description: '+ ' + overflowItem.hiddenItemCount + ' filters', title: '', status: 'default', filterName: ''}\"\n    (deleteFilters)=\"deleteOverflowFilter()\"\n  >\n  </si-filter-pill>\n  <button\n    siAutoCollapsableListAdditionalContent\n    *ngIf=\"allowReset && responsive && !isEmpty\"\n    type=\"button\"\n    class=\"text-nowrap btn btn-tertiary ms-4\"\n    (click)=\"onResetFilters()\"\n    [disabled]=\"disabled\"\n  >\n    {{resetText}}\n  </button>\n</div>\n",
      styles: [".list-header{margin-block-start:12px;background:var(--element-base-0);padding-block:6px;padding-inline:12px;white-space:nowrap;overflow-y:hidden;overflow-x:auto;display:flex;align-items:center}.list-text{line-height:32px}.pill-wrapper{display:inline-block;vertical-align:middle}.responsive{overflow:hidden;display:flex;align-items:center}.responsive .list-text{color:var(--element-text-disabled)}.responsive .invisible{position:absolute}.list-title{margin-inline-end:6px;font-weight:500}\n"]
    }]
  }], null, {
    filterTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    filterDefaultText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    filters: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    responsive: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    resetText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    allowReset: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    colorVariant: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    collapsableListDirective: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: [SiAutoCollapsableListDirective, {
        static: true
      }]
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    filtersChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    resetFilters: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiFilterBarModule {}
SiFilterBarModule.ɵfac = function SiFilterBarModule_Factory(t) {
  return new (t || SiFilterBarModule)();
};
SiFilterBarModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiFilterBarModule
});
SiFilterBarModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiAutoCollapsableListModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiFilterBarModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiAutoCollapsableListModule, SiTranslateModule],
      declarations: [SiFilterBarComponent, SiFilterPillComponent],
      exports: [SiFilterBarComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

class SiFooterComponent {
  constructor() {
    this.trackByIndex = index => index;
  }
}
SiFooterComponent.ɵfac = function SiFooterComponent_Factory(t) {
  return new (t || SiFooterComponent)();
};
SiFooterComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiFooterComponent,
  selectors: [["si-footer"]],
  inputs: {
    copyright: "copyright",
    links: "links"
  },
  decls: 7,
  vars: 3,
  consts: [[1, "container-fluid"], [1, "row"], [1, "col-sm-4", "col-md-6"], [1, "col-sm-8", "col-md-6", "text-sm-end"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "siLink"]],
  template: function SiFooterComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "footer")(1, "div", 0)(2, "div", 1)(3, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiFooterComponent_span_6_Template, 4, 4, "span", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" \xA9 ", ctx.copyright, " ");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.links)("ngForTrackBy", ctx.trackByIndex);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, SiLinkDirective, SiTranslatePipe],
  styles: ["footer[_ngcontent-%COMP%]{margin-block-end:0;background-color:var(--element-base-0);color:var(--element-text-secondary);font-size:.75rem;border-block-start:1px solid var(--element-ui-4);overflow:auto}a[_ngcontent-%COMP%], span[_ngcontent-%COMP%]{display:inline-flex}a[_ngcontent-%COMP%] + a[_ngcontent-%COMP%]:before, a[_ngcontent-%COMP%] + span[_ngcontent-%COMP%]:before, span[_ngcontent-%COMP%] + a[_ngcontent-%COMP%]:before, span[_ngcontent-%COMP%] + span[_ngcontent-%COMP%]:before{content:\"|\";padding-inline:8px}.container-fluid[_ngcontent-%COMP%]{padding-block:12px}"]
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiFooterComponent.prototype, "copyright", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiFooterComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-footer',
      template: "<footer>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-sm-4 col-md-6\">\n        \u00A9 {{ copyright }}\n      </div>\n      <div class=\"col-sm-8 col-md-6 text-sm-end\">\n          <span *ngFor=\"let link of links; trackBy: trackByIndex\">\n            <a [siLink]=\"link\">\n              {{ link.title! | translate }}\n            </a>\n          </span>\n      </div>\n    </div>\n  </div>\n</footer>\n",
      styles: ["footer{margin-block-end:0;background-color:var(--element-base-0);color:var(--element-text-secondary);font-size:.75rem;border-block-start:1px solid var(--element-ui-4);overflow:auto}a,span{display:inline-flex}a+a:before,a+span:before,span+a:before,span+span:before{content:\"|\";padding-inline:8px}.container-fluid{padding-block:12px}\n"]
    }]
  }], null, {
    copyright: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    links: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiFooterModule {}
SiFooterModule.ɵfac = function SiFooterModule_Factory(t) {
  return new (t || SiFooterModule)();
};
SiFooterModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiFooterModule
});
SiFooterModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterModule, SiLinkModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiFooterModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterModule, SiLinkModule, SiTranslateModule],
      declarations: [SiFooterComponent],
      exports: [SiFooterComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

// -------------------------------------------------------------------------------

class SiInlineNotificationComponent {
  constructor() {
    /**
     * Params passed to the translation pipe
     */
    this.translationParams = {};
    /**
     * Displays in embedded style, w/o radius and indicator bar
     */
    this.embedded = false;
    this.icon = STATUS_ICON.info;
  }
  ngOnChanges(changes) {
    if (changes.severity && this.severity) {
      this.icon = STATUS_ICON[this.severity];
    }
  }
}
SiInlineNotificationComponent.ɵfac = function SiInlineNotificationComponent_Factory(t) {
  return new (t || SiInlineNotificationComponent)();
};
SiInlineNotificationComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiInlineNotificationComponent,
  selectors: [["si-inline-notification"]],
  inputs: {
    severity: "severity",
    heading: "heading",
    message: "message",
    action: "action",
    translationParams: "translationParams",
    embedded: "embedded"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 8,
  vars: 12,
  consts: [[1, "alert", "d-flex", "align-items-start", 3, "ngClass", "hidden"], ["alt", "", 1, "me-4", "flex-shrink-0", 3, "icon", "color", "stackedIcon", "stackedColor"], [1, "notification-body", "d-flex", "flex-grow-1", "flex-wrap", "mt-1"], ["class", "pe-2", 4, "ngIf"], ["class", "btn btn-link ms-4 my-n3 me-n2 px-2 flex-shrink-0", 3, "siLink", 4, "ngIf"], [1, "pe-2"], [1, "btn", "btn-link", "ms-4", "my-n3", "me-n2", "px-2", "flex-shrink-0", 3, "siLink"]],
  template: function SiInlineNotificationComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "si-icon", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiInlineNotificationComponent_strong_3_Template, 3, 4, "strong", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "span");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiInlineNotificationComponent_a_7_Template, 3, 5, "a", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", "alert-" + ctx.severity)("hidden", !ctx.severity);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("icon", ctx.icon.icon)("color", ctx.icon.color)("stackedIcon", ctx.icon.stacked)("stackedColor", ctx.icon.stackedColor);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.heading);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](6, 9, ctx.message, ctx.translationParams));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.action && ctx.action.title);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiIconComponent, SiLinkDirective, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:block;overflow:hidden;flex-shrink:0}.btn-link[_ngcontent-%COMP%]{color:currentColor!important;background:transparent!important;font-size:1rem;line-height:1.25rem}.notification-body[_ngcontent-%COMP%]{padding-block-start:1px}"]
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiInlineNotificationComponent.prototype, "severity", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiInlineNotificationComponent.prototype, "message", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiInlineNotificationComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-inline-notification',
      template: "<div\n  class=\"alert d-flex align-items-start\"\n  [ngClass]=\"'alert-' + severity\"\n  [hidden]=\"!severity\"\n>\n  <si-icon\n    class=\"me-4 flex-shrink-0\"\n    [icon]=\"icon.icon\"\n    [color]=\"icon.color\"\n    [stackedIcon]=\"icon.stacked\"\n    [stackedColor]=\"icon.stackedColor\"\n    alt=\"\"\n  ></si-icon>\n  <div class=\"notification-body d-flex flex-grow-1 flex-wrap mt-1\">\n    <strong *ngIf=\"heading\" class=\"pe-2\">{{ heading | translate:translationParams }}: </strong>\n    <span>{{ message | translate:translationParams }}</span>\n  </div>\n  <a\n    *ngIf=\"action && action.title\"\n    class=\"btn btn-link ms-4 my-n3 me-n2 px-2 flex-shrink-0\"\n    [siLink]=\"action\"\n  >{{ action.title | translate:translationParams }}</a>\n</div>\n",
      styles: [":host{display:block;overflow:hidden;flex-shrink:0}.btn-link{color:currentColor!important;background:transparent!important;font-size:1rem;line-height:1.25rem}.notification-body{padding-block-start:1px}\n"]
    }]
  }], null, {
    severity: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    message: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    action: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    translationParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    embedded: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiInlineNotificationModule {}
SiInlineNotificationModule.ɵfac = function SiInlineNotificationModule_Factory(t) {
  return new (t || SiInlineNotificationModule)();
};
SiInlineNotificationModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiInlineNotificationModule
});
SiInlineNotificationModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiLinkModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiInlineNotificationModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiLinkModule, SiTranslateModule],
      declarations: [SiInlineNotificationComponent],
      exports: [SiInlineNotificationComponent]
    }]
  }], null, null);
})();
class SiLanguageSwitcherComponent {
  /**
   * List of all available languages in this application.
   */
  set availableLanguages(languages) {
    if (typeof languages[0] !== 'object') {
      languages = languages.map(languageValue => ({
        value: languageValue,
        name: this.translationKey ? `${this.translationKey}.${languageValue.toUpperCase()}` : languageValue
      }));
    }
    this.availableIsoLanguages = languages;
  }
  get availableLanguages() {
    return this.availableIsoLanguages;
  }
  constructor(translate) {
    this.translate = translate;
    /**
     * Key for translation.
     * If the key is set to an empty string, the language of the underlaying tanslation framework will not be switched.
     */
    this.translationKey = 'LANGUAGE';
    /**
     * Text for aria label for the language selector. Needed for a11y
     */
    this.languageSwitcherLabel = 'language switcher';
    this.trackByValue = (index, value) => value.value;
  }
  ngOnInit() {
    this.availableLanguages ?? (this.availableLanguages = this.translate.availableLanguages);
  }
  switchLanguage(target) {
    const language = target?.value;
    if (!language || !this.translationKey || this.translationKey.length === 0) {
      return;
    }
    this.translate.setCurrentLanguage(language);
  }
}
SiLanguageSwitcherComponent.ɵfac = function SiLanguageSwitcherComponent_Factory(t) {
  return new (t || SiLanguageSwitcherComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiTranslateService));
};
SiLanguageSwitcherComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiLanguageSwitcherComponent,
  selectors: [["si-language-switcher"]],
  inputs: {
    translationKey: "translationKey",
    languageSwitcherLabel: "languageSwitcherLabel",
    availableLanguages: "availableLanguages"
  },
  decls: 3,
  vars: 5,
  consts: [[1, "si-title-2", "language-switcher-select", 3, "change"], [3, "value", "selected", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "value", "selected"]],
  template: function SiLanguageSwitcherComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "select", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SiLanguageSwitcherComponent_Template_select_change_0_listener($event) {
        return ctx.switchLanguage($event.target);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiLanguageSwitcherComponent_option_2_Template, 3, 5, "option", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 3, ctx.languageSwitcherLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.availableIsoLanguages)("ngForTrackBy", ctx.trackByValue);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{--language-switcher-color: var(--element-text-active)}.language-switcher-select[_ngcontent-%COMP%]{inline-size:100%;background-color:transparent;border:0;border-block-end:1px solid var(--input-border-color);padding:6px;outline:none;cursor:pointer;color:var(--language-switcher-color)}@media (min-width: 768px){.language-switcher-select[_ngcontent-%COMP%]{max-inline-size:200px}}.language-switcher-select[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]{background-color:var(--element-base-1)}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiLanguageSwitcherComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-language-switcher',
      template: "<select\n  class=\"si-title-2 language-switcher-select\"\n  [attr.aria-label]=\"languageSwitcherLabel | translate\"\n  (change)=\"switchLanguage($event.target)\"\n>\n  <option *ngFor=\"let language of availableIsoLanguages; trackBy: trackByValue\"\n    [value]=\"language.value\"\n    [selected]=\"language.value === translate.currentLanguage\"\n  >\n    {{ language.name | translate }}\n  </option>\n</select>\n",
      styles: [":host{--language-switcher-color: var(--element-text-active)}.language-switcher-select{inline-size:100%;background-color:transparent;border:0;border-block-end:1px solid var(--input-border-color);padding:6px;outline:none;cursor:pointer;color:var(--language-switcher-color)}@media (min-width: 768px){.language-switcher-select{max-inline-size:200px}}.language-switcher-select option{background-color:var(--element-base-1)}\n"]
    }]
  }], function () {
    return [{
      type: SiTranslateService
    }];
  }, {
    translationKey: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    languageSwitcherLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    availableLanguages: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiLanguageSwitcherModule {}
SiLanguageSwitcherModule.ɵfac = function SiLanguageSwitcherModule_Factory(t) {
  return new (t || SiLanguageSwitcherModule)();
};
SiLanguageSwitcherModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiLanguageSwitcherModule
});
SiLanguageSwitcherModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiLanguageSwitcherModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule],
      declarations: [SiLanguageSwitcherComponent],
      exports: [SiLanguageSwitcherComponent]
    }]
  }], null, null);
})();
class SiLandingPageComponent {
  constructor() {
    /**
     * List of links (e.g. Corporate information)
     */
    this.links = [];
    /**
     * URL to custom background image
     */
    this.backgroundImageUrl = './assets/images/landing-page-digitalcity.jpg';
    /**
     * Input of si-language-switcher: Key for translation.
     * If your languages are already translated, you may display them without any
     * manipulation by passing in an empty string.
     */
    this.translationKey = 'LANGUAGE';
    this.trackByIndex = index => index;
  }
}
SiLandingPageComponent.ɵfac = function SiLandingPageComponent_Factory(t) {
  return new (t || SiLandingPageComponent)();
};
SiLandingPageComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiLandingPageComponent,
  selectors: [["si-landing-page"]],
  inputs: {
    heading: "heading",
    subheading: "subheading",
    subtitle: "subtitle",
    copyright: "copyright",
    links: "links",
    backgroundImageUrl: "backgroundImageUrl",
    logoUrl: "logoUrl",
    translationKey: "translationKey",
    availableLanguages: "availableLanguages",
    announcement: "announcement",
    loginAlert: "loginAlert"
  },
  ngContentSelectors: _c1,
  decls: 22,
  vars: 14,
  consts: [[3, "severity", "heading", "message", 4, "ngIf"], [1, "landing-page"], [1, "landing-page-background", "d-none", "d-md-block"], [1, "landing-page-content"], [1, "d-flex", "justify-content-between", "align-items-center", "pb-9"], [1, "landing-page-brand"], ["xmlns", "http://www.w3.org/2000/svg", "width", "103", "height", "20", "viewBox", "0 0 142.315 22.5", 4, "ngIf"], ["class", "landing-page-logo", 3, "src", "alt", 4, "ngIf"], ["class", "landing-page-language-switcher", 4, "ngIf"], [1, "landing-page-main"], ["class", "si-h2", 4, "ngIf"], [1, "si-h1-black", "my-2"], ["class", "mt-10 si-h2", 4, "ngIf"], ["class", "my-6", 3, "severity", "heading", "message", 4, "ngIf"], [1, "landing-page-custom-content"], [1, "d-flex", "justify-content-start", "flex-row", "flex-wrap", "mt-6"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "si-caption mt-4 mb-6 text-body", 4, "ngIf"], [3, "severity", "heading", "message"], ["xmlns", "http://www.w3.org/2000/svg", "width", "103", "height", "20", "viewBox", "0 0 142.315 22.5"], ["d", "M125.878 21.704v-4.378c2.53.806 4.718 1.209 6.566 1.209 2.53 0 3.795-.674 3.795-2.02 0-.49-.183-.898-.549-1.225-.43-.388-1.419-.903-2.971-1.545-2.735-1.113-4.5-2.006-5.296-2.68-1.325-1.121-1.99-2.581-1.99-4.376 0-2.235.873-3.94 2.617-5.113C129.623.525 131.744 0 134.418 0c2.143 0 4.21.27 6.198.811v4.194c-2.172-.838-4.116-1.255-5.83-1.255-2.276 0-3.415.647-3.415 1.942 0 .522.247.94.737 1.257.417.265 1.53.786 3.335 1.561 2.725 1.174 4.522 2.194 5.388 3.061.989.99 1.484 2.301 1.484 3.934 0 2.5-1.03 4.356-3.09 5.571-1.612.949-3.755 1.424-6.43 1.424-2.489 0-4.796-.266-6.917-.796m-22.913.352V.367h7.101l7.469 14.097V.367h4.349v21.69h-6.859L107.31 7.744v14.311h-4.345zm-19.73 0V.367H99v3.964h-9.705V9.2h8.45v3.581h-8.45v5.096h9.935v4.18H83.235zm-31.837 0V.367h7.913l5.434 13.607L70.378.367h7.546v21.69h-5.939V7.238L65.679 22.27h-3.781L55.76 7.239v14.817h-4.362zm-19.775 0V.367h15.78v3.964H37.7V9.2h8.45v3.581H37.7v5.096h9.919v4.18H31.623zM20.05.367h6.29v21.69h-6.29V.366zM.443 21.704v-4.378c2.52.806 4.71 1.209 6.567 1.209 2.531 0 3.796-.674 3.796-2.02 0-.49-.185-.898-.551-1.225-.419-.388-1.414-.903-2.985-1.545-2.704-1.103-4.464-1.995-5.28-2.68C.663 9.944 0 8.484 0 6.689c0-2.235.873-3.94 2.618-5.113C4.178.525 6.3 0 8.984 0c2.142 0 4.211.27 6.2.811v4.194C12.989 4.167 11.046 3.75 9.35 3.75c-2.275 0-3.412.647-3.412 1.942 0 .512.249.93.749 1.257.408.265 1.516.786 3.323 1.561 2.724 1.174 4.519 2.194 5.387 3.061.99.99 1.486 2.301 1.486 3.934 0 2.5-1.036 4.356-3.109 5.571-1.601.949-3.74 1.424-6.414 1.424-2.49 0-4.795-.266-6.918-.796", "fill", "currentColor"], [1, "landing-page-logo", 3, "src", "alt"], [1, "landing-page-language-switcher"], [3, "translationKey", "availableLanguages"], [1, "si-h2"], [1, "mt-10", "si-h2"], [1, "my-6", 3, "severity", "heading", "message"], ["siLinkDefaultTarget", "_blank", 1, "si-body-2", "d-flex-inline", "pe-6", 3, "siLink"], [1, "si-caption", "mt-4", "mb-6", "text-body"]],
  template: function SiLandingPageComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiLandingPageComponent_si_inline_notification_0_Template, 1, 3, "si-inline-notification", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3)(4, "div", 4)(5, "div", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiLandingPageComponent__svg_svg_6_Template, 2, 0, "svg", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiLandingPageComponent_img_7_Template, 1, 2, "img", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, SiLandingPageComponent_div_8_Template, 2, 2, "div", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](10, SiLandingPageComponent_div_10_Template, 2, 1, "div", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](11, "h1", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](12);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](13, SiLandingPageComponent_h2_13_Template, 2, 1, "h2", 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](14, SiLandingPageComponent_si_inline_notification_14_Template, 1, 3, "si-inline-notification", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](15, "div", 14);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](16);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](17, "footer")(18, "div")(19, "div", 15);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](20, SiLandingPageComponent_span_20_Template, 4, 4, "span", 16);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](21, SiLandingPageComponent_div_21_Template, 2, 1, "div", 17);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.announcement);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstylePropInterpolate1"]("background-image", "url(", ctx.backgroundImageUrl, ")");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.logoUrl);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.logoUrl);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.availableLanguages && ctx.availableLanguages.length > 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.subheading);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.heading);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.loginAlert);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.loginAlert);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.links)("ngForTrackBy", ctx.trackByIndex);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.copyright);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiInlineNotificationComponent, SiLanguageSwitcherComponent, SiLinkDirective, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{--landing-page-logo-width: 180px;display:flex;flex-direction:column;block-size:100%}.landing-page[_ngcontent-%COMP%]{display:flex;flex-direction:row-reverse;flex-grow:1}.landing-page-background[_ngcontent-%COMP%]{background-size:cover;background-position:center;inline-size:60%}.landing-page-logo[_ngcontent-%COMP%]{inline-size:var(--landing-page-logo-width);block-size:var(--landing-page-logo-height)}.landing-page-content[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:space-between;position:relative;inline-size:40%;background-color:var(--element-base-0);padding-block:32px 32px;padding-inline:96px}.landing-page-brand[_ngcontent-%COMP%]{color:var(--element-logo-color)}.landing-page-custom-content[_ngcontent-%COMP%]{margin-block:16px;margin-inline:0}.landing-page-links[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{font-size:12px}footer[_ngcontent-%COMP%]{color:var(--element-text-secondary);overflow:auto}@media (max-width: 1199.98px){.landing-page-background[_ngcontent-%COMP%]{padding:64px}.landing-page-content[_ngcontent-%COMP%]{padding-block:32px 32px;padding-inline:64px}}@media (max-width: 991.98px){.landing-page-background[_ngcontent-%COMP%]{padding:32px}.landing-page-content[_ngcontent-%COMP%]{padding-block:32px 32px;padding-inline:32px}}@media (max-width: 767.98px){.landing-page[_ngcontent-%COMP%]{flex-direction:column}.landing-page-logo[_ngcontent-%COMP%]{transform:scale(.6);transform-origin:top left}.landing-page-content[_ngcontent-%COMP%]{inline-size:100%;flex-grow:1;padding:32px}}"],
  changeDetection: 0
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiLandingPageComponent.prototype, "heading", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiLandingPageComponent.prototype, "subtitle", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiLandingPageComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-landing-page',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<si-inline-notification\n  *ngIf=\"announcement\"\n  [severity]=\"announcement.severity\"\n  [heading]=\"announcement.heading\"\n  [message]=\"announcement.message\"\n></si-inline-notification>\n<div class=\"landing-page\">\n  <div style.background-image=\"url({{ backgroundImageUrl }})\" class=\"landing-page-background d-none d-md-block\">\n  </div>\n  <div class=\"landing-page-content\">\n    <div class=\"d-flex justify-content-between align-items-center pb-9\">\n      <div class=\"landing-page-brand\">\n        <svg *ngIf=\"!logoUrl\" xmlns=\"http://www.w3.org/2000/svg\" width=\"103\" height=\"20\" viewBox=\"0 0 142.315 22.5\">\n          <path\n            d=\"M125.878 21.704v-4.378c2.53.806 4.718 1.209 6.566 1.209 2.53 0 3.795-.674 3.795-2.02 0-.49-.183-.898-.549-1.225-.43-.388-1.419-.903-2.971-1.545-2.735-1.113-4.5-2.006-5.296-2.68-1.325-1.121-1.99-2.581-1.99-4.376 0-2.235.873-3.94 2.617-5.113C129.623.525 131.744 0 134.418 0c2.143 0 4.21.27 6.198.811v4.194c-2.172-.838-4.116-1.255-5.83-1.255-2.276 0-3.415.647-3.415 1.942 0 .522.247.94.737 1.257.417.265 1.53.786 3.335 1.561 2.725 1.174 4.522 2.194 5.388 3.061.989.99 1.484 2.301 1.484 3.934 0 2.5-1.03 4.356-3.09 5.571-1.612.949-3.755 1.424-6.43 1.424-2.489 0-4.796-.266-6.917-.796m-22.913.352V.367h7.101l7.469 14.097V.367h4.349v21.69h-6.859L107.31 7.744v14.311h-4.345zm-19.73 0V.367H99v3.964h-9.705V9.2h8.45v3.581h-8.45v5.096h9.935v4.18H83.235zm-31.837 0V.367h7.913l5.434 13.607L70.378.367h7.546v21.69h-5.939V7.238L65.679 22.27h-3.781L55.76 7.239v14.817h-4.362zm-19.775 0V.367h15.78v3.964H37.7V9.2h8.45v3.581H37.7v5.096h9.919v4.18H31.623zM20.05.367h6.29v21.69h-6.29V.366zM.443 21.704v-4.378c2.52.806 4.71 1.209 6.567 1.209 2.531 0 3.796-.674 3.796-2.02 0-.49-.185-.898-.551-1.225-.419-.388-1.414-.903-2.985-1.545-2.704-1.103-4.464-1.995-5.28-2.68C.663 9.944 0 8.484 0 6.689c0-2.235.873-3.94 2.618-5.113C4.178.525 6.3 0 8.984 0c2.142 0 4.211.27 6.2.811v4.194C12.989 4.167 11.046 3.75 9.35 3.75c-2.275 0-3.412.647-3.412 1.942 0 .512.249.93.749 1.257.408.265 1.516.786 3.323 1.561 2.724 1.174 4.519 2.194 5.387 3.061.99.99 1.486 2.301 1.486 3.934 0 2.5-1.036 4.356-3.109 5.571-1.601.949-3.74 1.424-6.414 1.424-2.49 0-4.795-.266-6.918-.796\"\n            fill=\"currentColor\"></path>\n        </svg>\n        <img *ngIf=\"logoUrl\" [src]=\"logoUrl\" [alt]=\"heading + '\\'s Background'\" class=\"landing-page-logo\">\n      </div>\n      <div class=\"landing-page-language-switcher\" *ngIf=\"availableLanguages && availableLanguages.length > 1\">\n        <si-language-switcher [translationKey]=\"translationKey\" [availableLanguages]=\"availableLanguages\">\n        </si-language-switcher>\n      </div>\n    </div>\n    <div class=\"landing-page-main\">\n      <div *ngIf=\"subheading\" class=\"si-h2\">{{ subheading }}</div>\n      <h1 class=\"si-h1-black my-2\">{{ heading }}</h1>\n      <h2 *ngIf=\"!loginAlert\" class=\"mt-10 si-h2\">{{ subtitle }}</h2>\n      <si-inline-notification\n        *ngIf=\"loginAlert\"\n        class=\"my-6\"\n        [severity]=\"loginAlert.severity || 'danger'\"\n        [heading]=\"loginAlert.heading\"\n        [message]=\"loginAlert.message\"\n      ></si-inline-notification>\n      <div class=\"landing-page-custom-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n    <footer>\n      <div>\n        <div class=\"d-flex justify-content-start flex-row flex-wrap mt-6\">\n          <span *ngFor=\"let link of links; trackBy: trackByIndex\">\n            <a [siLink]=\"link\" siLinkDefaultTarget=\"_blank\" class=\"si-body-2 d-flex-inline pe-6\">\n              {{ link.title ?? '' | translate }}\n            </a>\n          </span>\n        </div>\n        <div *ngIf=\"copyright\" class=\"si-caption mt-4 mb-6 text-body\">\n          {{ copyright }}\n        </div>\n      </div>\n    </footer>\n  </div>\n</div>\n",
      styles: [":host{--landing-page-logo-width: 180px;display:flex;flex-direction:column;block-size:100%}.landing-page{display:flex;flex-direction:row-reverse;flex-grow:1}.landing-page-background{background-size:cover;background-position:center;inline-size:60%}.landing-page-logo{inline-size:var(--landing-page-logo-width);block-size:var(--landing-page-logo-height)}.landing-page-content{display:flex;flex-direction:column;justify-content:space-between;position:relative;inline-size:40%;background-color:var(--element-base-0);padding-block:32px 32px;padding-inline:96px}.landing-page-brand{color:var(--element-logo-color)}.landing-page-custom-content{margin-block:16px;margin-inline:0}.landing-page-links a{font-size:12px}footer{color:var(--element-text-secondary);overflow:auto}@media (max-width: 1199.98px){.landing-page-background{padding:64px}.landing-page-content{padding-block:32px 32px;padding-inline:64px}}@media (max-width: 991.98px){.landing-page-background{padding:32px}.landing-page-content{padding-block:32px 32px;padding-inline:32px}}@media (max-width: 767.98px){.landing-page{flex-direction:column}.landing-page-logo{transform:scale(.6);transform-origin:top left}.landing-page-content{inline-size:100%;flex-grow:1;padding:32px}}\n"]
    }]
  }], null, {
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    subheading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    subtitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    copyright: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    links: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    backgroundImageUrl: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    logoUrl: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    translationKey: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    availableLanguages: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    announcement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    loginAlert: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiLandingPageModule {}
SiLandingPageModule.ɵfac = function SiLandingPageModule_Factory(t) {
  return new (t || SiLandingPageModule)();
};
SiLandingPageModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiLandingPageModule
});
SiLandingPageModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiInlineNotificationModule, SiLanguageSwitcherModule, SiLinkModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiLandingPageModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiInlineNotificationModule, SiLanguageSwitcherModule, SiLinkModule, SiTranslateModule],
      declarations: [SiLandingPageComponent],
      exports: [SiLandingPageComponent]
    }]
  }], null, null);
})();

// -------------------------------------------------------------------------------

class SiCommissioningStatusComponent {
  constructor() {
    /**
     * Number of "overwritten" items. Hidden when `null` is passed.
     */
    this.overwritten = null;
    /**
     * Number of "checked" items. Hidden when `null` is passed.
     */
    this.checked = 0;
    /**
     * Number of "failed" items. Hidden when `null` is passed.
     */
    this.failed = 0;
    /**
     * Number of "unchecked" items. Hidden when `null` is passed.
     */
    this.unchecked = null;
  }
}
SiCommissioningStatusComponent.ɵfac = function SiCommissioningStatusComponent_Factory(t) {
  return new (t || SiCommissioningStatusComponent)();
};
SiCommissioningStatusComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiCommissioningStatusComponent,
  selectors: [["si-commissioning-status"]],
  inputs: {
    disabled: "disabled",
    overwritten: "overwritten",
    checked: "checked",
    failed: "failed",
    unchecked: "unchecked"
  },
  decls: 4,
  vars: 4,
  consts: [["class", "si-body-2 si-commissioning-status-item me-2", 4, "ngIf"], ["class", "si-body-2 si-commissioning-status-item", 4, "ngIf"], [1, "si-body-2", "si-commissioning-status-item", "me-2"], ["icon", "element-manual-filled", 1, "overwritten"], [4, "ngIf"], ["icon", "element-circle-filled", "stackedIcon", "element-state-tick", 1, "checked", 3, "color", "stackedColor"], ["icon", "element-circle-filled", "stackedIcon", "element-state-exclamation-mark", 1, "failed", 3, "color", "stackedColor"], [1, "si-body-2", "si-commissioning-status-item"], ["icon", "element-not-checked", 1, "unchecked"]],
  template: function SiCommissioningStatusComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiCommissioningStatusComponent_div_0_Template, 3, 5, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiCommissioningStatusComponent_div_1_Template, 3, 5, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiCommissioningStatusComponent_div_2_Template, 3, 5, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiCommissioningStatusComponent_div_3_Template, 3, 5, "div", 1);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.overwritten || ctx.overwritten === 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.checked || ctx.checked === 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.failed || ctx.failed === 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.unchecked || ctx.unchecked === 0);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiIconComponent],
  styles: ["[_nghost-%COMP%]{display:flex;align-items:center}.vertical[_nghost-%COMP%]{flex-direction:column;align-items:start}.si-commissioning-status-item[_ngcontent-%COMP%]{display:flex;align-items:center;flex-direction:column;text-align:center;inline-size:24px}.si-commissioning-status-item[_ngcontent-%COMP%]:last-of-type{margin-inline-end:0!important}si-icon[_ngcontent-%COMP%]{font-size:1.5rem;margin-block:0 8px!important}  si-icon .stacked-color-inactive{color:var(--element-ui-5)}.stable[_ngcontent-%COMP%]{color:var(--element-ui-1)}.inactive[_ngcontent-%COMP%]{color:var(--element-ui-3)}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiCommissioningStatusComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-commissioning-status',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div *ngIf=\"overwritten || overwritten === 0\" class=\"si-body-2 si-commissioning-status-item me-2\">\n  <si-icon\n    class=\"overwritten\"\n    icon=\"element-manual-filled\"\n    [class.status-warning]=\"overwritten > 0 && !disabled\"\n    [class.inactive]=\"overwritten === 0 || disabled\"\n  ></si-icon>\n  <span *ngIf=\"!disabled\">{{ overwritten }}</span>\n</div>\n<div *ngIf=\"checked || checked === 0\" class=\"si-body-2 si-commissioning-status-item me-2\">\n  <si-icon\n    class=\"checked\"\n    icon=\"element-circle-filled\"\n    [color]=\"(checked === 0 || disabled) ? '' : 'status-success'\"\n    stackedIcon=\"element-state-tick\"\n    [stackedColor]=\"(checked === 0 || disabled) ? 'stacked-color-inactive' : 'status-success-contrast'\"\n    [class.inactive]=\"checked === 0 || disabled\"\n  ></si-icon>\n  <span *ngIf=\"!disabled\">{{ checked }}</span>\n</div>\n<div *ngIf=\"failed || failed === 0\" class=\"si-body-2 si-commissioning-status-item me-2\">\n  <si-icon\n    class=\"failed\"\n    icon=\"element-circle-filled\"\n    [color]=\"(failed === 0 || disabled) ? '' : 'status-danger'\"\n    stackedIcon=\"element-state-exclamation-mark\"\n    [stackedColor]=\"(failed === 0 || disabled) ? 'stacked-color-inactive' : 'status-danger-contrast'\"\n    [class.inactive]=\"failed === 0 || disabled\"\n  ></si-icon>\n  <span *ngIf=\"!disabled\">{{ failed }}</span>\n</div>\n<div *ngIf=\"unchecked || unchecked === 0\" class=\"si-body-2 si-commissioning-status-item\">\n  <si-icon\n    class=\"unchecked\"\n    icon=\"element-not-checked\"\n    [class.stable]=\"unchecked > 0 && !disabled\"\n    [class.inactive]=\"unchecked === 0 || disabled\"\n  ></si-icon>\n  <span *ngIf=\"!disabled\">{{ unchecked }}</span>\n</div>\n",
      styles: [":host{display:flex;align-items:center}:host.vertical{flex-direction:column;align-items:start}.si-commissioning-status-item{display:flex;align-items:center;flex-direction:column;text-align:center;inline-size:24px}.si-commissioning-status-item:last-of-type{margin-inline-end:0!important}si-icon{font-size:1.5rem;margin-block:0 8px!important}::ng-deep si-icon .stacked-color-inactive{color:var(--element-ui-5)}.stable{color:var(--element-ui-1)}.inactive{color:var(--element-ui-3)}\n"]
    }]
  }], null, {
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    overwritten: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    checked: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    failed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    unchecked: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiCommissioningStatusModule {}
SiCommissioningStatusModule.ɵfac = function SiCommissioningStatusModule_Factory(t) {
  return new (t || SiCommissioningStatusModule)();
};
SiCommissioningStatusModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiCommissioningStatusModule
});
SiCommissioningStatusModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiCommissioningStatusModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule],
      declarations: [SiCommissioningStatusComponent],
      exports: [SiCommissioningStatusComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

// ------------------------------------------------------------------------------

class SiLoadingSpinnerComponent {}
SiLoadingSpinnerComponent.ɵfac = function SiLoadingSpinnerComponent_Factory(t) {
  return new (t || SiLoadingSpinnerComponent)();
};
SiLoadingSpinnerComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiLoadingSpinnerComponent,
  selectors: [["si-loading-spinner"]],
  decls: 13,
  vars: 0,
  consts: [[1, "loading"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 512 512"], ["d", "M256,156a16,16,0,0,1-16-16V80a16,16,0,0,1,32,0v60A16,16,0,0,1,256,156Z"], ["d", "M314.78,175.1a16,16,0,0,1-3.54-22.35l35.27-48.54A16,16,0,1,1,372.39,123l-35.26,48.54A16,16,0,0,1,314.78,175.1Z"], ["d", "M351.11,225.1a16,16,0,0,1,10.27-20.16l57.06-18.54a16,16,0,1,1,9.89,30.43l-57.06,18.54A16,16,0,0,1,351.11,225.1Z"], ["d", "M351.11,286.9a16,16,0,0,1,20.16-10.27l57.06,18.54a16,16,0,1,1-9.89,30.43l-57.06-18.54A16,16,0,0,1,351.11,286.9Z"], ["d", "M314.78,336.9a16,16,0,0,1,22.35,3.54L372.39,389a16,16,0,1,1-25.88,18.81l-35.27-48.54A16,16,0,0,1,314.78,336.9Z"], ["d", "M256,356a16,16,0,0,1,16,16v60a16,16,0,0,1-32,0V372A16,16,0,0,1,256,356Z"], ["d", "M197.22,336.9a16,16,0,0,1,3.54,22.35l-35.27,48.54A16,16,0,1,1,139.61,389l35.26-48.54A16,16,0,0,1,197.22,336.9Z"], ["d", "M160.89,286.9a16,16,0,0,1-10.27,20.16L93.56,325.6a16,16,0,0,1-9.89-30.43l57.06-18.54A16,16,0,0,1,160.89,286.9Z"], ["d", "M160.89,225.1a16,16,0,0,1-20.16,10.27L83.67,216.83a16,16,0,1,1,9.89-30.43l57.06,18.54A16,16,0,0,1,160.89,225.1Z"], ["d", "M197.22,175.1a16,16,0,0,1-22.35-3.54L139.61,123a16,16,0,1,1,25.88-18.81l35.27,48.54A16,16,0,0,1,197.22,175.1Z"]],
  template: function SiLoadingSpinnerComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "svg", 1)(2, "g");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "path", 2)(4, "path", 3)(5, "path", 4)(6, "path", 5)(7, "path", 6)(8, "path", 7)(9, "path", 8)(10, "path", 9)(11, "path", 10)(12, "path", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
    }
  },
  styles: ["@keyframes _ngcontent-%COMP%_spinner-fade{0%{opacity:1}to{opacity:.05}}.loading[_ngcontent-%COMP%]{display:block;text-align:center}svg[_ngcontent-%COMP%]{inline-size:var(--loading-spinner-size, 64px);block-size:var(--loading-spinner-size, 64px)}path[_ngcontent-%COMP%]{fill:var(--loading-spinner-color, var(--element-ui-2));animation:_ngcontent-%COMP%_spinner-fade calc(1s * var(--element-animations-enabled, 1)) infinite linear}path[_ngcontent-%COMP%]:nth-child(1){animation-delay:0s;opacity:1}path[_ngcontent-%COMP%]:nth-child(2){animation-delay:.1s;opacity:.9}path[_ngcontent-%COMP%]:nth-child(3){animation-delay:.2s;opacity:.8}path[_ngcontent-%COMP%]:nth-child(4){animation-delay:.3s;opacity:.7}path[_ngcontent-%COMP%]:nth-child(5){animation-delay:.4s;opacity:.6}path[_ngcontent-%COMP%]:nth-child(6){animation-delay:.5s;opacity:.5}path[_ngcontent-%COMP%]:nth-child(7){animation-delay:.6s;opacity:.4}path[_ngcontent-%COMP%]:nth-child(8){animation-delay:.7s;opacity:.3}path[_ngcontent-%COMP%]:nth-child(9){animation-delay:.8s;opacity:.2}path[_ngcontent-%COMP%]:nth-child(10){animation-delay:.9s;opacity:.1}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiLoadingSpinnerComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-loading-spinner',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div class=\"loading\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <g>\n      <path d=\"M256,156a16,16,0,0,1-16-16V80a16,16,0,0,1,32,0v60A16,16,0,0,1,256,156Z\"/>\n      <path d=\"M314.78,175.1a16,16,0,0,1-3.54-22.35l35.27-48.54A16,16,0,1,1,372.39,123l-35.26,48.54A16,16,0,0,1,314.78,175.1Z\"/>\n      <path d=\"M351.11,225.1a16,16,0,0,1,10.27-20.16l57.06-18.54a16,16,0,1,1,9.89,30.43l-57.06,18.54A16,16,0,0,1,351.11,225.1Z\"/>\n      <path d=\"M351.11,286.9a16,16,0,0,1,20.16-10.27l57.06,18.54a16,16,0,1,1-9.89,30.43l-57.06-18.54A16,16,0,0,1,351.11,286.9Z\"/>\n      <path d=\"M314.78,336.9a16,16,0,0,1,22.35,3.54L372.39,389a16,16,0,1,1-25.88,18.81l-35.27-48.54A16,16,0,0,1,314.78,336.9Z\"/>\n      <path d=\"M256,356a16,16,0,0,1,16,16v60a16,16,0,0,1-32,0V372A16,16,0,0,1,256,356Z\"/>\n      <path d=\"M197.22,336.9a16,16,0,0,1,3.54,22.35l-35.27,48.54A16,16,0,1,1,139.61,389l35.26-48.54A16,16,0,0,1,197.22,336.9Z\"/>\n      <path d=\"M160.89,286.9a16,16,0,0,1-10.27,20.16L93.56,325.6a16,16,0,0,1-9.89-30.43l57.06-18.54A16,16,0,0,1,160.89,286.9Z\"/>\n      <path d=\"M160.89,225.1a16,16,0,0,1-20.16,10.27L83.67,216.83a16,16,0,1,1,9.89-30.43l57.06,18.54A16,16,0,0,1,160.89,225.1Z\"/>\n      <path d=\"M197.22,175.1a16,16,0,0,1-22.35-3.54L139.61,123a16,16,0,1,1,25.88-18.81l35.27,48.54A16,16,0,0,1,197.22,175.1Z\"/>\n    </g>\n  </svg>\n</div>\n",
      styles: ["@keyframes spinner-fade{0%{opacity:1}to{opacity:.05}}.loading{display:block;text-align:center}svg{inline-size:var(--loading-spinner-size, 64px);block-size:var(--loading-spinner-size, 64px)}path{fill:var(--loading-spinner-color, var(--element-ui-2));animation:spinner-fade calc(1s * var(--element-animations-enabled, 1)) infinite linear}path:nth-child(1){animation-delay:0s;opacity:1}path:nth-child(2){animation-delay:.1s;opacity:.9}path:nth-child(3){animation-delay:.2s;opacity:.8}path:nth-child(4){animation-delay:.3s;opacity:.7}path:nth-child(5){animation-delay:.4s;opacity:.6}path:nth-child(6){animation-delay:.5s;opacity:.5}path:nth-child(7){animation-delay:.6s;opacity:.4}path:nth-child(8){animation-delay:.7s;opacity:.3}path:nth-child(9){animation-delay:.8s;opacity:.2}path:nth-child(10){animation-delay:.9s;opacity:.1}\n"]
    }]
  }], null, null);
})();
class SiLoadingSpinnerModule {}
SiLoadingSpinnerModule.ɵfac = function SiLoadingSpinnerModule_Factory(t) {
  return new (t || SiLoadingSpinnerModule)();
};
SiLoadingSpinnerModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiLoadingSpinnerModule
});
SiLoadingSpinnerModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiLoadingSpinnerModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [SiLoadingSpinnerComponent],
      exports: [SiLoadingSpinnerComponent]
    }]
  }], null, null);
})();

// -------------------------------------------------------------------------------

class SiMasterDetailContainerComponent {
  get actualMasterContainerWidth() {
    return this.masterContainerWidth === 'default' ? this.resizableParts ? 32 : 50 : this.masterContainerWidth;
  }
  get masterStateId() {
    return this.stateId ? `${this.stateId}-master` : undefined;
  }
  get detailStateId() {
    return this.stateId ? `${this.stateId}-detail` : undefined;
  }
  constructor(elementRef, resizeObserver, changeDetectorRef) {
    this.elementRef = elementRef;
    this.resizeObserver = resizeObserver;
    this.changeDetectorRef = changeDetectorRef;
    this.animationDuration = 500;
    /**
     * A numeric value defining the minimum width in px, which the container needs
     * to be displayed in its large layout. Whenever smaller than
     * this threshold, the small layout will be used. Default is
     * value is BOOTSTRAP_BREAKPOINTS.mdMinimum.
     */
    this.largeLayoutBreakpoint = BOOTSTRAP_BREAKPOINTS.mdMinimum;
    /**
     * Emits whether the components size is large enough to display
     * master and details views next to each other or not.
     */
    this.hasLargeSizeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Whether the details are currently active or not, mostly relevant in the
     * responsive scenario when the viewport only shows either the master or the detail.
     */
    this.detailsActive = false;
    /**
     * Emits the new value of `detailsActive` whenever its value changes.
     */
    this.detailsActiveChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * The heading of the master-detail layout component, usually a page heading.
     */
    this.heading = '';
    /**
     * Whether the heading should be truncated (single line) or not.
     * Default value is `false`.
     */
    this.truncateHeading = false;
    /**
     * The heading of the detail area.
     */
    this.detailsHeading = '';
    /**
     * Whether the master and detail parts should be resizable by a splitter or not.
     * This is only supported in the 'large' scenario (when `hasLargeSize` is `true`).
     * Default value is `false`.
     */
    this.resizableParts = false;
    /**
     * You can hide the back button in the mobile view by setting true. Required
     * in add, edit workflows on mobile sizes. During add or edit, the back button
     * should be hidden. Default value is `false`.
     */
    this.hideBackButton = false;
    /**
     * Details back button text. Required for a11y.
     */
    this.detailsBackButtonText = 'Back';
    /**
     * CSS class(es) applied to the outermost container. Per default, Bootstrap classes
     * to handle responsive paddings are applied: `px-6 pt-6 px-md-9`.
     */
    this.containerClass = 'px-6 pt-6 px-md-9';
    /**
     * CSS class(es) applied to the master container. In combination with `containerClass`,
     * this allows for settings individual padding and margin values on the individual containers.
     */
    this.masterContainerClass = '';
    /**
     * CSS class(es) applied to the detail container. In combination with `containerClass`,
     * this allows for settings individual padding and margin values on the individual containers.
     * Default value: `pb-7 pb-md-9`
     */
    this.detailContainerClass = 'pb-6 pb-md-9';
    /**
     * The percentage width of the master container from the overall component width.
     * Can be a number or `'default'`, which is 32% when {@link resizableParts} is active, otherwise 50%.
     */
    this.masterContainerWidth = 'default';
    /**
     * Emits on split changes the new percentage width of the master container from
     * the overall container width.
     */
    this.masterContainerWidthChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Sets the minimal width of the master container in pixel.
     */
    this.minMasterSize = 300;
    /**
     * Sets the minimal width of the detail container in pixel.
     */
    this.minDetailSize = 300;
    this.splitSizes = [this.actualMasterContainerWidth, 100 - this.actualMasterContainerWidth];
    // The max size to limit the master container in the static flex layout (if less than 50%), otherwise not set.
    this.maxMasterSize = this.getMaxSize(0);
    // The max size to limit the detail container in the static flex layout (if less than 50%), otherwise not set.
    this.maxDetailSize = this.getMaxSize(1);
    this.animate = false;
    this.opacity = '0';
  }
  ngOnInit() {
    this.resizeSubs = this.resizeObserver.observe(this.elementRef.nativeElement, 100, true).subscribe(dimensions => this.determineLayout(dimensions));
  }
  ngOnChanges(changes) {
    if (changes.detailsActive) {
      this.doAnimation(changes.detailsActive.currentValue);
    }
    if (changes.masterContainerWidth || changes.resizableParts) {
      this.splitSizes = [this.actualMasterContainerWidth, 100 - this.actualMasterContainerWidth];
      this.maxMasterSize = this.getMaxSize(0);
      this.maxDetailSize = this.getMaxSize(1);
    }
  }
  ngOnDestroy() {
    this.resizeSubs?.unsubscribe();
  }
  onSplitSizesChange(sizes) {
    this.masterContainerWidth = sizes[0];
    this.masterContainerWidthChange.emit(this.actualMasterContainerWidth);
  }
  detailsBackClicked() {
    this.detailsActive = false;
    this.doAnimation(false);
  }
  /**
   * Get the max size to limit in the static flex layout (if less than 50%), otherwise not set
   */
  getMaxSize(part) {
    return this.resizableParts || this.masterContainerWidth === 'default' || !this.hasLargeSize || this.splitSizes[part] > 50 ? '' : this.splitSizes[part] + '%';
  }
  determineLayout(dimensions) {
    const newHasLargeSize = dimensions.width >= this.largeLayoutBreakpoint;
    if (this.hasLargeSize !== newHasLargeSize) {
      this.hasLargeSize = newHasLargeSize;
      this.maxMasterSize = this.getMaxSize(0);
      this.maxDetailSize = this.getMaxSize(0);
      this.hasLargeSizeChange.emit(this.hasLargeSize);
      this.changeDetectorRef.markForCheck();
    }
    if (this.opacity === '0') {
      this.opacity = '';
      this.changeDetectorRef.markForCheck();
    }
  }
  doAnimation(detailsActive) {
    this.animate = true;
    setTimeout(() => {
      this.animate = false;
      this.changeDetectorRef.markForCheck();
    }, this.animationDuration);
    this.detailsActiveChange.emit(detailsActive);
  }
}
SiMasterDetailContainerComponent.ɵfac = function SiMasterDetailContainerComponent_Factory(t) {
  return new (t || SiMasterDetailContainerComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ResizeObserverService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiMasterDetailContainerComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiMasterDetailContainerComponent,
  selectors: [["si-master-detail-container"]],
  hostAttrs: [1, "si-layout-inner"],
  hostVars: 4,
  hostBindings: function SiMasterDetailContainerComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("opacity", ctx.opacity);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("animate", ctx.animate);
    }
  },
  inputs: {
    largeLayoutBreakpoint: "largeLayoutBreakpoint",
    detailsActive: "detailsActive",
    heading: "heading",
    truncateHeading: "truncateHeading",
    detailsHeading: "detailsHeading",
    resizableParts: "resizableParts",
    hideBackButton: "hideBackButton",
    detailsBackButtonText: "detailsBackButtonText",
    containerClass: "containerClass",
    masterContainerClass: "masterContainerClass",
    detailContainerClass: "detailContainerClass",
    masterContainerWidth: "masterContainerWidth",
    minMasterSize: "minMasterSize",
    minDetailSize: "minDetailSize",
    stateId: "stateId"
  },
  outputs: {
    hasLargeSizeChange: "hasLargeSizeChange",
    detailsActiveChange: "detailsActiveChange",
    masterContainerWidthChange: "masterContainerWidthChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  ngContentSelectors: _c29,
  decls: 9,
  vars: 2,
  consts: [[4, "ngIf", "ngIfElse"], ["staticTemplate", ""], ["headingTemplate", ""], ["masterTemplate", ""], ["detailTemplate", ""], [1, "master-detail-layout", "d-flex", "flex-column", 3, "ngClass"], [4, "ngTemplateOutlet"], ["orientation", "horizontal", 1, "w-100", "flex-grow-1", 3, "stateId", "sizes", "sizesChange"], ["scale", "none", 3, "showCollapseButton", "showHeader", "minSize", "stateId"], ["scale", "auto", 3, "showCollapseButton", "showHeader", "minSize", "stateId"], [1, "master-detail-container", "d-flex", "flex-grow-1"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "master-detail-heading page-top-title flex-grow-0 flex-shrink-0 text-secondary", 3, "text-truncate", 4, "ngIf"], [1, "master-detail-heading", "page-top-title", "flex-grow-0", "flex-shrink-0", "text-secondary"], [1, "master-container", "d-flex", "flex-column", 3, "ngClass"], [1, "master-search-actions", "d-flex", "align-items-center"], [1, "master-data-container", "d-flex"], [1, "detail-container", "d-flex", "flex-column", 3, "ngClass"], [1, "detail-heading-actions", "d-flex", "align-items-center"], ["type", "button", "class", "btn btn-circle btn-sm btn-secondary element-back", 3, "click", 4, "ngIf"], ["class", "detail-heading si-title-1 me-auto ms-6 my-auto text-truncate", 4, "ngIf"], ["type", "button", 1, "btn", "btn-circle", "btn-sm", "btn-secondary", "element-back", 3, "click"], [1, "visually-hidden"], [1, "detail-heading", "si-title-1", "me-auto", "ms-6", "my-auto", "text-truncate"]],
  template: function SiMasterDetailContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c28);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiMasterDetailContainerComponent_ng_container_0_Template, 8, 14, "ng-container", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiMasterDetailContainerComponent_ng_template_1_Template, 5, 14, "ng-template", null, 1, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiMasterDetailContainerComponent_ng_template_3_Template, 1, 1, "ng-template", null, 2, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiMasterDetailContainerComponent_ng_template_5_Template, 6, 6, "ng-template", null, 3, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiMasterDetailContainerComponent_ng_template_7_Template, 6, 8, "ng-template", null, 4, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    }
    if (rf & 2) {
      const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.resizableParts && ctx.hasLargeSize)("ngIfElse", _r1);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, SiSplitComponent, SiSplitPartComponent, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column;overflow-x:hidden;overflow-y:auto}[_nghost-%COMP%]     [slot=masterSearch]{flex:1 1 0}[_nghost-%COMP%]     [slot=masterSearch]+[slot=masterActions]{margin-inline-start:12px}[_nghost-%COMP%]     [slot=masterActions]{margin-inline-start:auto}[_nghost-%COMP%]     [slot=masterData], [_nghost-%COMP%]     [slot=details]{flex:1 1 0;min-block-size:0}[_nghost-%COMP%]     [slot=detailActions]{margin-inline-start:auto}[_nghost-%COMP%]     .detail-heading+[slot=detailActions]{margin-inline-start:12px}[_nghost-%COMP%]     si-split{--si-split-gutter-background: transparent;min-block-size:0}[_nghost-%COMP%]     si-split si-split-part, [_nghost-%COMP%]     si-split .si-split-container, [_nghost-%COMP%]     si-split .si-split-part-content{overflow:visible}.animate[_nghost-%COMP%]{--si-master-detail-animation-duration: calc(.5s * var(--element-animations-enabled, 1))}.master-detail-layout[_ngcontent-%COMP%]{overflow-x:hidden;position:relative}.master-detail-layout.large-size[_ngcontent-%COMP%]{--si-master-detail-container-width: 100%;--si-master-detail-container-transition: none;--si-master-detail-container-transform: none;--si-master-detail-transition: none;--si-master-detail-opacity: 1;--si-master-detail-pointer-events: auto}.master-detail-heading[_ngcontent-%COMP%]{margin-block-end:20px}.master-detail-container[_ngcontent-%COMP%]{--si-master-detail-transition: opacity var(--si-master-detail-animation-duration, 0) ease-in-out;--si-master-detail-detail-opacity: 0;--si-master-detail-detail-pointer-events: none;inline-size:var(--si-master-detail-container-width, 200%);transform:var(--si-master-detail-container-transform, none);transform-origin:top left;transition:var(--si-master-detail-container-transition, transform var(--si-master-detail-animation-duration, 0) ease-in-out)}.master-detail-container.details-active[_ngcontent-%COMP%]{--si-master-detail-container-transform: translateX(-50%);--si-master-detail-master-opacity: 0;--si-master-detail-detail-opacity: 1;--si-master-detail-master-pointer-events: none;--si-master-detail-detail-pointer-events: auto}.master-detail-layout[_ngcontent-%COMP%], .master-detail-container[_ngcontent-%COMP%], .master-container[_ngcontent-%COMP%], .detail-container[_ngcontent-%COMP%], .master-data-container[_ngcontent-%COMP%]{flex:1 1 0;min-block-size:0}.master-container[_ngcontent-%COMP%], .detail-container[_ngcontent-%COMP%]{transition:var(--si-master-detail-transition, none)}.master-container[_ngcontent-%COMP%]{opacity:var(--si-master-detail-opacity, var(--si-master-detail-master-opacity, 1));pointer-events:var(--si-master-detail-pointer-events, var(--si-master-detail-master-pointer-events, auto))}.detail-container[_ngcontent-%COMP%]{opacity:var(--si-master-detail-opacity, var(--si-master-detail-detail-opacity, 1));pointer-events:var(--si-master-detail-pointer-events, var(--si-master-detail-detail-pointer-events, auto))}.master-search-actions[_ngcontent-%COMP%], .detail-heading-actions[_ngcontent-%COMP%]{min-block-size:32px;margin-block-end:12px}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiMasterDetailContainerComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-master-detail-container',
      host: {
        class: 'si-layout-inner'
      },
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<ng-container *ngIf=\"resizableParts && hasLargeSize; else staticTemplate\">\n  <div\n    class=\"master-detail-layout d-flex flex-column\"\n    [ngClass]=\"containerClass\">\n    <ng-container *ngTemplateOutlet=\"headingTemplate\"></ng-container>\n    <si-split\n      class=\"w-100 flex-grow-1\"\n      orientation=\"horizontal\"\n      [stateId]=\"stateId\"\n      [sizes]=\"splitSizes\"\n      (sizesChange)=\"onSplitSizesChange($event)\">\n      <si-split-part\n        [showCollapseButton]=\"false\"\n        [showHeader]=\"false\"\n        [minSize]=\"minMasterSize\"\n        scale=\"none\"\n        [stateId]=\"masterStateId\"\n      >\n        <ng-container *ngTemplateOutlet=\"masterTemplate\"></ng-container>\n      </si-split-part>\n      <si-split-part\n        [showCollapseButton]=\"false\"\n        [showHeader]=\"false\"\n        [minSize]=\"minDetailSize\"\n        scale=\"auto\"\n        [stateId]=\"detailStateId\"\n      >\n        <ng-container *ngTemplateOutlet=\"detailTemplate\"></ng-container>\n      </si-split-part>\n    </si-split>\n  </div>\n</ng-container>\n\n<ng-template #staticTemplate>\n  <div\n    class=\"master-detail-layout d-flex flex-column\"\n    [ngClass]=\"containerClass\"\n    [class.large-size]=\"hasLargeSize\">\n    <ng-container *ngTemplateOutlet=\"headingTemplate\"></ng-container>\n    <div\n      class=\"master-detail-container d-flex flex-grow-1\"\n      [class.details-active]=\"detailsActive && !hasLargeSize\">\n      <ng-container *ngTemplateOutlet=\"masterTemplate; context: { customClass: hasLargeSize ? 'col-3 ps-0 pe-4' : 'col-6 px-0' }\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"detailTemplate; context: { customClass: hasLargeSize ? 'col-9 ps-4 pe-0' : 'col-6 px-0' }\"></ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<!-- Templates -->\n<ng-template #headingTemplate>\n  <h2\n    *ngIf=\"heading\"\n    class=\"master-detail-heading page-top-title flex-grow-0 flex-shrink-0 text-secondary\"\n    [class.text-truncate]=\"truncateHeading\">{{ heading | translate }}</h2>\n</ng-template>\n\n<ng-template #masterTemplate let-customClass=\"customClass\">\n  <div\n    class=\"master-container d-flex flex-column\"\n    [ngClass]=\"[\n      masterContainerClass,\n      (customClass ? customClass : '')\n    ]\"\n    [style.max-inline-size]=\"maxMasterSize\"\n  >\n    <div class=\"master-search-actions d-flex align-items-center\">\n      <ng-content select=\"[slot=masterSearch]\"></ng-content>\n      <ng-content select=\"[slot=masterActions]\"></ng-content>\n    </div>\n    <div class=\"master-data-container d-flex\">\n      <ng-content select=\"[slot=masterData]\"></ng-content>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #detailTemplate let-customClass=\"customClass\">\n  <div\n    class=\"detail-container d-flex flex-column\"\n    [ngClass]=\"[\n      detailContainerClass,\n      (customClass ? customClass : '')\n    ]\"\n    [style.max-inline-size]=\"maxDetailSize\"\n   >\n    <div class=\"detail-heading-actions d-flex align-items-center\">\n      <button\n        *ngIf=\"!this.hasLargeSize && !this.hideBackButton\"\n        type=\"button\"\n        class=\"btn btn-circle btn-sm btn-secondary element-back\"\n        (click)=\"detailsBackClicked()\"\n      ><span class=\"visually-hidden\">{{ detailsBackButtonText | translate }}</span></button>\n      <span\n        *ngIf=\"detailsHeading\"\n        class=\"detail-heading si-title-1 me-auto ms-6 my-auto text-truncate\">{{ detailsHeading | translate }}</span>\n      <ng-content select=\"[slot=detailActions]\"></ng-content>\n    </div>\n    <ng-content select=\"[slot=details]\"></ng-content>\n  </div>\n</ng-template>\n",
      styles: [":host{display:flex;flex-direction:column;overflow-x:hidden;overflow-y:auto}:host ::ng-deep [slot=masterSearch]{flex:1 1 0}:host ::ng-deep [slot=masterSearch]+[slot=masterActions]{margin-inline-start:12px}:host ::ng-deep [slot=masterActions]{margin-inline-start:auto}:host ::ng-deep [slot=masterData],:host ::ng-deep [slot=details]{flex:1 1 0;min-block-size:0}:host ::ng-deep [slot=detailActions]{margin-inline-start:auto}:host ::ng-deep .detail-heading+[slot=detailActions]{margin-inline-start:12px}:host ::ng-deep si-split{--si-split-gutter-background: transparent;min-block-size:0}:host ::ng-deep si-split si-split-part,:host ::ng-deep si-split .si-split-container,:host ::ng-deep si-split .si-split-part-content{overflow:visible}:host.animate{--si-master-detail-animation-duration: calc(.5s * var(--element-animations-enabled, 1))}.master-detail-layout{overflow-x:hidden;position:relative}.master-detail-layout.large-size{--si-master-detail-container-width: 100%;--si-master-detail-container-transition: none;--si-master-detail-container-transform: none;--si-master-detail-transition: none;--si-master-detail-opacity: 1;--si-master-detail-pointer-events: auto}.master-detail-heading{margin-block-end:20px}.master-detail-container{--si-master-detail-transition: opacity var(--si-master-detail-animation-duration, 0) ease-in-out;--si-master-detail-detail-opacity: 0;--si-master-detail-detail-pointer-events: none;inline-size:var(--si-master-detail-container-width, 200%);transform:var(--si-master-detail-container-transform, none);transform-origin:top left;transition:var(--si-master-detail-container-transition, transform var(--si-master-detail-animation-duration, 0) ease-in-out)}.master-detail-container.details-active{--si-master-detail-container-transform: translateX(-50%);--si-master-detail-master-opacity: 0;--si-master-detail-detail-opacity: 1;--si-master-detail-master-pointer-events: none;--si-master-detail-detail-pointer-events: auto}.master-detail-layout,.master-detail-container,.master-container,.detail-container,.master-data-container{flex:1 1 0;min-block-size:0}.master-container,.detail-container{transition:var(--si-master-detail-transition, none)}.master-container{opacity:var(--si-master-detail-opacity, var(--si-master-detail-master-opacity, 1));pointer-events:var(--si-master-detail-pointer-events, var(--si-master-detail-master-pointer-events, auto))}.detail-container{opacity:var(--si-master-detail-opacity, var(--si-master-detail-detail-opacity, 1));pointer-events:var(--si-master-detail-pointer-events, var(--si-master-detail-detail-pointer-events, auto))}.master-search-actions,.detail-heading-actions{min-block-size:32px;margin-block-end:12px}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: ResizeObserverService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    largeLayoutBreakpoint: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    hasLargeSizeChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    detailsActive: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    detailsActiveChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    truncateHeading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    detailsHeading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    resizableParts: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    hideBackButton: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    detailsBackButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    containerClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    masterContainerClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    detailContainerClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    masterContainerWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    masterContainerWidthChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    minMasterSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    minDetailSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    stateId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    animate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.animate']
    }],
    opacity: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['style.opacity']
    }]
  });
})();
class SiMasterDetailContainerModule {}
SiMasterDetailContainerModule.ɵfac = function SiMasterDetailContainerModule_Factory(t) {
  return new (t || SiMasterDetailContainerModule)();
};
SiMasterDetailContainerModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiMasterDetailContainerModule
});
SiMasterDetailContainerModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiSplitModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiMasterDetailContainerModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [SiMasterDetailContainerComponent],
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiSplitModule, SiTranslateModule],
      exports: [SiMasterDetailContainerComponent]
    }]
  }], null, null);
})();
var AlertDialogResult;
(function (AlertDialogResult) {
  AlertDialogResult[AlertDialogResult["Confirm"] = 0] = "Confirm";
})(AlertDialogResult || (AlertDialogResult = {}));
var EditAbortDialogResult;
(function (EditAbortDialogResult) {
  EditAbortDialogResult[EditAbortDialogResult["Save"] = 0] = "Save";
  EditAbortDialogResult[EditAbortDialogResult["Abort"] = 1] = "Abort";
  EditAbortDialogResult[EditAbortDialogResult["Cancel"] = 2] = "Cancel";
})(EditAbortDialogResult || (EditAbortDialogResult = {}));
var ConfirmationDialogResult;
(function (ConfirmationDialogResult) {
  ConfirmationDialogResult[ConfirmationDialogResult["Confirm"] = 0] = "Confirm";
  ConfirmationDialogResult[ConfirmationDialogResult["Decline"] = 1] = "Decline";
})(ConfirmationDialogResult || (ConfirmationDialogResult = {}));
var DeleteConfirmationDialogResult;
(function (DeleteConfirmationDialogResult) {
  DeleteConfirmationDialogResult[DeleteConfirmationDialogResult["Delete"] = 0] = "Delete";
  DeleteConfirmationDialogResult[DeleteConfirmationDialogResult["Cancel"] = 1] = "Cancel";
})(DeleteConfirmationDialogResult || (DeleteConfirmationDialogResult = {}));
class SiAlertDialogComponent {
  constructor() {
    this.heading = '';
    this.message = '';
    this.confirmBtnName = 'OK';
    this.translationParams = {};
    this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  onConfirm() {
    this.closed.emit(AlertDialogResult.Confirm);
  }
}
SiAlertDialogComponent.ɵfac = function SiAlertDialogComponent_Factory(t) {
  return new (t || SiAlertDialogComponent)();
};
SiAlertDialogComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiAlertDialogComponent,
  selectors: [["si-alert-dialog"]],
  inputs: {
    titleId: "titleId",
    heading: "heading",
    message: "message",
    confirmBtnName: "confirmBtnName",
    translationParams: "translationParams"
  },
  outputs: {
    closed: "closed"
  },
  decls: 13,
  vars: 15,
  consts: [[1, "modal-header"], [1, "modal-title", 3, "id"], ["type", "button", 1, "btn", "btn-circle", "btn-sm", "btn-ghost", "element-cancel", 3, "click"], [1, "modal-body", "text-pre-wrap", "text-break"], [1, "modal-footer"], ["type", "button", 1, "btn", "btn-primary", 3, "click"]],
  template: function SiAlertDialogComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "span", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "button", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiAlertDialogComponent_Template_button_click_4_listener() {
        return ctx.onConfirm();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](8, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 4)(10, "button", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiAlertDialogComponent_Template_button_click_10_listener() {
        return ctx.onConfirm();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](11);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](12, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx.titleId);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](3, 5, ctx.heading, ctx.translationParams));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 8, ctx.confirmBtnName));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](8, 10, ctx.message, ctx.translationParams));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](12, 13, ctx.confirmBtnName));
    }
  },
  dependencies: [SiTranslatePipe],
  encapsulation: 2,
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiAlertDialogComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-alert-dialog',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div class=\"modal-header\">\n  <span class=\"modal-title\" [id]=\"titleId\">{{ heading | translate:translationParams }}</span>\n  <button\n    type=\"button\"\n    class=\"btn btn-circle btn-sm btn-ghost element-cancel\"\n    [attr.aria-label]=\"confirmBtnName | translate\"\n    (click)=\"onConfirm()\"\n  > </button>\n</div>\n<div class=\"modal-body text-pre-wrap text-break\">{{ message | translate:translationParams }}</div>\n<div class=\"modal-footer\">\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"onConfirm()\">{{ confirmBtnName | translate }}</button>\n</div>\n"
    }]
  }], null, {
    titleId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    message: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    confirmBtnName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    translationParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    closed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiConfirmationDialogComponent {
  constructor() {
    this.heading = '';
    this.message = '';
    this.confirmBtnName = 'Yes';
    this.declineBtnName = 'No';
    this.translationParams = {};
    this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  onConfirm() {
    this.closed.emit(ConfirmationDialogResult.Confirm);
  }
  onDecline() {
    this.closed.emit(ConfirmationDialogResult.Decline);
  }
}
SiConfirmationDialogComponent.ɵfac = function SiConfirmationDialogComponent_Factory(t) {
  return new (t || SiConfirmationDialogComponent)();
};
SiConfirmationDialogComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiConfirmationDialogComponent,
  selectors: [["si-confirmation-dialog"]],
  inputs: {
    titleId: "titleId",
    heading: "heading",
    message: "message",
    confirmBtnName: "confirmBtnName",
    declineBtnName: "declineBtnName",
    translationParams: "translationParams"
  },
  outputs: {
    closed: "closed"
  },
  decls: 16,
  vars: 18,
  consts: [[1, "modal-header"], [1, "modal-title", 3, "id"], ["type", "button", 1, "btn", "btn-circle", "btn-sm", "btn-ghost", "element-cancel", 3, "click"], [1, "modal-body", "text-pre-wrap", "text-break"], [1, "modal-footer"], ["type", "button", 1, "btn", "btn-secondary", 3, "click"], ["type", "button", 1, "btn", "btn-primary", 3, "click"]],
  template: function SiConfirmationDialogComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "span", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "button", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiConfirmationDialogComponent_Template_button_click_4_listener() {
        return ctx.onDecline();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](8, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 4)(10, "button", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiConfirmationDialogComponent_Template_button_click_10_listener() {
        return ctx.onDecline();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](11);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](12, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "button", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiConfirmationDialogComponent_Template_button_click_13_listener() {
        return ctx.onConfirm();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](14);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](15, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx.titleId);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](3, 6, ctx.heading, ctx.translationParams));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 9, ctx.declineBtnName));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](8, 11, ctx.message, ctx.translationParams));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](12, 14, ctx.declineBtnName));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](15, 16, ctx.confirmBtnName));
    }
  },
  dependencies: [SiTranslatePipe],
  encapsulation: 2,
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiConfirmationDialogComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-confirmation-dialog',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div class=\"modal-header\">\n  <span class=\"modal-title\" [id]=\"titleId\">{{ heading | translate:translationParams }}</span>\n  <button\n    type=\"button\"\n    class=\"btn btn-circle btn-sm btn-ghost element-cancel\"\n    [attr.aria-label]=\"declineBtnName | translate\"\n    (click)=\"onDecline()\"\n  > </button>\n</div>\n<div class=\"modal-body text-pre-wrap text-break\">{{ message | translate:translationParams }}</div>\n<div class=\"modal-footer\">\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onDecline()\">{{ declineBtnName | translate }}</button>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"onConfirm()\">{{ confirmBtnName | translate }}</button>\n</div>\n"
    }]
  }], null, {
    titleId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    message: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    confirmBtnName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    declineBtnName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    translationParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    closed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiDeleteConfirmationDialogComponent {
  constructor() {
    this.heading = '';
    this.message = 'Do you really want to delete the selected elements?';
    this.deleteBtnName = 'Delete';
    this.cancelBtnName = 'Cancel';
    this.translationParams = {};
    this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  onDelete() {
    this.closed.emit(DeleteConfirmationDialogResult.Delete);
  }
  onCancel() {
    this.closed.emit(DeleteConfirmationDialogResult.Cancel);
  }
}
SiDeleteConfirmationDialogComponent.ɵfac = function SiDeleteConfirmationDialogComponent_Factory(t) {
  return new (t || SiDeleteConfirmationDialogComponent)();
};
SiDeleteConfirmationDialogComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiDeleteConfirmationDialogComponent,
  selectors: [["si-delete-confirmation-dialog"]],
  inputs: {
    titleId: "titleId",
    heading: "heading",
    message: "message",
    deleteBtnName: "deleteBtnName",
    cancelBtnName: "cancelBtnName",
    translationParams: "translationParams"
  },
  outputs: {
    closed: "closed"
  },
  decls: 16,
  vars: 18,
  consts: [[1, "modal-header"], [1, "modal-title", 3, "id"], ["type", "button", 1, "btn", "btn-circle", "btn-sm", "btn-ghost", "element-cancel", 3, "click"], [1, "modal-body", "text-pre-wrap", "text-break"], [1, "modal-footer"], ["type", "button", 1, "btn", "btn-secondary", 3, "click"], ["type", "button", 1, "btn", "btn-danger", 3, "click"]],
  template: function SiDeleteConfirmationDialogComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "span", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "button", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDeleteConfirmationDialogComponent_Template_button_click_4_listener() {
        return ctx.onCancel();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](8, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 4)(10, "button", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDeleteConfirmationDialogComponent_Template_button_click_10_listener() {
        return ctx.onCancel();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](11);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](12, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "button", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiDeleteConfirmationDialogComponent_Template_button_click_13_listener() {
        return ctx.onDelete();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](14);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](15, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx.titleId);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](3, 6, ctx.heading, ctx.translationParams));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 9, ctx.cancelBtnName));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](8, 11, ctx.message, ctx.translationParams));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](12, 14, ctx.cancelBtnName));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](15, 16, ctx.deleteBtnName));
    }
  },
  dependencies: [SiTranslatePipe],
  encapsulation: 2,
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDeleteConfirmationDialogComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-delete-confirmation-dialog',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div class=\"modal-header\">\n  <span class=\"modal-title\" [id]=\"titleId\">{{ heading | translate:translationParams }}</span>\n  <button\n    type=\"button\"\n    class=\"btn btn-circle btn-sm btn-ghost element-cancel\"\n    [attr.aria-label]=\"cancelBtnName | translate\"\n    (click)=\"onCancel()\"\n  > </button>\n</div>\n<div class=\"modal-body text-pre-wrap text-break\">{{ message | translate:translationParams }}</div>\n<div class=\"modal-footer\">\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onCancel()\">{{ cancelBtnName | translate }}</button>\n  <button type=\"button\" class=\"btn btn-danger\" (click)=\"onDelete()\">{{ deleteBtnName | translate }}</button>\n</div>\n"
    }]
  }], null, {
    titleId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    message: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    deleteBtnName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    cancelBtnName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    translationParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    closed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiEditAbortDialogComponent {
  constructor() {
    this.heading = '';
    this.message = 'Do you want to save changes to the modified element?';
    this.saveBtnName = 'Save';
    this.abortBtnName = `Don't save`;
    this.cancelBtnName = 'Cancel';
    this.disableSave = false;
    this.disableSaveMessage = 'Do you want to discard the changes?';
    this.disableSaveAbortBtnName = `Discard`;
    this.translationParams = {};
    this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  onSave() {
    this.closed.emit(EditAbortDialogResult.Save);
  }
  onAbort() {
    this.closed.emit(EditAbortDialogResult.Abort);
  }
  onCancel() {
    this.closed.emit(EditAbortDialogResult.Cancel);
  }
}
SiEditAbortDialogComponent.ɵfac = function SiEditAbortDialogComponent_Factory(t) {
  return new (t || SiEditAbortDialogComponent)();
};
SiEditAbortDialogComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiEditAbortDialogComponent,
  selectors: [["si-edit-abort-dialog"]],
  inputs: {
    titleId: "titleId",
    heading: "heading",
    message: "message",
    saveBtnName: "saveBtnName",
    abortBtnName: "abortBtnName",
    cancelBtnName: "cancelBtnName",
    disableSave: "disableSave",
    disableSaveMessage: "disableSaveMessage",
    disableSaveAbortBtnName: "disableSaveAbortBtnName",
    translationParams: "translationParams"
  },
  outputs: {
    closed: "closed"
  },
  decls: 17,
  vars: 19,
  consts: [[1, "modal-header"], [1, "modal-title", 3, "id"], ["type", "button", 1, "btn", "btn-circle", "btn-sm", "btn-ghost", "element-cancel", 3, "click"], [1, "modal-body", "text-pre-wrap", "text-break"], [1, "modal-footer"], ["type", "button", 1, "btn", "btn-secondary", 3, "click"], ["type", "button", 1, "btn", "btn-danger", 3, "click"], ["type", "button", "class", "btn btn-primary", 3, "click", 4, "ngIf"], ["type", "button", 1, "btn", "btn-primary", 3, "click"]],
  template: function SiEditAbortDialogComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "span", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "button", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiEditAbortDialogComponent_Template_button_click_4_listener() {
        return ctx.onCancel();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](8, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 4)(10, "button", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiEditAbortDialogComponent_Template_button_click_10_listener() {
        return ctx.onCancel();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](11);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](12, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "button", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiEditAbortDialogComponent_Template_button_click_13_listener() {
        return ctx.onAbort();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](14);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](15, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](16, SiEditAbortDialogComponent_button_16_Template, 3, 3, "button", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx.titleId);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](3, 7, ctx.heading, ctx.translationParams));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 10, ctx.cancelBtnName));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](8, 12, !ctx.disableSave ? ctx.message : ctx.disableSaveMessage, ctx.translationParams));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](12, 15, ctx.cancelBtnName));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](15, 17, !ctx.disableSave ? ctx.abortBtnName : ctx.disableSaveAbortBtnName));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.disableSave);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiTranslatePipe],
  encapsulation: 2,
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiEditAbortDialogComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-edit-abort-dialog',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div class=\"modal-header\">\n  <span class=\"modal-title\" [id]=\"titleId\">{{ heading | translate:translationParams }}</span>\n  <button\n    type=\"button\"\n    class=\"btn btn-circle btn-sm btn-ghost element-cancel\"\n    [attr.aria-label]=\"cancelBtnName | translate\"\n    (click)=\"onCancel()\"\n  > </button>\n</div>\n<div class=\"modal-body text-pre-wrap text-break\">{{ (!disableSave ? message : disableSaveMessage) | translate:translationParams }}</div>\n<div class=\"modal-footer\">\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onCancel()\">{{ cancelBtnName | translate }}</button>\n  <button type=\"button\" class=\"btn btn-danger\" (click)=\"onAbort()\">{{ (!disableSave ? abortBtnName : disableSaveAbortBtnName) | translate }}</button>\n  <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"!disableSave\" (click)=\"onSave()\">{{ saveBtnName | translate }}</button>\n</div>\n"
    }]
  }], null, {
    titleId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    message: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    saveBtnName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    abortBtnName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    cancelBtnName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disableSave: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disableSaveMessage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disableSaveAbortBtnName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    translationParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    closed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
let idCounter$1 = 1;
const createModalConfig = inputs => {
  if (inputs) {
    Object.keys(inputs).forEach(k => inputs[k] === undefined && delete inputs[k]);
  } else {
    inputs = {};
  }
  const config = {
    initialState: inputs,
    ignoreBackdropClick: true,
    keyboard: false,
    animated: true,
    class: 'modal-dialog-centered'
  };
  const id = `__si-modal-id-${idCounter$1++}`;
  config.initialState.titleId = id;
  config.ariaLabelledBy = id;
  return config;
};
class ModalRef {
  constructor() {
    this.hidden = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.shown = new rxjs__WEBPACK_IMPORTED_MODULE_30__.ReplaySubject(1);
    this.data = {};
    this.ignoreBackdropClick = true;
    this.dialogClass = '';
    this.layer = 0;
    this.isCurrent = () => false;
    this.detach = () => {};
    this.hide = () => {};
  }
  get content() {
    return undefined;
  }
}
class SiModalComponent {
  constructor(modalRef, changeDetectorRef) {
    this.changeDetectorRef = changeDetectorRef;
    this.dialogClass = '';
    this.titleId = '';
    this.init = false;
    this.show = false;
    this.clickStartInDialog = false;
    this.modalRef = modalRef;
    this.titleId = modalRef.data?.ariaLabelledBy ?? '';
    this.dialogClass = modalRef.dialogClass ?? '';
  }
  ngOnInit() {
    this.init = true;
    this.showTimer = setTimeout(() => {
      this.show = true;
      this.changeDetectorRef.markForCheck();
    }, this.animationTime(150));
  }
  ngAfterViewInit() {
    this.modalContainerRef.nativeElement.querySelector('.modal-dialog').focus();
    setTimeout(() => this.modalRef?.shown.next(this.modalContainerRef));
  }
  ngOnDestroy() {
    this.hideBackdrop();
  }
  hideDialog() {
    if (!this.show) {
      return;
    }
    clearTimeout(this.showTimer);
    this.show = false;
    setTimeout(() => {
      this.hideBackdrop();
      this.changeDetectorRef.markForCheck();
      setTimeout(() => this.modalRef?.detach(), this.animationTime(150));
    }, this.animationTime(300));
    this.modalRef?.hidden.next();
    this.modalRef?.hidden.complete();
    this.changeDetectorRef.markForCheck();
  }
  showBackdrop() {
    if (this.modalRef?.data.animated !== false) {
      this.showBackdropClass = false;
      this.backdropTimer = setTimeout(() => {
        this.showBackdropClass = true;
        this.changeDetectorRef.markForCheck();
      }, 16);
    } else {
      this.showBackdropClass = true;
    }
    this.origBodyOverflow = document.body.style.overflow;
    document.body.style.overflow = 'hidden';
    this.changeDetectorRef.markForCheck();
  }
  hideBackdrop() {
    clearTimeout(this.backdropTimer);
    if (this.showBackdropClass !== undefined) {
      this.showBackdropClass = false;
    }
    if (this.origBodyOverflow !== undefined) {
      document.body.style.overflow = this.origBodyOverflow;
      this.origBodyOverflow = undefined;
    }
  }
  clickStarted(event) {
    this.clickStartInDialog = event.target !== this.modalContainerRef.nativeElement;
  }
  onClickStop(event) {
    const clickedInBackdrop = event.target === this.modalContainerRef.nativeElement && !this.clickStartInDialog;
    if (this.modalRef?.ignoreBackdropClick || !clickedInBackdrop) {
      this.clickStartInDialog = false;
      return;
    }
    // Called when backdrop close is allowed and user clicks on the backdrop
    this.hideDialog();
  }
  onEsc(event) {
    if (this.modalRef?.data.keyboard && this.modalRef?.isCurrent()) {
      event.preventDefault();
      this.hideDialog();
    }
  }
  animationTime(millis) {
    return this.modalRef?.data.animated !== false ? millis : 0;
  }
}
SiModalComponent.ɵfac = function SiModalComponent_Factory(t) {
  return new (t || SiModalComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ModalRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiModalComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiModalComponent,
  selectors: [["si-modal"]],
  viewQuery: function SiModalComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c30, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.modalContainerRef = _t.first);
    }
  },
  hostBindings: function SiModalComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mousedown", function SiModalComponent_mousedown_HostBindingHandler($event) {
        return ctx.clickStarted($event);
      })("mouseup", function SiModalComponent_mouseup_HostBindingHandler($event) {
        return ctx.onClickStop($event);
      })("keydown.esc", function SiModalComponent_keydown_esc_HostBindingHandler($event) {
        return ctx.onEsc($event);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveWindow"]);
    }
  },
  ngContentSelectors: _c1,
  decls: 2,
  vars: 2,
  consts: [["class", "modal-backdrop", 3, "fade", "show", 4, "ngIf"], ["role", "dialog", "class", "modal d-block", "aria-modal", "true", 3, "fade", "show", 4, "ngIf"], [1, "modal-backdrop"], ["role", "dialog", "aria-modal", "true", 1, "modal", "d-block"], ["modalContainer", ""], ["cdkTrapFocus", "", "tabindex", "-1", 1, "modal-dialog", 3, "ngClass"], [1, "modal-content"]],
  template: function SiModalComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiModalComponent_div_0_Template, 1, 4, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiModalComponent_div_1_Template, 5, 6, "div", 1);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.showBackdropClass !== undefined);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.init);
    }
  },
  dependencies: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_36__.CdkTrapFocus, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf],
  encapsulation: 2,
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiModalComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-modal',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div\n  *ngIf=\"showBackdropClass !== undefined\"\n  class=\"modal-backdrop\"\n  [class.fade]=\"modalRef.data?.animated !== false\"\n  [class.show]=\"showBackdropClass\"\n></div>\n<div\n  *ngIf=\"init\"\n  #modalContainer\n  role=\"dialog\"\n  class=\"modal d-block\"\n  [class.fade]=\"modalRef.data?.animated !== false\"\n  [class.show]=\"show\"\n  aria-modal=\"true\"\n  [attr.aria-labelledby]=\"titleId\"\n>\n  <div class=\"modal-dialog\" [ngClass]=\"dialogClass\" cdkTrapFocus tabindex=\"-1\">\n    <div class=\"modal-content\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n"
    }]
  }], function () {
    return [{
      type: ModalRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    modalContainerRef: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['modalContainer']
    }],
    clickStarted: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['mousedown', ['$event']]
    }],
    onClickStop: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['mouseup', ['$event']]
    }],
    onEsc: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['window:keydown.esc', ['$event']]
    }]
  });
})();
class ModalRefImpl extends ModalRef {
  get content() {
    return this.componentRef?.instance;
  }
  constructor(contentRef, layer, data, previousFocusElement) {
    super();
    this.contentRef = contentRef;
    this.layer = layer;
    this.data = data;
    this.ignoreBackdropClick = data.ignoreBackdropClick !== false;
    this.dialogClass = data?.class ?? '';
    this.previousFocusElement = previousFocusElement;
  }
}
class SiModalService {
  constructor(appRef, injector, environmentInjector) {
    this.appRef = appRef;
    this.injector = injector;
    this.environmentInjector = environmentInjector;
    this.modalsCount = 0;
  }
  show(content, config) {
    const modalRef = new ModalRefImpl(content, ++this.modalsCount, config, document.activeElement);
    const siModalRef = this.attachComponent(modalRef);
    modalRef.modalCompRef = siModalRef;
    modalRef.detach = () => this.detach(modalRef);
    modalRef.hide = () => siModalRef.instance.hideDialog();
    modalRef.isCurrent = () => modalRef.layer === this.modalsCount;
    if (this.modalsCount === 1) {
      siModalRef.instance.showBackdrop();
    }
    return modalRef;
  }
  attachComponent(modalRef) {
    const providers = [{
      provide: ModalRef,
      useValue: modalRef
    }];
    modalRef.data.providers?.forEach(p => providers.push(p));
    const injector = _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector.create({
      providers,
      parent: modalRef.data.injector ?? this.buildInjector()
    });
    const componentRef = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.createComponent)(SiModalComponent, {
      environmentInjector: this.environmentInjector,
      elementInjector: injector,
      projectableNodes: this.getContentProjectableNodes(injector, modalRef)
    });
    document.body.appendChild(componentRef.location.nativeElement);
    this.appRef.attachView(componentRef.hostView);
    return componentRef;
  }
  getContentProjectableNodes(injector, modalRef) {
    if (modalRef.contentRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef) {
      modalRef.viewRef = modalRef.contentRef.createEmbeddedView({
        modalRef,
        ...modalRef.data.initialState
      });
      this.appRef.attachView(modalRef.viewRef);
      return [modalRef.viewRef.rootNodes];
    }
    modalRef.componentRef = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.createComponent)(modalRef.contentRef, {
      environmentInjector: this.environmentInjector,
      elementInjector: injector
    });
    Object.assign(modalRef.componentRef.instance, modalRef.data?.initialState); // set initial @Input()s
    modalRef.componentRef.changeDetectorRef.detectChanges();
    this.appRef.attachView(modalRef.componentRef.hostView);
    return [[modalRef.componentRef.location.nativeElement]];
  }
  detach(modalRef) {
    const ref = modalRef;
    if (ref.modalCompRef) {
      ref.modalCompRef?.destroy();
      ref.modalCompRef = undefined;
      ref.componentRef?.destroy();
      ref.componentRef = undefined;
      ref.viewRef?.destroy();
      ref.viewRef = undefined;
      ref.shown.complete();
      this.modalsCount--;
    }
    if (ref.previousFocusElement?.focus) {
      ref.previousFocusElement.focus();
    }
  }
  // TODO remove once translation must be defined at application start
  // Notification service is provided in 'root'. If no translation is defined, SiNoTranslateService is not provided
  buildInjector() {
    let injector = this.injector;
    if (!injector.get(SiTranslateService, null)) {
      injector = _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector.create({
        providers: [{
          provide: SiTranslateService,
          useClass: SiNoTranslateService,
          deps: []
        }],
        parent: this.injector
      });
    }
    return injector;
  }
}
SiModalService.ɵfac = function SiModalService_Factory(t) {
  return new (t || SiModalService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ApplicationRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.EnvironmentInjector));
};
SiModalService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiModalService,
  factory: SiModalService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiModalService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ApplicationRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.EnvironmentInjector
    }];
  }, null);
})();

/**
 * The service provides convenient methods to show common modal dialogs.
 * All return an observable, which emit the dialog results. After emitting,
 * the observables complete. Therefore, clients do not need to unsubscribe.
 */
class SiActionDialogService {
  constructor(modalService) {
    this.modalService = modalService;
  }
  showAlertDialog(message, heading, confirmBtnName, translationParams) {
    return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(subscriber => {
      const config = createModalConfig({
        message,
        heading,
        confirmBtnName,
        translationParams
      });
      const modalRef = this.modalService.show(SiAlertDialogComponent, config);
      subscriber.__modalRef = modalRef;
      const subscription = modalRef.content.closed.subscribe(alertResult => {
        subscription.unsubscribe();
        modalRef.hide();
        subscriber.next(alertResult);
        subscriber.complete();
      });
      return () => this.close(subscription, modalRef);
    });
  }
  showConfirmationDialog(message, heading, confirmBtnName, declineBtnName, translationParams) {
    return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(subscriber => {
      const config = createModalConfig({
        message,
        heading,
        confirmBtnName,
        declineBtnName,
        translationParams
      });
      const modalRef = this.modalService.show(SiConfirmationDialogComponent, config);
      subscriber.__modalRef = modalRef;
      const subscription = modalRef.content.closed.subscribe(confirmationResult => {
        subscription.unsubscribe();
        modalRef.hide();
        subscriber.next(confirmationResult);
        subscriber.complete();
      });
      return () => this.close(subscription, modalRef);
    });
  }
  showEditAbortDialog(disableSave, message, heading, saveBtnName, abortBtnName, cancelBtnName, disableSaveMessage, disableSaveAbortBtnName, translationParams) {
    return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(subscriber => {
      const config = createModalConfig({
        message,
        heading,
        saveBtnName,
        abortBtnName,
        cancelBtnName,
        disableSave,
        disableSaveMessage,
        disableSaveAbortBtnName,
        translationParams
      });
      const modalRef = this.modalService.show(SiEditAbortDialogComponent, config);
      subscriber.__modalRef = modalRef;
      const subscription = modalRef.content.closed.subscribe(confirmationResult => {
        subscription.unsubscribe();
        modalRef.hide();
        subscriber.next(confirmationResult);
        subscriber.complete();
      });
      return () => this.close(subscription, modalRef);
    });
  }
  showDeleteConfirmationDialog(message, heading, deleteBtnName, cancelBtnName, translationParams) {
    return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(subscriber => {
      const config = createModalConfig({
        message,
        heading,
        deleteBtnName,
        cancelBtnName,
        translationParams
      });
      const modalRef = this.modalService.show(SiDeleteConfirmationDialogComponent, config);
      subscriber.__modalRef = modalRef;
      const subscription = modalRef.content.closed.subscribe(confirmationResult => {
        subscription.unsubscribe();
        modalRef.hide();
        subscriber.next(confirmationResult);
        subscriber.complete();
      });
      return () => this.close(subscription, modalRef);
    });
  }
  close(subscription, modalRef) {
    if (!subscription.closed) {
      subscription.unsubscribe();
      modalRef.detach();
    }
  }
}
SiActionDialogService.ɵfac = function SiActionDialogService_Factory(t) {
  return new (t || SiActionDialogService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](SiModalService));
};
SiActionDialogService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiActionDialogService,
  factory: SiActionDialogService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiActionDialogService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
  }], function () {
    return [{
      type: SiModalService
    }];
  }, null);
})();
class SiModalModule {}
SiModalModule.ɵfac = function SiModalModule_Factory(t) {
  return new (t || SiModalModule)();
};
SiModalModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiModalModule
});
SiModalModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_36__.A11yModule, _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiModalModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_36__.A11yModule, _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule],
      declarations: [SiModalComponent]
    }]
  }], null, null);
})();
class SiActionDialogModule {}
SiActionDialogModule.ɵfac = function SiActionDialogModule_Factory(t) {
  return new (t || SiActionDialogModule)();
};
SiActionDialogModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiActionDialogModule
});
SiActionDialogModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  providers: [SiActionDialogService],
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterModule, SiModalModule, SiSwitchModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiActionDialogModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [SiAlertDialogComponent, SiConfirmationDialogComponent, SiDeleteConfirmationDialogComponent, SiEditAbortDialogComponent],
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterModule, SiModalModule, SiSwitchModule, SiTranslateModule],
      providers: [SiActionDialogService]
    }]
  }], null, null);
})();
class SiColumnSelectionDialogComponent {
  constructor(liveAnnouncer, translateService) {
    this.liveAnnouncer = liveAnnouncer;
    this.translateService = translateService;
    this.hiddenText = 'Hidden';
    this.visibleText = 'Visible';
    this.restoreEnabled = false;
    this.translationParams = {};
    this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.tempHeaderData = [];
    this.visibleIds = [];
    this.trackByItem = (_index, item) => item;
  }
  ngOnInit() {
    this.createBackupData();
    this.visibleIds = this.columns.filter(column => column.visible).map(column => column.id);
  }
  submitColumnSelection() {
    this.closed.emit({
      type: 'ok',
      columns: this.columns
    });
  }
  cancelColumnSelection() {
    this.columns.length = 0;
    this.tempHeaderData.forEach(element => this.columns.push(element));
    this.closed.emit({
      type: 'cancel',
      columns: this.columns
    });
  }
  drop(event) {
    if (this.columns[event.currentIndex].draggable) {
      (0,_angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_39__.moveItemInArray)(this.columns, event.previousIndex, event.currentIndex);
      this.closed.emit({
        type: 'instant',
        columns: this.columns
      });
    }
  }
  restoreToDefault() {
    this.closed.emit({
      type: 'restoreDefault',
      columns: this.columns,
      updateColumns: columns => {
        this.columns = columns;
        this.createBackupData();
      }
    });
  }
  changeColumnVisibilityFromListbox({
    value
  }) {
    for (const column of this.columns) {
      column.visible = value.includes(column.id);
    }
    this.closed.emit({
      type: 'instant',
      columns: this.columns
    });
  }
  moveDown(index, event) {
    if (this.columns[index].draggable) {
      let targetIndex = index + 1;
      while (this.columns[targetIndex] && !this.columns[targetIndex].draggable) {
        targetIndex++;
      }
      if (targetIndex !== index && this.columns[targetIndex]?.draggable) {
        event.preventDefault();
        (0,_angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_39__.moveItemInArray)(this.columns, index, targetIndex);
        // When moving the first partially visible item down,
        // the browser tries to keep its position stable within the viewport by automatically scrolling down.
        // This behavior is not wanted here, so we restore the previous scroll after moving the item
        // TODO: check if this could be solved easier
        if (this.listOptions.get(index).element.getBoundingClientRect().top <= this.modalBodyElement.nativeElement.getBoundingClientRect().top) {
          const previousScrollTop = this.modalBodyElement.nativeElement.scrollTop;
          setTimeout(() => this.modalBodyElement.nativeElement.scrollTop = previousScrollTop);
        }
        // When moving the last visible element down, the scroll position is not adopted. So its scroll out of view.
        // We correct this manually by scrolling it back into view
        const targetElement = this.listOptions.get(targetIndex).element;
        if (targetElement.getBoundingClientRect().bottom > this.modalBodyElement.nativeElement.getBoundingClientRect().bottom) {
          targetElement.scrollIntoView({
            block: 'end'
          });
        }
        this.announceSuccessfulMove(targetIndex);
      } else {
        this.announceNotSuccessfulMove();
      }
    }
  }
  moveUp(index, event) {
    if (this.columns[index].draggable) {
      let targetIndex = index - 1;
      while (this.columns[targetIndex] && !this.columns[targetIndex].draggable) {
        targetIndex--;
      }
      if (targetIndex !== index && this.columns[targetIndex]?.draggable) {
        event.preventDefault();
        (0,_angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_39__.moveItemInArray)(this.columns, index, targetIndex);
        // it seems like this is only necessary for move up. Don't know why
        setTimeout(() => this.listOptions.get(targetIndex).focus());
        this.announceSuccessfulMove(targetIndex);
      } else {
        this.announceNotSuccessfulMove();
      }
    }
  }
  createBackupData() {
    this.tempHeaderData = this.columns.map(x => Object.assign({}, x));
  }
  announceSuccessfulMove(index) {
    this.announceMove(this.a11yItemMovedMessage, {
      ...this.translationParams,
      targetPosition: index + 1
    });
  }
  announceNotSuccessfulMove() {
    this.announceMove(this.a11yItemNotMovedMessage, this.translationParams);
  }
  announceMove(message, translationParams) {
    if (message) {
      this.translateService.translateAsync(message, translationParams).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.first)()).subscribe(translatedMessage => this.liveAnnouncer.announce(translatedMessage));
    }
  }
}
SiColumnSelectionDialogComponent.ɵfac = function SiColumnSelectionDialogComponent_Factory(t) {
  return new (t || SiColumnSelectionDialogComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_36__.LiveAnnouncer), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiTranslateService));
};
SiColumnSelectionDialogComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiColumnSelectionDialogComponent,
  selectors: [["si-column-selection-dialog"]],
  viewQuery: function SiColumnSelectionDialogComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c31, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_angular_cdk_listbox__WEBPACK_IMPORTED_MODULE_40__.CdkOption, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.modalBodyElement = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.listOptions = _t);
    }
  },
  inputs: {
    titleId: "titleId",
    heading: "heading",
    bodyTitle: "bodyTitle",
    submitBtnName: "submitBtnName",
    cancelBtnName: "cancelBtnName",
    restoreToDefaultBtnName: "restoreToDefaultBtnName",
    hiddenText: "hiddenText",
    visibleText: "visibleText",
    restoreEnabled: "restoreEnabled",
    columns: "columns",
    translationParams: "translationParams",
    listAriaLabel: "listAriaLabel",
    a11yItemMovedMessage: "a11yItemMovedMessage",
    a11yItemNotMovedMessage: "a11yItemNotMovedMessage"
  },
  outputs: {
    closed: "closed"
  },
  decls: 22,
  vars: 26,
  consts: [[1, "modal-header"], [1, "modal-title", 3, "id"], ["type", "button", 1, "btn", "btn-circle", "btn-sm", "btn-ghost", "element-cancel", 3, "click"], [1, "text-secondary", "px-8", "pb-5", "mb-0"], [1, "modal-body", "py-0"], ["modalBody", ""], ["cdkListbox", "", "cdkListboxMultiple", "", "cdkDropList", "", "aria-keyshortcuts", "Alt+ArrowUp Alt+ArrowDown", 3, "cdkListboxValue", "cdkListboxValueChange", "cdkDropListDropped"], ["cdkDrag", "", "class", "d-flex justify-content-between user-select-none my-4 mx-1 p-5 rounded-2 elevation-1 bg-base-1", 3, "cdkDragDisabled", "cdkOption", "cdkOptionDisabled", "keydown.alt.arrowUp", "keydown.alt.arrowDown", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "modal-footer"], ["type", "button", "class", "btn btn-secondary me-auto", 3, "click", 4, "ngIf"], ["type", "button", 1, "btn", "btn-secondary", 3, "click"], ["type", "button", 1, "btn", "btn-primary", 3, "click"], ["cdkDrag", "", 1, "d-flex", "justify-content-between", "user-select-none", "my-4", "mx-1", "p-5", "rounded-2", "elevation-1", "bg-base-1", 3, "cdkDragDisabled", "cdkOption", "cdkOptionDisabled", "keydown.alt.arrowUp", "keydown.alt.arrowDown"], [1, "d-flex", "align-items-center"], ["cdkDragHandle", "", "aria-hidden", "true", 1, "drag-handle", "element-menu", "me-5", "rounded-1"], [1, "si-body-2"], ["aria-hidden", "true", 1, "d-flex", "align-items-center", "form-check", "form-switch"], [1, "si-body-2", "me-4", "form-check-label"], ["type", "checkbox", 1, "form-check-input"], ["type", "button", 1, "btn", "btn-secondary", "me-auto", 3, "click"]],
  template: function SiColumnSelectionDialogComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "span", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "button", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiColumnSelectionDialogComponent_Template_button_click_4_listener() {
        return ctx.cancelColumnSelection();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "p", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](8, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 4, 5)(11, "div", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("cdkListboxValueChange", function SiColumnSelectionDialogComponent_Template_div_cdkListboxValueChange_11_listener($event) {
        return ctx.changeColumnVisibilityFromListbox($event);
      })("cdkDropListDropped", function SiColumnSelectionDialogComponent_Template_div_cdkDropListDropped_11_listener($event) {
        return ctx.drop($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](12, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](13, SiColumnSelectionDialogComponent_div_13_Template, 11, 22, "div", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "div", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](15, SiColumnSelectionDialogComponent_button_15_Template, 3, 3, "button", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "button", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiColumnSelectionDialogComponent_Template_button_click_16_listener() {
        return ctx.cancelColumnSelection();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](17);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](18, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](19, "button", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiColumnSelectionDialogComponent_Template_button_click_19_listener() {
        return ctx.submitColumnSelection();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](20);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](21, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx.titleId);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](3, 11, ctx.heading, ctx.translationParams));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 14, ctx.cancelBtnName));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](8, 16, ctx.bodyTitle, ctx.translationParams));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("cdkListboxValue", ctx.visibleIds);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind2"](12, 19, ctx.listAriaLabel, ctx.translationParams));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.columns)("ngForTrackBy", ctx.trackByItem);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.restoreEnabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](18, 22, ctx.cancelBtnName), " ");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](21, 24, ctx.submitBtnName), " ");
    }
  },
  dependencies: [_angular_cdk_listbox__WEBPACK_IMPORTED_MODULE_40__.CdkListbox, _angular_cdk_listbox__WEBPACK_IMPORTED_MODULE_40__.CdkOption, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_39__.CdkDropList, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_39__.CdkDrag, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_39__.CdkDragHandle, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{-webkit-user-select:none;user-select:none;max-block-size:100%;overflow:hidden;display:flex;flex-direction:column}.disabled[_ngcontent-%COMP%]{color:var(--element-text-disabled)}.drag-handle[_ngcontent-%COMP%]{font-size:24px;color:var(--element-ui-2)}.drag-handle.disabled[_ngcontent-%COMP%]{color:var(--element-ui-3)}.drag-handle.draggable[_ngcontent-%COMP%]{cursor:pointer}.drag-handle.draggable[_ngcontent-%COMP%]:hover, .drag-handle.draggable.hover[_ngcontent-%COMP%]{background:var(--element-base-0)}.cdk-drag-placeholder[_ngcontent-%COMP%]{opacity:0}.cdk-drag-preview[_ngcontent-%COMP%]   .drag-handle[_ngcontent-%COMP%]{color:var(--element-ui-5);background-color:var(--element-ui-3)}.switch[_ngcontent-%COMP%]{margin:0}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiColumnSelectionDialogComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-column-selection-dialog',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div class=\"modal-header\">\n  <span class=\"modal-title\" [id]=\"titleId\">{{ heading | translate: translationParams }}</span>\n  <button\n    type=\"button\"\n    class=\"btn btn-circle btn-sm btn-ghost element-cancel\"\n    [attr.aria-label]=\"cancelBtnName | translate\"\n    (click)=\"cancelColumnSelection()\"\n  ></button>\n</div>\n<p class=\"text-secondary px-8 pb-5 mb-0\">{{ bodyTitle | translate: translationParams }}</p>\n<div #modalBody class=\"modal-body py-0\">\n  <div\n    cdkListbox\n    cdkListboxMultiple\n    [cdkListboxValue]=\"visibleIds\"\n    cdkDropList\n    aria-keyshortcuts=\"Alt+ArrowUp Alt+ArrowDown\"\n    [attr.aria-label]=\"listAriaLabel | translate:translationParams\"\n    (cdkListboxValueChange)=\"changeColumnVisibilityFromListbox($event)\"\n    (cdkDropListDropped)=\"drop($event)\">\n    <div\n      *ngFor=\"let headerContent of columns;let index = index; trackBy: trackByItem;\"\n      [cdkDragDisabled]=\"!headerContent.draggable\"\n      cdkDrag\n      [cdkOption]=\"headerContent.id\"\n      [cdkOptionDisabled]=\"headerContent.disabled\"\n      class=\"d-flex justify-content-between user-select-none my-4 mx-1 p-5 rounded-2 elevation-1 bg-base-1\"\n      (keydown.alt.arrowUp)=\"moveUp(index, $event)\"\n      (keydown.alt.arrowDown)=\"moveDown(index, $event)\"\n    >\n      <div class=\"d-flex align-items-center\">\n        <div\n          cdkDragHandle\n          aria-hidden=\"true\"\n          class=\"drag-handle element-menu me-5 rounded-1\"\n          [class.disabled]=\"headerContent.disabled\"\n          [class.draggable]=\"headerContent.draggable\"\n        ></div>\n        <span\n          class=\"si-body-2\"\n          [class.disabled]=\"headerContent.disabled\"\n        >{{ headerContent.title | translate: translationParams }}</span>\n      </div>\n      <div class=\"d-flex align-items-center form-check form-switch\" aria-hidden=\"true\">\n        <span\n          class=\"si-body-2 me-4 form-check-label\"\n          [class.disabled]=\"headerContent.disabled\"\n        >{{ (headerContent.visible ? visibleText : hiddenText) | translate }}</span>\n        <span\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          [class.disabled]=\"headerContent.disabled\"\n          [class.checked]=\"headerContent.visible\"\n        ></span>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"modal-footer\">\n  <button *ngIf=\"restoreEnabled\" type=\"button\" class=\"btn btn-secondary me-auto\" (click)=\"restoreToDefault()\">\n    {{ restoreToDefaultBtnName | translate }}\n  </button>\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancelColumnSelection()\">\n    {{ cancelBtnName | translate }}\n  </button>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitColumnSelection()\">\n    {{ submitBtnName | translate }}\n  </button>\n</div>\n",
      styles: [":host{-webkit-user-select:none;user-select:none;max-block-size:100%;overflow:hidden;display:flex;flex-direction:column}.disabled{color:var(--element-text-disabled)}.drag-handle{font-size:24px;color:var(--element-ui-2)}.drag-handle.disabled{color:var(--element-ui-3)}.drag-handle.draggable{cursor:pointer}.drag-handle.draggable:hover,.drag-handle.draggable.hover{background:var(--element-base-0)}.cdk-drag-placeholder{opacity:0}.cdk-drag-preview .drag-handle{color:var(--element-ui-5);background-color:var(--element-ui-3)}.switch{margin:0}\n"]
    }]
  }], function () {
    return [{
      type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_36__.LiveAnnouncer
    }, {
      type: SiTranslateService
    }];
  }, {
    titleId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    bodyTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    submitBtnName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    cancelBtnName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    restoreToDefaultBtnName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    hiddenText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    visibleText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    restoreEnabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    columns: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    translationParams: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    listAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    a11yItemMovedMessage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    a11yItemNotMovedMessage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    closed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    listOptions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChildren,
      args: [_angular_cdk_listbox__WEBPACK_IMPORTED_MODULE_40__.CdkOption]
    }],
    modalBodyElement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['modalBody', {
        static: true
      }]
    }]
  });
})();
class SiColumnSelectionDialogService {
  constructor(modalService) {
    this.modalService = modalService;
  }
  /**
   * @deprecated use {showColumnSelectionDialog(config: SiColumnSelectionDialogueConfig)} instead
   */
  showColumnSelectionDialog(headingOrConfig, bodyTitle, submitBtnName, cancelBtnName, columns, translationParams, restoreToDefaultBtnName, restoreEnabled, visibleText, hiddenText) {
    return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(subscriber => {
      let config;
      if (typeof headingOrConfig === 'object') {
        config = createModalConfig(headingOrConfig);
      } else {
        config = createModalConfig({
          heading: headingOrConfig,
          bodyTitle,
          submitBtnName,
          cancelBtnName,
          visibleText,
          hiddenText,
          columns,
          translationParams,
          restoreToDefaultBtnName,
          restoreEnabled
        });
      }
      config.class += ' modal-dialog-scrollable';
      const modalRef = this.modalService.show(SiColumnSelectionDialogComponent, config);
      subscriber.__modalRef = modalRef;
      const subscription = modalRef.content.closed.subscribe(confirmationResult => {
        const keepModalOpen = confirmationResult?.type === 'instant' || confirmationResult?.type === 'restoreDefault';
        if (!keepModalOpen) {
          modalRef.hide();
        }
        subscriber.next(confirmationResult);
        if (!keepModalOpen) {
          subscription.unsubscribe();
          subscriber.complete();
        }
      });
      return () => {
        if (!subscription.closed) {
          subscription.unsubscribe();
          modalRef.detach();
        }
      };
    });
  }
}
SiColumnSelectionDialogService.ɵfac = function SiColumnSelectionDialogService_Factory(t) {
  return new (t || SiColumnSelectionDialogService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](SiModalService));
};
SiColumnSelectionDialogService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiColumnSelectionDialogService,
  factory: SiColumnSelectionDialogService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiColumnSelectionDialogService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
  }], function () {
    return [{
      type: SiModalService
    }];
  }, null);
})();
const dragConfig = {
  dragStartThreshold: 0,
  pointerDirectionChangeThreshold: 5,
  zIndex: 10000
};
class SiColumnSelectionModalModule {}
SiColumnSelectionModalModule.ɵfac = function SiColumnSelectionModalModule_Factory(t) {
  return new (t || SiColumnSelectionModalModule)();
};
SiColumnSelectionModalModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiColumnSelectionModalModule
});
SiColumnSelectionModalModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  providers: [SiColumnSelectionDialogService, {
    provide: _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_39__.CDK_DRAG_CONFIG,
    useValue: dragConfig
  }],
  imports: [_angular_cdk_listbox__WEBPACK_IMPORTED_MODULE_40__.CdkListboxModule, _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_39__.DragDropModule, _angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterModule, SiModalModule, SiSwitchModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiColumnSelectionModalModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [SiColumnSelectionDialogComponent],
      imports: [_angular_cdk_listbox__WEBPACK_IMPORTED_MODULE_40__.CdkListboxModule, _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_39__.DragDropModule, _angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterModule, SiModalModule, SiSwitchModule, SiTranslateModule],
      providers: [SiColumnSelectionDialogService, {
        provide: _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_39__.CDK_DRAG_CONFIG,
        useValue: dragConfig
      }]
    }]
  }], null, null);
})();

/**
 * Method to help you toggle the selection state of `MenuItems` depending on their
 * id value in a mutually exclusive fashion. It marks a specific item
 * as selected and unselects the others.
 * This can be used for example to mark the currently selected theme
 * while de-selecting the ones that are not active.
 *
 * @param menuItems Array of items that should be (de)-selected
 * @param id Id of the item that should get selected
 * @param type If it should display a check or a radio select
 * @returns Modified menuItems Array with one item selected
 **/
const selectMenuItemById = (menuItems, id, type = 'check') => menuItems.map(item => {
  item.selectionState = item.id === id ? type : '';
  return item;
});

// ------------------------------------------------------------------------------

/* eslint-disable */
// TODO: upstream bug, re-enable when fixed
/**
  * Siemens Logo and link to main page.
  * Should be used in a `.navbar-header`.
  *
  * @example
  *   <nav class="navbar">
  *     <div class="navbar-header">
  *       <si-navbar-brand></si-navbar-brand>
  *     </div>
  *   </nav>
  *
  * <example-url>../dist-playground/?scenario=SiNavbarBrandComponent/Navbar%20Brand</example-url>
  */
/* eslint-enable */
class SiNavbarBrandComponent {
  constructor(platformId) {
    /**
     * like that is invoked on click, defaults to "/"
     */
    this.link = {
      link: '/'
    };
    /**
     * Text which describes the logo or the name. Needed for a11y.
     */
    this.logoText = 'Siemens logo';
    this.isBrowser = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId);
  }
  ngOnInit() {
    this.updateThemeLogoUrl();
  }
  /**
   * Returns value of css variable `--element-brand-logo-url` if configured,
   * otherwise the value of `logoUrl`.
   */
  get resolvedLogoUrl() {
    return this.themeLogoUrl ?? this.logoUrl;
  }
  /**
   * Returns value of css variable `--element-brand-logo-text` if configured,
   * otherwise the value of `logoText`.
   */
  get resolvedLogoText() {
    return this.themeLogoText ?? this.logoText;
  }
  onThemeSwitch() {
    this.updateThemeLogoUrl();
  }
  updateThemeLogoUrl() {
    if (!this.isBrowser) {
      return;
    }
    const computed = window.getComputedStyle(document.documentElement);
    const themeLogoUrl = computed.getPropertyValue('--element-brand-logo-url');
    this.themeLogoUrl = themeLogoUrl.trim().length > 0 ? themeLogoUrl : undefined;
    const themeLogoText = computed.getPropertyValue('--element-brand-logo-text');
    this.themeLogoText = themeLogoText.trim().length > 0 ? themeLogoText : undefined;
  }
}
SiNavbarBrandComponent.ɵfac = function SiNavbarBrandComponent_Factory(t) {
  return new (t || SiNavbarBrandComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID));
};
SiNavbarBrandComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiNavbarBrandComponent,
  selectors: [["si-navbar-brand"]],
  hostBindings: function SiNavbarBrandComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("theme-switch", function SiNavbarBrandComponent_theme_switch_HostBindingHandler() {
        return ctx.onThemeSwitch();
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveWindow"]);
    }
  },
  inputs: {
    logoUrl: "logoUrl",
    link: "link",
    logoText: "logoText"
  },
  decls: 5,
  vars: 6,
  consts: [["siListInteractionItem", "", 1, "navbar-brand", "px-6", "focus-inside", 3, "siLink"], ["viewBox", "0 0 142.315 22.5", "width", "103", "height", "16", "xmlns", "http://www.w3.org/2000/svg", 4, "ngIf", "ngIfElse"], ["alternativeLogo", ""], ["viewBox", "0 0 142.315 22.5", "width", "103", "height", "16", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M125.878 21.704v-4.378c2.53.806 4.718 1.209 6.566 1.209 2.53 0 3.795-.674 3.795-2.02 0-.49-.183-.898-.549-1.225-.43-.388-1.419-.903-2.971-1.545-2.735-1.113-4.5-2.006-5.296-2.68-1.325-1.121-1.99-2.581-1.99-4.376 0-2.235.873-3.94 2.617-5.113C129.623.525 131.744 0 134.418 0c2.143 0 4.21.27 6.198.811v4.194c-2.172-.838-4.116-1.255-5.83-1.255-2.276 0-3.415.647-3.415 1.942 0 .522.247.94.737 1.257.417.265 1.53.786 3.335 1.561 2.725 1.174 4.522 2.194 5.388 3.061.989.99 1.484 2.301 1.484 3.934 0 2.5-1.03 4.356-3.09 5.571-1.612.949-3.755 1.424-6.43 1.424-2.489 0-4.796-.266-6.917-.796m-22.913.352V.367h7.101l7.469 14.097V.367h4.349v21.69h-6.859L107.31 7.744v14.311h-4.345zm-19.73 0V.367H99v3.964h-9.705V9.2h8.45v3.581h-8.45v5.096h9.935v4.18H83.235zm-31.837 0V.367h7.913l5.434 13.607L70.378.367h7.546v21.69h-5.939V7.238L65.679 22.27h-3.781L55.76 7.239v14.817h-4.362zm-19.775 0V.367h15.78v3.964H37.7V9.2h8.45v3.581H37.7v5.096h9.919v4.18H31.623zM20.05.367h6.29v21.69h-6.29V.366zM.443 21.704v-4.378c2.52.806 4.71 1.209 6.567 1.209 2.531 0 3.796-.674 3.796-2.02 0-.49-.185-.898-.551-1.225-.419-.388-1.414-.903-2.985-1.545-2.704-1.103-4.464-1.995-5.28-2.68C.663 9.944 0 8.484 0 6.689c0-2.235.873-3.94 2.618-5.113C4.178.525 6.3 0 8.984 0c2.142 0 4.211.27 6.2.811v4.194C12.989 4.167 11.046 3.75 9.35 3.75c-2.275 0-3.412.647-3.412 1.942 0 .512.249.93.749 1.257.408.265 1.516.786 3.323 1.561 2.724 1.174 4.519 2.194 5.387 3.061.99.99 1.486 2.301 1.486 3.934 0 2.5-1.036 4.356-3.109 5.571-1.601.949-3.74 1.424-6.414 1.424-2.49 0-4.795-.266-6.918-.796", "fill", "currentColor"], [1, "custom-logo"], ["alt", "Brand Logo", 3, "src"]],
  template: function SiNavbarBrandComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "a", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiNavbarBrandComponent__svg_svg_2_Template, 2, 0, "svg", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiNavbarBrandComponent_ng_template_3_Template, 2, 1, "ng-template", null, 2, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("siLink", ctx.link);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 4, ctx.resolvedLogoText));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.resolvedLogoUrl)("ngIfElse", _r1);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiLinkDirective, SiListInteractionItemDirective, SiTranslatePipe],
  encapsulation: 2
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNavbarBrandComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-navbar-brand',
      template: "<a class=\"navbar-brand px-6 focus-inside\" [siLink]=\"link\" [attr.aria-label]=\"resolvedLogoText | translate\" siListInteractionItem>\n  <svg *ngIf=\"!resolvedLogoUrl; else alternativeLogo\" viewBox=\"0 0 142.315 22.5\" width=\"103\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M125.878 21.704v-4.378c2.53.806 4.718 1.209 6.566 1.209 2.53 0 3.795-.674 3.795-2.02 0-.49-.183-.898-.549-1.225-.43-.388-1.419-.903-2.971-1.545-2.735-1.113-4.5-2.006-5.296-2.68-1.325-1.121-1.99-2.581-1.99-4.376 0-2.235.873-3.94 2.617-5.113C129.623.525 131.744 0 134.418 0c2.143 0 4.21.27 6.198.811v4.194c-2.172-.838-4.116-1.255-5.83-1.255-2.276 0-3.415.647-3.415 1.942 0 .522.247.94.737 1.257.417.265 1.53.786 3.335 1.561 2.725 1.174 4.522 2.194 5.388 3.061.989.99 1.484 2.301 1.484 3.934 0 2.5-1.03 4.356-3.09 5.571-1.612.949-3.755 1.424-6.43 1.424-2.489 0-4.796-.266-6.917-.796m-22.913.352V.367h7.101l7.469 14.097V.367h4.349v21.69h-6.859L107.31 7.744v14.311h-4.345zm-19.73 0V.367H99v3.964h-9.705V9.2h8.45v3.581h-8.45v5.096h9.935v4.18H83.235zm-31.837 0V.367h7.913l5.434 13.607L70.378.367h7.546v21.69h-5.939V7.238L65.679 22.27h-3.781L55.76 7.239v14.817h-4.362zm-19.775 0V.367h15.78v3.964H37.7V9.2h8.45v3.581H37.7v5.096h9.919v4.18H31.623zM20.05.367h6.29v21.69h-6.29V.366zM.443 21.704v-4.378c2.52.806 4.71 1.209 6.567 1.209 2.531 0 3.796-.674 3.796-2.02 0-.49-.185-.898-.551-1.225-.419-.388-1.414-.903-2.985-1.545-2.704-1.103-4.464-1.995-5.28-2.68C.663 9.944 0 8.484 0 6.689c0-2.235.873-3.94 2.618-5.113C4.178.525 6.3 0 8.984 0c2.142 0 4.211.27 6.2.811v4.194C12.989 4.167 11.046 3.75 9.35 3.75c-2.275 0-3.412.647-3.412 1.942 0 .512.249.93.749 1.257.408.265 1.516.786 3.323 1.561 2.724 1.174 4.519 2.194 5.387 3.061.99.99 1.486 2.301 1.486 3.934 0 2.5-1.036 4.356-3.109 5.571-1.601.949-3.74 1.424-6.414 1.424-2.49 0-4.795-.266-6.918-.796\"\n      fill=\"currentColor\"></path>\n  </svg>\n  <ng-template #alternativeLogo>\n    <div class=\"custom-logo\">\n      <img [src]=\"resolvedLogoUrl\" alt=\"Brand Logo\">\n    </div>\n  </ng-template>\n</a>\n"
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }];
  }, {
    logoUrl: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    link: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    logoText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    onThemeSwitch: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['window:theme-switch']
    }]
  });
})();

// ------------------------------------------------------------------------------

class SiNavbarItemComponent {
  constructor() {
    this.active = false;
  }
  submenuActiveChange(active) {
    this.active = active;
  }
}
SiNavbarItemComponent.ɵfac = function SiNavbarItemComponent_Factory(t) {
  return new (t || SiNavbarItemComponent)();
};
SiNavbarItemComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiNavbarItemComponent,
  selectors: [["si-navbar-item"]],
  inputs: {
    item: "item",
    quickAction: "quickAction"
  },
  ngContentSelectors: _c1,
  decls: 4,
  vars: 2,
  consts: [["role", "menu", 1, "nav", "navbar-nav"], ["class", "dropdown", "siDropdown", "", "role", "presentation", 3, "dropdownFocusOnOpen", 4, "ngIf"], ["role", "presentation"], ["class", "nav-item", 3, "quick-action", "badgeStyle", "item", "focusStylingInside", 4, "ngIf"], ["siDropdown", "", "role", "presentation", 1, "dropdown", 3, "dropdownFocusOnOpen"], ["siDropdownToggle", "", 1, "nav-item", 3, "item", "badgeStyle", "disableParentClick", "forceActive", "focusStylingInside", "dropdownToggle"], ["dropdownToggle", "si-dropdown-toggle"], [4, "ngIf"], ["siDropdownMenu", "", "position", "adjacent", 1, "dropdown-menu", 3, "items", "isSubList", "activeChange"], ["siDropdownMenu", "", 1, "dropdown-menu", "custom-content"], [1, "nav-item", 3, "badgeStyle", "item", "focusStylingInside"]],
  template: function SiNavbarItemComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "ul", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiNavbarItemComponent_li_1_Template, 5, 11, "li", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "li", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiNavbarItemComponent_si_menu_item_3_Template, 1, 5, "si-menu-item", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.item.items || ctx.item.customContent);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.item.items && !ctx.item.customContent);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiDropdownDirective, SiDropdownMenuDirective, SiDropdownToggleDirective, SiMenuComponent, SiMenuItemComponent],
  encapsulation: 2
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiNavbarItemComponent.prototype, "item", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNavbarItemComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-navbar-item',
      template: "<ul class=\"nav navbar-nav\" role=\"menu\">\n  <li *ngIf=\"item.items || item.customContent\"\n    class=\"dropdown\"\n    siDropdown\n    role=\"presentation\"\n    [dropdownFocusOnOpen]=\"false\"\n  >\n    <si-menu-item\n      siDropdownToggle\n      #dropdownToggle=\"si-dropdown-toggle\"\n      class=\"nav-item\"\n      [class.quick-action]=\"quickAction !== undefined\"\n      [item]=\"item\"\n      [badgeStyle]=\"quickAction !== undefined ? 'dot' : ''\"\n      [disableParentClick]=\"false\"\n      [forceActive]=\"active\"\n      [focusStylingInside]=\"true\"\n      [dropdownToggle]=\"dropdownToggle\"\n    ></si-menu-item>\n    <ng-container *ngIf=\"item.items\">\n      <si-menu\n        siDropdownMenu\n        class=\"dropdown-menu\"\n        [items]=\"item.items\"\n        [isSubList]=\"true\"\n        position=\"adjacent\"\n        (activeChange)=\"submenuActiveChange($event)\"\n      ></si-menu>\n    </ng-container>\n    <ng-container *ngIf=\"item.customContent\">\n      <div class=\"dropdown-menu custom-content\" siDropdownMenu>\n        <ng-content></ng-content>\n      </div>\n    </ng-container>\n  </li>\n  <li role=\"presentation\">\n    <si-menu-item *ngIf=\"!item.items && !item.customContent\"\n      class=\"nav-item\"\n      [class.quick-action]=\"quickAction !== undefined\"\n      [badgeStyle]=\"quickAction !== undefined ? 'dot' : ''\"\n      [item]=\"item\"\n      [focusStylingInside]=\"true\">\n    </si-menu-item>\n  </li>\n</ul>\n"
    }]
  }], null, {
    item: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    quickAction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();

// ------------------------------------------------------------------------------

class SiNavbarProfileMenuComponent {
  constructor() {
    this.trackByIndex = index => index;
  }
  ngOnChanges(changes) {
    if (changes.account && this.account && this.account.title) {
      const parts = this.account.title.split(' ');
      let first = parts.shift() ?? '';
      if (first) {
        first = first[0].toLocaleUpperCase();
      }
      let last = parts.pop() ?? '';
      if (last) {
        last = last[0].toLocaleUpperCase();
      }
      this.accountShortName = first + last;
    }
  }
}
SiNavbarProfileMenuComponent.ɵfac = function SiNavbarProfileMenuComponent_Factory(t) {
  return new (t || SiNavbarProfileMenuComponent)();
};
SiNavbarProfileMenuComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiNavbarProfileMenuComponent,
  selectors: [["si-navbar-profile-menu"]],
  inputs: {
    account: "account",
    items: "items"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  ngContentSelectors: _c1,
  decls: 1,
  vars: 1,
  consts: [["class", "nav navbar-nav profile-menu", "role", "menu", 4, "ngIf"], ["role", "menu", 1, "nav", "navbar-nav", "profile-menu"], ["siDropdown", "", "role", "presentation", 1, "dropdown", 3, "dropdownFocusOnOpen", "dropdownFocusOnClose"], ["dropdown", "si-dropdown"], [1, "nav-item", "quick-action"], ["siListInteractionItem", "", "siDropdownToggle", "", "role", "menuitem", 1, "dropdown-item", "focus-inside", "px-4"], ["class", "navbar-avatar", 3, "src", "alt", 4, "ngIf"], ["class", "navbar-avatar", 4, "ngIf"], [1, "title"], [1, "dropdown-caret", "menu-end-icon", "element-down-2", "ms-2"], ["role", "menu", "siListInteraction", "", "listInteractionOrientation", "vert", "listInteractionPosition", "adjacent", "siDropdownMenu", "", 1, "dropdown-menu", 3, "listInteractionIsSubList"], ["role", "presentation", 1, "d-block", "userinfo", "mx-5", "my-4"], [1, "fw-bold", "text-truncate"], ["class", "email", 4, "ngIf"], [1, "d-flex", "align-items-center", "text-secondary", "mt-2"], ["class", "label me-4", 4, "ngIf"], ["class", "ms-0 badge bg-default", 4, "ngIf"], [4, "ngIf"], [1, "navbar-avatar", 3, "src", "alt"], [1, "navbar-avatar"], [1, "email"], [1, "label", "me-4"], [1, "ms-0", "badge", "bg-default"], ["role", "separator", 1, "d-block", "dropdown-divider"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "dropdown-divider", "role", "separator", 4, "ngIf"], ["role", "presentation", 4, "ngIf"], ["class", "sub-menu-toggle", "siDropdown", "", "role", "presentation", 3, "dropdownFocusOnOpen", 4, "ngIf"], ["role", "separator", 1, "dropdown-divider"], ["role", "presentation"], [3, "item"], ["siDropdown", "", "role", "presentation", 1, "sub-menu-toggle", 3, "dropdownFocusOnOpen"], ["siDropdownToggle", "", 3, "item", "disableParentClick"], ["siDropdownMenu", "", 1, "dropdown-menu", "sub-menu", 3, "items", "isSubList"]],
  template: function SiNavbarProfileMenuComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiNavbarProfileMenuComponent_ul_0_Template, 20, 14, "ul", 0);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.account);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiDropdownDirective, SiDropdownMenuDirective, SiDropdownToggleDirective, SiListInteractionDirective, SiListInteractionItemDirective, SiMenuComponent, SiMenuItemComponent, SiTranslatePipe],
  styles: [".navbar-avatar[_ngcontent-%COMP%]{block-size:2rem;inline-size:2rem;min-inline-size:2rem;color:var(--element-ui-2);background-color:var(--element-base-0);border-radius:50%;margin-block:-.5rem;margin-inline:0;display:inline-flex;justify-content:center;align-items:center;overflow:hidden}@media (max-width: 575.98px){.navbar-avatar[_ngcontent-%COMP%]{filter:grayscale(80%)}.navbar-avatar[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{display:block}}.dropdown-item[_ngcontent-%COMP%]{cursor:pointer}.dropdown-item[_ngcontent-%COMP%]:hover   .navbar-avatar[_ngcontent-%COMP%], .dropdown-item.show[_ngcontent-%COMP%]   .navbar-avatar[_ngcontent-%COMP%]{background:var(--element-base-1)}.nav-link[_ngcontent-%COMP%]:focus   .navbar-avatar[_ngcontent-%COMP%]{color:var(--element-ui-0)}@media (max-width: 575.98px){.profile-menu[_ngcontent-%COMP%]   .nav-link[_ngcontent-%COMP%]{padding-inline:16px}.profile-menu[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{display:inline!important;padding-inline-start:8px}.profile-menu[_ngcontent-%COMP%]   .sub-menu[_ngcontent-%COMP%]  .dropdown-item{padding-inline-start:28px}}.profile-menu[_ngcontent-%COMP%]   .nav-link[_ngcontent-%COMP%]{outline:none}.profile-menu[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{display:none}.sub-menu-toggle[_ngcontent-%COMP%]{cursor:pointer;position:relative}@media (min-width: 576px){.sub-menu-toggle[_ngcontent-%COMP%]     .dropdown-caret{transform:rotate(-90deg)!important}}@media (min-width: 576px){.dropdown-menu[_ngcontent-%COMP%]{min-inline-size:240px;max-inline-size:480px}.dropdown-menu.sub-menu[_ngcontent-%COMP%]{min-inline-size:200px;margin-inline-end:-6px}}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNavbarProfileMenuComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-navbar-profile-menu',
      template: "<ul *ngIf=\"account\" class=\"nav navbar-nav profile-menu\" role=\"menu\">\n  <li\n    class=\"dropdown\"\n    siDropdown\n    #dropdown=\"si-dropdown\"\n    [dropdownFocusOnOpen]=\"false\"\n    [dropdownFocusOnClose]=\"false\"\n    role=\"presentation\"\n  >\n    <div\n      class=\"nav-item quick-action\"\n      [class.show]=\"dropdown.isOpen\"\n    >\n      <a class=\"dropdown-item focus-inside px-4\" siListInteractionItem siDropdownToggle role=\"menuitem\">\n        <img *ngIf=\"account.image\" [src]=\"account.image\" [alt]=\"account.title + '\\'s Avatar'\" class=\"navbar-avatar\">\n        <span *ngIf=\"!account.image\" class=\"navbar-avatar\">{{ accountShortName }}</span>\n        <span class=\"title\">{{ account.title }}</span>\n        <span class=\"dropdown-caret menu-end-icon element-down-2 ms-2\"></span>\n      </a>\n    </div>\n    <ul\n      class=\"dropdown-menu\"\n      role=\"menu\"\n      siListInteraction\n      [listInteractionIsSubList]=\"true\"\n      listInteractionOrientation=\"vert\"\n      listInteractionPosition=\"adjacent\"\n      siDropdownMenu\n    >\n      <li class=\"d-block userinfo mx-5 my-4\" role=\"presentation\">\n        <div class=\"fw-bold text-truncate\">{{ account.title }}</div>\n        <div *ngIf=\"account.email\" class=\"email\">{{ account.email }}</div>\n        <div class=\"d-flex align-items-center text-secondary mt-2\">\n          <span *ngIf=\"account.company\" class=\"label me-4\">{{ account.company | translate }}</span>\n          <span *ngIf=\"account.role\" class=\"ms-0 badge bg-default\">\n            {{ account.role | translate }}\n          </span>\n        </div>\n      </li>\n      <ng-container *ngIf=\"items?.length\">\n        <li class=\"d-block dropdown-divider\" role=\"separator\"></li>\n        <ng-container *ngFor=\"let item of items; trackBy: trackByIndex\">\n          <li *ngIf=\"!item.items && item.title === '-'\" class=\"dropdown-divider\" role=\"separator\"></li>\n          <li *ngIf=\"!item.items && item.title !== '-'\" role=\"presentation\">\n            <si-menu-item [item]=\"item\"></si-menu-item>\n          </li>\n          <li *ngIf=\"item.items\"\n            class=\"sub-menu-toggle\"\n            siDropdown\n            role=\"presentation\"\n            [dropdownFocusOnOpen]=\"false\"\n          >\n            <si-menu-item\n              siDropdownToggle\n              [item]=\"item\"\n              [disableParentClick]=\"false\"\n            ></si-menu-item>\n            <si-menu\n              class=\"dropdown-menu sub-menu\"\n              [items]=\"item.items\"\n              [isSubList]=\"true\"\n              siDropdownMenu\n            ></si-menu>\n          </li>\n        </ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"account.customContent\">\n        <li><ng-content></ng-content></li>\n      </ng-container>\n    </ul>\n  </li>\n</ul>\n",
      styles: [".navbar-avatar{block-size:2rem;inline-size:2rem;min-inline-size:2rem;color:var(--element-ui-2);background-color:var(--element-base-0);border-radius:50%;margin-block:-.5rem;margin-inline:0;display:inline-flex;justify-content:center;align-items:center;overflow:hidden}@media (max-width: 575.98px){.navbar-avatar{filter:grayscale(80%)}.navbar-avatar .title{display:block}}.dropdown-item{cursor:pointer}.dropdown-item:hover .navbar-avatar,.dropdown-item.show .navbar-avatar{background:var(--element-base-1)}.nav-link:focus .navbar-avatar{color:var(--element-ui-0)}@media (max-width: 575.98px){.profile-menu .nav-link{padding-inline:16px}.profile-menu .title{display:inline!important;padding-inline-start:8px}.profile-menu .sub-menu::ng-deep .dropdown-item{padding-inline-start:28px}}.profile-menu .nav-link{outline:none}.profile-menu .title{display:none}.sub-menu-toggle{cursor:pointer;position:relative}@media (min-width: 576px){.sub-menu-toggle ::ng-deep .dropdown-caret{transform:rotate(-90deg)!important}}@media (min-width: 576px){.dropdown-menu{min-inline-size:240px;max-inline-size:480px}.dropdown-menu.sub-menu{min-inline-size:200px;margin-inline-end:-6px}}\n"]
    }]
  }], null, {
    account: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    items: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiNavbarPrimaryComponent {
  /**
   * Router link for the "home", i.e. logo or app title
   * @deprecated Use `home` instead of `homeLink`.
   * @defaultref {@link home}
   */
  set homeLink(link) {
    this.home = {
      link
    };
  }
  /**
   * @deprecated Use `home` instead of `homeLink`.
   */
  get homeLink() {
    return this.home?.link?.toString() ?? '/';
  }
  constructor(router, route) {
    this.router = router;
    this.route = route;
    /**
     * List of navbar items which should be displayed at the left (in LTR) side next to the
     * banner.
     */
    this.primaryItems = [];
    /**
     * Configurable home link that is used at the logo and app title.
     * Use `undefined` to disable the link.
     */
    this.home = {
      link: '/'
    };
    /**
     * title for the app switcher
     */
    this.appSwitcherTitle = 'Launchpad';
    /**
     * sub-title for the app switcher
     */
    this.appSwitcherSubTitle = 'Access all your applications or add more';
    /**
     * Title or translate key for the favorite apps section.
     */
    this.favoriteAppsTitle = 'Favorite apps';
    /**
     * Title or translate key for the default apps section.
     */
    this.defaultAppsTitle = 'Applications';
    /**
     * Title or translate key for the show more apps button.
     */
    this.showMoreAppsTitle = 'Show more';
    /**
     * Title or translate key for the show less apps button.
     */
    this.showLessAppsTitle = 'Show less';
    /**
     * Allow the user to favorite apps which will then be displayed at the top.
     */
    this.appItemsFavorites = false;
    /**
     * Specifies whether the component should automatically be focused as soon as it is loaded.
     */
    this.focusOnLoad = false;
    /**
     * Marks the navbar as primary navigation element. Needed for a11y (screen reader).
     * Only one element should be primary. If multiple navbars are used, it's up to the
     * user of the components to label them in the correct order.
     */
    this.navAriaLabel = 'Primary';
    /**
     * Text to close the app switcher. Needed for a11y.
     */
    this.closeAppSwitcherText = 'Close App Switcher';
    /**
     * Text for the app switcher icon. Needed for a11y.
     */
    this.openAppSwitcherText = 'Open App Switcher';
    /**
     * Text or translate key for the toggle navigation icon. Needed for a11y.
     */
    this.toggleNavigationText = 'Toggle navigation';
    this.appItemFavoriteChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.showMobileNav = false;
    this.appsVisible = false;
    this.showAllApps = false;
    this.isCategorized = false;
    this.showFavorites = false;
    this.trackByIndex = index => index;
    this.setSelectedItemTitle(router.url);
    router.events.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.filter)(event => event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_27__.NavigationEnd)).subscribe(event => {
      this.setSelectedItemTitle(event.url);
      this.appsVisible = false;
    });
  }
  setSelectedItemTitle(url) {
    setTimeout(() => {
      const compareSelected = item => {
        const commands = Array.isArray(item.link) ? item.link : [item.link];
        const urlTree = this.router.createUrlTree(commands, {
          relativeTo: this.route
        });
        const serialized = this.router.serializeUrl(urlTree);
        return serialized === url;
      };
      const selected = this.primaryItems.find(compareSelected) ?? this.accountItems?.find(compareSelected) ?? this.primaryItems.find(item => !!item.items?.find(compareSelected));
      this.selectedItemTitle = selected?.title ?? '';
    });
  }
  ngOnChanges() {
    if (this.account) {
      this.accountItem = this.ref?.nativeElement.innerHTML ? Object.assign({
        customContent: true
      }, this.account) : Object.assign({
        items: this.accountItems
      }, this.account);
    } else {
      this.accountItem = undefined;
    }
    this.calcAppItems();
  }
  calcAppItems() {
    this.appsCategorized = this.appCategoryItems ?? (this.appItems ? [{
      category: '',
      items: this.appItems
    }] : undefined);
    this.isCategorized = this.appItemsFavorites || !!this.appsCategorized && (this.appsCategorized.length > 1 || this.appsCategorized.some(item => item.category));
    this.calcAppFavorites();
  }
  calcAppFavorites() {
    this.showFavorites = this.appItemsFavorites && !!this.appsCategorized && this.appsCategorized.some(item => item.items.some(appItem => appItem.isFavorite));
    this.appsFavorites = this.appItemsFavorites ? this.appsCategorized?.reduce((acc, item) => acc.concat(item.items.filter(appItem => appItem.isFavorite)), []) : undefined;
  }
  toggleFavorite(item) {
    item.isFavorite = !item.isFavorite;
    this.showAllApps = true;
    this.calcAppFavorites();
    this.appItemFavoriteChanged.emit([item, item.isFavorite]);
  }
  closeMobileNav(event) {
    let element = event.target;
    while (element && element.tagName !== 'A') {
      if (element.classList?.contains('userinfo')) {
        return;
      }
      element = element.parentElement;
    }
    if (element && (element.hasAttribute('sidropdowntoggle') || element.parentElement && element.parentElement.tagName === 'SI-MENU-ITEM' && element.parentElement.hasAttribute('sidropdowntoggle'))) {
      return;
    }
    this.showMobileNav = false;
  }
  focusLaunchpad() {
    if (this.appsVisible) {
      setTimeout(() => this.appSwitcherKeyboardInteraction.focusFirstItem(), 12);
    }
  }
  hideAppSwitcherOnClick(element) {
    const actualElement = element;
    if (!actualElement.classList.contains('app-favorite')) {
      this.hideAppSwitcher();
    }
  }
  toggleAppSwitcher() {
    this.appsVisible = !this.appsVisible;
    if (this.appsVisible) {
      this.showAllApps = false;
    }
  }
  hideAppSwitcher() {
    this.appsVisible = false;
  }
  toggleMobileNav(event) {
    this.showMobileNav = !this.showMobileNav;
  }
  onClick(targetElement) {
    const clickedInside = this.navbar?.nativeElement.contains(targetElement);
    if (!clickedInside) {
      this.showMobileNav = false;
    }
  }
}
SiNavbarPrimaryComponent.ɵfac = function SiNavbarPrimaryComponent_Factory(t) {
  return new (t || SiNavbarPrimaryComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_27__.Router), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_27__.ActivatedRoute));
};
SiNavbarPrimaryComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiNavbarPrimaryComponent,
  selectors: [["si-navbar-primary"]],
  viewQuery: function SiNavbarPrimaryComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c32, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c33, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c34, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c35, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.ref = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.navbar = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.appSwitcherToggleComponent = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.appSwitcherKeyboardInteraction = _t.first);
    }
  },
  hostBindings: function SiNavbarPrimaryComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarPrimaryComponent_click_HostBindingHandler($event) {
        return ctx.onClick($event.target);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveDocument"]);
    }
  },
  inputs: {
    primaryItems: "primaryItems",
    accountItems: "accountItems",
    account: "account",
    logoUrl: "logoUrl",
    appTitle: "appTitle",
    homeLink: "homeLink",
    home: "home",
    appSwitcherTitle: "appSwitcherTitle",
    appSwitcherSubTitle: "appSwitcherSubTitle",
    favoriteAppsTitle: "favoriteAppsTitle",
    defaultAppsTitle: "defaultAppsTitle",
    showMoreAppsTitle: "showMoreAppsTitle",
    showLessAppsTitle: "showLessAppsTitle",
    appItems: "appItems",
    appCategoryItems: "appCategoryItems",
    appItemsFavorites: "appItemsFavorites",
    allAppsLink: "allAppsLink",
    focusOnLoad: "focusOnLoad",
    navAriaLabel: "navAriaLabel",
    closeAppSwitcherText: "closeAppSwitcherText",
    openAppSwitcherText: "openAppSwitcherText",
    toggleNavigationText: "toggleNavigationText"
  },
  outputs: {
    appItemFavoriteChanged: "appItemFavoriteChanged"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  ngContentSelectors: _c37,
  decls: 26,
  vars: 25,
  consts: [["siListInteraction", "", "listInteractionOrientation", "vert", "listInteractionFocus", "first", 1, "focus-none", 3, "cdkTrapFocus", "listInteractionFocusOnLoad"], ["siListInteractionItem", "", 1, "focus-none"], ["siListInteraction", "", "listInteractionPosition", "adjacent", 1, "navbar", "navbar-primary", "navbar-expand-sm", "navbar-light", "fixed-top", "elevation-1", "focus-inside", "focus-direct-sub-inside", 3, "listInteractionIsSubList", "listInteractionFocus", "listInteractionOrientation", "listInteractionAutofocusFromParent"], ["navbar", ""], ["type", "button", "aria-expanded", "false", "siListInteractionItem", "", 1, "navbar-toggler", "focus-inside", 3, "click"], ["navbarToggler", ""], [1, "visually-hidden"], [1, "element-menu"], ["class", "title-outside", 4, "ngIf"], [1, "d-sm-none", "selected-item"], [4, "ngIf"], [1, "collapse", "navbar-collapse"], [1, "start"], [1, "d-none", "d-lg-flex", 3, "logoUrl", "link"], ["class", "title-collapse", 4, "ngIf"], ["class", "nav navbar-nav app-switcher-menu", 4, "ngIf"], [1, "navbar-start", "ms-sm-6", 3, "click"], [3, "item", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "navbar-end", "end", 3, "click"], [3, "items", "account", 4, "ngIf"], [1, "title-outside"], ["siListInteractionItem", "", 1, "navbar-app-title", "focus-inside", 3, "siLink"], [1, "navbar-app-title-inner", "text-truncate", "px-6", "si-body-1"], ["href", "#", "siListInteractionItem", "", 1, "app-switcher-trigger", "navbar-collapse", "collapse", "focus-inside", 3, "click"], ["appSwitcherToggle", "si-list-interaction-item"], [1, "icon", "element-thumbnails", "m-5"], [1, "title-collapse"], [1, "nav", "navbar-nav", "app-switcher-menu"], [1, "nav-item"], ["href", "#", "siListInteractionItem", "", 1, "dropdown-item", 3, "click"], [1, "icon", "element-thumbnails"], [1, "item-title"], [3, "item"], [3, "items", "account"], ["ref", ""], [1, "app-switcher", "ps-0", "ps-sm-6", "pt-8", "text-center", "text-sm-start"], ["type", "button", "siListInteractionItem", "", 1, "btn", "btn-circle", "btn-sm", "btn-ghost", "element-cancel", "position-absolute", "top-0", "end-0", "mt-6", "me-4", 3, "click"], [1, "mx-9"], ["class", "mb-4 si-title-1 lh-1", 4, "ngIf"], ["class", "si-body-2 text-secondary", 3, "mb-9", "mb-4", 4, "ngIf"], [1, "apps-scroll", "px-9", "pb-8"], ["class", "apps-category focus-none", "siListInteractionItem", "", 4, "ngIf"], ["siListInteractionItem", "", "class", "dropdown-toggle apps-show-more py-4 mb-6 mt-9 si-title-2", 3, "show", "click", "keydown.enter", 4, "ngIf"], [1, "app-switcher-backdrop", 3, "click"], [1, "mb-4", "si-title-1", "lh-1"], [1, "si-body-2", "text-secondary"], ["siListInteractionItem", "", 1, "apps-category", "focus-none"], [1, "si-title-1", "apps-category-title"], ["siListInteraction", "", "listInteractionPosition", "adjacent", "listInteractionOrientation", "ste", 1, "apps", "apps-favorite", "mt-4", "justify-content-center", "justify-content-sm-start", "focus-direct-sub-inside", 3, "listInteractionIsSubList"], ["appSwitcherKeyboardInteraction", "si-list-interaction"], ["siListInteractionItem", "", "activeClass", "active", "class", "app-container-wrapper app app-favorite", 3, "siLink", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["siListInteractionItem", "", "activeClass", "active", 1, "app-container-wrapper", "app", "app-favorite", 3, "siLink", "click"], [1, "app-container", "app-icon", 3, "ngClass"], [1, "title", "si-title-2"], ["siListInteractionItem", "", 1, "dropdown-toggle", "apps-show-more", "py-4", "mb-6", "mt-9", "si-title-2", 3, "click", "keydown.enter"], [1, "dropdown-caret", "icon", "element-down-2"], ["class", "apps-category focus-none", "siListInteractionItem", "", 3, "mt-4", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "si-title-1 apps-category-title", 4, "ngIf"], ["siListInteraction", "", "listInteractionPosition", "adjacent", "listInteractionOrientation", "ste", 1, "apps", "mt-4", "ms-0", "ms-sm-8", "justify-content-center", "justify-content-sm-start", "focus-direct-sub-inside", 3, "listInteractionIsSubList"], ["class", "app-wrapper", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "app-wrapper"], ["siListInteractionItem", "", "class", "app-container-wrapper app app-more", 3, "siLink", "click", 4, "ngIf"], ["class", "app-container-wrapper position-absolute", 4, "ngIf"], ["siListInteractionItem", "", "activeClass", "active", 1, "app-container-wrapper", "app", 3, "siLink", "keydown.space", "click"], ["class", "icon element-export my-n3", "role", "presentation", 4, "ngIf"], [1, "app-container-wrapper", "position-absolute"], [1, "app-container"], [1, "icon", "app-favorite-icon", 3, "click"], ["role", "presentation", 1, "icon", "element-export", "my-n3"], ["siListInteractionItem", "", 1, "app-container-wrapper", "app", "app-more", 3, "siLink", "click"]],
  template: function SiNavbarPrimaryComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c36);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "nav", 2, 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "button", 4, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarPrimaryComponent_Template_button_click_5_listener($event) {
        ctx.hideAppSwitcher();
        return ctx.toggleMobileNav($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "span", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](9, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](10, "span", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, SiNavbarPrimaryComponent_div_11_Template, 4, 4, "div", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "div", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](13, SiNavbarPrimaryComponent_span_13_Template, 3, 3, "span", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "div", 11)(15, "div", 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](16, SiNavbarPrimaryComponent_ng_container_16_Template, 5, 3, "ng-container", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](17, "si-navbar-brand", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](18, SiNavbarPrimaryComponent_div_18_Template, 4, 4, "div", 14);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](19, SiNavbarPrimaryComponent_ul_19_Template, 7, 3, "ul", 15);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](20, "div", 16);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarPrimaryComponent_Template_div_click_20_listener($event) {
        return ctx.closeMobileNav($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](21, SiNavbarPrimaryComponent_si_navbar_item_21_Template, 1, 1, "si-navbar-item", 17);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "div", 18);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiNavbarPrimaryComponent_Template_div_click_22_listener($event) {
        return ctx.closeMobileNav($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](23);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](24, SiNavbarPrimaryComponent_si_navbar_profile_menu_24_Template, 4, 2, "si-navbar-profile-menu", 19);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](25, SiNavbarPrimaryComponent_ng_container_25_Template, 12, 8, "ng-container", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("cdkTrapFocus", ctx.appsVisible && !!ctx.appsCategorized && !!ctx.appsCategorized.length)("listInteractionFocusOnLoad", ctx.focusOnLoad);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("listInteractionIsSubList", true)("listInteractionFocus", _r1.offsetParent && !ctx.showMobileNav ? "first" : "")("listInteractionOrientation", _r1.offsetParent && ctx.showMobileNav ? "vert" : "ste")("listInteractionAutofocusFromParent", true);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 21, ctx.navAriaLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](9, 23, ctx.toggleNavigationText));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.appTitle);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.selectedItemTitle);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("show", ctx.showMobileNav);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.appsCategorized);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("logoUrl", ctx.logoUrl)("link", ctx.home);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.appTitle);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.appsCategorized && ctx.appsCategorized.length);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.primaryItems)("ngForTrackBy", ctx.trackByIndex);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !!ctx.accountItem);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.appsVisible && ctx.appsCategorized && ctx.appsCategorized.length);
    }
  },
  dependencies: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_36__.CdkTrapFocus, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiLinkDirective, SiListInteractionDirective, SiListInteractionItemDirective, SiNavbarBrandComponent, SiNavbarItemComponent, SiNavbarProfileMenuComponent, SiTranslatePipe],
  styles: ["@media (max-width: 575.98px){.navbar-primary[_ngcontent-%COMP%]   .navbar-collapse[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]:nth-child(n+3){margin-block-start:16px}.navbar-primary[_ngcontent-%COMP%]   .title-collapse[_ngcontent-%COMP%]{display:none}}@media (min-width: 576px){.navbar-primary[_ngcontent-%COMP%]   .app-switcher-menu[_ngcontent-%COMP%]{display:none}.navbar-primary[_ngcontent-%COMP%]   .navbar-end[_ngcontent-%COMP%]  si-navbar-item:last-child{margin-inline-end:8px}}.navbar-primary[_ngcontent-%COMP%]     .navbar-start .navbar-nav>li>a .icon{display:none!important}.navbar-primary[_ngcontent-%COMP%]     .navbar-start .navbar-nav>li>a .item-title{padding-inline-start:0!important}.navbar-primary[_ngcontent-%COMP%]   .selected-item[_ngcontent-%COMP%]{flex:1;display:flex;align-items:center;justify-content:center;font-weight:700;color:var(--element-ui-2)}.app-switcher-trigger[_ngcontent-%COMP%]{color:var(--element-action-primary-text);background:var(--element-action-primary);flex:0;min-inline-size:48px}.app-switcher-trigger[_ngcontent-%COMP%]:hover, .app-switcher-trigger[_ngcontent-%COMP%]:focus, .app-switcher-trigger[_ngcontent-%COMP%]:active{text-decoration:none;outline:none;background:var(--element-action-primary-hover)}.app-switcher-backdrop[_ngcontent-%COMP%]{z-index:1031;position:fixed;inset:0;background:var(--element-base-translucent-1);opacity:1}.app-switcher[_ngcontent-%COMP%]{position:fixed;inset-block-start:48px;inset-inline:0;min-block-size:200px;max-block-size:calc(100vh - 48px);display:flex;flex-direction:column;z-index:1032;background-color:var(--element-base-1);box-shadow:inset 0 0 4px var(--element-box-shadow-color-1),inset 0 4px 4px var(--element-box-shadow-color-2)}.app-switcher[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover, .app-switcher[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:focus, .app-switcher[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:active{text-decoration:none;outline:none}.apps-show-more[_ngcontent-%COMP%]{display:inline-block;cursor:pointer}.apps-show-more[_ngcontent-%COMP%]:hover{text-decoration:underline}.apps-scroll[_ngcontent-%COMP%]{overflow-y:auto}.apps[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap}.apps.apps-categorized[_ngcontent-%COMP%], .apps.apps-favorite[_ngcontent-%COMP%]{margin-block-start:0px}.app-wrapper[_ngcontent-%COMP%]{position:relative;margin-block-end:8px}.app-wrapper[_ngcontent-%COMP%]:last-child{margin-inline-end:0}.app-container-wrapper[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;text-align:center;margin-block:16px;margin-inline:4px;padding-block:8px;padding-inline:0;inline-size:9rem;max-inline-size:9rem}.app-container-wrapper.app-favorite[_ngcontent-%COMP%], .app-container-wrapper.app-more[_ngcontent-%COMP%]{margin-inline-end:8px}.app-container-wrapper.app-favorite[_ngcontent-%COMP%]:last-child, .app-container-wrapper.app-more[_ngcontent-%COMP%]:last-child{margin-inline-end:4px}.app-container[_ngcontent-%COMP%]{position:relative;display:flex;align-items:center;justify-content:center;block-size:64px;inline-size:64px;margin-block-end:8px}.app-favorite-icon[_ngcontent-%COMP%]{position:absolute;inset-block-start:-8px;inset-inline-end:-1.5rem;cursor:pointer}.app-favorite-icon.favorite[_ngcontent-%COMP%]{color:var(--element-status-caution)}.app[_ngcontent-%COMP%]{color:var(--element-text-primary)}.app.active[_ngcontent-%COMP%]   .app-icon[_ngcontent-%COMP%]{color:var(--element-ui-0);border-color:var(--element-ui-0)}.app[_ngcontent-%COMP%]:hover   .app-icon[_ngcontent-%COMP%]{color:var(--element-action-secondary-text-hover);background-color:var(--element-action-secondary-hover);border-color:var(--element-action-secondary-border-hover)}.app[_ngcontent-%COMP%]:focus{box-shadow:none}.app[_ngcontent-%COMP%]:focus   .app-icon[_ngcontent-%COMP%], .app[_ngcontent-%COMP%]:focus   .icon-add[_ngcontent-%COMP%]{box-shadow:0 0 0 var(--element-button-focus-overlay-width) var(--element-button-focus-overlay-color),0 0 0 calc(var(--element-button-focus-width) + var(--element-button-focus-overlay-width)) var(--element-focus-default)}.app[_ngcontent-%COMP%]   .app-icon[_ngcontent-%COMP%], .app[_ngcontent-%COMP%]   .icon-add[_ngcontent-%COMP%]{border-radius:50%;font-size:48px}.app[_ngcontent-%COMP%]   .app-icon[_ngcontent-%COMP%]{color:var(--element-text-primary);border:1px solid var(--element-ui-4)}.app[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{inline-size:100%;overflow:hidden;text-overflow:ellipsis}.app[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]   .element-export[_ngcontent-%COMP%]{display:inline;line-height:1rem}.start[_ngcontent-%COMP%]{display:flex;justify-content:flex-start;inline-size:100%;padding-inline-end:16px}.end[_ngcontent-%COMP%]{justify-content:flex-end;inline-size:100%}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNavbarPrimaryComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-navbar-primary',
      template: "<div\n  [cdkTrapFocus]=\"appsVisible && !!appsCategorized && !!appsCategorized.length\"\n  siListInteraction\n  listInteractionOrientation=\"vert\"\n  listInteractionFocus=\"first\"\n  [listInteractionFocusOnLoad]=\"focusOnLoad\"\n  class=\"focus-none\"\n>\n  <div siListInteractionItem class=\"focus-none\">\n    <nav\n      #navbar\n      class=\"navbar navbar-primary navbar-expand-sm navbar-light fixed-top elevation-1 focus-inside focus-direct-sub-inside\"\n      [attr.aria-label]=\"navAriaLabel | translate\"\n      siListInteraction\n      listInteractionPosition=\"adjacent\"\n      [listInteractionIsSubList]=\"true\"\n      [listInteractionFocus]=\"navbarToggler.offsetParent && !showMobileNav ? 'first' : ''\"\n      [listInteractionOrientation]=\"navbarToggler.offsetParent && showMobileNav ? 'vert' : 'ste'\"\n      [listInteractionAutofocusFromParent]=\"true\"\n    >\n      <button\n        #navbarToggler\n        type=\"button\"\n        class=\"navbar-toggler focus-inside\"\n        aria-expanded=\"false\"\n        (click)=\"hideAppSwitcher(); toggleMobileNav($event);\"\n        siListInteractionItem\n      >\n        <span class=\"visually-hidden\">{{ toggleNavigationText | translate }}</span>\n        <span class=\"element-menu\"></span>\n      </button>\n      <div *ngIf=\"appTitle\" class=\"title-outside\">\n        <a\n          siListInteractionItem\n          class=\"navbar-app-title focus-inside\"\n          [class.has-selected-item]=\"selectedItemTitle\"\n          [siLink]=\"home\"\n        >\n          <div class=\"navbar-app-title-inner text-truncate px-6 si-body-1\">{{ appTitle }}</div>\n        </a>\n      </div>\n      <div class=\"d-sm-none selected-item\">\n        <span *ngIf=\"selectedItemTitle\">{{ selectedItemTitle! | translate }}</span>\n      </div>\n      <div class=\"collapse navbar-collapse\" [class.show]=\"showMobileNav\">\n        <div class=\"start\">\n          <ng-container *ngIf=\"appsCategorized\">\n            <a\n              #appSwitcherToggle=\"si-list-interaction-item\"\n              href=\"#\"\n              siListInteractionItem\n              class=\"app-switcher-trigger navbar-collapse collapse focus-inside\"\n              [attr.aria-label]=\"openAppSwitcherText | translate\"\n              (click)=\"toggleAppSwitcher(); $event.preventDefault()\"\n            >\n              <i class=\"icon element-thumbnails m-5\"></i>\n            </a>\n          </ng-container>\n          <si-navbar-brand class=\"d-none d-lg-flex\" [logoUrl]=\"logoUrl\" [link]=\"home\"></si-navbar-brand>\n          <div *ngIf=\"appTitle\" class=\"title-collapse\">\n            <a\n              siListInteractionItem\n              class=\"navbar-app-title focus-inside\"\n              [class.has-selected-item]=\"selectedItemTitle\"\n              [siLink]=\"home\"\n            >\n              <div class=\"navbar-app-title-inner text-truncate px-6 si-body-1\">{{ appTitle }}</div>\n            </a>\n          </div>\n        </div>\n        <ul *ngIf=\"appsCategorized && appsCategorized!.length\" class=\"nav navbar-nav app-switcher-menu\">\n          <li class=\"nav-item\">\n            <a\n              href=\"#\"\n              class=\"dropdown-item\"\n              siListInteractionItem\n              (click)=\"toggleAppSwitcher(); focusLaunchpad(); closeMobileNav($event); $event.preventDefault()\"\n            >\n              <i class=\"icon element-thumbnails\"></i>\n              <span class=\"item-title\">{{ appSwitcherTitle | translate}}</span>\n            </a>\n          </li>\n        </ul>\n        <div class=\"navbar-start ms-sm-6\" (click)=\"closeMobileNav($event)\">\n          <si-navbar-item *ngFor=\"let item of primaryItems; trackBy: trackByIndex\" [item]=\"item\"></si-navbar-item>\n        </div>\n        <div class=\"navbar-end end\" (click)=\"closeMobileNav($event)\">\n          <ng-content select=\"si-navbar-item [quickAction]\"></ng-content>\n\n          <si-navbar-profile-menu *ngIf=\"!!accountItem\" [items]=\"accountItems\" [account]=\"accountItem\">\n            <div #ref><ng-content></ng-content></div>\n          </si-navbar-profile-menu>\n        </div>\n      </div>\n    </nav>\n  </div>\n  <ng-container *ngIf=\"appsVisible && appsCategorized && appsCategorized.length\">\n    <div class=\"app-switcher ps-0 ps-sm-6 pt-8 text-center text-sm-start\">\n      <button\n        type=\"button\"\n        siListInteractionItem\n        class=\"btn btn-circle btn-sm btn-ghost element-cancel position-absolute top-0 end-0 mt-6 me-4\"\n        [attr.aria-label]=\"closeAppSwitcherText | translate\"\n        (click)=\"hideAppSwitcher()\"\n      > </button>\n      <div class=\"mx-9\">\n        <p\n          *ngIf=\"appSwitcherTitle\"\n          class=\"mb-4 si-title-1 lh-1\"\n        >{{ appSwitcherTitle | translate }}</p>\n        <p\n          *ngIf=\"appSwitcherSubTitle\"\n          class=\"si-body-2 text-secondary\"\n          [class.mb-9]=\"isCategorized\"\n          [class.mb-4]=\"!isCategorized\"\n        >{{ appSwitcherSubTitle | translate }}</p>\n      </div>\n      <div class=\"apps-scroll px-9 pb-8\">\n        <div *ngIf=\"showFavorites\" class=\"apps-category focus-none\" siListInteractionItem>\n          <span class=\"si-title-1 apps-category-title\">{{ favoriteAppsTitle | translate }}</span>\n          <div\n            class=\"apps apps-favorite mt-4 justify-content-center justify-content-sm-start focus-direct-sub-inside\"\n            siListInteraction\n            [listInteractionIsSubList]=\"true\"\n            listInteractionPosition=\"adjacent\"\n            listInteractionOrientation=\"ste\"\n            #appSwitcherKeyboardInteraction=\"si-list-interaction\"\n          >\n            <a\n              *ngFor=\"let app of appsFavorites; trackBy: trackByIndex\"\n              siListInteractionItem\n              [siLink]=\"app\"\n              activeClass=\"active\"\n              class=\"app-container-wrapper app app-favorite\"\n              (click)=\"hideAppSwitcher()\"\n            >\n              <div class=\"app-container app-icon\" [ngClass]=\"app.icon ?? ''\"></div>\n              <span class=\"title si-title-2\">{{ app.title! | translate }}</span>\n            </a>\n          </div>\n        </div>\n        <a\n          *ngIf=\"showFavorites\"\n          siListInteractionItem\n          class=\"dropdown-toggle apps-show-more py-4 mb-6 mt-9 si-title-2\"\n          [class.show]=\"showAllApps\"\n          (click)=\"showAllApps = !showAllApps\"\n          (keydown.enter)=\"showAllApps = !showAllApps\"\n        >\n          {{ (showAllApps ? showLessAppsTitle : showMoreAppsTitle) | translate }}<i class=\"dropdown-caret icon element-down-2\"></i>\n        </a>\n        <ng-container *ngIf=\"!showFavorites || showAllApps\">\n          <div\n            *ngFor=\"let appsCategory of appsCategorized; let i = index; trackBy: trackByIndex\"\n            class=\"apps-category focus-none\"\n            [class.mt-4]=\"isCategorized\"\n            siListInteractionItem\n          >\n            <span *ngIf=\"appsCategory.category\" class=\"si-title-1 apps-category-title\">{{ appsCategory.category | translate }}</span>\n            <span *ngIf=\"!appsCategory.category && isCategorized\" class=\"si-title-1 apps-category-title\">{{ defaultAppsTitle | translate }}</span>\n            <div\n              class=\"apps mt-4 ms-0 ms-sm-8 justify-content-center justify-content-sm-start focus-direct-sub-inside\"\n              [class.apps-categorized]=\"isCategorized\"\n              siListInteraction\n              [listInteractionIsSubList]=\"true\"\n              listInteractionPosition=\"adjacent\"\n              listInteractionOrientation=\"ste\"\n              #appSwitcherKeyboardInteraction=\"si-list-interaction\"\n            >\n              <div *ngFor=\"let app of appsCategory.items; trackBy: trackByIndex\" class=\"app-wrapper\">\n                <div *ngIf=\"appItemsFavorites\" class=\"app-container-wrapper position-absolute\">\n                  <div class=\"app-container\">\n                    <i\n                      class=\"icon app-favorite-icon\"\n                      [class.favorite]=\"app.isFavorite\"\n                      [class.element-favorites-filled]=\"app.isFavorite\"\n                      [class.element-favorites]=\"!app.isFavorite\"\n                      (click)=\"toggleFavorite(app)\"\n                    ></i>\n                  </div>\n                </div>\n                <a\n                  siListInteractionItem\n                  [siLink]=\"app\"\n                  activeClass=\"active\"\n                  class=\"app-container-wrapper app\"\n                  (keydown.space)=\"toggleFavorite(app)\"\n                  (click)=\"hideAppSwitcherOnClick($event.target)\"\n                >\n                  <div class=\"app-container app-icon\" [ngClass]=\"app.icon ?? ''\"></div>\n                  <span class=\"title si-title-2\">\n                    {{ app.title! | translate }}<i *ngIf=\"app.isExternal\" class=\"icon element-export my-n3\" role=\"presentation\"></i>\n                  </span>\n                </a>\n              </div>\n              <div class=\"app-wrapper\">\n                <a\n                  *ngIf=\"allAppsLink && appsCategorized.length - 1 === i\"\n                  siListInteractionItem\n                  [siLink]=\"allAppsLink\"\n                  class=\"app-container-wrapper app app-more\"\n                  (click)=\"hideAppSwitcher()\"\n                >\n                  <div class=\"app-container icon-add btn btn-circle btn-secondary {{ allAppsLink?.icon || 'element-plus' }}\"></div>\n                  <span class=\"title si-title-2\">{{ (allAppsLink?.title || 'Add more')! | translate }}</span>\n                </a>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n    <div class=\"app-switcher-backdrop\" (click)=\"appsVisible = false\"></div>\n  </ng-container>\n</div>\n",
      styles: ["@media (max-width: 575.98px){.navbar-primary .navbar-collapse>*:nth-child(n+3){margin-block-start:16px}.navbar-primary .title-collapse{display:none}}@media (min-width: 576px){.navbar-primary .app-switcher-menu{display:none}.navbar-primary .navbar-end::ng-deep si-navbar-item:last-child{margin-inline-end:8px}}.navbar-primary ::ng-deep .navbar-start .navbar-nav>li>a .icon{display:none!important}.navbar-primary ::ng-deep .navbar-start .navbar-nav>li>a .item-title{padding-inline-start:0!important}.navbar-primary .selected-item{flex:1;display:flex;align-items:center;justify-content:center;font-weight:700;color:var(--element-ui-2)}.app-switcher-trigger{color:var(--element-action-primary-text);background:var(--element-action-primary);flex:0;min-inline-size:48px}.app-switcher-trigger:hover,.app-switcher-trigger:focus,.app-switcher-trigger:active{text-decoration:none;outline:none;background:var(--element-action-primary-hover)}.app-switcher-backdrop{z-index:1031;position:fixed;inset:0;background:var(--element-base-translucent-1);opacity:1}.app-switcher{position:fixed;inset-block-start:48px;inset-inline:0;min-block-size:200px;max-block-size:calc(100vh - 48px);display:flex;flex-direction:column;z-index:1032;background-color:var(--element-base-1);box-shadow:inset 0 0 4px var(--element-box-shadow-color-1),inset 0 4px 4px var(--element-box-shadow-color-2)}.app-switcher a:hover,.app-switcher a:focus,.app-switcher a:active{text-decoration:none;outline:none}.apps-show-more{display:inline-block;cursor:pointer}.apps-show-more:hover{text-decoration:underline}.apps-scroll{overflow-y:auto}.apps{display:flex;flex-wrap:wrap}.apps.apps-categorized,.apps.apps-favorite{margin-block-start:0px}.app-wrapper{position:relative;margin-block-end:8px}.app-wrapper:last-child{margin-inline-end:0}.app-container-wrapper{display:flex;flex-direction:column;align-items:center;text-align:center;margin-block:16px;margin-inline:4px;padding-block:8px;padding-inline:0;inline-size:9rem;max-inline-size:9rem}.app-container-wrapper.app-favorite,.app-container-wrapper.app-more{margin-inline-end:8px}.app-container-wrapper.app-favorite:last-child,.app-container-wrapper.app-more:last-child{margin-inline-end:4px}.app-container{position:relative;display:flex;align-items:center;justify-content:center;block-size:64px;inline-size:64px;margin-block-end:8px}.app-favorite-icon{position:absolute;inset-block-start:-8px;inset-inline-end:-1.5rem;cursor:pointer}.app-favorite-icon.favorite{color:var(--element-status-caution)}.app{color:var(--element-text-primary)}.app.active .app-icon{color:var(--element-ui-0);border-color:var(--element-ui-0)}.app:hover .app-icon{color:var(--element-action-secondary-text-hover);background-color:var(--element-action-secondary-hover);border-color:var(--element-action-secondary-border-hover)}.app:focus{box-shadow:none}.app:focus .app-icon,.app:focus .icon-add{box-shadow:0 0 0 var(--element-button-focus-overlay-width) var(--element-button-focus-overlay-color),0 0 0 calc(var(--element-button-focus-width) + var(--element-button-focus-overlay-width)) var(--element-focus-default)}.app .app-icon,.app .icon-add{border-radius:50%;font-size:48px}.app .app-icon{color:var(--element-text-primary);border:1px solid var(--element-ui-4)}.app .title{inline-size:100%;overflow:hidden;text-overflow:ellipsis}.app .title .element-export{display:inline;line-height:1rem}.start{display:flex;justify-content:flex-start;inline-size:100%;padding-inline-end:16px}.end{justify-content:flex-end;inline-size:100%}\n"]
    }]
  }], function () {
    return [{
      type: _angular_router__WEBPACK_IMPORTED_MODULE_27__.Router
    }, {
      type: _angular_router__WEBPACK_IMPORTED_MODULE_27__.ActivatedRoute
    }];
  }, {
    primaryItems: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    accountItems: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    account: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    logoUrl: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    appTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    homeLink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    home: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    appSwitcherTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    appSwitcherSubTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    favoriteAppsTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    defaultAppsTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showMoreAppsTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showLessAppsTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    appItems: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    appCategoryItems: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    appItemsFavorites: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    allAppsLink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    focusOnLoad: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    navAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    closeAppSwitcherText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    openAppSwitcherText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    toggleNavigationText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    appItemFavoriteChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    ref: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['ref', {
        static: true
      }]
    }],
    navbar: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['navbar', {
        static: false
      }]
    }],
    appSwitcherToggleComponent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['appSwitcherToggle']
    }],
    appSwitcherKeyboardInteraction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['appSwitcherKeyboardInteraction']
    }],
    onClick: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['document:click', ['$event.target']]
    }]
  });
})();

// ------------------------------------------------------------------------------

// ------------------------------------------------------------------------------

const components$1 = [SiNavbarBrandComponent, SiNavbarItemComponent, SiNavbarProfileMenuComponent, SiNavbarPrimaryComponent];
class SiNavbarModule {}
SiNavbarModule.ɵfac = function SiNavbarModule_Factory(t) {
  return new (t || SiNavbarModule)();
};
SiNavbarModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiNavbarModule
});
SiNavbarModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_36__.A11yModule, _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterModule, SiDropdownModule, SiLinkModule, SiListInteractionModule, SiMenuModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNavbarModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_36__.A11yModule, _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterModule, SiDropdownModule, SiLinkModule, SiListInteractionModule, SiMenuModule, SiTranslateModule],
      declarations: components$1,
      exports: components$1
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

class SiNavbarSecondaryComponent {
  constructor() {
    /**
     * Array of navbar items.
     */
    this.items = [];
    /**
     * If multiple secondary navbars are used each one needs a distinct aria label.
     * Required for a11y
     */
    this.navAriaLabel = 'Secondary';
    this.trackByIndex = index => index;
    this.active = false;
  }
  submenuActiveChange(active) {
    this.active = active;
  }
}
SiNavbarSecondaryComponent.ɵfac = function SiNavbarSecondaryComponent_Factory(t) {
  return new (t || SiNavbarSecondaryComponent)();
};
SiNavbarSecondaryComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiNavbarSecondaryComponent,
  selectors: [["si-navbar-secondary"]],
  inputs: {
    items: "items",
    navAriaLabel: "navAriaLabel"
  },
  ngContentSelectors: _c1,
  decls: 5,
  vars: 5,
  consts: [[1, "navbar", "navbar-secondary"], [1, "navbar-collapse", "navbar-expand"], ["role", "menu", "siListInteraction", "", 1, "nav", "navbar-nav", "nav-tabs", "focus-inside"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "dropdown nav-item", "siDropdown", "", "dropdownContainer", "body", "role", "presentation", 3, "dropdownFocusOnOpen", 4, "ngIf"], ["role", "presentation", "class", "nav-item", 4, "ngIf"], ["siDropdown", "", "dropdownContainer", "body", "role", "presentation", 1, "dropdown", "nav-item", 3, "dropdownFocusOnOpen"], ["siDropdownToggle", "", "itemClass", "nav-link", 3, "item", "disableParentClick", "forceActive", "focusStylingInside", "dropdownToggle"], ["dropdownToggle", "si-dropdown-toggle"], [4, "ngIf"], ["siDropdownMenu", "", "position", "adjacent", 1, "dropdown-menu", 3, "items", "isSubList", "activeChange"], ["siDropdownMenu", "", 1, "dropdown-menu", "custom-content"], ["role", "presentation", 1, "nav-item"], ["itemClass", "nav-link", 3, "item", "focusStylingInside"]],
  template: function SiNavbarSecondaryComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "nav", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 1)(3, "ul", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiNavbarSecondaryComponent_ng_container_4_Template, 3, 2, "ng-container", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 3, ctx.navAriaLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.items)("ngForTrackBy", ctx.trackByIndex);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiDropdownDirective, SiDropdownMenuDirective, SiDropdownToggleDirective, SiListInteractionDirective, SiMenuComponent, SiMenuItemComponent, SiTranslatePipe],
  styles: [".navbar-expand[_ngcontent-%COMP%]{overflow-y:hidden;overflow-x:auto}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNavbarSecondaryComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-navbar-secondary',
      template: "<nav class=\"navbar navbar-secondary\" [attr.aria-label]=\"navAriaLabel | translate\">\n  <div class=\"navbar-collapse navbar-expand\">\n    <ul class=\"nav navbar-nav nav-tabs focus-inside\" role=\"menu\" siListInteraction>\n      <ng-container *ngFor=\"let item of items; trackBy: trackByIndex\">\n        <li\n          *ngIf=\"item.items || item.customContent\"\n          class=\"dropdown nav-item\"\n          siDropdown\n          dropdownContainer=\"body\"\n          [dropdownFocusOnOpen]=\"false\"\n          role=\"presentation\"\n        >\n          <si-menu-item\n            siDropdownToggle\n            #dropdownToggle=\"si-dropdown-toggle\"\n            [item]=\"item\"\n            [disableParentClick]=\"false\"\n            [forceActive]=\"active\"\n            [focusStylingInside]=\"true\"\n            [dropdownToggle]=\"dropdownToggle\"\n            itemClass=\"nav-link\"\n          ></si-menu-item>\n          <ng-container *ngIf=\"item.items\">\n            <si-menu\n              siDropdownMenu\n              class=\"dropdown-menu\"\n              [items]=\"item.items\"\n              [isSubList]=\"true\"\n              position=\"adjacent\"\n              (activeChange)=\"submenuActiveChange($event)\"\n            ></si-menu>\n          </ng-container>\n          <ng-container *ngIf=\"item.customContent\">\n            <div class=\"dropdown-menu custom-content\" siDropdownMenu>\n              <ng-content></ng-content>\n            </div>\n          </ng-container>\n        </li>\n        <li *ngIf=\"!item.items && !item.customContent\" role=\"presentation\" class=\"nav-item\">\n          <si-menu-item\n            itemClass=\"nav-link\"\n            [item]=\"item\"\n            [focusStylingInside]=\"true\"\n          ></si-menu-item>\n        </li>\n      </ng-container>\n    </ul>\n  </div>\n</nav>\n",
      styles: [".navbar-expand{overflow-y:hidden;overflow-x:auto}\n"]
    }]
  }], null, {
    items: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    navAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiNavbarSecondaryModule {}
SiNavbarSecondaryModule.ɵfac = function SiNavbarSecondaryModule_Factory(t) {
  return new (t || SiNavbarSecondaryModule)();
};
SiNavbarSecondaryModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiNavbarSecondaryModule
});
SiNavbarSecondaryModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiDropdownModule, SiListInteractionModule, SiMenuModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNavbarSecondaryModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiDropdownModule, SiListInteractionModule, SiMenuModule, SiTranslateModule],
      declarations: [SiNavbarSecondaryComponent],
      exports: [SiNavbarSecondaryComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

class SiSearchBarComponent {
  constructor() {
    this._value = '';
    this.debouncer = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    /**
     * Time unit change of search input takes effect.
     */
    this.debounceTime = 400;
    /**
     * Define search input placeholder.
     */
    this.placeholder = '';
    /**
     * Define search input content.
     */
    this.tabbable = true;
    this._readonly = false;
    /**
     * Color to use for component background
     */
    this.colorVariant = 'base-1';
    /**
     * Output callback event will provide you with search term if search input changes.
     */
    this.searchChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.isInvalid = false;
    this.inFocus = false;
    this.onChange = _val => {};
    this.onTouch = () => {};
  }
  /**
   * Whether the search is tabbable or not.
   */
  get value() {
    return this._value;
  }
  /**
   * @defaultref {@link _value}
   */
  set value(value) {
    if (value !== this._value) {
      this.writeValue(value);
      this.onChange(this._value);
      this.onTouch();
      this.searchChange.emit(this._value);
    }
  }
  /**
   * Disable component
   */
  get disabled() {
    return this.inputRef.nativeElement.disabled;
  }
  set disabled(value) {
    this.setDisabledState((0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__.coerceBooleanProperty)(value));
  }
  get readonly() {
    return this._readonly;
  }
  /**
   * @defaultref {@link _readonly}
   */
  set readonly(value) {
    this._readonly = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__.coerceBooleanProperty)(value);
  }
  writeValue(value) {
    this._value = value ?? '';
    this.inputRef.nativeElement.value = this._value;
  }
  registerOnChange(fn) {
    this.onChange = fn;
  }
  registerOnTouched(fn) {
    this.onTouch = fn;
  }
  setDisabledState(isDisabled) {
    this.inputRef.nativeElement.disabled = isDisabled;
  }
  ngOnInit() {
    this.debouncer.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_41__.debounceTime)(this.debounceTime)).subscribe(value => this.value = value);
  }
  ngOnDestroy() {
    this.debouncer.complete();
  }
  resetForm() {
    this.value = '';
  }
  isProhibitedCharactersUsed(searchString) {
    if (!this.prohibitedCharacters || !searchString) {
      return false;
    }
    for (const prohibitedCharacter of this.prohibitedCharacters) {
      if (searchString.includes(prohibitedCharacter)) {
        return true;
      }
    }
    return false;
  }
  focus() {
    this.inputRef.nativeElement.focus();
  }
  onCancelFocus(event) {
    event.stopPropagation();
  }
  input(event) {
    const value = event.target.value;
    if (!this.isProhibitedCharactersUsed(value)) {
      this.debouncer.next(value);
    }
  }
}
SiSearchBarComponent.ɵfac = function SiSearchBarComponent_Factory(t) {
  return new (t || SiSearchBarComponent)();
};
SiSearchBarComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiSearchBarComponent,
  selectors: [["si-search-bar"]],
  viewQuery: function SiSearchBarComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c38, 7);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.inputRef = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function SiSearchBarComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("focus", function SiSearchBarComponent_focus_HostBindingHandler() {
        return ctx.focus();
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("readonly", ctx._readonly);
    }
  },
  inputs: {
    debounceTime: "debounceTime",
    prohibitedCharacters: "prohibitedCharacters",
    placeholder: "placeholder",
    showIcon: "showIcon",
    tabbable: "tabbable",
    value: "value",
    disabled: "disabled",
    readonly: "readonly",
    colorVariant: "colorVariant"
  },
  outputs: {
    searchChange: "searchChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
    useExisting: SiSearchBarComponent,
    multi: true
  }])],
  decls: 5,
  vars: 17,
  consts: [[1, "position-relative"], ["class", "search-bar-icon icon element-search text-secondary", 4, "ngIf"], ["type", "text", 1, "form-control", 3, "placeholder", "readonly", "focus", "blur", "input"], ["inputRef", ""], ["type", "button", "aria-label", "clear", "class", "btn btn-circle btn-xs btn-ghost cancel-button element-cancel", 3, "disabled", "click", "focusin", 4, "ngIf"], [1, "search-bar-icon", "icon", "element-search", "text-secondary"], ["type", "button", "aria-label", "clear", 1, "btn", "btn-circle", "btn-xs", "btn-ghost", "cancel-button", "element-cancel", 3, "disabled", "click", "focusin"]],
  template: function SiSearchBarComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiSearchBarComponent_i_1_Template, 1, 0, "i", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "input", 2, 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("focus", function SiSearchBarComponent_Template_input_focus_2_listener() {
        return ctx.inFocus = true;
      })("blur", function SiSearchBarComponent_Template_input_blur_2_listener() {
        return ctx.inFocus = false;
      })("input", function SiSearchBarComponent_Template_input_input_2_listener($event) {
        return ctx.input($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiSearchBarComponent_button_4_Template, 1, 1, "button", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx.disabled)("focus", ctx.inFocus);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.showIcon);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dark-background", ctx.colorVariant === "base-0")("ps-9", ctx.showIcon)("is-invalid", ctx.isInvalid)("icon-end", ctx.value);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("placeholder", ctx.placeholder)("readonly", ctx.readonly);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx.tabbable ? "" : "-1");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.value);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf],
  styles: ["[_nghost-%COMP%]{--search-bar-icon-color: var(--element-text-secondary);--input-background-color: var(--element-base-1);--input-background-hover-color: var(--element-base-1)}[_nghost-%COMP%]   div[_ngcontent-%COMP%]:hover   .search-bar-icon[_ngcontent-%COMP%], [_nghost-%COMP%]   div[_ngcontent-%COMP%]:hover   [_ngcontent-%COMP%]::placeholder, [_nghost-%COMP%]   div.focus[_ngcontent-%COMP%]   .search-bar-icon[_ngcontent-%COMP%], [_nghost-%COMP%]   div.focus[_ngcontent-%COMP%]   [_ngcontent-%COMP%]::placeholder{color:var(--element-text-primary)!important}.dark-background[_ngcontent-%COMP%]{--input-background-color: var(--element-base-0);--input-background-hover-color: var(--element-ui-4)}input[_ngcontent-%COMP%]{box-shadow:none;border-color:var(--element-base-1)!important;transition:none;background-color:var(--input-background-color);border-radius:4px}input.form-control[_ngcontent-%COMP%]:focus-visible{background-color:var(--input-background-color);border-color:var(--input-background-color)!important}input.form-control[_ngcontent-%COMP%]:hover:not([disabled]){border-color:var(--element-ui-4)}.cancel-button[_ngcontent-%COMP%]{position:absolute;inset-block-start:4px;inset-inline-end:4px}.is-invalid[_ngcontent-%COMP%] ~ .cancel-button[_ngcontent-%COMP%]{color:var(--element-status-danger)}.search-bar-icon[_ngcontent-%COMP%]{position:absolute;inset-block-start:4px;inset-inline-start:4px;color:var(--search-bar-icon-color);line-height:1}.icon-end[_ngcontent-%COMP%]{padding-inline-end:1.5rem}[_ngcontent-%COMP%]::placeholder{color:var(--element-text-secondary);padding-inline-start:2px}.disabled[_ngcontent-%COMP%]   .search-bar-icon[_ngcontent-%COMP%], .disabled[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .disabled[_ngcontent-%COMP%]   .cancel-button[_ngcontent-%COMP%], .disabled[_ngcontent-%COMP%]   [_ngcontent-%COMP%]::placeholder{color:var(--element-text-disabled)}.disabled[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{background-color:var(--input-background-color);border-color:var(--input-background-color)}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSearchBarComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-search-bar',
      providers: [{
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
        useExisting: SiSearchBarComponent,
        multi: true
      }],
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div [class.disabled]=\"disabled\" [class.focus]=\"inFocus\" class=\"position-relative\">\n  <i *ngIf=\"showIcon\" class=\"search-bar-icon icon element-search text-secondary\"></i>\n  <input\n    #inputRef\n    type=\"text\"\n    class=\"form-control\"\n    [placeholder]=\"placeholder\"\n    [class.dark-background]=\"colorVariant === 'base-0'\"\n    [class.ps-9]=\"showIcon\"\n    [class.is-invalid]=\"isInvalid\"\n    [class.icon-end]=\"value\"\n    (focus)=\"inFocus = true\"\n    (blur)=\"inFocus = false\"\n    [attr.tabindex]=\"tabbable ? '' : '-1'\"\n    [readonly]=\"readonly\"\n    (input)=\"input($event)\"\n  />\n  <button\n    *ngIf=\"value\"\n    [disabled]=\"disabled || readonly\"\n    type=\"button\"\n    aria-label=\"clear\"\n    class=\"btn btn-circle btn-xs btn-ghost cancel-button element-cancel\"\n    (click)=\"resetForm()\"\n    (focusin)=\"onCancelFocus($event)\"\n  ></button>\n</div>\n",
      styles: [":host{--search-bar-icon-color: var(--element-text-secondary);--input-background-color: var(--element-base-1);--input-background-hover-color: var(--element-base-1)}:host div:hover .search-bar-icon,:host div:hover ::placeholder,:host div.focus .search-bar-icon,:host div.focus ::placeholder{color:var(--element-text-primary)!important}.dark-background{--input-background-color: var(--element-base-0);--input-background-hover-color: var(--element-ui-4)}input{box-shadow:none;border-color:var(--element-base-1)!important;transition:none;background-color:var(--input-background-color);border-radius:4px}input.form-control:focus-visible{background-color:var(--input-background-color);border-color:var(--input-background-color)!important}input.form-control:hover:not([disabled]){border-color:var(--element-ui-4)}.cancel-button{position:absolute;inset-block-start:4px;inset-inline-end:4px}.is-invalid~.cancel-button{color:var(--element-status-danger)}.search-bar-icon{position:absolute;inset-block-start:4px;inset-inline-start:4px;color:var(--search-bar-icon-color);line-height:1}.icon-end{padding-inline-end:1.5rem}::placeholder{color:var(--element-text-secondary);padding-inline-start:2px}.disabled .search-bar-icon,.disabled input,.disabled .cancel-button,.disabled ::placeholder{color:var(--element-text-disabled)}.disabled input{background-color:var(--input-background-color);border-color:var(--input-background-color)}\n"]
    }]
  }], null, {
    inputRef: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['inputRef', {
        static: true
      }]
    }],
    debounceTime: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    prohibitedCharacters: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    placeholder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    tabbable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    _readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.readonly']
    }],
    readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    colorVariant: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    searchChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    focus: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focus']
    }]
  });
})();
class SiNavbarVerticalFlyoutComponent {
  constructor(platformId, cdRef) {
    this.cdRef = cdRef;
    this.closeMenu = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter(true);
    this.flyoutItems = [];
    this.visible = 'hidden';
    this.calculatedTop = 0;
    this.clickHandler = event => this.handleWindowClick(event);
    this.keydownHandler = event => {
      if (event.key === 'Enter') {
        this.handleWindowClick(event);
      }
    };
    this.isBrowser = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId);
  }
  ngOnInit() {
    this.flyoutItems = [{
      ...this.item,
      items: undefined
    }, ...(this.item.items ? this.item.items : [])];
    setTimeout(() => this.setPosition());
    // CAPTURE click and keydown enter event to ensure the menu is closed automatically
    if (this.isBrowser) {
      window.addEventListener('click', this.clickHandler, true);
      window.addEventListener('keydown', this.keydownHandler, true);
    }
  }
  ngOnDestroy() {
    if (this.isBrowser) {
      window.removeEventListener('click', this.clickHandler, true);
      window.removeEventListener('keydown', this.keydownHandler, true);
    }
  }
  setPosition() {
    this.calculatedTop = this.top;
    // check if there's enough room below, adjust if not
    const height = this.menuRef.nativeElement.offsetHeight;
    const navbarTop = this.navbar.offsetTop;
    const navbarHeight = this.navbar.offsetHeight;
    const avail = navbarHeight - this.top;
    if (height > avail) {
      this.calculatedTop -= height - avail;
      if (this.calculatedTop < 0) {
        this.calculatedTop = 0;
      }
    }
    this.calculatedTop += navbarTop;
    this.visible = 'visible';
    this.cdRef.markForCheck();
  }
  handleWindowClick(_event) {
    this.closeMenu.emit();
  }
}
SiNavbarVerticalFlyoutComponent.ɵfac = function SiNavbarVerticalFlyoutComponent_Factory(t) {
  return new (t || SiNavbarVerticalFlyoutComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiNavbarVerticalFlyoutComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiNavbarVerticalFlyoutComponent,
  selectors: [["si-navbar-vertical-flyout"]],
  viewQuery: function SiNavbarVerticalFlyoutComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c13, 7, _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.menuRef = _t.first);
    }
  },
  inputs: {
    item: "item",
    top: "top",
    navbar: "navbar",
    menuParentItem: "menuParentItem"
  },
  outputs: {
    closeMenu: "closeMenu"
  },
  decls: 2,
  vars: 7,
  consts: [[3, "items", "isSubList", "parentItem"], ["menu", ""]],
  template: function SiNavbarVerticalFlyoutComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "si-menu", 0, 1);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("visibility", ctx.visible)("top", ctx.calculatedTop, "px");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("items", ctx.flyoutItems)("isSubList", true)("parentItem", ctx.menuParentItem);
    }
  },
  dependencies: [SiMenuComponent],
  styles: ["[_nghost-%COMP%]{display:block}[_nghost-%COMP%]   si-menu[_ngcontent-%COMP%]{display:block;position:fixed;inset-inline-start:48px;margin-inline-start:2px;margin-block-start:0}[_nghost-%COMP%]   si-menu[_ngcontent-%COMP%]     li:first-child .dropdown-item{font-weight:700}[_nghost-%COMP%]   si-menu.dropdown-menu[_ngcontent-%COMP%]  si-menu-item>a.dropdown-item>span.item-title{display:inline}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNavbarVerticalFlyoutComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-navbar-vertical-flyout',
      template: "<si-menu\n  #menu\n  [items]=\"flyoutItems\"\n  [style.visibility]=\"visible\"\n  [style.top.px]=\"calculatedTop\"\n  [isSubList]=\"true\"\n  [parentItem]=\"menuParentItem\"\n></si-menu>\n",
      styles: [":host{display:block}:host si-menu{display:block;position:fixed;inset-inline-start:48px;margin-inline-start:2px;margin-block-start:0}:host si-menu ::ng-deep li:first-child .dropdown-item{font-weight:700}:host si-menu.dropdown-menu::ng-deep si-menu-item>a.dropdown-item>span.item-title{display:inline}\n"]
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    menuRef: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['menu', {
        static: true,
        read: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
      }]
    }],
    item: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    top: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    navbar: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    menuParentItem: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    closeMenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiNavbarVerticalItemComponent {
  get isLink() {
    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
    return this.item.action || this.item.link || this.item.href;
  }
  constructor(elementRef, cdRef) {
    this.elementRef = elementRef;
    this.cdRef = cdRef;
    this.nav = true;
    this.textOnly = false;
    this.collapsed = '';
    this.menuTrigger = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.open = false;
    this.expanded = false;
    this.subItemActive = false;
    this.flyOut = false;
    this.flyOutTop = 0;
    this.autoExpanded = false;
    this.trackByIndex = index => index;
  }
  ngOnChanges(changes) {
    if (changes.item?.currentValue.expanded !== undefined && this.expanded !== changes.item.currentValue.expanded) {
      this.triggerMenu(undefined, false);
    }
  }
  checkActive() {
    this.subItemActive = this.itemLink?.active || !!this.subItems?.some(item => item.active);
    if (this.subItemActive && !this.autoExpanded) {
      this.autoExpanded = true;
      this.open = true;
      this.expanded = true;
      this.item.expanded = true;
      this.menuMaxHeight = undefined; // prevent animation
      this.setExpandedHeight();
      this.menuTrigger.emit();
    }
    this.cdRef.markForCheck();
  }
  triggerMenu(event, animate = true) {
    event?.preventDefault();
    if (this.collapsed) {
      this.triggerFlyout();
      return;
    }
    this.flyOut = false;
    this.open = !this.open;
    // set to undefined to disable animation
    this.menuMaxHeight = animate ? 0 : undefined;
    this.item.expanded = !this.expanded;
    if (this.expanded) {
      setTimeout(() => {
        this.expanded = false;
        this.cdRef.markForCheck();
      }, 500);
    } else {
      this.expanded = true;
      this.setExpandedHeight();
    }
    this.menuTrigger.emit();
    this.cdRef.markForCheck();
  }
  triggerItemOrMenu(event) {
    if (!this.collapsed && this.isLink) {
      this.itemLink.onClick(event);
    } else {
      this.triggerMenu(event);
    }
  }
  setExpandedHeight() {
    setTimeout(() => {
      this.menuMaxHeight = this.menuBody?.nativeElement?.scrollHeight;
      this.cdRef.markForCheck();
    });
  }
  triggerFlyout() {
    this.flyOut = !this.flyOut;
    this.flyOutTop = this.elementRef.nativeElement.offsetTop - this.scroller.scrollTop;
    this.cdRef.markForCheck();
  }
}
SiNavbarVerticalItemComponent.ɵfac = function SiNavbarVerticalItemComponent_Factory(t) {
  return new (t || SiNavbarVerticalItemComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiNavbarVerticalItemComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiNavbarVerticalItemComponent,
  selectors: [["si-navbar-vertical-item"]],
  viewQuery: function SiNavbarVerticalItemComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c39, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c40, 5, SiLinkDirective);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c41, 5, SiLinkDirective);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.menuBody = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.itemLink = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.subItems = _t);
    }
  },
  hostVars: 4,
  hostBindings: function SiNavbarVerticalItemComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("navbar-nav", ctx.nav)("text-only", ctx.textOnly);
    }
  },
  inputs: {
    item: "item",
    textOnly: "textOnly",
    navbar: "navbar",
    scroller: "scroller",
    collapsed: "collapsed",
    collapseButtonText: "collapseButtonText",
    expandButtonText: "expandButtonText"
  },
  outputs: {
    menuTrigger: "menuTrigger"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 3,
  vars: 3,
  consts: [["class", "section-item fw-bold text-secondary px-5", 4, "ngIf"], ["class", "nav-item pe-5 nav-main-item focus-inside", "activeClass", "active", "role", "menuitem", "siListInteractionItem", "", 3, "siLink", "listInteractionItemDisabled", "activeChange", 4, "ngIf"], ["role", "menu", "class", "sub-menu navbar-nav", 3, "open", "expanded", "sub-active", 4, "ngIf"], [1, "section-item", "fw-bold", "text-secondary", "px-5"], ["activeClass", "active", "role", "menuitem", "siListInteractionItem", "", 1, "nav-item", "pe-5", "nav-main-item", "focus-inside", 3, "siLink", "listInteractionItemDisabled", "activeChange"], ["itemLink", "siLink"], ["class", "icon ms-5 me-n2", "role", "presentation", 3, "ngClass", 4, "ngIf"], ["class", "badge-text", 4, "ngIf"], [1, "item-title", "text-truncate", "fw-bold"], ["class", "badge", 3, "ngClass", 4, "ngIf"], ["role", "presentation", 1, "icon", "ms-5", "me-n2", 3, "ngClass"], [1, "badge-text"], [1, "badge", 3, "ngClass"], ["role", "menu", 1, "sub-menu", "navbar-nav"], [1, "d-flex"], ["siListInteractionItem", "", 1, "flex-fill", "nav-item", "pe-5", "nav-main-item", "focus-inside", 3, "listInteractionItemDisabled", "click", "keydown.enter"], ["menuParentItem", "si-list-interaction-item"], ["activeClass", "active", "tabindex", "-1", 1, "d-none", 3, "siLink", "keydown.enter", "activeChange"], ["class", "icon ps-5 me-n2", "role", "presentation", 3, "ngClass", 4, "ngIf"], [1, "item-title", "text-truncate", "fw-bold", "ps-5"], ["siListInteractionItem", "", "role", "button", 1, "nav-item", "px-5", "nav-main-item", "expander", "navbar-vertical-no-collapse", "focus-inside", 3, "listInteractionItemDisabled", "click", "keydown.enter"], ["role", "presentation", 1, "dropdown-caret", "element-down-2"], [1, "menu-body"], ["menuBody", ""], ["class", "nav-item nav-sub-item focus-inside ps-9 pe-5", "activeClass", "active", "role", "menuitem", "siListInteractionItem", "", 3, "siLink", "listInteractionItemDisabled", "activeChange", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "item", "top", "navbar", "menuParentItem", "closeMenu", 4, "ngIf"], ["role", "presentation", 1, "icon", "ps-5", "me-n2", 3, "ngClass"], ["activeClass", "active", "role", "menuitem", "siListInteractionItem", "", 1, "nav-item", "nav-sub-item", "focus-inside", "ps-9", "pe-5", 3, "siLink", "listInteractionItemDisabled", "activeChange"], ["siLink", "siLink"], [1, "item-title", "text-truncate"], [3, "item", "top", "navbar", "menuParentItem", "closeMenu"]],
  template: function SiNavbarVerticalItemComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiNavbarVerticalItemComponent_div_0_Template, 3, 3, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiNavbarVerticalItemComponent_a_1_Template, 8, 13, "a", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiNavbarVerticalItemComponent_div_2_Template, 19, 35, "div", 2);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.isLink && !ctx.item.items);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.isLink && !ctx.item.items);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.item.items);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiLinkDirective, SiListInteractionItemDirective, SiNavbarVerticalFlyoutComponent, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:flex;overflow:hidden}[_nghost-%COMP%] > *[_ngcontent-%COMP%]{flex:1;white-space:nowrap}.nav-item[_ngcontent-%COMP%], .section-item[_ngcontent-%COMP%]{display:flex;align-items:center;min-block-size:40px}.nav-item[_ngcontent-%COMP%]{background:transparent;color:var(--element-text-primary);position:relative;text-decoration:none;cursor:pointer}.nav-item[_ngcontent-%COMP%]:hover{background:var(--element-base-1-hover)}.nav-item.active[_ngcontent-%COMP%]{color:var(--element-ui-0)}.hover-full[_ngcontent-%COMP%]:hover   .nav-item[_ngcontent-%COMP%]{background:var(--element-base-1-hover)}.sub-active[_ngcontent-%COMP%]   .hover-full[_ngcontent-%COMP%]:hover   .nav-item[_ngcontent-%COMP%]{background:var(--element-base-1)}.nav-main-item[_ngcontent-%COMP%]{min-inline-size:0}.nav-main-item.active[_ngcontent-%COMP%]{background:var(--element-base-0)}.nav-main-item.active[_ngcontent-%COMP%]:after{content:\"\";position:absolute;inset-block:0;inset-inline-start:0;inline-size:4px;background:var(--element-ui-0)}.menu-body[_ngcontent-%COMP%]{display:none;flex-direction:column}.expanded[_ngcontent-%COMP%]   .menu-body[_ngcontent-%COMP%]{display:flex;transition:max-block-size calc(.5s * var(--element-animations-enabled, 1))}.open[_ngcontent-%COMP%]   .dropdown-caret[_ngcontent-%COMP%]{transform:rotate(180deg)}.expander[_ngcontent-%COMP%]{flex:0 0 auto;align-self:stretch;display:flex;align-items:center}.sub-active[_ngcontent-%COMP%]{background:var(--element-base-0)}.sub-active[_ngcontent-%COMP%]   .nav-item[_ngcontent-%COMP%]:hover{background:var(--element-base-1)}.badge[_ngcontent-%COMP%]{margin-inline-end:0}.badge-text[_ngcontent-%COMP%]{display:none;inset-block-start:-8px;inset-inline-start:-6px}.item-title[_ngcontent-%COMP%]{flex:1 0 0;min-inline-size:0}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNavbarVerticalItemComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-navbar-vertical-item',
      template: "<!-- section header -->\n<div *ngIf=\"!isLink && !item.items\" class=\"section-item fw-bold text-secondary px-5\">\n  {{ item.title! | translate }}\n</div>\n\n<!-- normal item -->\n<a *ngIf=\"isLink && !item.items\"\n  class=\"nav-item pe-5 nav-main-item focus-inside\"\n  [siLink]=\"item\"\n  activeClass=\"active\"\n  #itemLink=\"siLink\"\n  [attr.aria-current]=\"itemLink.active\"\n  role=\"menuitem\"\n  (activeChange)=\"checkActive()\"\n  siListInteractionItem\n  [listInteractionItemDisabled]=\"collapsed === 'hidden'\"\n>\n  <i *ngIf=\"item.icon\"\n    class=\"icon ms-5 me-n2\"\n    [ngClass]=\"[item.icon, itemLink.active ? item.icon + '-filled' : '']\"\n    role=\"presentation\"\n  ></i>\n  <span\n    *ngIf=\"item.icon && item.badge !== undefined && item.badge !== ''\"\n    class=\"badge-text\"\n  >{{ item.badge }}</span>\n  <span\n    class=\"item-title text-truncate fw-bold\"\n    [class.ps-4]=\"item.icon\"\n    [class.ps-5]=\"!item.icon\"\n  >{{ item.title! | translate }}</span>\n  <span *ngIf=\"item.badge !== undefined && item.badge !== ''\"\n    class=\"badge\"\n    [ngClass]=\"'bg-' + item.badgeColor\"\n  >\n    {{ item.badge }}\n  </span>\n</a>\n\n<!-- sub menu -->\n<div *ngIf=\"item.items\"\n  role=\"menu\"\n  class=\"sub-menu navbar-nav\"\n  [class.open]=\"open\"\n  [class.expanded]=\"expanded\"\n  [attr.aria-expanded]=\"expanded\"\n  [class.sub-active]=\"subItemActive || flyOut\"\n>\n  <div\n    class=\"d-flex\"\n    [class.open]=\"open\"\n    [class.hover-full]=\"!item.link && !item.action && !item.href\"\n  >\n    <a\n      class=\"flex-fill nav-item pe-5 nav-main-item focus-inside\"\n      [class.navbar-vertical-no-collapse]=\"!isLink\"\n      [class.active]=\"subItemActive\"\n      [attr.title]=\"item.tooltip ? (item.tooltip | translate) : null\"\n      [attr.aria-current]=\"subItemActive\"\n      (click)=\"triggerItemOrMenu($event)\"\n      (keydown.enter)=\"triggerItemOrMenu($event)\"\n      siListInteractionItem\n      [listInteractionItemDisabled]=\"(!isLink && !collapsed) || collapsed === 'hidden'\"\n      #menuParentItem=\"si-list-interaction-item\"\n    >\n      <a\n        [siLink]=\"item\"\n        activeClass=\"active\"\n        #itemLink=\"siLink\"\n        (keydown.enter)=\"$event.preventDefault()\"\n        (activeChange)=\"checkActive()\"\n        tabindex=\"-1\"\n        class=\"d-none\"\n      > </a>\n      <i *ngIf=\"item.icon\"\n        class=\"icon ps-5 me-n2\"\n        [ngClass]=\"[item.icon, subItemActive ? item.icon + '-filled' : '']\"\n        role=\"presentation\"\n      ></i>\n      <span class=\"item-title text-truncate fw-bold ps-5\">{{ item.title! | translate }}</span>\n      <span *ngIf=\"item.badge !== undefined && item.badge !== ''\"\n        class=\"badge\"\n        [ngClass]=\"'bg-' + item.badgeColor\"\n      >\n        {{ item.badge }}\n      </span>\n    </a>\n    <a\n      class=\"nav-item px-5 nav-main-item expander navbar-vertical-no-collapse focus-inside\"\n      (click)=\"triggerMenu($event)\"\n      (keydown.enter)=\"triggerMenu($event)\"\n      siListInteractionItem\n      [listInteractionItemDisabled]=\"!!collapsed\"\n      role=\"button\"\n      [attr.aria-label]=\"(expanded ? collapseButtonText : expandButtonText) | translate\"\n    >\n      <span role=\"presentation\" class=\"dropdown-caret element-down-2\"></span>\n    </a>\n  </div>\n  <div class=\"menu-body\" #menuBody [style.max-height.px]=\"menuMaxHeight\">\n    <a *ngFor=\"let subitem of item.items; trackBy: trackByIndex\"\n      class=\"nav-item nav-sub-item focus-inside ps-9 pe-5\"\n      [siLink]=\"subitem\"\n      activeClass=\"active\"\n      #siLink=\"siLink\"\n      [attr.aria-current]=\"siLink.active\"\n      role=\"menuitem\"\n      (activeChange)=\"checkActive()\"\n      siListInteractionItem\n      [listInteractionItemDisabled]=\"!!collapsed || !open\"\n    >\n      <i *ngIf=\"subitem.icon\"\n        class=\"icon ps-5 me-n2\"\n        [ngClass]=\"[subitem.icon, siLink.active ? subitem.icon + '-filled' : '']\"\n        role=\"presentation\"\n      ></i>\n      <span\n        class=\"item-title text-truncate\"\n        [class.ps-5]=\"!textOnly\"\n      >{{ subitem.title! | translate }}</span>\n      <span *ngIf=\"subitem.badge !== undefined && subitem.badge !== ''\"\n        class=\"badge\"\n        [ngClass]=\"'bg-' + subitem.badgeColor\"\n      >\n        {{ subitem.badge }}\n      </span>\n    </a>\n  </div>\n  <si-navbar-vertical-flyout\n    *ngIf=\"flyOut\"\n    [item]=\"item\"\n    [top]=\"flyOutTop\"\n    [navbar]=\"navbar\"\n    (closeMenu)=\"flyOut = false\"\n    [menuParentItem]=\"menuParentItem\"\n  ></si-navbar-vertical-flyout>\n</div>\n",
      styles: [":host{display:flex;overflow:hidden}:host>*{flex:1;white-space:nowrap}.nav-item,.section-item{display:flex;align-items:center;min-block-size:40px}.nav-item{background:transparent;color:var(--element-text-primary);position:relative;text-decoration:none;cursor:pointer}.nav-item:hover{background:var(--element-base-1-hover)}.nav-item.active{color:var(--element-ui-0)}.hover-full:hover .nav-item{background:var(--element-base-1-hover)}.sub-active .hover-full:hover .nav-item{background:var(--element-base-1)}.nav-main-item{min-inline-size:0}.nav-main-item.active{background:var(--element-base-0)}.nav-main-item.active:after{content:\"\";position:absolute;inset-block:0;inset-inline-start:0;inline-size:4px;background:var(--element-ui-0)}.menu-body{display:none;flex-direction:column}.expanded .menu-body{display:flex;transition:max-block-size calc(.5s * var(--element-animations-enabled, 1))}.open .dropdown-caret{transform:rotate(180deg)}.expander{flex:0 0 auto;align-self:stretch;display:flex;align-items:center}.sub-active{background:var(--element-base-0)}.sub-active .nav-item:hover{background:var(--element-base-1)}.badge{margin-inline-end:0}.badge-text{display:none;inset-block-start:-8px;inset-inline-start:-6px}.item-title{flex:1 0 0;min-inline-size:0}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    nav: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.navbar-nav']
    }],
    item: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    textOnly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.text-only']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    navbar: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    scroller: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    collapsed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    collapseButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    expandButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    menuTrigger: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    menuBody: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['menuBody', {
        static: false
      }]
    }],
    itemLink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['itemLink', {
        static: false,
        read: SiLinkDirective
      }]
    }],
    subItems: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChildren,
      args: ['siLink', {
        read: SiLinkDirective
      }]
    }]
  });
})();
class SiNavbarVerticalComponent {
  constructor(element, platformId, cdRef, resizeObserver, uiStateService) {
    this.element = element;
    this.platformId = platformId;
    this.cdRef = cdRef;
    this.resizeObserver = resizeObserver;
    this.uiStateService = uiStateService;
    /**
     * Default state of navigation
     */
    this.collapsed = false;
    /**
     * Toggles search bar
     */
    this.searchable = false;
    /**
     * Placeholder text for search
     */
    this.searchPlaceholder = 'Search...';
    /**
     * List of vertical navigation items
     */
    this.items = [];
    this.itemsChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Set to `true` if there are no icons
     */
    this.textOnly = false;
    /**
     * Set to false to hide the vertical navbar
     */
    this.visible = true;
    /**
     * Set a delay in milliseconds to automatically collapse the navigation bar in mobile view.
     * When used, the main content view is visible after the configured delay. This ensures
     * that important status bar views are not hidden by the vertical navigation bar longer
     * than e.g. 3000 milliseconds. Default is -1 to disable the auto collapse function.
     */
    this.autoCollapseDelay = -1;
    /**
     * Text for the navbar expand button. Required for a11y
     */
    this.navbarExpandButtonText = 'expand';
    /**
     * Text for the navbar collapse button. Required for a11y
     */
    this.navbarCollapseButtonText = 'collapse';
    /**
     * Output for search bar input
     */
    this.searchEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.mobileExpanded = false;
    this.ready = false;
    /**
     * The $vertical-nav-transition-duration in the style is 0.5 seconds.
     * Sending the resize event after resize need to wait until resize is done.
     */
    this.resizeEventDelay = 500;
    this.resizeEvent = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.isMobile = false;
    this.isMobileSmall = false;
    this.trackByIndex = index => index;
  }
  ngOnInit() {
    if ((0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(this.platformId)) {
      this.resizeSubs = this.resizeObserver.observe(this.element.nativeElement, 100, true).subscribe(() => this.checkSize());
    }
    setTimeout(() => this.ready = true);
  }
  ngOnChanges(changes) {
    if (changes.collapsed) {
      this.updateCollapsedState();
    }
    if (changes.items && this.uiStateService && this.stateId) {
      this.uiStateService.load(this.stateId).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_22__.take)(1)).subscribe(store => this.loadUIState(store));
    }
  }
  ngOnDestroy() {
    this.resizeSubs?.unsubscribe();
  }
  checkSize() {
    const paddingStart = parseInt(window.getComputedStyle(this.element.nativeElement).paddingLeft, 10);
    this.isMobile = paddingStart < 100;
    this.isMobileSmall = paddingStart === 0;
    this.cdRef.markForCheck();
  }
  updateCollapsedState() {
    setTimeout(() => {
      this.checkSize();
    }, this.resizeEventDelay);
  }
  onEnterKeydown(target) {
    if (target.classList.contains('collapse-toggle')) {
      setTimeout(() => {
        this.listInteraction.focusFirstItem();
        setTimeout(() => {
          this.listInteraction.focusFirstItem();
        }, this.resizeEventDelay);
      });
    }
  }
  toggleCollapse(event) {
    event.currentTarget.blur();
    this.collapsed = !this.collapsed;
    this.updateCollapsedState();
    this.resizeEvent.next();
    this.cdRef.markForCheck();
  }
  toggleMobileExpand(event) {
    event.currentTarget.blur();
    this.mobileExpanded = !this.mobileExpanded;
    this.updateCollapsedState();
    this.mobileCollapseTimer();
  }
  mobileCollapseTimer() {
    this.saveUIState();
    this.itemsChange.emit(this.items);
    if (this.autoCollapseDelay <= 0) {
      return;
    }
    if (this.autoCollapseTimer) {
      clearTimeout(this.autoCollapseTimer);
      this.autoCollapseTimer = undefined;
    }
    if (this.mobileExpanded) {
      this.autoCollapseTimer = setTimeout(() => {
        this.mobileExpanded = false;
        this.updateCollapsedState();
        this.cdRef.markForCheck();
      }, this.autoCollapseDelay);
    }
  }
  handleClick(event) {
    if (this.mobileExpanded) {
      const target = event.target;
      if (!target.classList.contains('navbar-vertical-no-collapse') && !this.searchBarElement?.nativeElement.contains(target) && (target.tagName !== 'SPAN' && target.tagName !== 'I' || !target.parentElement?.classList.contains('navbar-vertical-no-collapse'))) {
        this.mobileExpanded = false;
        this.updateCollapsedState();
        this.mobileCollapseTimer();
        this.cdRef.markForCheck();
      }
    }
  }
  toggleSearch(event, mobile) {
    if (mobile) {
      this.toggleMobileExpand(event);
    } else {
      this.toggleCollapse(event);
    }
    setTimeout(() => this.searchBar.focus());
  }
  doSearch(event) {
    this.searchEvent.emit(event);
    this.mobileCollapseTimer();
  }
  get isCollapsed() {
    const hidden = this.isMobileSmall && !this.mobileExpanded || this.textOnly && (!this.isMobile && this.collapsed || this.isMobile && !this.mobileExpanded);
    return hidden ? 'hidden' : this.isMobile && !this.mobileExpanded || !this.isMobile && this.collapsed ? 'shown' : '';
  }
  saveUIState() {
    if (!this.uiStateService || !this.stateId) {
      return;
    }
    const state = {
      contextId: this.stateId,
      expandables: {}
    };
    this.items.forEach(item => {
      if (item.id) {
        state.expandables[item.id] = !!item.expanded;
      }
    });
    this.uiStateService.save(state);
  }
  loadUIState(state) {
    if (!state?.expandables) {
      return;
    }
    this.items.forEach(item => {
      // Only update
      //   - items with an id
      //   - and if the item has not explicitly already set an expanded state
      if (item.id && item.expanded === undefined) {
        item.expanded = state.expandables[item.id];
      }
    });
  }
}
SiNavbarVerticalComponent.ɵfac = function SiNavbarVerticalComponent_Factory(t) {
  return new (t || SiNavbarVerticalComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ResizeObserverService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiUIStateService, 8));
};
SiNavbarVerticalComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiNavbarVerticalComponent,
  selectors: [["si-navbar-vertical"]],
  viewQuery: function SiNavbarVerticalComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c42, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c42, 5, _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c43, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.searchBar = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.searchBarElement = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.listInteraction = _t.first);
    }
  },
  hostAttrs: [1, "si-layout-inner"],
  hostVars: 10,
  hostBindings: function SiNavbarVerticalComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.enter", function SiNavbarVerticalComponent_keydown_enter_HostBindingHandler($event) {
        return ctx.onEnterKeydown($event.target);
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("nav-collapsed", ctx.collapsed)("nav-text-only", ctx.textOnly)("visible", ctx.visible)("nav-mobile-expanded", ctx.mobileExpanded)("ready", ctx.ready);
    }
  },
  inputs: {
    collapsed: "collapsed",
    searchable: "searchable",
    searchPlaceholder: "searchPlaceholder",
    items: "items",
    textOnly: "textOnly",
    visible: "visible",
    autoCollapseDelay: "autoCollapseDelay",
    navbarExpandButtonText: "navbarExpandButtonText",
    navbarCollapseButtonText: "navbarCollapseButtonText",
    stateId: "stateId"
  },
  outputs: {
    itemsChange: "itemsChange",
    searchEvent: "searchEvent"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  ngContentSelectors: _c1,
  decls: 7,
  vars: 4,
  consts: [["siListInteraction", "", "listInteractionOrientation", "vert", "listInteractionFocus", "first", 1, "focus-none", 3, "listInteractionShowSubListOnParentFocus"], ["listInteraction", "si-list-interaction"], ["class", "collapse-toggle mobile-drawer mobile navbar-vertical-no-collapse focus-inside", 4, "ngIf"], ["class", "collapse-toggle mobile-drawer desktop focus-inside", 4, "ngIf"], ["class", "elevation-1 bg-base-1 focus-sub-inside", 3, "text-only", "click", 4, "ngIf"], [1, "si-layout-inner"], [1, "collapse-toggle", "mobile-drawer", "mobile", "navbar-vertical-no-collapse", "focus-inside"], ["type", "button", "siListInteractionItem", "", 1, "btn", "btn-circle", "btn-sm", "btn-ghost", "flip-rtl", "element-double-right", "navbar-vertical-no-collapse", 3, "click"], [1, "collapse-toggle", "mobile-drawer", "desktop", "focus-inside"], ["type", "button", "siListInteractionItem", "", 1, "btn", "btn-circle", "btn-sm", "btn-ghost", "flip-rtl", "element-double-right", 3, "click"], [1, "elevation-1", "bg-base-1", "focus-sub-inside", 3, "click"], ["nav", ""], [1, "collapse-toggle", "desktop", "focus-inside"], ["type", "button", "siListInteractionItem", "", 1, "btn", "btn-circle", "btn-sm", "btn-ghost", "flip-rtl", 3, "listInteractionItemDisabled", "click"], [1, "collapse-toggle", "mobile", "navbar-vertical-no-collapse", "focus-inside"], ["type", "button", "siListInteractionItem", "", 1, "btn", "btn-circle", "btn-sm", "btn-ghost", "flip-rtl", "navbar-vertical-no-collapse", 3, "listInteractionItemDisabled", "click"], ["class", "nav-search py-4 mt-2", 4, "ngIf"], ["role", "menu", 1, "nav-scroll", "mt-2"], ["scroller", ""], ["class", "mb-4", 3, "item", "textOnly", "scroller", "collapsed", "collapseButtonText", "expandButtonText", "navbar", "menuTrigger", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "nav-search", "py-4", "mt-2"], ["siListInteractionItem", "", 1, "d-block", "mx-5", 3, "placeholder", "colorVariant", "debounceTime", "showIcon", "prohibitedCharacters", "tabbable", "searchChange"], ["searchBar", ""], ["type", "button", "siListInteractionItem", "", 1, "btn-search", "bg-base-0", "p-2", "mx-4", "desktop", "navbar-vertical-no-collapse", 3, "click"], [1, "icon", "element-search"], ["type", "button", "siListInteractionItem", "", 1, "btn-search", "bg-base-0", "p-2", "mx-4", "mobile", "navbar-vertical-no-collapse", 3, "click"], [1, "mb-4", 3, "item", "textOnly", "scroller", "collapsed", "collapseButtonText", "expandButtonText", "navbar", "menuTrigger"]],
  template: function SiNavbarVerticalComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiNavbarVerticalComponent_div_2_Template, 3, 3, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiNavbarVerticalComponent_div_3_Template, 3, 3, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiNavbarVerticalComponent_nav_4_Template, 12, 23, "nav", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "main", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("listInteractionShowSubListOnParentFocus", false);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.visible && !ctx.mobileExpanded);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.visible && ctx.textOnly && ctx.collapsed);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.visible);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiListInteractionDirective, SiListInteractionItemDirective, SiSearchBarComponent, SiNavbarVerticalItemComponent, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:block}.ready[_nghost-%COMP%]{transition:padding-inline-start calc(.5s * var(--element-animations-enabled, 1))}@media (min-width: 992px){.visible[_nghost-%COMP%]{padding-inline-start:240px}.visible[_nghost-%COMP%]:not(.nav-text-only).nav-collapsed{padding-inline-start:48px}.visible[_nghost-%COMP%]:not(.nav-text-only).nav-collapsed   nav[_ngcontent-%COMP%]{inline-size:48px}.visible[_nghost-%COMP%]:not(.nav-text-only).nav-collapsed   .nav-scroll[_ngcontent-%COMP%]     .nav-item.expander, .visible[_nghost-%COMP%]:not(.nav-text-only).nav-collapsed   .nav-scroll[_ngcontent-%COMP%]     .nav-item .item-title, .visible[_nghost-%COMP%]:not(.nav-text-only).nav-collapsed   .nav-scroll[_ngcontent-%COMP%]     .nav-item .dropdown-caret, .visible[_nghost-%COMP%]:not(.nav-text-only).nav-collapsed   .nav-scroll[_ngcontent-%COMP%]     .nav-item .badge{display:none}.visible[_nghost-%COMP%]:not(.nav-text-only).nav-collapsed   .nav-scroll[_ngcontent-%COMP%]     .nav-item .badge-text{display:inline-block}.visible[_nghost-%COMP%]:not(.nav-text-only).nav-collapsed   .nav-scroll[_ngcontent-%COMP%]     .section-item{display:none}.visible[_nghost-%COMP%]:not(.nav-text-only).nav-collapsed   .nav-scroll[_ngcontent-%COMP%]     .menu-body{max-block-size:0!important}.visible[_nghost-%COMP%]:not(.nav-text-only).nav-collapsed   si-search-bar[_ngcontent-%COMP%]{display:none!important}.visible[_nghost-%COMP%]:not(.nav-text-only).nav-collapsed   .btn-search.desktop[_ngcontent-%COMP%]{display:block}.visible.nav-text-only.nav-collapsed[_nghost-%COMP%]{padding-inline-start:0!important}.visible.nav-text-only.nav-collapsed[_nghost-%COMP%]:not(.nav-mobile-expanded)   nav[_ngcontent-%COMP%]{inline-size:0}.visible.nav-text-only.nav-collapsed[_nghost-%COMP%]:not(.nav-mobile-expanded)   .collapse-toggle.mobile-drawer[_ngcontent-%COMP%]{display:block}.visible.nav-text-only.nav-collapsed[_nghost-%COMP%]     .page-top-title{margin-inline-start:40px}.visible.nav-text-only.nav-collapsed[_nghost-%COMP%]   .mobile-drawer.mobile[_ngcontent-%COMP%]{display:block}.visible[_nghost-%COMP%]   .collapse-toggle.mobile[_ngcontent-%COMP%]{display:none!important}}@media (min-width: 576px) and (max-width: 991.98px){.visible[_nghost-%COMP%]:not(.nav-text-only){padding-inline-start:48px}.visible[_nghost-%COMP%]:not(.nav-text-only):not(.nav-mobile-expanded){padding-inline-start:48px}.visible[_nghost-%COMP%]:not(.nav-text-only):not(.nav-mobile-expanded)   nav[_ngcontent-%COMP%]{inline-size:48px}.visible[_nghost-%COMP%]:not(.nav-text-only):not(.nav-mobile-expanded)   .nav-scroll[_ngcontent-%COMP%]     .nav-item.expander, .visible[_nghost-%COMP%]:not(.nav-text-only):not(.nav-mobile-expanded)   .nav-scroll[_ngcontent-%COMP%]     .nav-item .item-title, .visible[_nghost-%COMP%]:not(.nav-text-only):not(.nav-mobile-expanded)   .nav-scroll[_ngcontent-%COMP%]     .nav-item .dropdown-caret, .visible[_nghost-%COMP%]:not(.nav-text-only):not(.nav-mobile-expanded)   .nav-scroll[_ngcontent-%COMP%]     .nav-item .badge{display:none}.visible[_nghost-%COMP%]:not(.nav-text-only):not(.nav-mobile-expanded)   .nav-scroll[_ngcontent-%COMP%]     .nav-item .badge-text{display:inline-block}.visible[_nghost-%COMP%]:not(.nav-text-only):not(.nav-mobile-expanded)   .nav-scroll[_ngcontent-%COMP%]     .section-item{display:none}.visible[_nghost-%COMP%]:not(.nav-text-only):not(.nav-mobile-expanded)   .nav-scroll[_ngcontent-%COMP%]     .menu-body{max-block-size:0!important}.visible[_nghost-%COMP%]:not(.nav-text-only):not(.nav-mobile-expanded)   si-search-bar[_ngcontent-%COMP%]{display:none!important}.visible[_nghost-%COMP%]:not(.nav-text-only):not(.nav-mobile-expanded)   .btn-search.mobile[_ngcontent-%COMP%]{display:block}.visible.nav-text-only[_nghost-%COMP%]{padding-inline-start:0!important}.visible.nav-text-only[_nghost-%COMP%]:not(.nav-mobile-expanded)   nav[_ngcontent-%COMP%]{inline-size:0}.visible.nav-text-only[_nghost-%COMP%]:not(.nav-mobile-expanded)   .collapse-toggle.mobile-drawer[_ngcontent-%COMP%]{display:block}.visible.nav-text-only[_nghost-%COMP%]     .page-top-title{margin-inline-start:40px}.collapse-toggle.desktop[_ngcontent-%COMP%]{display:none!important}}@media (max-width: 575.98px){.visible[_nghost-%COMP%]{padding-inline-start:0!important}.visible[_nghost-%COMP%]:not(.nav-mobile-expanded)   nav[_ngcontent-%COMP%]{inline-size:0}.visible[_nghost-%COMP%]:not(.nav-mobile-expanded)   .collapse-toggle.mobile-drawer[_ngcontent-%COMP%]{display:block}.visible[_nghost-%COMP%]     .page-top-title{margin-inline-start:40px}.visible[_nghost-%COMP%]:after{content:\"\";position:fixed;inset-block:48px 0;inset-inline:0;background:transparent;pointer-events:none;transition:background calc(.5s * var(--element-animations-enabled, 1));z-index:2}.visible.nav-mobile-expanded[_nghost-%COMP%]:after{background:var(--element-base-translucent-1);pointer-events:auto}.visible[_nghost-%COMP%]   .collapse-toggle.desktop[_ngcontent-%COMP%]{display:none}}nav[_ngcontent-%COMP%]{display:flex;flex-direction:column;position:fixed;z-index:1029;inset-block:48px 0;inset-inline-start:0;inline-size:240px;overflow-x:hidden;transition:inline-size calc(.5s * var(--element-animations-enabled, 1))}.nav-scroll[_ngcontent-%COMP%]{overflow-x:hidden;min-block-size:0;flex:1 0 0;overflow-y:auto}.collapse-toggle[_ngcontent-%COMP%]{display:block;border:0;text-align:end;background:transparent;color:var(--element-text-primary);padding-block:4px;padding-inline:8px;margin-block-start:8px}.collapse-toggle.mobile-drawer[_ngcontent-%COMP%]{display:none;position:fixed;inset-inline-start:0;inset-block-start:48px;border-start-end-radius:var(--element-radius-2);border-end-end-radius:var(--element-radius-2);background:var(--element-base-1);box-shadow:0 0 4px var(--element-box-shadow-color-1),0 4px 4px var(--element-box-shadow-color-2);z-index:2}.collapse-toggle.mobile-drawer.desktop[_ngcontent-%COMP%]{display:none}.btn-search[_ngcontent-%COMP%]{display:none;border:0;border-radius:var(--element-radius-2)}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNavbarVerticalComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-navbar-vertical',
      host: {
        class: 'si-layout-inner'
      },
      template: "<div\n  class=\"focus-none\"\n  siListInteraction\n  listInteractionOrientation=\"vert\"\n  [listInteractionShowSubListOnParentFocus]=\"false\"\n  listInteractionFocus=\"first\"\n  #listInteraction=\"si-list-interaction\"\n>\n  <div\n    *ngIf=\"visible && !mobileExpanded\"\n    class=\"collapse-toggle mobile-drawer mobile navbar-vertical-no-collapse focus-inside\"\n  >\n    <button type=\"button\" class=\"btn btn-circle btn-sm btn-ghost flip-rtl element-double-right navbar-vertical-no-collapse\"\n      (click)=\"toggleMobileExpand($event)\"\n      siListInteractionItem\n      [attr.aria-label]=\"navbarExpandButtonText | translate\"\n    >\n    </button>\n  </div>\n  <div\n    *ngIf=\"visible && textOnly && collapsed\"\n    class=\"collapse-toggle mobile-drawer desktop focus-inside\"\n  >\n    <button type=\"button\" class=\"btn btn-circle btn-sm btn-ghost flip-rtl element-double-right\"\n      (click)=\"toggleCollapse($event)\"\n      siListInteractionItem\n      [attr.aria-label]=\"navbarExpandButtonText | translate\"\n    >\n    </button>\n  </div>\n\n  <nav\n    *ngIf=\"visible\"\n    #nav\n    class=\"elevation-1 bg-base-1 focus-sub-inside\"\n    [class.text-only]=\"textOnly\"\n    (click)=\"handleClick($event)\"\n  >\n    <div\n      class=\"collapse-toggle desktop focus-inside\"\n    >\n      <button type=\"button\" class=\"btn btn-circle btn-sm btn-ghost flip-rtl\"\n        (click)=\"toggleCollapse($event)\"\n        siListInteractionItem\n        [listInteractionItemDisabled]=\"(isMobileSmall && !mobileExpanded) || (((isMobile && !mobileExpanded) || (!isMobile && collapsed)) && textOnly)\"\n        [class.element-double-left]=\"!collapsed\"\n        [class.element-double-right]=\"collapsed\"\n        [attr.aria-label]=\"(collapsed ? navbarExpandButtonText : navbarCollapseButtonText) | translate\"\n        [attr.aria-expanded]=\"!collapsed\">\n      </button>\n    </div>\n    <div class=\"collapse-toggle mobile navbar-vertical-no-collapse focus-inside\"\n    >\n      <button type=\"button\" class=\"btn btn-circle btn-sm btn-ghost flip-rtl navbar-vertical-no-collapse\"\n        [class.element-double-left]=\"mobileExpanded\"\n        [class.element-double-right]=\"!mobileExpanded\"\n        (click)=\"toggleMobileExpand($event)\"\n        siListInteractionItem\n        [listInteractionItemDisabled]=\"(isMobileSmall && !mobileExpanded) || (((isMobile && !mobileExpanded) || (!isMobile && collapsed)) && textOnly)\"\n        [attr.aria-label]=\"(mobileExpanded ? navbarCollapseButtonText : navbarExpandButtonText) | translate\"\n        [attr.aria-expanded]=\"mobileExpanded\"\n      >\n      </button>\n    </div>\n    <div *ngIf=\"searchable && (!isMobileSmall || mobileExpanded)\" class=\"nav-search py-4 mt-2\">\n      <si-search-bar\n        class=\"d-block mx-5\"\n        #searchBar\n        [placeholder]=\"searchPlaceholder | translate\"\n        [colorVariant]=\"'base-0'\"\n        (searchChange)=\"doSearch($event)\"\n        [debounceTime]=\"400\"\n        [showIcon]=\"true\"\n        [prohibitedCharacters]=\"'*?'\"\n        [tabbable]=\"false\"\n        siListInteractionItem\n      ></si-search-bar>\n      <button type=\"button\"\n        class=\"btn-search bg-base-0 p-2 mx-4 desktop navbar-vertical-no-collapse\"\n        [attr.aria-label]=\"searchPlaceholder | translate\"\n        (click)=\"toggleSearch($event, false)\"\n        siListInteractionItem\n      >\n        <i class=\"icon element-search\"></i>\n      </button>\n      <button type=\"button\"\n        class=\"btn-search bg-base-0 p-2 mx-4 mobile navbar-vertical-no-collapse\"\n        [attr.aria-label]=\"searchPlaceholder | translate\"\n        (click)=\"toggleSearch($event, true)\"\n        siListInteractionItem\n      >\n        <i class=\"icon element-search\"></i>\n      </button>\n    </div>\n    <div class=\"nav-scroll mt-2\" #scroller role=\"menu\">\n      <si-navbar-vertical-item\n        *ngFor=\"let item of items; trackBy: trackByIndex\"\n        class=\"mb-4\"\n        [item]=\"item\"\n        [textOnly]=\"textOnly\"\n        [scroller]=\"scroller\"\n        [collapsed]=\"isCollapsed\"\n        [collapseButtonText]=\"navbarCollapseButtonText\"\n        [expandButtonText]=\"navbarExpandButtonText\"\n        [navbar]=\"nav\"\n        (menuTrigger)=\"mobileCollapseTimer()\"\n      ></si-navbar-vertical-item>\n    </div>\n  </nav>\n</div>\n<main class=\"si-layout-inner\">\n  <ng-content></ng-content>\n</main>\n",
      styles: [":host{display:block}:host.ready{transition:padding-inline-start calc(.5s * var(--element-animations-enabled, 1))}@media (min-width: 992px){:host.visible{padding-inline-start:240px}:host.visible:not(.nav-text-only).nav-collapsed{padding-inline-start:48px}:host.visible:not(.nav-text-only).nav-collapsed nav{inline-size:48px}:host.visible:not(.nav-text-only).nav-collapsed .nav-scroll ::ng-deep .nav-item.expander,:host.visible:not(.nav-text-only).nav-collapsed .nav-scroll ::ng-deep .nav-item .item-title,:host.visible:not(.nav-text-only).nav-collapsed .nav-scroll ::ng-deep .nav-item .dropdown-caret,:host.visible:not(.nav-text-only).nav-collapsed .nav-scroll ::ng-deep .nav-item .badge{display:none}:host.visible:not(.nav-text-only).nav-collapsed .nav-scroll ::ng-deep .nav-item .badge-text{display:inline-block}:host.visible:not(.nav-text-only).nav-collapsed .nav-scroll ::ng-deep .section-item{display:none}:host.visible:not(.nav-text-only).nav-collapsed .nav-scroll ::ng-deep .menu-body{max-block-size:0!important}:host.visible:not(.nav-text-only).nav-collapsed si-search-bar{display:none!important}:host.visible:not(.nav-text-only).nav-collapsed .btn-search.desktop{display:block}:host.visible.nav-text-only.nav-collapsed{padding-inline-start:0!important}:host.visible.nav-text-only.nav-collapsed:not(.nav-mobile-expanded) nav{inline-size:0}:host.visible.nav-text-only.nav-collapsed:not(.nav-mobile-expanded) .collapse-toggle.mobile-drawer{display:block}:host.visible.nav-text-only.nav-collapsed ::ng-deep .page-top-title{margin-inline-start:40px}:host.visible.nav-text-only.nav-collapsed .mobile-drawer.mobile{display:block}:host.visible .collapse-toggle.mobile{display:none!important}}@media (min-width: 576px) and (max-width: 991.98px){:host.visible:not(.nav-text-only){padding-inline-start:48px}:host.visible:not(.nav-text-only):not(.nav-mobile-expanded){padding-inline-start:48px}:host.visible:not(.nav-text-only):not(.nav-mobile-expanded) nav{inline-size:48px}:host.visible:not(.nav-text-only):not(.nav-mobile-expanded) .nav-scroll ::ng-deep .nav-item.expander,:host.visible:not(.nav-text-only):not(.nav-mobile-expanded) .nav-scroll ::ng-deep .nav-item .item-title,:host.visible:not(.nav-text-only):not(.nav-mobile-expanded) .nav-scroll ::ng-deep .nav-item .dropdown-caret,:host.visible:not(.nav-text-only):not(.nav-mobile-expanded) .nav-scroll ::ng-deep .nav-item .badge{display:none}:host.visible:not(.nav-text-only):not(.nav-mobile-expanded) .nav-scroll ::ng-deep .nav-item .badge-text{display:inline-block}:host.visible:not(.nav-text-only):not(.nav-mobile-expanded) .nav-scroll ::ng-deep .section-item{display:none}:host.visible:not(.nav-text-only):not(.nav-mobile-expanded) .nav-scroll ::ng-deep .menu-body{max-block-size:0!important}:host.visible:not(.nav-text-only):not(.nav-mobile-expanded) si-search-bar{display:none!important}:host.visible:not(.nav-text-only):not(.nav-mobile-expanded) .btn-search.mobile{display:block}:host.visible.nav-text-only{padding-inline-start:0!important}:host.visible.nav-text-only:not(.nav-mobile-expanded) nav{inline-size:0}:host.visible.nav-text-only:not(.nav-mobile-expanded) .collapse-toggle.mobile-drawer{display:block}:host.visible.nav-text-only ::ng-deep .page-top-title{margin-inline-start:40px}.collapse-toggle.desktop{display:none!important}}@media (max-width: 575.98px){:host.visible{padding-inline-start:0!important}:host.visible:not(.nav-mobile-expanded) nav{inline-size:0}:host.visible:not(.nav-mobile-expanded) .collapse-toggle.mobile-drawer{display:block}:host.visible ::ng-deep .page-top-title{margin-inline-start:40px}:host.visible:after{content:\"\";position:fixed;inset-block:48px 0;inset-inline:0;background:transparent;pointer-events:none;transition:background calc(.5s * var(--element-animations-enabled, 1));z-index:2}:host.visible.nav-mobile-expanded:after{background:var(--element-base-translucent-1);pointer-events:auto}:host.visible .collapse-toggle.desktop{display:none}}nav{display:flex;flex-direction:column;position:fixed;z-index:1029;inset-block:48px 0;inset-inline-start:0;inline-size:240px;overflow-x:hidden;transition:inline-size calc(.5s * var(--element-animations-enabled, 1))}.nav-scroll{overflow-x:hidden;min-block-size:0;flex:1 0 0;overflow-y:auto}.collapse-toggle{display:block;border:0;text-align:end;background:transparent;color:var(--element-text-primary);padding-block:4px;padding-inline:8px;margin-block-start:8px}.collapse-toggle.mobile-drawer{display:none;position:fixed;inset-inline-start:0;inset-block-start:48px;border-start-end-radius:var(--element-radius-2);border-end-end-radius:var(--element-radius-2);background:var(--element-base-1);box-shadow:0 0 4px var(--element-box-shadow-color-1),0 4px 4px var(--element-box-shadow-color-2);z-index:2}.collapse-toggle.mobile-drawer.desktop{display:none}.btn-search{display:none;border:0;border-radius:var(--element-radius-2)}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }, {
      type: ResizeObserverService
    }, {
      type: SiUIStateService,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }];
  }, {
    collapsed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.nav-collapsed']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    searchable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    searchPlaceholder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    items: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    itemsChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    textOnly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.nav-text-only']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    visible: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.visible']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    autoCollapseDelay: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    navbarExpandButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    navbarCollapseButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    stateId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    searchEvent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    mobileExpanded: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.nav-mobile-expanded']
    }],
    ready: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.ready']
    }],
    searchBar: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['searchBar']
    }],
    searchBarElement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['searchBar', {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
      }]
    }],
    listInteraction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['listInteraction']
    }],
    onEnterKeydown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keydown.enter', ['$event.target']]
    }]
  });
})();
class SiSearchBarModule {}
SiSearchBarModule.ɵfac = function SiSearchBarModule_Factory(t) {
  return new (t || SiSearchBarModule)();
};
SiSearchBarModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiSearchBarModule
});
SiSearchBarModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.ReactiveFormsModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSearchBarModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.ReactiveFormsModule],
      declarations: [SiSearchBarComponent],
      exports: [SiSearchBarComponent]
    }]
  }], null, null);
})();
class SiNavbarVerticalModule {}
SiNavbarVerticalModule.ɵfac = function SiNavbarVerticalModule_Factory(t) {
  return new (t || SiNavbarVerticalModule)();
};
SiNavbarVerticalModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiNavbarVerticalModule
});
SiNavbarVerticalModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiLinkModule, SiListInteractionModule, SiMenuModule, SiSearchBarModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNavbarVerticalModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiLinkModule, SiListInteractionModule, SiMenuModule, SiSearchBarModule, SiTranslateModule],
      declarations: [SiNavbarVerticalComponent, SiNavbarVerticalFlyoutComponent, SiNavbarVerticalItemComponent],
      exports: [SiNavbarVerticalComponent]
    }]
  }], null, null);
})();
class SiNumberInputComponent {
  constructor() {
    /** The step size for HTML input */
    this.step = 1;
    /** Show increment/decrement buttons? */
    this.showButtons = true;
    this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.canInc = true;
    this.canDec = true;
    this._disabled = false;
    this._readonly = false;
    this._required = false;
    this.autoUpdate$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.timer)(400, 80);
    this.onTouched = () => {};
    this.onChange = () => {};
  }
  get disabled() {
    return this._disabled;
  }
  /** @defaultref {@link _disabled} */
  set disabled(value) {
    this.setDisabledState(value !== false);
  }
  get readonly() {
    return this._readonly;
  }
  /** @defaultref {@link _readonly} */
  set readonly(value) {
    this._readonly = value !== false;
  }
  get required() {
    return this._required;
  }
  /** @defaultref {@link _required} */
  set required(value) {
    this._required = value !== false;
  }
  ngOnChanges(changes) {
    if (changes.value) {
      this.internalValue = this.value;
    }
    this.modelChanged(this.internalValue, false);
  }
  registerOnChange(fn) {
    this.onChange = fn;
  }
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  setDisabledState(isDisabled) {
    this._disabled = isDisabled;
  }
  writeValue(value) {
    this.internalValue = value;
  }
  validate(control) {
    const subject = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    setTimeout(() => {
      subject.next(this.ngModel.control.valid ? null : this.ngModel.control.errors);
      subject.complete();
    });
    return subject;
  }
  modelChanged(value, emit = true) {
    this.onChange(value);
    if (emit) {
      this.valueChange.emit(value);
    }
    this.canInc = this.max == null || this.internalValue == null || this.internalValue + this.step <= this.max;
    this.canDec = this.min == null || this.internalValue == null || this.internalValue - this.step >= this.min;
  }
  autoUpdateStart(event, isIncrement) {
    const mouseButton = event.button;
    if (mouseButton) {
      return;
    }
    this.onTouched();
    event.preventDefault();
    const trigger = isIncrement ? () => this.increment() : () => this.decrement();
    this.autoUpdateSubs?.unsubscribe();
    this.autoUpdateSubs = this.autoUpdate$.subscribe(trigger);
    trigger();
  }
  autoUpdateStop() {
    this.autoUpdateSubs?.unsubscribe();
    this.autoUpdateSubs = undefined;
  }
  roundToStepPrecision(value) {
    const factor = 1 / this.step;
    if (factor > 1) {
      return Math.round(value * factor) / factor;
    }
    return Math.round(value / this.step) * this.step;
  }
  decrement() {
    this.internalValue = this.internalValue == null ? this.max ?? this.min ?? 0 : this.roundToStepPrecision(this.internalValue - this.step);
    this.modelChanged(this.internalValue);
    if (!this.canDec) {
      this.autoUpdateStop();
    }
  }
  increment() {
    this.internalValue = this.internalValue == null ? this.min ?? this.max ?? 0 : this.roundToStepPrecision(this.internalValue + this.step);
    this.modelChanged(this.internalValue);
    if (!this.canInc) {
      this.autoUpdateStop();
    }
  }
}
SiNumberInputComponent.ɵfac = function SiNumberInputComponent_Factory(t) {
  return new (t || SiNumberInputComponent)();
};
SiNumberInputComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiNumberInputComponent,
  selectors: [["si-number-input"]],
  viewQuery: function SiNumberInputComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c44, 7);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.ngModel = _t.first);
    }
  },
  hostVars: 4,
  hostBindings: function SiNumberInputComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx._disabled)("readonly", ctx._readonly);
    }
  },
  inputs: {
    min: "min",
    max: "max",
    step: "step",
    value: "value",
    unit: "unit",
    showButtons: "showButtons",
    ariaLabel: ["aria-label", "ariaLabel"],
    inputId: "inputId",
    disabled: "disabled",
    readonly: "readonly",
    required: "required"
  },
  outputs: {
    valueChange: "valueChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
    useExisting: SiNumberInputComponent,
    multi: true
  }, {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_ASYNC_VALIDATORS,
    useExisting: SiNumberInputComponent,
    multi: true
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 4,
  vars: 13,
  consts: [["type", "number", 1, "focus-none", "si-body-2", 3, "ngModel", "ngModelOptions", "min", "max", "step", "required", "readonly", "disabled", "ngModelChange", "blur"], ["ctrl", "ngModel"], ["class", "unit ms-2", 3, "text-secondary", "text-disabled", 4, "ngIf"], [4, "ngIf"], [1, "unit", "ms-2"], ["type", "button", "tabindex", "-1", "aria-hidden", "true", 1, "dec", "btn", "btn-circle", "btn-tertiary", "btn-xs", "element-minus", "my-n3", "ms-2", 3, "disabled", "mousedown", "touchstart", "touchend", "mouseup", "mouseleave"], ["type", "button", "tabindex", "-1", "aria-hidden", "true", 1, "inc", "btn", "btn-circle", "btn-tertiary", "btn-xs", "element-plus", "my-n3", "me-n2", 3, "disabled", "mousedown", "touchstart", "touchend", "mouseup", "mouseleave"]],
  template: function SiNumberInputComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "input", 0, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function SiNumberInputComponent_Template_input_ngModelChange_0_listener($event) {
        return ctx.internalValue = $event;
      })("blur", function SiNumberInputComponent_Template_input_blur_0_listener() {
        return ctx.onTouched();
      })("ngModelChange", function SiNumberInputComponent_Template_input_ngModelChange_0_listener($event) {
        return ctx.modelChanged($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiNumberInputComponent_span_2_Template, 2, 5, "span", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiNumberInputComponent_ng_container_3_Template, 3, 2, "ng-container", 3);
    }
    if (rf & 2) {
      let tmp_2_0;
      let tmp_3_0;
      let tmp_4_0;
      let tmp_8_0;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", ctx.internalValue)("ngModelOptions", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction0"](12, _c45))("min", (tmp_2_0 = ctx.min) !== null && tmp_2_0 !== undefined ? tmp_2_0 : null)("max", (tmp_3_0 = ctx.max) !== null && tmp_3_0 !== undefined ? tmp_3_0 : null)("step", (tmp_4_0 = ctx.step) !== null && tmp_4_0 !== undefined ? tmp_4_0 : null)("required", ctx.required)("readonly", ctx.readonly)("disabled", ctx.disabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("id", (tmp_8_0 = ctx.inputId) !== null && tmp_8_0 !== undefined ? tmp_8_0 : null)("aria-label", ctx.ariaLabel);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.unit);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.showButtons);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NumberValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.RequiredValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.MinValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.MaxValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgModel],
  styles: ["[_nghost-%COMP%]{display:flex;align-items:center}[_nghost-%COMP%]:focus-within{box-shadow:0 0 0 var(--element-button-focus-overlay-width) var(--element-button-focus-overlay-color),0 0 0 calc(var(--element-button-focus-width) + var(--element-button-focus-overlay-width)) var(--element-focus-default)}input[_ngcontent-%COMP%]{-moz-appearance:textfield;border:0;margin:0;outline:none;background:transparent;color:inherit;text-align:inherit;flex:1 0 0;min-inline-size:0}input[_ngcontent-%COMP%]::-webkit-outer-spin-button, input[_ngcontent-%COMP%]::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNumberInputComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-number-input',
      providers: [{
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
        useExisting: SiNumberInputComponent,
        multi: true
      }, {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_ASYNC_VALIDATORS,
        useExisting: SiNumberInputComponent,
        multi: true
      }],
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<input\n  type=\"number\"\n  class=\"focus-none si-body-2\"\n  [attr.id]=\"inputId ?? null\"\n  [(ngModel)]=\"internalValue\"\n  [ngModelOptions]=\"{ standalone: true }\"\n  [min]=\"min ?? null\"\n  [max]=\"max ?? null\"\n  [step]=\"step ?? null\"\n  [required]=\"required\"\n  [readonly]=\"readonly\"\n  [disabled]=\"disabled\"\n  [attr.aria-label]=\"ariaLabel\"\n  #ctrl=\"ngModel\"\n  (blur)=\"onTouched()\"\n  (ngModelChange)=\"modelChanged($event)\"\n>\n<span\n  *ngIf=\"unit\"\n  class=\"unit ms-2\"\n  [class.text-secondary]=\"!disabled\"\n  [class.text-disabled]=\"disabled\"\n>{{ unit }}</span>\n<ng-container *ngIf=\"showButtons\">\n  <button\n    type=\"button\"\n    tabindex=\"-1\"\n    aria-hidden=\"true\"\n    class=\"dec btn btn-circle btn-tertiary btn-xs element-minus my-n3 ms-2\"\n    [disabled]=\"disabled || readonly || !canDec\"\n    (mousedown)=\"autoUpdateStart($event, false)\"\n    (touchstart)=\"autoUpdateStart($event, false)\"\n    (touchend)=\"autoUpdateStop()\"\n    (mouseup)=\"autoUpdateStop()\"\n    (mouseleave)=\"autoUpdateStop()\"\n  > </button>\n  <button\n    type=\"button\"\n    tabindex=\"-1\"\n    aria-hidden=\"true\"\n    class=\"inc btn btn-circle btn-tertiary btn-xs element-plus my-n3 me-n2\"\n    [disabled]=\"disabled || readonly || !canInc\"\n    (mousedown)=\"autoUpdateStart($event, true)\"\n    (touchstart)=\"autoUpdateStart($event, true)\"\n    (touchend)=\"autoUpdateStop()\"\n    (mouseup)=\"autoUpdateStop()\"\n    (mouseleave)=\"autoUpdateStop()\"\n  > </button>\n</ng-container>\n",
      styles: [":host{display:flex;align-items:center}:host:focus-within{box-shadow:0 0 0 var(--element-button-focus-overlay-width) var(--element-button-focus-overlay-color),0 0 0 calc(var(--element-button-focus-width) + var(--element-button-focus-overlay-width)) var(--element-focus-default)}input{-moz-appearance:textfield;border:0;margin:0;outline:none;background:transparent;color:inherit;text-align:inherit;flex:1 0 0;min-inline-size:0}input::-webkit-outer-spin-button,input::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}\n"]
    }]
  }], null, {
    min: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    max: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    step: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    unit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showButtons: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    ariaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['aria-label']
    }],
    inputId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    required: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    valueChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    ngModel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['ctrl', {
        static: true
      }]
    }],
    _disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.disabled']
    }],
    _readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.readonly']
    }]
  });
})();
class SiNumberInputModule {}
SiNumberInputModule.ɵfac = function SiNumberInputModule_Factory(t) {
  return new (t || SiNumberInputModule)();
};
SiNumberInputModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiNumberInputModule
});
SiNumberInputModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiNumberInputModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule],
      declarations: [SiNumberInputComponent],
      exports: [SiNumberInputComponent]
    }]
  }], null, null);
})();

/**
 * This enum defines the state that a detailed result step can have.
 */
var ResultDetailStepState;
(function (ResultDetailStepState) {
  ResultDetailStepState["Passed"] = "Passed";
  ResultDetailStepState["Failed"] = "Failed";
  ResultDetailStepState["Running"] = "Running";
  ResultDetailStepState["NotSupported"] = "Not supported";
  ResultDetailStepState["NotStarted"] = "Not started";
})(ResultDetailStepState || (ResultDetailStepState = {}));
class SiResultDetailsListComponent {
  constructor() {
    /**
     * Array of steps to show in the list.
     */
    this.steps = [];
    this.trackByIndex = index => index;
    this.resultDetailStepState = ResultDetailStepState;
  }
}
SiResultDetailsListComponent.ɵfac = function SiResultDetailsListComponent_Factory(t) {
  return new (t || SiResultDetailsListComponent)();
};
SiResultDetailsListComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiResultDetailsListComponent,
  selectors: [["si-result-details-list"]],
  inputs: {
    steps: "steps"
  },
  decls: 2,
  vars: 2,
  consts: [[1, "list-unstyled", "d-flex", "flex-column", "mb-0"], ["class", "position-relative d-flex align-items-center timeline px-6 py-5", 3, "text-primary", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "position-relative", "d-flex", "align-items-center", "timeline", "px-6", "py-5"], ["class", "me-4", 4, "ngIf"], ["class", "me-4", 3, "icon", 4, "ngIf"], [3, "ngSwitch", 4, "ngIf"], [1, "d-flex", "flex-column", "justify-content-center", "w-100"], [1, "d-flex"], [1, "result-description", "si-title-2"], ["class", "result-value", 4, "ngIf"], ["class", "si-title-2 text-danger", 4, "ngIf"], [1, "me-4"], [1, "me-4", 3, "icon"], [3, "ngSwitch"], ["class", "me-4", "icon", "element-circle-filled", "color", "status-success", "stackedIcon", "element-state-tick", "stackedColor", "status-critical-contrast", 4, "ngSwitchCase"], ["class", "me-4", "icon", "element-circle-filled", "color", "status-danger", "stackedIcon", "element-state-exclamation-mark", "stackedColor", "status-critical-contrast", 4, "ngSwitchCase"], ["class", "me-4", "icon", "element-not-checked", 4, "ngSwitchCase"], ["class", "me-4", "icon", "element-out-of-service", 4, "ngSwitchDefault"], ["icon", "element-circle-filled", "color", "status-success", "stackedIcon", "element-state-tick", "stackedColor", "status-critical-contrast", 1, "me-4"], ["icon", "element-circle-filled", "color", "status-danger", "stackedIcon", "element-state-exclamation-mark", "stackedColor", "status-critical-contrast", 1, "me-4"], ["icon", "element-not-checked", 1, "me-4"], ["icon", "element-out-of-service", 1, "me-4"], [1, "result-value"], [1, "si-title-2", "text-danger"]],
  template: function SiResultDetailsListComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "ul", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiResultDetailsListComponent_li_1_Template, 11, 10, "li", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.steps)("ngForTrackBy", ctx.trackByIndex);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgSwitch, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgSwitchCase, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgSwitchDefault, SiIconComponent, SiLoadingSpinnerComponent, SiTranslatePipe],
  styles: ["si-loading-spinner[_ngcontent-%COMP%]{--loading-spinner-size: 1.5rem;--loading-spinner-color: var(--element-text-active)}.result-description[_ngcontent-%COMP%]{flex:2 1;align-self:center}.result-value[_ngcontent-%COMP%]{flex:1 1;white-space:nowrap;align-self:center}.timeline[_ngcontent-%COMP%]:not(:last-child):after, .timeline[_ngcontent-%COMP%]:not(:first-child):before{content:\"\";position:absolute;inline-size:1px;background-color:var(--element-ui-2);block-size:calc(50% - .75rem);margin-inline-start:calc(.75rem - .5px)}si-icon[_ngcontent-%COMP%]{color:var(--element-ui-2)}.timeline[_ngcontent-%COMP%]:not(:first-child):before{inset-block-start:0}.timeline[_ngcontent-%COMP%]:not(:last-child):after{inset-block-end:0}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiResultDetailsListComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-result-details-list',
      template: "<ul class=\"list-unstyled d-flex flex-column mb-0\">\n  <li\n    *ngFor=\"let step of steps; trackBy: trackByIndex\"\n    class=\"position-relative d-flex align-items-center timeline px-6 py-5\"\n    [class.text-primary]=\"step.state === 'Running'\"\n  >\n    <si-loading-spinner *ngIf=\"step.state === 'Running'\" class=\"me-4\"></si-loading-spinner>\n    <si-icon\n      *ngIf=\"step.icon && step.state !== 'Running'\"\n      class=\"me-4\"\n      [icon]=\"step.icon\"\n    ></si-icon>\n    <ng-container *ngIf=\"!step.icon && step.state !== 'Running'\" [ngSwitch]=\"step.state\">\n      <si-icon\n        *ngSwitchCase=\"resultDetailStepState.Passed\"\n        class=\"me-4\"\n        icon=\"element-circle-filled\"\n        color=\"status-success\"\n        stackedIcon=\"element-state-tick\"\n        stackedColor=\"status-critical-contrast\"\n      ></si-icon>\n      <si-icon\n        *ngSwitchCase=\"resultDetailStepState.Failed\"\n        class=\"me-4\"\n        icon=\"element-circle-filled\"\n        color=\"status-danger\"\n        stackedIcon=\"element-state-exclamation-mark\"\n        stackedColor=\"status-critical-contrast\"\n      ></si-icon>\n      <si-icon\n        *ngSwitchCase=\"resultDetailStepState.NotStarted\"\n        class=\"me-4\"\n        icon=\"element-not-checked\"\n      ></si-icon>\n      <si-icon\n        *ngSwitchDefault\n        class=\"me-4\"\n        icon=\"element-out-of-service\"\n      ></si-icon>\n    </ng-container>\n    <div class=\"d-flex flex-column justify-content-center w-100\">\n      <div class=\"d-flex\">\n        <span class=\"result-description si-title-2\">{{ step.description | translate }}</span>\n        <span *ngIf=\"step.value\" class=\"result-value\">{{ step.value }}</span>\n      </div>\n      <span\n        *ngIf=\"step.errorMessage\"\n        class=\"si-title-2 text-danger\"\n      >{{ step.errorMessage | translate }}</span>\n    </div>\n  </li>\n</ul>\n",
      styles: ["si-loading-spinner{--loading-spinner-size: 1.5rem;--loading-spinner-color: var(--element-text-active)}.result-description{flex:2 1;align-self:center}.result-value{flex:1 1;white-space:nowrap;align-self:center}.timeline:not(:last-child):after,.timeline:not(:first-child):before{content:\"\";position:absolute;inline-size:1px;background-color:var(--element-ui-2);block-size:calc(50% - .75rem);margin-inline-start:calc(.75rem - .5px)}si-icon{color:var(--element-ui-2)}.timeline:not(:first-child):before{inset-block-start:0}.timeline:not(:last-child):after{inset-block-end:0}\n"]
    }]
  }], null, {
    steps: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiResultDetailsListModule {}
SiResultDetailsListModule.ɵfac = function SiResultDetailsListModule_Factory(t) {
  return new (t || SiResultDetailsListModule)();
};
SiResultDetailsListModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiResultDetailsListModule
});
SiResultDetailsListModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiLoadingSpinnerModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiResultDetailsListModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiLoadingSpinnerModule, SiTranslateModule],
      declarations: [SiResultDetailsListComponent],
      exports: [SiResultDetailsListComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

/** Convert options to option criterions */
const toOptionCriteria = values => values.map(v => typeof v === 'string' ? {
  label: v,
  value: v,
  selected: false
} : {
  label: v.label ?? v.value,
  value: v.value,
  selected: false
});
/* Update selected state */
const selectOptions = (options, toSelect) => options.forEach(val => val.selected = toSelect.includes(val.label));
/** Filter option criterions by label (case-insensitive) */
const filterByLabel = (options, searchLabel) => searchLabel ? options.filter(e => e.label.toLowerCase().includes(searchLabel.toLowerCase())) : options;
/** Whether the criterias contain the label (case-insensitive) */
const hasCriteriaLabel = (criterias, searchLabel) => searchLabel ? criterias.some(c => c.label.toLowerCase().includes(searchLabel.toLowerCase())) : false;
/** Find criterion by name */
const findByName = (source, name) => source.find(item => name === item.name);
/**
 * Difference by name, create an array that contains those elements of criterias a that are not in criterias b.
 * This operation is also sometimes called minus (-).
 */
const differenceByName = (a, b) => a.filter(x => b.filter(y => y.name === x.name).length === 0); // filter has not
/** Whether Criteria is date or date-time */
const isDateTimeCriteria = crit => crit?.validationType === 'date' || crit?.validationType === 'date-time';
/** Convert criteria to internal model criteria */
const toCriteriaIntern = crit => {
  const result = {
    ...crit,
    label: crit.label ?? crit.name,
    options: crit.options ?? [],
    value: crit.value ?? ''
  };
  if (isDateTimeCriteria(result)) {
    result.dateValue = result.value ? new Date(result.value.toString()) : new Date();
  }
  return result;
};
/** Convert search criteria to internal model search criteria */
const toSearchCriteriaIntern = (crit, critConfig) => {
  const result = {
    ...crit,
    label: crit.label ?? critConfig?.label ?? crit.name,
    options: crit.options ?? [],
    value: crit.value ?? ''
  };
  if (isDateTimeCriteria(critConfig)) {
    result.dateValue = crit.value ? new Date(crit.value.toString()) : new Date();
  }
  return result;
};
class ToLabelPipe {
  /**
   * It gets the label from options for the token (value) passed
   * @param options The options
   * @param token The token
   */
  static getLabel(options, token) {
    return ToLabelPipe.getFor(options, 'value', 'label', token);
  }
  /**
   * It gets the value from options for the token (label) passed
   * @param options The options
   * @param token The token
   */
  static getValue(options, token) {
    return ToLabelPipe.getFor(options, 'label', 'value', token);
  }
  static getFor(options, propertyToCompare, propertyToRetrieve, token) {
    if (!options || options.length === 0) {
      return token;
    }
    if (typeof token === 'string') {
      const option = options.find(op => typeof op === 'string' ? op === token : op[propertyToCompare] === token);
      if (option) {
        return typeof option === 'string' ? option : option[propertyToRetrieve];
      }
      return token;
    } else {
      const tokenArr = [];
      token?.forEach(tokenVal => {
        const option = options.find(op => typeof op === 'string' ? op === tokenVal : op[propertyToCompare] === tokenVal);
        if (option) {
          tokenArr.push(typeof option === 'string' ? option : option[propertyToRetrieve]);
        } else {
          tokenArr.push(tokenVal);
        }
      });
      return tokenArr;
    }
  }
  transform(token, options) {
    return ToLabelPipe.getLabel(options, token);
  }
}
ToLabelPipe.ɵfac = function ToLabelPipe_Factory(t) {
  return new (t || ToLabelPipe)();
};
ToLabelPipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
  name: "toLabel",
  type: ToLabelPipe,
  pure: true
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ToLabelPipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Pipe,
    args: [{
      name: 'toLabel'
    }]
  }], null, null);
})();
class SiTypeaheadComponent {
  set typeaheadElement(element) {
    this._typeaheadElement = element;
    this.setHeight(element);
    this.renderedMatchesLength = this.matchesArray.length;
  }
  get typeaheadElement() {
    return this._typeaheadElement;
  }
  constructor(cdRef) {
    this.cdRef = cdRef;
    this.matches = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject([]);
    this.activeIndex = -1;
    this.matchesArray = [];
    this.query = '';
    this.multiselect = false;
    this.dropup = false;
    // The offset on the side based on the icon of the input field.
    this.iconOffset = 0;
    // Store the number of rendered matches to know if the height needs to be recalculated.
    this.renderedMatchesLength = 0;
    this.trackByIndex = index => index;
  }
  ngOnInit() {
    this.multiselect = !!this.parent.typeaheadMultiSelect;
    this.dropup = !!this.parent.typeaheadDropup;
    this.iconOffset = this.parent.iconOffset;
    // Subscribe to the matches and store them in an array, also reset the active index to prevent conflicts.
    this.subscription = this.matches.subscribe(matches => {
      if (this.activeIndex === -1 || this.activeIndex >= matches.length) {
        // If the first match should not be automatically selected, set the active index to -1, otherwise to 0.
        this.activeIndex = this.parent.typeaheadAutoSelectIndex ? this.parent.typeaheadAutoSelectIndex : 0;
      }
      this.matchesArray = this.parent.typeaheadOptionsLimit ? matches.slice(0, this.parent.typeaheadOptionsLimit) : matches.slice();
      if (this.dropup) {
        this.matchesArray.reverse();
      }
      this.cdRef.markForCheck();
    });
  }
  ngOnDestroy() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }
  onMouseDown(event) {
    event.preventDefault();
  }
  /*
   * Set the height of the element passed to it (typeahead) if there are items displayed,
   * the number of displayed items changed and it is scrollable.
   */
  setHeight(element) {
    if (this.matchesArray.length !== 0 && this.matchesArray.length !== this.renderedMatchesLength) {
      if (this.parent.typeaheadScrollable && this.parent.typeaheadOptionsInScrollableView < this.matchesArray.length) {
        const computedStyle = getComputedStyle(element.nativeElement);
        const matchComputedStyle = getComputedStyle(element.nativeElement.firstElementChild);
        const matchHeight = parseFloat(matchComputedStyle.height || '0');
        const paddingTop = parseFloat(computedStyle.paddingTop || '0');
        const paddingBottom = parseFloat(computedStyle.paddingBottom || '');
        const height = this.parent.typeaheadOptionsInScrollableView * matchHeight;
        element.nativeElement.style.height = `${height + paddingTop + paddingBottom + this.parent.typeaheadScrollableAdditionalHeight}px`;
      } else {
        element.nativeElement.style.height = 'auto';
      }
    }
  }
  // Gets called when a match is selected by clicking on it.
  selectMatch(event, matchIndex) {
    this.parent.selectMatch(matchIndex);
    event.stopPropagation();
  }
  // Gets called by the parent when the typeahead is scrollable and the user is going through the matches using the arrow keys.
  scrollToMatch(index) {
    if (this.typeaheadMatchElements) {
      // Calculate if the active match is visible, if not scroll to it.
      const typeaheadElement = this.typeaheadElement.nativeElement;
      const matchElement = Array.from(this.typeaheadMatchElements)[index].nativeElement;
      const top = typeaheadElement.scrollTop;
      const bottom = top + typeaheadElement.offsetHeight;
      const matchTop = matchElement.offsetTop;
      const matchBottom = matchTop + matchElement.offsetHeight;
      if (matchBottom >= bottom) {
        const typeaheadMargin = parseFloat(getComputedStyle(typeaheadElement).marginTop);
        typeaheadElement.scrollTop = matchElement.offsetTop - typeaheadElement.offsetHeight + typeaheadMargin + matchElement.offsetHeight;
      } else if (matchTop <= top) {
        typeaheadElement.scrollTop = matchElement.offsetTop;
      }
    }
  }
}
SiTypeaheadComponent.ɵfac = function SiTypeaheadComponent_Factory(t) {
  return new (t || SiTypeaheadComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiTypeaheadComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiTypeaheadComponent,
  selectors: [["si-typeahead"]],
  viewQuery: function SiTypeaheadComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c46, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c47, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.typeaheadElement = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.typeaheadMatchElements = _t);
    }
  },
  hostBindings: function SiTypeaheadComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mousedown", function SiTypeaheadComponent_mousedown_HostBindingHandler($event) {
        return ctx.onMouseDown($event);
      });
    }
  },
  decls: 3,
  vars: 1,
  consts: [["defaultItemTemplate", ""], ["class", "typeahead dropdown-menu", 3, "up", "margin-inline-start", 4, "ngIf"], ["type", "checkbox", "class", "form-check-input me-5 mb-3", "tabindex", "-1", 3, "checked", 4, "ngIf"], ["class", "icon me-2", 3, "ngClass", 4, "ngIf"], [3, "typeahead-match-segment-matching", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["type", "checkbox", "tabindex", "-1", 1, "form-check-input", "me-5", "mb-3", 3, "checked"], [1, "icon", "me-2", 3, "ngClass"], [1, "typeahead", "dropdown-menu"], ["typeahead", ""], ["class", "dropdown-item pe-4", 3, "active", "click", "mousedown", "mouseover", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "dropdown-item", "pe-4", 3, "click", "mousedown", "mouseover"], ["typeaheadMatch", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]],
  template: function SiTypeaheadComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiTypeaheadComponent_ng_template_0_Template, 3, 4, "ng-template", null, 0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiTypeaheadComponent_ul_2_Template, 3, 6, "ul", 1);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.matchesArray.length !== 0);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet],
  styles: [".dropdown-menu[_ngcontent-%COMP%]{display:block;position:relative;inset-block-start:0;inset-inline-start:0;margin-block-start:1px;overflow-y:auto;overflow-x:hidden;max-block-size:100%}.dropdown-menu.up[_ngcontent-%COMP%]{margin-block:0 2px}.typeahead-match-segment-matching[_ngcontent-%COMP%]{font-weight:700}.dropdown-item[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]{flex-shrink:0}.dropdown-item[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{white-space:pre-wrap}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTypeaheadComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-typeahead',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<!-- Template to be used for every match, can be replaced using an input. -->\n<ng-template #defaultItemTemplate let-match=\"match\">\n  <input\n    *ngIf=\"multiselect\"\n    type=\"checkbox\"\n    [checked]=\"match.itemSelected\"\n    class=\"form-check-input me-5 mb-3\"\n    tabindex=\"-1\"\n  >\n  <span class=\"icon me-2\" [ngClass]=\"match.iconClass\" *ngIf=\"match.iconClass\"></span>\n  <span\n    *ngFor=\"let segment of match.result; trackBy: trackByIndex\"\n    [class.typeahead-match-segment-matching]=\"segment.isMatching\"\n  >{{ segment.text }}</span>\n</ng-template>\n\n<!-- Only display the component if there are any matches and set the CSS transform to properly position the typeahead -->\n<ul *ngIf=\"matchesArray.length !== 0\" class=\"typeahead dropdown-menu\" #typeahead [class.up]=\"dropup\" [style.margin-inline-start.px]=\"iconOffset\">\n  <!-- Loop through every match and bind events, the mousedown prevent default is to prevent the host from losing focus on click -->\n  <li\n    *ngFor=\"let match of matchesArray; let index = index; trackBy: trackByIndex\"\n    #typeaheadMatch\n    class=\"dropdown-item pe-4\"\n    [class.active]=\"activeIndex === (dropup ? matchesArray.length - index - 1 : index)\"\n    (click)=\"selectMatch($event, (dropup ? matchesArray.length - index - 1 : index))\"\n    (mousedown)=\"$event.preventDefault()\"\n    (mouseover)=\"activeIndex = (dropup ? matchesArray.length - index - 1 : index)\"\n  >\n    <!-- Display either a template set as the input or the template above -->\n    <ng-template [ngTemplateOutlet]=\"parent.typeaheadItemTemplate || defaultItemTemplate\"\n      [ngTemplateOutletContext]=\"{item: match.option, index: (dropup ? matchesArray.length - index - 1 : index), match: match, query: query}\">\n    </ng-template>\n  </li>\n</ul>\n",
      styles: [".dropdown-menu{display:block;position:relative;inset-block-start:0;inset-inline-start:0;margin-block-start:1px;overflow-y:auto;overflow-x:hidden;max-block-size:100%}.dropdown-menu.up{margin-block:0 2px}.typeahead-match-segment-matching{font-weight:700}.dropdown-item *{flex-shrink:0}.dropdown-item span{white-space:pre-wrap}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    typeaheadElement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['typeahead', {
        static: false
      }]
    }],
    typeaheadMatchElements: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChildren,
      args: ['typeaheadMatch']
    }],
    onMouseDown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['mousedown', ['$event']]
    }]
  });
})();
class SiTypeaheadSorting {
  sortMatches(matches) {
    // Sort the matches,
    // first is the option and query an exact match.
    // then according to whether it is matching in the beginning,
    // then whether it matches the entire untokenized query.
    // then according to how many unique separate matches it contains.
    // then according to how many unique matches it contains.
    // then according to how many matches it contains.
    return matches.sort((matchA, matchB) => {
      if (matchA.stringMatch || matchB.stringMatch) {
        return matchA.stringMatch ? -1 : 1;
      }
      if (matchA.atBeginning) {
        return !matchB.atBeginning ? -1 : this.compareMatches(matchA, matchB);
      } else {
        return matchB.atBeginning ? 1 : this.compareMatches(matchA, matchB);
      }
    });
  }
  compareMatchesNumbers(matchA, matchB) {
    return matchB.uniqueSeparateMatches - matchA.uniqueSeparateMatches || matchB.uniqueMatches - matchA.uniqueMatches || matchB.matches - matchA.matches;
  }
  compareMatches(matchA, matchB) {
    if (matchA.matchesEntireQuery) {
      return !matchB.matchesEntireQuery ? -1 : this.compareMatchesNumbers(matchA, matchB);
    } else {
      return matchB.matchesEntireQuery ? 1 : this.compareMatchesNumbers(matchA, matchB);
    }
  }
}
class SiTypeaheadDirective {
  constructor(overlay, elementRef, ngControl, changeDetector) {
    this.overlay = overlay;
    this.elementRef = elementRef;
    this.ngControl = ngControl;
    this.changeDetector = changeDetector;
    /**
     * Turns on/off the processing (searching and sorting) of the typeahead options.
     * Is used when searching and sorting is done externally.
     */
    this.typeaheadProcess = true;
    /**
     * Makes the typeahead scrollable and sets its height.
     * Uses {@link typeaheadOptionsInScrollableView} and {@link typeaheadScrollableAdditionalHeight}.
     */
    this.typeaheadScrollable = false;
    /**
     * If {@link typeaheadScrollable} is `true`, defines the number of items visible at once.
     */
    this.typeaheadOptionsInScrollableView = 10;
    /**
     * Defines the maximum number of items added into the DOM. Default is 20 and 0 means unlimited.
     */
    this.typeaheadOptionsLimit = 20;
    /**
     * If {@link typeaheadScrollable} is `true`, defines the number of additional pixels
     * to be added the the bottom of the typeahead to show users that it is scrollable.
     */
    this.typeaheadScrollableAdditionalHeight = 13;
    /**
     * Defines the index of the item which should automatically be selected.
     */
    this.typeaheadAutoSelectIndex = 0;
    /**
     * Defines whether the typeahead can be closed using escape.
     */
    this.typeaheadCloseOnEsc = true;
    /**
     * Defines whether the host value should be cleared when a value is selected.
     */
    this.typeaheadClearValueOnSelect = false;
    /**
     * Defines the number of milliseconds to wait before displaying a typeahead after the host was
     * focused or a value inputted.
     */
    this.typeaheadWaitMs = 0;
    /**
     * Defines the number of characters the value of the host needs to be before a typeahead is displayed.
     * Use `0` to have it display when focussing the host (clicking or tabbing into it).
     */
    this.typeaheadMinLength = 1;
    /**
     * Defines the name of the field/property the option string is in when the typeahead options are objects.
     */
    this.typeaheadOptionField = 'name';
    /**
     * Defines whether multiselection of typeahead is possible with checkboxes.
     */
    this.typeaheadMultiSelect = false;
    /**
     * Defines whether to tokenize the search or match the whole search.
     */
    this.typeaheadTokenize = true;
    /**
     * Defines whether and how to require to match with all the tokens if {@link typeaheadTokenize} is enabled.
     * - `no` does not require all of the tokens to match.
     * - `once` requires all of the parts to be found in the search.
     * - `separately` requires all of the parts to be found in the search where there is not an overlapping different result.
     * - `independently` requires all of the parts to be found in the search where there is not an overlapping or adjacent different result.
     *   ('independently' also slightly changes sorting behavior in the same way.)
     */
    this.typeaheadMatchAllTokens = 'separately';
    /**
     * Whether to display the typeahead upwards instead of downwards.
     */
    this.typeaheadDropup = false;
    /**
     * Skip the sorting of matches.
     * If the value is `true`, the matches are sorted according to {@link SiTypeaheadSorting}.
     */
    this.typeaheadSkipSortingMatches = false;
    /**
     * Emits an Event when the input field is changed.
     */
    this.typeaheadOnInput = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Emits an Event when a typeahead match is selected.
     * The event is a {@link TypeaheadMatch}
     */
    this.typeaheadOnSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter(true);
    /**
     * Emits an Event when a multiselect is enabled and closed using enter.
     */
    this.typeaheadOnMultiselectClose = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Emits an Event when a typeahead full match exists. A full match occurs when the entered text
     * is equal to one of the typeahead options.
     * The event is a {@link TypeaheadMatch}
     */
    this.typeaheadOnFullMatch = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter(true);
    /**
     * Emits when the typeahead closed
     */
    this.typeaheadClosed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter(true);
    // The offset on the side based on the icon of the input field.
    this.iconOffset = 0;
    this.$typeahead = new rxjs__WEBPACK_IMPORTED_MODULE_30__.ReplaySubject(1);
    this.isCurrentlyDropup = false;
    this.matchSorter = new SiTypeaheadSorting();
  }
  // Every time the main input changes, detect whether it is async and if it is not make an observable out of the array.
  ngOnChanges(changes) {
    if (changes.siTypeahead) {
      this.sourceSubscription?.unsubscribe();
      if ((0,rxjs__WEBPACK_IMPORTED_MODULE_42__.isObservable)(this.siTypeahead)) {
        this.sourceSubscription = this.siTypeahead.subscribe(this.$typeahead);
      } else {
        this.$typeahead.next(this.siTypeahead);
      }
    }
  }
  // Clear the current input timeout (if set) and remove the component when the focus of the host is lost.
  onBlur() {
    this.clearTimer();
    if (this.component) {
      this.removeComponent();
    }
  }
  // Start the input timeout to display the typeahead when the host is focussed or a value is inputted into it.
  onInput(event) {
    const target = event.target;
    if (!target) {
      return;
    }
    // Get the value or otherwise textContent of the host element now, because later it could be reset.
    const firstValue = target.value || target.textContent;
    if (!this.inputTimer) {
      this.inputTimer = setTimeout(() => {
        this.inputTimer = undefined;
        const value = (target.value || target.textContent) ?? firstValue;
        // The value needs to fullfil the minimum length requirement set.
        if (value !== null && value.length >= this.typeaheadMinLength) {
          if (this.component) {
            this.setMatchesAndQuery(value, this.$typeahead, this.component);
          } else {
            this.loadComponent(value);
          }
        } else if (this.component) {
          // If the value is too short, check if a typeahead still exists and remove it if it does.
          this.removeComponent();
        }
        this.typeaheadOnInput.emit(value ?? '');
      }, this.typeaheadWaitMs);
    }
  }
  // Listen on the keydown event to navigate the typeahead using the keyboard.
  onKeydown(event) {
    // Only check the key pressed if the component exists and it displays any matches.
    if (!this.component || this.component.matchesArray.length === 0) {
      return;
    }
    // On escape clear the current input timeout (if set) and remove the typeahead if closing with escape is enabled.
    if (event.key === 'Escape' && this.typeaheadCloseOnEsc) {
      this.clearTimer();
      if (this.component) {
        event.stopPropagation();
        this.removeComponent();
      }
      return;
    }
    // If it's multiselect and open on enter prevent default (to prevent a form submit), emit a relevant event and close the dropdown.
    if (event.key === 'Enter' && this.typeaheadMultiSelect && this.component) {
      event.preventDefault();
      // Clear the current input timeout (if set) and remove the typeahead.
      this.clearTimer();
      this.typeaheadOnMultiselectClose.emit();
      this.removeComponent();
      return;
    }
    // If it's not multiselect on enter prevent default (to prevent a form submit) and select the active match.
    // Or if it's multiselect and space prevent default (to prevent a character input) and check the active match.
    if (event.key === 'Enter' && !this.typeaheadMultiSelect || this.typeaheadMultiSelect && (event.key === ' ' || event.key === 'Space')) {
      // Only intercept and select match if an actual match is active.
      if (this.component.activeIndex !== -1) {
        event.preventDefault();
        this.selectMatch(this.isCurrentlyDropup ? this.component.matchesArray.length - this.component.activeIndex - 1 : this.component.activeIndex);
      }
      return;
    }
    // On arrow down go down one match or wrap around to the top, also if scrollable scroll to the now active match.
    if (event.key === 'ArrowDown' && !this.isCurrentlyDropup || event.key === 'ArrowUp' && this.isCurrentlyDropup) {
      if (this.component.activeIndex === this.component.matchesArray.length - 1) {
        this.component.activeIndex = 0;
      } else {
        this.component.activeIndex++;
      }
      if (this.typeaheadScrollable) {
        this.component.scrollToMatch(this.component.activeIndex);
      }
      event.preventDefault();
      this.component.cdRef.markForCheck();
      return;
    }
    // On arrow up go up one match or wrap around to the bottom, also if scrollable scroll to the now active match.
    if (event.key === 'ArrowUp' && !this.isCurrentlyDropup || event.key === 'ArrowDown' && this.isCurrentlyDropup) {
      // Don't go up when the active index is -1 and no match is selected.
      if (this.component.activeIndex === 0) {
        this.component.activeIndex = this.component.matchesArray.length - 1;
      } else if (this.component.activeIndex !== -1) {
        this.component.activeIndex--;
      }
      if (this.typeaheadScrollable) {
        this.component.scrollToMatch(this.component.activeIndex);
      }
      event.preventDefault();
      this.component.cdRef.markForCheck();
      return;
    }
  }
  ngOnDestroy() {
    this.clearTimer();
    this.sourceSubscription?.unsubscribe();
    this.subscription?.unsubscribe();
    this.overlayRef?.dispose();
  }
  // Dynamically create the typeahead component and then set the matches and the query.
  loadComponent(value) {
    if (!this.overlayRef?.hasAttached() || this.typeaheadDropup !== this.isCurrentlyDropup) {
      this.overlayRef?.dispose();
      const position = {
        overlayX: 'start',
        overlayY: this.typeaheadDropup ? 'bottom' : 'top',
        originX: 'start',
        originY: this.typeaheadDropup ? 'top' : 'bottom'
      };
      this.overlayRef = getOverlay(this.elementRef, this.overlay, false, [position], true, false);
    }
    this.isCurrentlyDropup = this.typeaheadDropup;
    if (this.overlayRef.hasAttached()) {
      return;
    }
    const typeaheadPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.ComponentPortal(SiTypeaheadComponent);
    this.componentRef = this.overlayRef.attach(typeaheadPortal);
    this.component = this.componentRef.instance;
    const input = this.elementRef.nativeElement.querySelector('input');
    this.iconOffset = input ? parseFloat(getComputedStyle(input).paddingLeft) : 0;
    // Set this as a variable for easy access from the component.
    this.component.parent = this;
    // Wait for change detection to prevent setting the matches before the component has subscribed to it.
    this.changeDetector.detectChanges();
    this.setMatchesAndQuery(value, this.$typeahead, this.component);
  }
  // Get the matches and push them to the subject of the component, then set the query of the component.
  setMatchesAndQuery(query, items, component) {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
    this.subscription = this.getMatches(items, query).subscribe(matches => {
      component.matches.next(matches);
      const escapedQuery = this.escapeRegex(query);
      const equalsExp = new RegExp(`\^${escapedQuery}\$`, 'i');
      const fullMatches = matches.filter(match => match.result.length === 1 && equalsExp.test(match.text));
      if (fullMatches.length > 0) {
        this.typeaheadOnFullMatch.emit(fullMatches[0]);
      }
    });
    component.query = query;
    this.component?.cdRef.markForCheck();
  }
  // If the typeahead options are objects, pick the specified field/property.
  getOptionValue(option, field) {
    return typeof option !== 'object' ? option.toString() : option[field] || '';
  }
  // If enabled, process the matches and sort through them.
  getMatches(observableList, query) {
    try {
      const entireQueryRegex = new RegExp(this.escapeRegex(query), 'gi');
      const queryParts = this.typeaheadTokenize ? query.split(/\s+/g).filter(queryPart => queryPart) : query ? [query] : [];
      const queryRegexes = queryParts.map(queryPart => new RegExp(this.escapeRegex(queryPart), 'gi'));
      return observableList.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.map)(options => {
        // Check if the options need to be processed, if not just return an unprocessed object.
        if (!this.typeaheadProcess) {
          return options.map(option => {
            const optionValue = this.getOptionValue(option, this.typeaheadOptionField);
            const itemSelected = this.typeaheadMultiSelect ? this.getOptionValue(option, 'selected') : false;
            const iconClass = this.getOptionValue(option, 'iconClass');
            return {
              option,
              itemSelected,
              text: optionValue,
              iconClass,
              result: optionValue ? [{
                text: optionValue,
                isMatching: false,
                matches: 0,
                uniqueMatches: 0
              }] : [],
              stringMatch: false,
              atBeginning: false,
              matches: 0,
              uniqueMatches: 0,
              uniqueSeparateMatches: 0,
              matchesEntireQuery: false,
              matchesAllParts: false,
              matchesAllPartsSeparately: false,
              active: false
            };
          });
        } else {
          // Process the options.
          const matches = [];
          options.forEach(option => {
            const optionValue = this.getOptionValue(option, this.typeaheadOptionField);
            const stringMatch = optionValue.toLocaleLowerCase().trim() === query.toLocaleLowerCase().trim();
            const itemSelected = this.typeaheadMultiSelect ? option['selected'] : false;
            const iconClass = this.getOptionValue(option, 'iconClass');
            const candidate = {
              option,
              itemSelected,
              text: optionValue,
              iconClass,
              result: [],
              stringMatch,
              atBeginning: false,
              matches: 0,
              uniqueMatches: 0,
              uniqueSeparateMatches: 0,
              matchesEntireQuery: false,
              matchesAllParts: false,
              matchesAllPartsSeparately: false
            };
            // Only search the options if a part of the query is at least one character long to prevent an endless loop.
            if (queryParts.length === 0) {
              if (optionValue) {
                candidate.result.push({
                  text: optionValue,
                  isMatching: false,
                  matches: 0,
                  uniqueMatches: 0
                });
              }
              matches.push(candidate);
            } else {
              const allResults = [];
              const allIndexes = [];
              candidate.matchesEntireQuery = !!optionValue.match(entireQueryRegex);
              // Loop through the option value to find multiple matches, then store every segment (matching or non-matching) in the results.
              queryRegexes.forEach((queryRegex, index) => {
                let regexMatch = queryRegex.exec(optionValue);
                while (regexMatch) {
                  allResults.push({
                    index,
                    start: regexMatch.index,
                    end: regexMatch.index + regexMatch[0].length,
                    result: regexMatch[0]
                  });
                  if (!regexMatch.index) {
                    candidate.atBeginning = true;
                  }
                  if (!allIndexes.includes(index)) {
                    allIndexes.push(index);
                  }
                  regexMatch = queryRegex.exec(optionValue);
                }
              });
              candidate.matchesAllParts = allIndexes.length === queryParts.length;
              // Check if all parts of the query match at least once (if required).
              if (this.typeaheadMatchAllTokens === 'no' || candidate.matchesAllParts) {
                const combinedResults = [];
                // First combine intersecting (or if set to independently adjacent) results to combined results.
                // We achieve this by first sorting them by the starting index, then by the ending index and then looking for overlaps.
                allResults.sort((a, b) => a.start - b.start || a.end - b.end).forEach(result => {
                  if (combinedResults.length) {
                    const foundPreviousResult = combinedResults.find(previousResult => this.typeaheadMatchAllTokens === 'independently' ? result.start <= previousResult.end : result.start < previousResult.end);
                    if (foundPreviousResult) {
                      foundPreviousResult.result += result.result.slice(foundPreviousResult.end - result.start, result.result.length);
                      if (result.end > foundPreviousResult.end) {
                        foundPreviousResult.end = result.end;
                      }
                      foundPreviousResult.indexes.push(result.index);
                      if (!foundPreviousResult.uniqueIndexes.includes(result.index)) {
                        foundPreviousResult.uniqueIndexes.push(result.index);
                      }
                      return;
                    }
                  }
                  combinedResults.push({
                    ...result,
                    indexes: [result.index],
                    uniqueIndexes: [result.index]
                  });
                });
                // Recursively go through all unique combinations of the unique indexes to get the option which has the most indexes.
                const countUniqueSubindexes = (indexIndex = 0, previousIndexes = []) => indexIndex === combinedResults.length ? previousIndexes.length : Math.max(previousIndexes.length, ...combinedResults[indexIndex].uniqueIndexes.filter(index => !previousIndexes.includes(index)).map(index => countUniqueSubindexes(indexIndex + 1, [index, ...previousIndexes])));
                candidate.uniqueSeparateMatches = countUniqueSubindexes();
                candidate.matchesAllPartsSeparately = candidate.uniqueSeparateMatches === queryParts.length;
                let currentPreviousEnd = 0;
                // Add the combined results to the candidate including the non-matching parts in between.
                combinedResults.forEach(result => {
                  const textBefore = optionValue.slice(currentPreviousEnd, result.start);
                  if (textBefore) {
                    candidate.result.push({
                      text: textBefore,
                      isMatching: false,
                      matches: 0,
                      uniqueMatches: 0
                    });
                  }
                  candidate.result.push({
                    text: result.result,
                    isMatching: true,
                    matches: result.indexes.length,
                    uniqueMatches: result.uniqueIndexes.length
                  });
                  currentPreviousEnd = result.end;
                  candidate.matches += result.indexes.length;
                  candidate.uniqueMatches += result.uniqueIndexes.length;
                });
                // Check if there are result segments and all parts are matched independently (if required).
                if (candidate.result.length !== 0 && (this.typeaheadMatchAllTokens !== 'separately' && this.typeaheadMatchAllTokens !== 'independently' || candidate.matchesAllPartsSeparately)) {
                  const textAtEnd = optionValue.slice(currentPreviousEnd);
                  if (textAtEnd) {
                    candidate.result.push({
                      text: textAtEnd,
                      isMatching: false,
                      matches: 0,
                      uniqueMatches: 0
                    });
                  }
                  matches.push(candidate);
                }
              }
            }
          });
          if (this.typeaheadSkipSortingMatches) {
            return matches;
          } else {
            return this.matchSorter.sortMatches(matches);
          }
        }
      }));
    } catch {
      // Could not create regex (only in extremely rare cases, maybe even impossible), so return an empty array.
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)([]);
    }
  }
  // Select a match, either gets called due to a enter keypress or from the component due to a click.
  selectMatch(matchIndex) {
    const match = this.component.matchesArray[matchIndex];
    const value = this.typeaheadClearValueOnSelect ? '' : match.text;
    match.itemSelected = !match.itemSelected;
    if (!this.typeaheadMultiSelect) {
      this.ngControl.control.setValue(value);
    }
    // Clear the current input timeout (if set) and remove the typeahead.
    this.clearTimer();
    if (this.component) {
      this.typeaheadOnSelect.emit(match);
      if (!this.typeaheadMultiSelect) {
        this.removeComponent();
      }
    }
  }
  // Remove the component by clearing the viewContainerRef
  removeComponent() {
    this.typeaheadClosed.emit();
    if (this.overlayRef?.hasAttached()) {
      this.overlayRef?.detach();
    }
    this.componentRef?.destroy();
    this.componentRef = undefined;
    this.component = undefined;
  }
  clearTimer() {
    if (this.inputTimer) {
      clearTimeout(this.inputTimer);
      this.inputTimer = undefined;
    }
  }
  escapeRegex(query) {
    return query.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
  }
}
SiTypeaheadDirective.ɵfac = function SiTypeaheadDirective_Factory(t) {
  return new (t || SiTypeaheadDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.Overlay), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgControl), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiTypeaheadDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiTypeaheadDirective,
  selectors: [["", "siTypeahead", ""]],
  hostBindings: function SiTypeaheadDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("focusout", function SiTypeaheadDirective_focusout_HostBindingHandler() {
        return ctx.onBlur();
      })("focusin", function SiTypeaheadDirective_focusin_HostBindingHandler($event) {
        return ctx.onInput($event);
      })("input", function SiTypeaheadDirective_input_HostBindingHandler($event) {
        return ctx.onInput($event);
      })("paste", function SiTypeaheadDirective_paste_HostBindingHandler($event) {
        return ctx.onInput($event);
      })("keydown", function SiTypeaheadDirective_keydown_HostBindingHandler($event) {
        return ctx.onKeydown($event);
      });
    }
  },
  inputs: {
    siTypeahead: "siTypeahead",
    typeaheadProcess: "typeaheadProcess",
    typeaheadScrollable: "typeaheadScrollable",
    typeaheadOptionsInScrollableView: "typeaheadOptionsInScrollableView",
    typeaheadOptionsLimit: "typeaheadOptionsLimit",
    typeaheadScrollableAdditionalHeight: "typeaheadScrollableAdditionalHeight",
    typeaheadAutoSelectIndex: "typeaheadAutoSelectIndex",
    typeaheadCloseOnEsc: "typeaheadCloseOnEsc",
    typeaheadClearValueOnSelect: "typeaheadClearValueOnSelect",
    typeaheadWaitMs: "typeaheadWaitMs",
    typeaheadMinLength: "typeaheadMinLength",
    typeaheadOptionField: "typeaheadOptionField",
    typeaheadMultiSelect: "typeaheadMultiSelect",
    typeaheadTokenize: "typeaheadTokenize",
    typeaheadMatchAllTokens: "typeaheadMatchAllTokens",
    typeaheadItemTemplate: "typeaheadItemTemplate",
    typeaheadDropup: "typeaheadDropup",
    typeaheadSkipSortingMatches: "typeaheadSkipSortingMatches"
  },
  outputs: {
    typeaheadOnInput: "typeaheadOnInput",
    typeaheadOnSelect: "typeaheadOnSelect",
    typeaheadOnMultiselectClose: "typeaheadOnMultiselectClose",
    typeaheadOnFullMatch: "typeaheadOnFullMatch",
    typeaheadClosed: "typeaheadClosed"
  },
  exportAs: ["si-typeahead"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiTypeaheadDirective.prototype, "siTypeahead", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTypeaheadDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siTypeahead]',
      exportAs: 'si-typeahead'
    }]
  }], function () {
    return [{
      type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.Overlay
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgControl
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    siTypeahead: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadProcess: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadScrollable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadOptionsInScrollableView: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadOptionsLimit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadScrollableAdditionalHeight: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadAutoSelectIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadCloseOnEsc: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadClearValueOnSelect: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadWaitMs: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadMinLength: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadOptionField: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadMultiSelect: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadTokenize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadMatchAllTokens: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadItemTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadDropup: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadSkipSortingMatches: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    typeaheadOnInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    typeaheadOnSelect: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    typeaheadOnMultiselectClose: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    typeaheadOnFullMatch: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    typeaheadClosed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    onBlur: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focusout']
    }],
    onInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focusin', ['$event']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['input', ['$event']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['paste', ['$event']]
    }],
    onKeydown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keydown', ['$event']]
    }]
  });
})();
const FOCUS_INDEX_FREE_TEXT_INPUT_FIELD = -1;
const FOCUS_INDEX_OUT_OF_COMPONENT = -2;
class SiFilteredSearchComponent {
  constructor(elementRef, locale, cdRef) {
    this.elementRef = elementRef;
    this.locale = locale;
    this.cdRef = cdRef;
    /**
     * Output callback event that provides an object describing the
     * selected criteria and additional filter text.
     */
    this.doSearch = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * If this is set to `true`, the search triggers for each input.
     * By default this is only done on 'click' and 'enter'.
     * This disables the search on 'click' and 'enter'.
     */
    this.doSearchOnInputChange = false;
    /**
     * Disable any interactivity.
     */
    this.disabled = false;
    /**
     * Do not allow changes. Search can still be triggered.
     */
    this.readonly = false;
    /**
     * Limit criteria to the predefined ones.
     */
    this.strictCriterion = false;
    /**
     * Limit criterion options to the predefined ones. `[strictValue]`
     * enforces `[strictCriterion]` to true automatically.
     */
    this.strictValue = false;
    /**
     * Limit criterion options to the predefined ones and prevent typing. `[onlySelectValue]`
     * enforces `[strictValue]` and `[strictCriterion]` to true automatically.
     */
    this.onlySelectValue = false;
    /**
     * Custom debounce time for lazy loading of criteria data.
     */
    this.lazyLoadingDebounceTime = 500;
    /**
     * Custom debounce time (in mills) to delay the search emission.
     * (Default is 0 as in most cases a users manually triggers a search.
     * Recommended to increase a bit when using doSearchOnInputChange=true)
     */
    this.searchDebounceTime = 0;
    /**
     * The placeholder for input field.
     */
    this.placeholder = '';
    /**
     * Show a search icon in input field.
     */
    this.showIcon = false;
    /**
     * Custom 'submit' text.
     */
    this.submitText = 'Press Enter or Click to Search';
    /**
     * Index of the criteria in dropdown which should be selected initially.
     */
    this.selectedCriteriaIndex = 0;
    /**
     * Defines the number of criterions or criteria values or operators visible at once.
     */
    this.optionsInScrollableView = 10;
    /**
     * Current criteria to be searched.
     * @defaultref {@link _searchCriteria}
     */
    this.searchCriteria = {
      criteria: [],
      value: ''
    };
    /**
     * Predefine criteria options.
     */
    this.criteria = [];
    /**
     * Opt-in to search for each criterion only once.
     */
    this.exclusiveCriteria = false;
    /**
     * Limit the number of possible criteria. The default is undefined so that any number of criteria can be used.
     * For example, setting the value to 1 let you only select one criterion that you need to remove before being
     * able to set another one.
     */
    this.maxCriteria = undefined;
    /**
     * Defines the maximum options within one criteria. The default is 20 and 0 means unlimited.
     */
    this.maxCriteriaOptions = 20;
    /**
     * Search input aria label, Needed by a11y
     */
    this.searchLabel = 'search';
    /**
     * Clear button aria label. Needed for a11y
     */
    this.clearButtonLabel = 'clear';
    /**
     * Items count text appended to the count in case of multiselection of values.
     * Translation key, `{{itemCount}}` in the translation will be replaced with the actual value
     */
    this.itemCountText = '';
    /**
     * Color variant to determine component background
     */
    this.colorVariant = 'base-1';
    /**
     * Text or translate key for multi selection pills text.
     */
    this.items = 'items';
    /**
     * Disables the free text search to only use the criterion for filtering.
     */
    this.disableFreeTextSearch = false;
    /**
     * Text for first entry in dropdown in case that no criteria
     * match the text input and the property `disableFreeTextSearch`
     * is set to `true`.
     */
    this.noMatchingCriteriaText = 'No matching criteria';
    this.editCriterionIndex = FOCUS_INDEX_FREE_TEXT_INPUT_FIELD;
    /** Internal representation of the input search criteria */
    this.internSearchCriteria = {
      criteria: [],
      value: ''
    };
    /** Internal criteria model */
    this.internCriteria = [];
    this.integerInvalidChar = [',', '.'];
    this.debouncedCriterionQueueSubject = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    /** Used to debounce while fetching for criteria data */
    this.debouncedValueSubject = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    /** Used to trigger a renewed search */
    this.typeaheadInputChange = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.lastTypeaheadInput = '';
    /** Used to debounce the Search emissions */
    this.searchEmitQueue = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.destroySubscriptions = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.lazyLoadedValue = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.invalidDateTime = false;
    this.focusState = false;
    this.trackByIndex = index => index;
    this.isReadOnly = () => this.readonly || this.disabled;
    this.shortDateFormat = getNamedFormat(this.locale, 'shortDate');
    if (!this.shortDateFormat.includes('yyyy')) {
      this.shortDateFormat = this.shortDateFormat.replace('yy', 'yyyy');
    }
    this.dataSource = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(observer => {
      if (this.lazyCriterionProvider) {
        this.debouncedCriterionQueueSubject.next(observer);
      } else {
        observer.next(this.getCriteriaToDisplay(''));
      }
      this.typeaheadInputChange.subscribe(value => {
        if (this.lazyCriterionProvider) {
          this.debouncedCriterionQueueSubject.next(observer);
        } else {
          observer.next(this.getCriteriaToDisplay(value));
        }
      });
    });
  }
  ngOnChanges(changes) {
    if (changes.searchCriteria || changes.criteria) {
      this.initCriteria();
      this.initSearchCriteria();
    }
  }
  ngOnInit() {
    if (this.onlySelectValue) {
      this.strictValue = true;
    }
    if (this.strictValue) {
      this.strictCriterion = true;
    }
    if (this.strictCriterion && this.internCriteria.length === 0) {
      throw new Error('strict criterion mode activated without predefined criteria!');
    }
    this.setupCriteriaFetchQueue();
    this.searchEmitQueue.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_41__.debounceTime)(this.searchDebounceTime), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.takeUntil)(this.destroySubscriptions)).subscribe(searchCriteria => this.doSearch.emit(searchCriteria));
    if (this.elementRef.nativeElement.attributes.disabled) {
      this.disabled = true;
    }
  }
  ngOnDestroy() {
    this.destroySubscriptions.next(true);
    this.destroySubscriptions.unsubscribe();
  }
  /** Initialize criteria */
  initCriteria() {
    this.criteria = this.criteria ?? [];
    this.internCriteria = this.criteria.map(c => toCriteriaIntern(c));
  }
  /** Initialize internal search criteria */
  initSearchCriteria() {
    this.searchCriteria = this.searchCriteria ?? [];
    this.internSearchCriteria = {
      criteria: this.searchCriteria?.criteria.map(c => toSearchCriteriaIntern(c, this.getCriterionByName(c.name))),
      value: this.searchCriteria?.value ?? ''
    };
  }
  /**
   * It sets the value for searchCriteria for free text and patch the form control accordingly
   * @param newValue the new value
   */
  setSearchCriteriaValue(newValue) {
    this.internSearchCriteria.value = newValue;
  }
  getCriteriaToDisplay(value) {
    const filtered = this.getFilteredTypeaheadCriteria(value);
    const topItems = this.disableFreeTextSearch && filtered.length === 0 || !this.doSearchOnInputChange ? [{
      name: '',
      value: '',
      label: this.disableFreeTextSearch && filtered.length === 0 ? this.noMatchingCriteriaText : this.submitText
    }] : [];
    return [...topItems, ...filtered];
  }
  criterionInputKeyUp(event) {
    let newValue = event.target.value;
    if (event.key === SiFilteredSearchComponent.keys.enter) {
      newValue = this.previousEditingValue;
    } else if (event.key === SiFilteredSearchComponent.keys.backspace) {
      this.handleInputBackspace();
    } else if (event.key === SiFilteredSearchComponent.keys.colon && !this.onlySelectValue) {
      this.handleInputColon();
      // emit clear, when doSearchOnInputChange is wished or value is empty
      if (this.doSearchOnInputChange || !this.internSearchCriteria.value) {
        this.searchEmitQueue.next(this.convertToExternalModel(this.internSearchCriteria));
      }
    } else if (this.doSearchOnInputChange) {
      // trigger search if value doesn't include criterion.label
      const labelIncluded = hasCriteriaLabel(this.internCriteria, newValue);
      if (labelIncluded) {
        this.searchEmitQueue.next(this.convertToExternalModel(this.internSearchCriteria));
      }
    }
    this.previousEditingValue = newValue;
  }
  handleContextMenuPaste(event) {
    if (!this.disableFreeTextSearch) {
      const clipboardData = event.clipboardData;
      this.previousEditingValue = clipboardData?.getData('Text') ?? '';
    }
  }
  deleteAllCriteria(event) {
    if (this.isReadOnly()) {
      return;
    }
    event?.stopPropagation();
    // Reset search criteria
    this.internSearchCriteria = {
      criteria: [],
      value: ''
    };
    this.searchCriteria = {
      criteria: [],
      value: ''
    };
    this.doSearch.emit(this.internSearchCriteria);
  }
  deleteCriterion(event, index) {
    if (this.isReadOnly()) {
      return;
    }
    if (event) {
      event.stopPropagation();
      this.editCriterionByIndex(FOCUS_INDEX_FREE_TEXT_INPUT_FIELD);
    }
    this.searchCriteria.criteria.splice(index, 1);
    this.internSearchCriteria.criteria.splice(index, 1);
    this.doSearch.emit(this.convertToExternalModel(this.internSearchCriteria));
  }
  editCriterion(criterion) {
    if (this.isReadOnly()) {
      return;
    }
    const index = this.internSearchCriteria.criteria.indexOf(criterion);
    const criterionOptions = this.getCriterionByName(criterion.name);
    this.editCriterionByIndex(index, (criterionOptions?.operators?.length ?? 0) > 0);
  }
  editOperator(criterion, event) {
    if (this.isReadOnly()) {
      return;
    }
    event.stopPropagation();
    const index = this.internSearchCriteria.criteria.indexOf(criterion);
    this.editCriterionByIndex(index, true);
  }
  editValue(criterion, event) {
    if (this.isReadOnly()) {
      return;
    }
    event.stopPropagation();
    const index = this.internSearchCriteria.criteria.indexOf(criterion);
    this.editCriterionByIndex(index);
  }
  getCriterionOptions(name, index, typed) {
    return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(observer => {
      if (!typed) {
        typed = '';
      }
      const existingSearchCriteria = this.internSearchCriteria.criteria[index];
      if (this.lazyValueProvider) {
        const lazyValRequest = {
          criterionName: name,
          typed
        };
        // Initiate call to app with typed string and selected criteria
        this.debouncedValueSubject.next(lazyValRequest);
        // Listen to subscription when app sends back server data
        this.lazyLoadedValue.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.takeUntil)(this.destroySubscriptions)).subscribe(result => {
          const options = this.filterOptionCriterias(name, existingSearchCriteria.value, typed?.toString(), result);
          observer.next(options);
        });
      } else {
        const criterionOptions = this.getCriterionByName(name);
        const selected = existingSearchCriteria.value;
        const options = this.filterOptionCriterias(name, selected, typed?.toString(), criterionOptions?.options);
        observer.next(options);
      }
    });
  }
  /** Create a filtered criterions option list based on the search label */
  filterOptionCriterias(optionName, selected, searchLabel, options) {
    if (!options) {
      return [];
    } else {
      const optionCriterias = toOptionCriteria(options);
      if (this.isMultiSelect(optionName)) {
        selectOptions(optionCriterias, selected);
      }
      return filterByLabel(optionCriterias, searchLabel?.toString().toLowerCase());
    }
  }
  getCriterionOperators(name, typed) {
    return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(observer => {
      const criterionOptions = this.getCriterionByName(name);
      if (!criterionOptions?.operators) {
        observer.next([]);
      } else if (typed && typed !== this.previousEditingValue) {
        observer.next(criterionOptions.operators.filter(operator => operator.includes(typed)));
      } else {
        observer.next(criterionOptions.operators);
      }
    });
  }
  getCriterionOnlySelectValue(name) {
    const criterion = this.getCriterionByName(name);
    return criterion ? criterion.onlySelectValue && !criterion.multiSelect : false;
  }
  getSelectedOperatorIndex(name, operator) {
    const criterionOptions = this.getCriterionByName(name);
    if (!operator || !criterionOptions || !criterionOptions.operators) {
      return -1;
    } else if (operator && operator !== this.previousEditingValue) {
      return criterionOptions.operators.filter(op => op.includes(operator)).indexOf(operator);
    }
    return criterionOptions.operators.indexOf(operator);
  }
  getLongestOperatorLength(name) {
    const criterionOptions = this.getCriterionByName(name);
    if (!criterionOptions?.operators) {
      return 0;
    }
    return Math.max(...criterionOptions.operators.map(a => a.length));
  }
  getValueInputForCriterion(index, editOperator = false) {
    if (index === FOCUS_INDEX_FREE_TEXT_INPUT_FIELD) {
      return this.elementRef.nativeElement.getElementsByClassName('value-input')[0];
    } else if (editOperator) {
      return this.elementRef.nativeElement.getElementsByClassName('operator-input-' + index)[0];
    } else {
      return this.elementRef.nativeElement.getElementsByClassName('value-input-' + index)[0];
    }
  }
  highlight(criterion) {
    let label = criterion.label;
    const lcValue = this.internSearchCriteria.value ? this.internSearchCriteria.value.toLowerCase() : '';
    if (criterion.name === '' || !lcValue || lcValue.length === 0) {
      return label;
    }
    let lcLabel = label.toLowerCase();
    let idx;
    // eslint-disable-next-line no-cond-assign
    while ((idx = lcLabel.lastIndexOf(lcValue)) >= 0) {
      // eslint-disable-next-line max-len
      label = `${label.substring(0, idx)}<strong>${label.substring(idx, idx + lcValue.length)}</strong>${label.substring(idx + lcValue.length)}`;
      lcLabel = lcLabel.substring(0, idx);
    }
    return label;
  }
  inputFocused(event, index = FOCUS_INDEX_FREE_TEXT_INPUT_FIELD) {
    this.editCriterionIndex = index;
    this.previousEditingValue = event.target.value;
    this.focusState = true;
  }
  isOperatorSpecified(criterionName) {
    const criterionOptions = this.getCriterionByName(criterionName);
    return (criterionOptions?.operators?.length ?? 0) > 0;
  }
  /** selectValue is invoked by select boxes in strict value mode. If the user selects an entry, the criterion is deselected. */
  selectValue() {
    this.editCriterionByIndex(FOCUS_INDEX_FREE_TEXT_INPUT_FIELD);
  }
  typeaheadOnSelectCriterion(event) {
    const criterion = event;
    if (criterion.label === this.noMatchingCriteriaText) {
      return;
    } else if (!criterion.name || criterion.name.trim().length === 0) {
      this.internSearchCriteria.value = this.previousEditingValue;
      this.setSearchCriteriaValue(this.previousEditingValue);
      this.searchEmitQueue.next(this.convertToExternalModel(this.internSearchCriteria));
      return;
    }
    const editor = this.getValueInputForCriterion(this.editCriterionIndex);
    const endIndex = editor.selectionStart;
    const value = criterion.name;
    this.addCriterion({
      name: value,
      label: criterion.label,
      value: ''
    });
    if (!endIndex) {
      // selected from typeahead dropdown
      this.setSearchCriteriaValue('');
    } else {
      // not selected from typeahead dropdown
      this.setSearchCriteriaValue(value.substring(0, endIndex - value.length - 1) + value.substring(endIndex, value.length));
    }
  }
  typeaheadOnSelectValue(criterionName, index, match) {
    const existingCriteria = this.getCriterionByName(criterionName);
    if (!existingCriteria?.multiSelect) {
      this.handleInputSeparator(false);
    } else {
      const existingSearchCriteria = this.internSearchCriteria.criteria[index];
      if (existingSearchCriteria) {
        if (match.itemSelected) {
          if (Array.isArray(existingSearchCriteria.value)) {
            existingSearchCriteria.value.push(match.text);
          } else {
            existingSearchCriteria.value = [match.text];
          }
        } else {
          if (typeof existingSearchCriteria.value !== 'string') {
            existingSearchCriteria.value = existingSearchCriteria.value?.filter(elem => elem !== match.text);
          }
        }
      }
      // Since in case of multiselect the model will not change, we need to expicitly call the output event
      if (this.doSearchOnInputChange) {
        this.searchEmitQueue.next(this.convertToExternalModel(this.internSearchCriteria));
      }
    }
  }
  typeaheadOnSelectOperator() {
    // When an operator is selected from typeahead using the keyboard enter, it selects the operator and edits
    // the value input field. The action is so fast that the user keyup event is later called for the value
    // input which then exists the current criterion To delay this focus, below timeout is provided.
    this.editCriterionByIndex(this.editCriterionIndex, false, 200);
  }
  validateCriterionValue(criterion) {
    const originalCriterion = this.getCriterionByName(criterion.name);
    const validMinMax = this.validateDateMinMaxCriteria(criterion);
    if (!originalCriterion || !this.strictValue && !originalCriterion.strictValue && !originalCriterion.onlySelectValue) {
      return validMinMax;
    }
    const values = this.getOptionsForCriterion(criterion.name, null);
    return values && criterion.value ? validMinMax && this.matchesValues(values, criterion) : !values && !!criterion.value;
  }
  matchesValues(values, criterion) {
    return Array.isArray(criterion.value) ? criterion.value.every(val => values.some(v => v.label ? v.label === val : v.value === val)) : values.some(v => v.label ? v.label === criterion.value : v.value === criterion.value);
  }
  validateCriterionLabel(criterion) {
    if (!this.strictCriterion) {
      return true;
    }
    return !!this.getCriterionByName(criterion.name);
  }
  trimCharBasedOnType(criterionName) {
    let trimLastCharacter = true;
    const existingCriteria = this.getCriterionByName(criterionName);
    if (existingCriteria && (existingCriteria.validationType === 'float' || existingCriteria.validationType === 'integer')) {
      trimLastCharacter = false;
    }
    return trimLastCharacter;
  }
  operatorKeyUp(event) {
    const newValue = event.target.value;
    if (event.key === SiFilteredSearchComponent.keys.backspace) {
      this.handleInputBackspace(true);
    } else if (event.key === SiFilteredSearchComponent.keys.enter) {
      this.editCriterionByIndex(this.editCriterionIndex);
    }
    this.previousEditingValue = newValue;
  }
  inputFocusOut(event, criterionName, index) {
    const newValue = event.target.value;
    const criterionOptions = this.getCriterionByName(criterionName);
    if (criterionOptions?.operators && !criterionOptions.operators.includes(newValue)) {
      const existingSearchCriteria = this.internSearchCriteria.criteria[index];
      if (existingSearchCriteria) {
        existingSearchCriteria.operator = criterionOptions.operators.includes('=') ? '=' : criterionOptions.operators[0];
      }
    }
  }
  /**
   * It gets the array of OptionType for the criteria passed
   * @param name
   */
  getOptionsFromCriteria(name) {
    return this.getCriterionByName(name)?.options ?? [];
  }
  /**
   * Converts the internally used data model to the external model.
   * In case options for Criterion is Option[] map to the value from the label.
   * @param searchCriteria searchCriteria to be converted.
   */
  convertToExternalModel(searchCriteria) {
    const correctedCriteria = {
      ...searchCriteria,
      criteria: searchCriteria.criteria.map(sc => {
        if (this.isDate(sc.name)) {
          return {
            ...sc,
            value: sc.dateValue ? this.getISODateString(sc.dateValue) : ''
          };
        } else if (this.isDateTime(sc.name)) {
          if (sc.datepickerConfig?.disabledTime) {
            return {
              ...sc,
              value: sc.dateValue ? this.getISODateString(sc.dateValue) : ''
            };
          } else {
            return {
              ...sc,
              value: sc.dateValue ? sc.dateValue.toISOString() : ''
            };
          }
        } else {
          return {
            ...sc,
            value: this.getValue(sc)
          };
        }
      })
    };
    if (this.disableFreeTextSearch) {
      correctedCriteria.value = '';
    }
    return correctedCriteria;
  }
  getValue(sc) {
    const val = ToLabelPipe.getValue(this.getOptionsFromCriteria(sc.name), sc.value ?? '');
    return val ? this.getValueBasedOnType(val, sc.value) : sc.value;
  }
  getValueBasedOnType(val, searchCritVal) {
    if (Array.isArray(searchCritVal) && Array.isArray(val)) {
      // this is the case for multi-select
      return val.map((value, index) => value ?? searchCritVal[index]);
    }
    return val;
  }
  getISODateString(date) {
    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;
  }
  addCriterion(criterion) {
    if (!criterion.label || criterion.label.trim().length === 0) {
      criterion.label = criterion.name;
    }
    this.internSearchCriteria.criteria.push(criterion);
    // on initialization we do not want to set any criterion to editing
    const criterionOptions = this.getCriterionByName(criterion.name);
    if ((criterionOptions?.operators?.length ?? 0) > 0) {
      // when a new criterion is selected from typeahead using the keyboard enter, it adds the editable operator
      // input field and focuses on the operator field. The action is so fast that the user keyup event is later
      // called for the edited operator which then shifts focus and edit the value field. to delay this focus,
      // below timeout is provided.
      this.editCriterionByIndex(this.internSearchCriteria.criteria.length - 1, true, 200);
    } else {
      this.editCriterionByIndex(this.internSearchCriteria.criteria.length - 1);
    }
    if (this.doSearchOnInputChange) {
      this.searchEmitQueue.next(this.convertToExternalModel(this.internSearchCriteria));
    }
  }
  editCriterionByIndex(index, editOperator = false, timeout = 0) {
    this.editCriterionIndex = index;
    setTimeout(() => {
      const editor = this.getValueInputForCriterion(index, editOperator);
      if (editor) {
        editor.focus();
      }
      this.cdRef.markForCheck();
    }, timeout);
  }
  getCriterionByName(criterionName) {
    if (!this.criteria) {
      return undefined;
    }
    // TODO: This does not work for lazy load criteria
    return findByName(this.internCriteria, criterionName);
  }
  hasMultiSelections(criterionName, criterionValue) {
    return this.isMultiSelect(criterionName) && Array.isArray(criterionValue) && criterionValue.length > 1;
  }
  getFilteredTypeaheadCriteria(token) {
    if (this.maxCriteria === undefined || this.internSearchCriteria.criteria.length < this.maxCriteria) {
      if (!token || token.length === 0) {
        // TODO: Which use-case is covered here???
        if (!this.exclusiveCriteria || !this.internCriteria) {
          return this.internCriteria;
        } else {
          return differenceByName(this.internCriteria, this.internSearchCriteria.criteria);
        }
      }
      token = token.toLowerCase();
      const allowedCriterias = !this.exclusiveCriteria ? this.internCriteria : differenceByName(this.internCriteria, this.internSearchCriteria.criteria);
      return filterByLabel(allowedCriterias, token);
    } else {
      return [];
    }
  }
  getOptionsForCriterion(criterionName, emptyResult) {
    const criterion = this.getCriterionByName(criterionName);
    if (!criterion) {
      return emptyResult;
    }
    if (criterion.options && criterion.options.length > 0) {
      // return criterion options if not empty
      return toOptionCriteria(criterion.options);
    } else {
      if (this.lazyValueProvider) {
        const request = {
          criterionName,
          typed: ''
        };
        this.debouncedValueSubject.next(request);
      }
      return emptyResult;
    }
  }
  /**
   * It gets the array of operators for the criteria passed
   * @param name
   */
  getOperatorOptionsFromCriteria(name) {
    return this.getCriterionByName(name)?.operators ?? [];
  }
  handleInputBackspace(actionFromOperator = false) {
    // True if the backspace is pressed in operator input field.
    if (actionFromOperator) {
      const editor = this.getValueInputForCriterion(this.editCriterionIndex, true);
      this.deleteCrtiterionAndEditLastCriterion(editor);
    } else if (this.editCriterionIndex === FOCUS_INDEX_FREE_TEXT_INPUT_FIELD) {
      if (this.internSearchCriteria.value.length === 0 && this.previousEditingValue.length === 0) {
        // edit last criterion if user presses backspace in empty search input
        this.editCriterionByIndex(this.internSearchCriteria.criteria.length - 1);
      }
    } else {
      // The condition executes when user enters backspace in the value input field
      const editor = this.getValueInputForCriterion(this.editCriterionIndex);
      const operatorEditor = this.getValueInputForCriterion(this.editCriterionIndex, true);
      // Check if operator is specified for the criteria. If yes edit the operator when value field is empty.
      if (operatorEditor && editor && editor.value.length === 0 && this.previousEditingValue.length === 0) {
        this.editCriterionByIndex(this.editCriterionIndex, true);
      } else {
        this.deleteCrtiterionAndEditLastCriterion(editor);
      }
    }
    if (this.internSearchCriteria.value.length === 0 && this.lazyCriterionProvider) {
      this.criteria = [];
    }
    if (this.doSearchOnInputChange && this.previousEditingValue.length > 0) {
      this.searchEmitQueue.next(this.convertToExternalModel(this.internSearchCriteria));
    }
  }
  deleteCrtiterionAndEditLastCriterion(editor) {
    if (editor && editor.value.length === 0 && this.previousEditingValue.length === 0) {
      this.deleteCriterion(null, this.editCriterionIndex);
      if (this.editCriterionIndex >= 0) {
        this.editCriterionByIndex(this.editCriterionIndex - 1);
      }
    }
  }
  handleInputColon() {
    if (this.editCriterionIndex !== FOCUS_INDEX_FREE_TEXT_INPUT_FIELD) {
      return;
    }
    const editor = this.getValueInputForCriterion(this.editCriterionIndex);
    if (!editor || editor.value.length <= 1) {
      return;
    }
    let match;
    const endIndex = editor.selectionStart;
    const value = editor.value;
    const re = new RegExp(SiFilteredSearchComponent.criterionRegex, 'g');
    // eslint-disable-next-line no-cond-assign
    while ((match = re.exec(value)) != null) {
      if (endIndex === re.lastIndex) {
        const criterionName = value.substring(match.index, re.lastIndex - 1);
        this.addCriterion({
          name: criterionName,
          label: criterionName,
          value: ''
        });
        this.setSearchCriteriaValue(value.substring(0, match.index - 1) + value.substring(re.lastIndex, value.length));
      }
    }
  }
  handleInputSeparator(trimLastCharacter) {
    const editedCriterion = this.internSearchCriteria.criteria[this.editCriterionIndex];
    if (!editedCriterion) {
      return;
    }
    if (trimLastCharacter) {
      editedCriterion.value = editedCriterion.value?.toString().substring(0, editedCriterion.value.length - 1) ?? '';
    }
    if (editedCriterion.value) {
      this.editCriterionByIndex(FOCUS_INDEX_FREE_TEXT_INPUT_FIELD);
    }
  }
  setupCriteriaFetchQueue() {
    this.debouncedCriterionQueueSubject.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_41__.debounceTime)(this.lazyLoadingDebounceTime)).subscribe(observer => {
      let subscription;
      if (this.lazyCriterionProvider) {
        subscription = this.getCriteriaDisplaySubscription(this.lastTypeaheadInput, observer);
      }
      this.typeaheadInputChange.subscribe(() => {
        if (this.lazyCriterionProvider) {
          subscription?.unsubscribe();
          subscription = this.getCriteriaDisplaySubscription(this.lastTypeaheadInput, observer);
        }
      });
    });
    this.debouncedValueSubject.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_41__.debounceTime)(this.lazyLoadingDebounceTime)).subscribe(request => {
      if (this.lazyValueProvider) {
        this.lazyValueProvider(request.criterionName, request.typed).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.takeUntil)(this.destroySubscriptions)).subscribe(result => {
          this.lazyLoadedValue.next(result);
        });
      }
    });
  }
  getCriteriaDisplaySubscription(value, observer) {
    return this.lazyCriterionProvider ? this.lazyCriterionProvider(value).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.takeUntil)(this.destroySubscriptions)).subscribe(result => {
      observer.next(this.getCriteriaToDisplayFromSubscription(result));
    }) : undefined;
  }
  getCriteriaToDisplayFromSubscription(result) {
    this.criteria = result;
    let displayCriteria = [];
    if (this.maxCriteria === undefined || this.internSearchCriteria.criteria.length < this.maxCriteria) {
      displayCriteria = !this.exclusiveCriteria ? result : differenceByName(result, this.internSearchCriteria.criteria);
    }
    const topItems = this.disableFreeTextSearch && this.internSearchCriteria.value.length > 0 && displayCriteria.length === 0 || !this.doSearchOnInputChange ? [{
      name: '',
      label: this.disableFreeTextSearch && this.internSearchCriteria.value.length > 0 && displayCriteria.length === 0 ? this.noMatchingCriteriaText : this.submitText
    }] : [];
    return [...topItems, ...displayCriteria];
  }
  getInputType(criterionName) {
    const existingCriteria = this.getCriterionByName(criterionName);
    if (existingCriteria && (existingCriteria.validationType === 'integer' || existingCriteria.validationType === 'float')) {
      return 'number';
    }
    return 'text';
  }
  isDateOrDateTime(criterionName) {
    const existingCriteria = this.getCriterionByName(criterionName);
    return existingCriteria?.validationType === 'date-time' || existingCriteria?.validationType === 'date';
  }
  isDate(criterionName) {
    const existingCriteria = this.getCriterionByName(criterionName);
    return existingCriteria?.validationType === 'date';
  }
  isDateTime(criterionName) {
    const existingCriteria = this.getCriterionByName(criterionName);
    return existingCriteria?.validationType === 'date-time';
  }
  getDateTimeFormat(searchCriterion) {
    const existingCriteria = this.getCriterionByName(searchCriterion.name);
    // The information if the time is currently disabled is only present in the
    // current search criterion instance and not in the generic configuration.
    // So we need to merge the initial config with the current instance config.
    const config = {
      ...existingCriteria?.datepickerConfig,
      ...searchCriterion.datepickerConfig
    };
    return getDatepickerFormat(this.locale, config);
  }
  disableTime(criterion, disabledTime) {
    const dateConfig = criterion.datepickerConfig ? criterion.datepickerConfig : {};
    dateConfig.disabledTime = disabledTime;
    criterion.datepickerConfig = dateConfig;
    if (this.doSearchOnInputChange) {
      this.searchEmitQueue.next(this.convertToExternalModel(this.internSearchCriteria));
    }
  }
  getDatepickerConfig(searchCriterion) {
    const existingCriteria = this.getCriterionByName(searchCriterion.name);
    // a clone of the general criterion configuration
    const config = {
      ...existingCriteria?.datepickerConfig
    };
    // the current value could have an updated version, so we update
    if (searchCriterion.datepickerConfig?.disabledTime) {
      config.disabledTime = searchCriterion.datepickerConfig?.disabledTime;
    }
    return config;
  }
  isMultiSelect(criterionName) {
    const existingCriteria = this.getCriterionByName(criterionName);
    return !!existingCriteria?.multiSelect;
  }
  getStepAttribute(criterionName) {
    const existingCriteria = this.getCriterionByName(criterionName);
    if (existingCriteria && existingCriteria.validationType === 'integer') {
      return '1';
    }
    return 'any';
  }
  filterKeyInputEvents(event, criterionName) {
    const existingCriteria = this.getCriterionByName(criterionName);
    if (existingCriteria && existingCriteria.validationType === 'integer' && this.integerInvalidChar.includes(event.key)) {
      event.preventDefault();
    }
  }
  onValueInputKeyEvent(event, criterionName) {
    const newValue = event.target.value;
    if (event.key === SiFilteredSearchComponent.keys.backspace) {
      this.handleInputBackspace();
    } else if (event.key === SiFilteredSearchComponent.keys.separator && !this.isMultiSelect(criterionName)) {
      const trimLastCharacter = this.trimCharBasedOnType(criterionName);
      this.handleInputSeparator(trimLastCharacter);
    } else if (event.key === SiFilteredSearchComponent.keys.enter && !this.isMultiSelect(criterionName)) {
      this.handleInputSeparator(false);
    }
    this.previousEditingValue = newValue;
  }
  onValueInputClosed() {
    if (this.clearInputButton?.nativeElement === document.activeElement) {
      return;
    }
    // editCriterionIndex = -1 represents that the free text input is currently edited
    // all other numbers will represent the filtered pill, so we use -2 here.
    // Only apply when the focus does not shift on free text (i.e. "-1")
    if (this.editCriterionIndex !== FOCUS_INDEX_FREE_TEXT_INPUT_FIELD) {
      this.editCriterionIndex = FOCUS_INDEX_OUT_OF_COMPONENT;
    }
  }
  onDateTimeKeyDown(event) {
    if (event.key === SiFilteredSearchComponent.keys.tab) {
      setTimeout(() => {
        this.onValueInputClosed();
        this.cdRef.markForCheck();
      });
    }
  }
  onDateTimeKeyEvent(event) {
    const newValue = event.target.value;
    if (event.key === SiFilteredSearchComponent.keys.backspace) {
      this.handleInputBackspace();
    } else if (event.key === SiFilteredSearchComponent.keys.enter) {
      this.handleInputSeparator(false);
    }
    this.previousEditingValue = newValue;
  }
  onDatePickerClose() {
    if (!this.elementRef.nativeElement.contains(document.activeElement)) {
      this.editCriterionIndex = FOCUS_INDEX_OUT_OF_COMPONENT;
    }
  }
  selectDate(searchCriterion, date) {
    // In case the user type an illegal date into the date input,
    // our directive emits a new undefined value and keeps
    if (!date && searchCriterion.dateValue) {
      date = new Date(searchCriterion.dateValue);
    }
    searchCriterion.dateValue = date;
    if (this.doSearchOnInputChange) {
      this.searchEmitQueue.next(this.convertToExternalModel(this.internSearchCriteria));
    }
  }
  validateDateMinMaxCriteria(criterion) {
    const dateConfig = this.getDatepickerConfig(criterion);
    const minDate = dateConfig?.minDate ?? false;
    const maxDate = dateConfig?.maxDate ?? false;
    const dateValue = criterion?.dateValue ?? false;
    return (!minDate || minDate && dateValue && dateValue >= minDate) && (!maxDate || maxDate && dateValue && dateValue <= maxDate);
  }
  focusFreeInputField() {
    this.editCriterionByIndex(FOCUS_INDEX_FREE_TEXT_INPUT_FIELD);
  }
  editFreeInputField() {
    this.editCriterionIndex = FOCUS_INDEX_FREE_TEXT_INPUT_FIELD;
  }
  modelChanged(event, index = FOCUS_INDEX_FREE_TEXT_INPUT_FIELD, criterionName) {
    if (criterionName && !this.isMultiSelect(criterionName)) {
      const existingSearchCriteria = this.internSearchCriteria.criteria[index];
      existingSearchCriteria.value = event;
    }
    // Also make sure event is not empty to prevent extra emissions. For example
    // when the user presses "Enter" or clicks to manually trigger the search
    if (this.doSearchOnInputChange && event) {
      this.searchEmitQueue.next(this.convertToExternalModel(this.internSearchCriteria));
    }
  }
  onTypeaheadInputChange(event) {
    this.typeaheadInputChange.next(event);
    this.lastTypeaheadInput = event;
  }
  clearValueInput(index, criterion) {
    if (this.isDateOrDateTime(criterion.name)) {
      criterion.dateValue = undefined;
      criterion.value = '';
    } else {
      if (this.isMultiSelect(criterion.name)) {
        this.valueInput.nativeElement.value = '';
      } else {
        criterion.value = '';
      }
    }
    this.editCriterionByIndex(index);
  }
}
SiFilteredSearchComponent.criterionRegex = '(\\S+:)';
// See  https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code
SiFilteredSearchComponent.keys = {
  backspace: 'Backspace',
  colon: ':',
  enter: 'Enter',
  semicolon: ';',
  separator: ';',
  tab: 'Tab'
};
SiFilteredSearchComponent.ɵfac = function SiFilteredSearchComponent_Factory(t) {
  return new (t || SiFilteredSearchComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiFilteredSearchComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiFilteredSearchComponent,
  selectors: [["si-filtered-search"]],
  viewQuery: function SiFilteredSearchComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c49, 5, _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c50, 5, _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.clearInputButton = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.valueInput = _t.first);
    }
  },
  inputs: {
    doSearchOnInputChange: "doSearchOnInputChange",
    lazyCriterionProvider: "lazyCriterionProvider",
    lazyValueProvider: "lazyValueProvider",
    disabled: "disabled",
    readonly: "readonly",
    strictCriterion: "strictCriterion",
    strictValue: "strictValue",
    onlySelectValue: "onlySelectValue",
    lazyLoadingDebounceTime: "lazyLoadingDebounceTime",
    searchDebounceTime: "searchDebounceTime",
    placeholder: "placeholder",
    showIcon: "showIcon",
    submitText: "submitText",
    selectedCriteriaIndex: "selectedCriteriaIndex",
    optionsInScrollableView: "optionsInScrollableView",
    searchCriteria: "searchCriteria",
    criteria: "criteria",
    exclusiveCriteria: "exclusiveCriteria",
    maxCriteria: "maxCriteria",
    maxCriteriaOptions: "maxCriteriaOptions",
    searchLabel: "searchLabel",
    clearButtonLabel: "clearButtonLabel",
    itemCountText: "itemCountText",
    colorVariant: "colorVariant",
    items: "items",
    disableFreeTextSearch: "disableFreeTextSearch",
    noMatchingCriteriaText: "noMatchingCriteriaText"
  },
  outputs: {
    doSearch: "doSearch"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 8,
  vars: 28,
  consts: [["criterionItemTemplate", ""], [1, "filtered-search", "py-1", "ps-2", "pe-3"], ["class", "placeholder-icon icon element-search mx-0", 3, "empty", 4, "ngIf"], ["class", "criteria", 3, "disabled", "invalid-criterion", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["type", "text", "typeaheadOptionField", "name", 1, "value-input", "ps-2", "me-3", 3, "ngModel", "siTypeahead", "typeaheadProcess", "typeaheadClearValueOnSelect", "typeaheadMinLength", "typeaheadOptionsLimit", "typeaheadAutoSelectIndex", "typeaheadItemTemplate", "typeaheadScrollable", "typeaheadOptionsInScrollableView", "readonly", "disabled", "placeholder", "ngModelChange", "keyup", "paste", "click", "blur", "focus", "typeaheadOnInput", "typeaheadOnSelect"], ["type", "button", "class", "clear-button btn btn-circle btn-xs btn-ghost element-cancel", 3, "disabled", "click", 4, "ngIf"], [3, "innerHTML"], [1, "placeholder-icon", "icon", "element-search", "mx-0"], [1, "criteria"], [1, "criterion-label", "me-1", "si-title-2", 3, "click"], ["type", "text", 3, "class", "ngModel", "siTypeahead", "typeaheadProcess", "typeaheadAutoSelectIndex", "typeaheadMinLength", "typeaheadOptionsLimit", "readOnly", "typeaheadScrollable", "typeaheadOptionsInScrollableView", "ngModelChange", "keyup", "click", "focus", "focusout", "typeaheadOnSelect", 4, "ngIf"], ["class", "criterion-operator me-1 focus-inside", 3, "click", 4, "ngIf"], ["class", "criterion-value px-0 focus-inside", 3, "invalid-criterion", "keyup.enter", "click", 4, "ngIf"], ["typeaheadOptionField", "label", 3, "class", "me-n8", "pe-8", "type", "step", "ngModel", "siTypeahead", "typeaheadProcess", "typeaheadMultiSelect", "typeaheadMinLength", "typeaheadOptionsLimit", "readOnly", "typeaheadScrollable", "typeaheadOptionsInScrollableView", "keydown", "keyup", "focus", "blur", "ngModelChange", "typeaheadOnSelect", "typeaheadOnMultiselectClose", "typeaheadClosed", 4, "ngIf"], ["type", "text", "siDatepicker", "", 3, "class", "me-n8", "pe-8", "siDatepickerConfig", "ngModel", "keydown", "keyup", "focus", "blur", "siDatepickerClose", "ngModelChange", 4, "ngIf"], ["type", "text", "siDatepicker", "", 3, "class", "me-n8", "pe-8", "siDatepickerConfig", "ngModel", "keydown", "keyup", "focus", "blur", "siDatepickerClose", "siDatepickerDisabledTime", "ngModelChange", 4, "ngIf"], ["type", "button", "class", "clear-input btn btn-circle btn-xs btn-ghost element-cancel", 3, "click", 4, "ngIf"], ["type", "text", 3, "ngModel", "siTypeahead", "typeaheadProcess", "typeaheadAutoSelectIndex", "typeaheadMinLength", "typeaheadOptionsLimit", "readOnly", "typeaheadScrollable", "typeaheadOptionsInScrollableView", "ngModelChange", "keyup", "click", "focus", "focusout", "typeaheadOnSelect"], [1, "criterion-operator", "me-1", "focus-inside", 3, "click"], ["class", "criterion-operator-text focus-inside", 3, "tabindex", 4, "ngIf"], [1, "criterion-operator-text", "focus-inside", 3, "tabindex"], [1, "criterion-value", "px-0", "focus-inside", 3, "keyup.enter", "click"], [3, "ngTemplateOutlet"], ["dateTemplate", ""], ["dateTimeTemplate", ""], ["itemCount", ""], ["valueTemplate", ""], ["type", "button", "class", "criterion-value-button ps-0 ms-0 py-0 btn btn-circle btn-xs btn-ghost element-cancel focus-inside", 3, "disabled", "click", 4, "ngIf"], [1, "criterion-value-text", "focus-inside", 3, "tabindex"], [1, "criterion-value-text", "p-0"], [1, "d-block", "px-4", "focus-inside", 3, "tabindex"], ["class", "criterion-value-text p-0", 4, "ngIf"], [1, "ps-4", "pe-2", "d-block", "focus-inside", 3, "tabindex"], ["type", "button", 1, "criterion-value-button", "ps-0", "ms-0", "py-0", "btn", "btn-circle", "btn-xs", "btn-ghost", "element-cancel", "focus-inside", 3, "disabled", "click"], ["typeaheadOptionField", "label", 3, "type", "step", "ngModel", "siTypeahead", "typeaheadProcess", "typeaheadMultiSelect", "typeaheadMinLength", "typeaheadOptionsLimit", "readOnly", "typeaheadScrollable", "typeaheadOptionsInScrollableView", "keydown", "keyup", "focus", "blur", "ngModelChange", "typeaheadOnSelect", "typeaheadOnMultiselectClose", "typeaheadClosed"], ["valueInput", ""], ["type", "text", "siDatepicker", "", 3, "siDatepickerConfig", "ngModel", "keydown", "keyup", "focus", "blur", "siDatepickerClose", "ngModelChange"], ["type", "text", "siDatepicker", "", 3, "siDatepickerConfig", "ngModel", "keydown", "keyup", "focus", "blur", "siDatepickerClose", "siDatepickerDisabledTime", "ngModelChange"], ["type", "button", 1, "clear-input", "btn", "btn-circle", "btn-xs", "btn-ghost", "element-cancel", 3, "click"], ["clearInputButton", ""], ["type", "button", 1, "clear-button", "btn", "btn-circle", "btn-xs", "btn-ghost", "element-cancel", 3, "disabled", "click"]],
  template: function SiFilteredSearchComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiFilteredSearchComponent_ng_template_0_Template, 1, 1, "ng-template", null, 0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiFilteredSearchComponent_span_3_Template, 1, 2, "span", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiFilteredSearchComponent_div_4_Template, 10, 13, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "input", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function SiFilteredSearchComponent_Template_input_ngModelChange_5_listener($event) {
        return ctx.internSearchCriteria.value = $event;
      })("keyup", function SiFilteredSearchComponent_Template_input_keyup_5_listener($event) {
        return ctx.criterionInputKeyUp($event);
      })("paste", function SiFilteredSearchComponent_Template_input_paste_5_listener($event) {
        return ctx.handleContextMenuPaste($event);
      })("click", function SiFilteredSearchComponent_Template_input_click_5_listener() {
        return ctx.editFreeInputField();
      })("blur", function SiFilteredSearchComponent_Template_input_blur_5_listener() {
        ctx.editCriterionIndex = -2;
        return ctx.focusState = false;
      })("focus", function SiFilteredSearchComponent_Template_input_focus_5_listener($event) {
        return ctx.inputFocused($event);
      })("ngModelChange", function SiFilteredSearchComponent_Template_input_ngModelChange_5_listener($event) {
        return ctx.modelChanged($event);
      })("typeaheadOnInput", function SiFilteredSearchComponent_Template_input_typeaheadOnInput_5_listener($event) {
        return ctx.onTypeaheadInputChange($event);
      })("typeaheadOnSelect", function SiFilteredSearchComponent_Template_input_typeaheadOnSelect_5_listener($event) {
        return ctx.typeaheadOnSelectCriterion($event.option);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiFilteredSearchComponent_button_7_Template, 2, 4, "button", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      const _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dark-background", ctx.colorVariant === "base-0")("focus-within", ctx.editCriterionIndex === -1 && ctx.internSearchCriteria.criteria.length === 0)("disabled", ctx.disabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.showIcon);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.internSearchCriteria.criteria)("ngForTrackBy", ctx.trackByIndex);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("ms-1", ctx.internSearchCriteria.criteria.length);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", ctx.internSearchCriteria.value)("siTypeahead", ctx.dataSource)("typeaheadProcess", false)("typeaheadClearValueOnSelect", true)("typeaheadMinLength", ctx.readonly ? 1 : 0)("typeaheadOptionsLimit", ctx.maxCriteriaOptions)("typeaheadAutoSelectIndex", ctx.selectedCriteriaIndex)("typeaheadItemTemplate", _r0)("typeaheadScrollable", true)("typeaheadOptionsInScrollableView", ctx.optionsInScrollableView)("readonly", ctx.readonly)("disabled", ctx.disabled)("placeholder", ctx.placeholder);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 26, ctx.searchLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", (ctx.internSearchCriteria.criteria.length || ctx.internSearchCriteria.value.length) && !ctx.readonly);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgModel, SiDatepickerDirective, SiTypeaheadDirective, _angular_common__WEBPACK_IMPORTED_MODULE_1__.DatePipe, SiTranslatePipe, ToLabelPipe],
  styles: ["[_nghost-%COMP%]{--search-bar-icon-color: var(--element-text-primary);--input-background-color: var(--element-base-1);--input-background-hover-color: var(--element-base-1);--filter-search-background-color: var(--element-base-1);--filter-pill-background-color: var(--element-base-0)}.dark-background[_ngcontent-%COMP%]{--input-background-color: var(--element-base-0);--input-background-hover-color: var(--element-ui-4);--filter-search-background-color: var(--element-base-0);--filter-pill-background-color: var(--element-base-1)}.filtered-search[_ngcontent-%COMP%]{border-radius:4px;display:flex;flex-direction:row;line-height:24px;background-color:var(--filter-search-background-color);overflow-x:auto;overflow-y:hidden;min-block-size:32px;align-items:center}.filtered-search[_ngcontent-%COMP%]:hover:not(.disabled)   .placeholder-icon[_ngcontent-%COMP%], .filtered-search[_ngcontent-%COMP%]:hover:not(.disabled)   input[_ngcontent-%COMP%]:not(:focus)::placeholder{color:var(--element-text-primary)}.filtered-search.focus-within[_ngcontent-%COMP%]:not(.disabled):focus-within{box-shadow:0 0 0 2px var(--element-focus-default)}.filtered-search.focus-within[_ngcontent-%COMP%]:not(.disabled):focus-within   .value-input[_ngcontent-%COMP%]{box-shadow:none;border:0}.filtered-search.focus-within[_ngcontent-%COMP%]:not(.disabled):focus-within   .placeholder-icon[_ngcontent-%COMP%]{color:var(--element-text-primary)}.filtered-search[_ngcontent-%COMP%]   .placeholder-icon.empty[_ngcontent-%COMP%]{color:var(--element-text-secondary)}.filtered-search[_ngcontent-%COMP%]   .criterion-value[_ngcontent-%COMP%]:not(input)   .criterion-value-text[_ngcontent-%COMP%]{padding-block:0;padding-inline:8px;margin-inline-end:2px}.filtered-search[_ngcontent-%COMP%]:not(.disabled)   .criterion-label[_ngcontent-%COMP%]:hover, .filtered-search[_ngcontent-%COMP%]:not(.disabled)   .criterion-value-text[_ngcontent-%COMP%]:hover, .filtered-search[_ngcontent-%COMP%]:not(.disabled)   [_ngcontent-%COMP%]:not(.invalid-criterion)   .element-cancel[_ngcontent-%COMP%]:hover, .filtered-search[_ngcontent-%COMP%]:not(.disabled)   .criterion-operator[_ngcontent-%COMP%]:hover{background:var(--element-action-secondary-hover)}.filtered-search[_ngcontent-%COMP%]   .criterion-label[_ngcontent-%COMP%]{border-start-start-radius:24px;border-end-start-radius:24px}.filtered-search.disabled[_ngcontent-%COMP%]{color:var(--element-text-disabled)}.filtered-search.disabled[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .filtered-search.disabled[_ngcontent-%COMP%]   button[_ngcontent-%COMP%], .filtered-search.disabled[_ngcontent-%COMP%]   .badge[_ngcontent-%COMP%], .filtered-search.disabled[_ngcontent-%COMP%]   .placeholder-icon[_ngcontent-%COMP%], .filtered-search.disabled[_ngcontent-%COMP%]   [_ngcontent-%COMP%]::placeholder{color:var(--element-text-disabled)}.filtered-search.disabled[_ngcontent-%COMP%]   .element-cancel.criterion-value-button[_ngcontent-%COMP%]{display:none}.criteria[_ngcontent-%COMP%]{display:flex;cursor:pointer;white-space:nowrap;margin-block:2px;margin-inline:4px;border-radius:24px}.criteria.invalid-criterion[_ngcontent-%COMP%]{box-shadow:0 0 0 1px var(--element-status-danger)}.criteria[_ngcontent-%COMP%]:not(.invalid-criterion)   .invalid-criterion[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{box-shadow:inset 0 0 0 1px var(--element-status-danger);padding:1px!important}.criteria[_ngcontent-%COMP%]:not(.invalid-criterion)   .invalid-criterion[_ngcontent-%COMP%] > span[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{block-size:22px;line-height:22px}.criteria.disabled[_ngcontent-%COMP%]{cursor:inherit}.criterion-label[_ngcontent-%COMP%], .criterion-value[_ngcontent-%COMP%]{background:var(--filter-pill-background-color);display:inline-flex;align-items:center;padding:0 8px;padding-inline-start:12px}.criterion-value[_ngcontent-%COMP%]{border:0;border-start-start-radius:0;border-end-start-radius:0;border-start-end-radius:24px;border-end-end-radius:24px;outline:none}.criterion-value.datepicker[_ngcontent-%COMP%]{inline-size:auto}.criterion-operator[_ngcontent-%COMP%]{display:inline-flex;align-items:center}.criterion-operator[_ngcontent-%COMP%]   .criterion-operator-text[_ngcontent-%COMP%]{min-inline-size:20px;text-align:center;padding-inline:4px}.criterion-value[_ngcontent-%COMP%], .operator-input[_ngcontent-%COMP%], .criterion-operator[_ngcontent-%COMP%]{background:var(--filter-pill-background-color)}.criterion-value-button[_ngcontent-%COMP%]{background-color:transparent;font-size:1.5rem;border:0}.criterion-value-text[_ngcontent-%COMP%] + .criterion-value-button[_ngcontent-%COMP%]{margin-inline-start:0}.value-input[_ngcontent-%COMP%]{border:0;flex-grow:1;line-height:24px;background-color:var(--input-background-color);margin:0;outline:none}.operator-input[_ngcontent-%COMP%]{display:inline-flex;align-items:center;margin-inline-end:4px;padding-inline-start:12px;padding-block:0;border:0;outline:none}input[_ngcontent-%COMP%]::placeholder{color:var(--element-text-secondary);padding-inline:0;margin-block:0;margin-inline:4px}input[_ngcontent-%COMP%]:focus::placeholder, .criteria[_ngcontent-%COMP%] + input[_ngcontent-%COMP%]::placeholder{color:transparent!important}.clear-button[_ngcontent-%COMP%]{margin-inline-end:-2px;margin-block:-2px}input[type=number][_ngcontent-%COMP%]::-webkit-inner-spin-button, input[type=number][_ngcontent-%COMP%]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}input[type=number][_ngcontent-%COMP%]{-moz-appearance:textfield}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiFilteredSearchComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-filtered-search',
      template: "<ng-template #criterionItemTemplate let-model=\"item\">\n  <span [innerHTML]=\"highlight(model)\"></span>\n</ng-template>\n<div\n  class=\"filtered-search py-1 ps-2 pe-3\"\n  [class.dark-background]=\"colorVariant === 'base-0'\"\n  [class.focus-within]=\"editCriterionIndex === -1 && internSearchCriteria.criteria.length === 0\"\n  [class.disabled]=\"disabled\"\n>\n  <!-- placeholder icon-->\n  <span *ngIf=\"showIcon\"\n    [class.empty]=\"!internSearchCriteria.criteria.length && !internSearchCriteria.value\"\n    class=\"placeholder-icon icon element-search mx-0\">\n  </span>\n\n  <div\n    *ngFor=\"let criterion of internSearchCriteria.criteria; let i = index; trackBy: trackByIndex\"\n    class=\"criteria\"\n    [class.disabled]=\"disabled\"\n    [attr.aria-disabled]=\"disabled\"\n    [class.invalid-criterion]=\"!validateCriterionLabel(criterion)\"\n    >\n    <div class=\"criterion-label me-1 si-title-2\" (click)=\"editCriterion(criterion)\">\n      {{ criterion.label }}\n    </div>\n    <!-- criterion operator input -->\n    <input\n      *ngIf=\"isOperatorSpecified(criterion.name) && editCriterionIndex === i\"\n      type=\"text\"\n      class=\"operator-input-{{ i }} operator-input\"\n      [(ngModel)]=\"criterion.operator\"\n      (keyup)=\"operatorKeyUp($event)\"\n      (click)=\"editOperator(criterion, $event)\"\n      (focus)=\"inputFocused($event, i)\"\n      (focusout)=\"inputFocusOut($event, criterion.name, i)\"\n      (ngModelChange)=\"modelChanged($event, i)\"\n      [siTypeahead]=\"getCriterionOperators(criterion.name, criterion.operator)\"\n      [typeaheadProcess]=\"false\"\n      (typeaheadOnSelect)=\"typeaheadOnSelectOperator()\"\n      [typeaheadAutoSelectIndex]=\"getSelectedOperatorIndex(criterion.name, criterion.operator)\"\n      [typeaheadMinLength]=\"0\"\n      [typeaheadOptionsLimit]=\"0\"\n      [readOnly]=\"false\"\n      [typeaheadScrollable]=\"true\"\n      [typeaheadOptionsInScrollableView]=\"optionsInScrollableView\"\n      [attr.aria-label]=\"searchLabel | translate\"\n      [attr.size]=\"getLongestOperatorLength(criterion.name)\"\n      />\n    <!-- criterion operator field -->\n    <div\n      *ngIf=\"criterion.operator && editCriterionIndex !== i\"\n      class=\"criterion-operator me-1 focus-inside\"\n      (click)=\"editOperator(criterion, $event)\"\n      >\n      <span\n        *ngIf=\"!!criterion.operator\"\n        class=\"criterion-operator-text focus-inside\"\n        [tabindex]=\"!disabled ? 0 : -1\"\n        >\n        {{ criterion.operator }}\n      </span>\n    </div>\n    <!-- criterion value field -->\n    <div\n      *ngIf=\"editCriterionIndex !== i\"\n      class=\"criterion-value px-0 focus-inside\"\n      [class.invalid-criterion]=\"!validateCriterionLabel(criterion) || !validateCriterionValue(criterion)\"\n      (keyup.enter)=\"editValue(criterion, $event)\"\n      (click)=\"editValue(criterion, $event)\"\n      >\n      <ng-container [ngTemplateOutlet]=\"!!criterion.dateValue && isDateTime(criterion.name) ? dateTimeTemplate :\n      !!criterion.dateValue && isDate(criterion.name) ? dateTemplate :\n      !!criterion.value && hasMultiSelections(criterion.name, criterion.value) ? itemCount : valueTemplate\"></ng-container>\n      <ng-template #dateTemplate>\n        <span\n          class=\"criterion-value-text focus-inside\"\n          [tabindex]=\"disabled ? -1 : 0\"\n          >\n          {{ criterion.dateValue | date: shortDateFormat }}\n        </span>\n      </ng-template>\n      <ng-template #dateTimeTemplate>\n        <span class=\"criterion-value-text p-0\">\n          <span class=\"d-block px-4 focus-inside\" [tabindex]=\"disabled ? -1 : 0\">\n            {{ criterion.dateValue | date: getDateTimeFormat(criterion) }}\n          </span>\n        </span>\n      </ng-template>\n      <ng-template #itemCount>\n        <span\n          *ngIf=\"!!criterion.value && itemCountText\"\n          class=\"criterion-value-text p-0\"\n          >\n          <span class=\"d-block px-4 focus-inside\" [tabindex]=\"disabled ? -1 : 0\">\n            {{ itemCountText | translate:{ itemCount: criterion.value.length } }}\n          </span>\n        </span>\n        <span\n          *ngIf=\"!!criterion.value && !itemCountText\"\n          class=\"criterion-value-text p-0\"\n          >\n          <span class=\"ps-4 pe-2 d-block focus-inside\" [tabindex]=\"disabled ? -1 : 0\">\n            {{ criterion.value.length }} {{ items | translate }}\n          </span>\n        </span>\n      </ng-template>\n      <ng-template #valueTemplate>\n        <span class=\"criterion-value-text p-0\">\n          <span class=\"d-block px-4 focus-inside\" [tabindex]=\"disabled ? -1 : 0\">\n            {{ criterion.value! | toLabel: getOptionsFromCriteria(criterion.name) }}\n          </span>\n        </span>\n      </ng-template>\n      <button\n        *ngIf=\"!readonly\"\n        type=\"button\"\n        class=\"criterion-value-button ps-0 ms-0 py-0 btn btn-circle btn-xs btn-ghost element-cancel focus-inside\"\n        [attr.aria-label]=\"clearButtonLabel | translate\"\n        (click)=\"deleteCriterion($event, i)\"\n        [disabled]=\"disabled\">\n      </button>\n    </div>\n    <!-- criterion value input -->\n    <input\n      *ngIf=\"editCriterionIndex === i && !isDateOrDateTime(criterion.name)\"\n      class=\"value-input-{{ i }} criterion-value pe-4\"\n      [class.me-n8]=\"criterion.value?.length\"\n      [class.pe-8]=\"criterion.value?.length\"\n      [type]=\"getInputType(criterion.name)\"\n      (keydown)=\"filterKeyInputEvents($event, criterion.name)\"\n      [step]=\"getStepAttribute(criterion.name)\"\n      [ngModel]=\"!isMultiSelect(criterion.name) ? criterion.value : ''\"\n      (keyup)=\"onValueInputKeyEvent($event, criterion.name)\"\n      (focus)=\"inputFocused($event, i)\"\n      (blur)=\"focusState = false;\"\n      (ngModelChange)=\"modelChanged($event, i, criterion.name)\"\n      [siTypeahead]=\"getCriterionOptions(criterion.name, i, isMultiSelect(criterion.name) ? '' : criterion.value)\"\n      [typeaheadProcess]=\"isMultiSelect(criterion.name)\"\n      (typeaheadOnSelect)=\"typeaheadOnSelectValue(criterion.name, i, $event)\"\n      (typeaheadOnMultiselectClose)=\"focusFreeInputField()\"\n      (typeaheadClosed)=\"onValueInputClosed()\"\n      [typeaheadMultiSelect]='isMultiSelect(criterion.name)'\n      [typeaheadMinLength]=\"0\"\n      typeaheadOptionField=\"label\"\n      [typeaheadOptionsLimit]=\"maxCriteriaOptions\"\n      [readOnly]=\"readonly || onlySelectValue || this.getCriterionOnlySelectValue(criterion.name)\"\n      [typeaheadScrollable]=\"true\"\n      [typeaheadOptionsInScrollableView]=\"optionsInScrollableView\"\n      [attr.aria-label]=\"searchLabel | translate\"\n      #valueInput\n      />\n\n    <input\n      *ngIf=\"editCriterionIndex === i && isDate(criterion.name)\"\n      type=\"text\"\n      class=\"value-input-{{ i }} criterion-value datepicker form-control\"\n      [class.me-n8]=\"criterion.dateValue\"\n      [class.pe-8]=\"criterion.dateValue\"\n      [attr.aria-label]=\"searchLabel | translate\"\n      (keydown)=\"onDateTimeKeyDown($event)\"\n      (keyup)=\"onDateTimeKeyEvent($event)\"\n      (focus)=\"inputFocused($event, i)\"\n      (blur)=\"focusState = false;\"\n      siDatepicker\n      [siDatepickerConfig]=\"getDatepickerConfig(criterion)\"\n      (siDatepickerClose)=\"onDatePickerClose()\"\n      [ngModel]=\"criterion.dateValue!\"\n      (ngModelChange)=\"selectDate(criterion, $event)\"\n      />\n    <input\n      *ngIf=\"editCriterionIndex === i && isDateTime(criterion.name)\"\n      type=\"text\"\n      class=\"value-input-{{ i }} criterion-value datepicker form-control\"\n      [class.me-n8]=\"criterion.dateValue\"\n      [class.pe-8]=\"criterion.dateValue\"\n      [attr.aria-label]=\"searchLabel | translate\"\n      (keydown)=\"onDateTimeKeyDown($event)\"\n      (keyup)=\"onDateTimeKeyEvent($event)\"\n      (focus)=\"inputFocused($event, i)\"\n      (blur)=\"focusState = false;\"\n      siDatepicker\n      [siDatepickerConfig]=\"getDatepickerConfig(criterion)\"\n      (siDatepickerClose)=\"onDatePickerClose()\"\n      (siDatepickerDisabledTime)=\"disableTime(criterion, $event)\"\n      [ngModel]=\"criterion.dateValue!\"\n      (ngModelChange)=\"selectDate(criterion, $event)\"\n      />\n      <button\n        *ngIf=\"editCriterionIndex === i && (criterion.value?.length || criterion.dateValue) && !readonly\"\n        type=\"button\"\n        class=\"clear-input btn btn-circle btn-xs btn-ghost element-cancel\"\n        [attr.aria-label]=\"clearButtonLabel | translate\"\n        (click)=\"clearValueInput(i, criterion)\"\n        #clearInputButton></button>\n  </div>\n  <!-- criterion input -->\n  <input\n    type=\"text\"\n    class=\"value-input ps-2 me-3\"\n    [class.ms-1]=\"internSearchCriteria.criteria.length\"\n    [(ngModel)]=\"internSearchCriteria.value\"\n    (keyup)=\"criterionInputKeyUp($event)\"\n    (paste)=\"handleContextMenuPaste($event)\"\n    (click)=\"editFreeInputField()\"\n    (blur)=\"editCriterionIndex = -2; focusState = false;\"\n    (focus)=\"inputFocused($event)\"\n    (ngModelChange)=\"modelChanged($event)\"\n    [siTypeahead]=\"dataSource\"\n    [typeaheadProcess]=\"false\"\n    (typeaheadOnInput)=\"onTypeaheadInputChange($event)\"\n    (typeaheadOnSelect)=\"typeaheadOnSelectCriterion($event.option)\"\n    [typeaheadClearValueOnSelect]=\"true\"\n    [typeaheadMinLength]=\"readonly ? 1 : 0\"\n    typeaheadOptionField=\"name\"\n    [typeaheadOptionsLimit]=\"maxCriteriaOptions\"\n    [typeaheadAutoSelectIndex]=\"selectedCriteriaIndex\"\n    [typeaheadItemTemplate]=\"criterionItemTemplate\"\n    [typeaheadScrollable]=\"true\"\n    [typeaheadOptionsInScrollableView]=\"optionsInScrollableView\"\n    [readonly]=\"readonly\"\n    [disabled]=\"disabled\"\n    [placeholder]=\"placeholder\"\n    [attr.aria-label]=\"searchLabel | translate\"\n    />\n\n  <!-- clear all searchCriteria -->\n  <button\n    *ngIf=\"(internSearchCriteria.criteria.length || internSearchCriteria.value.length) && !readonly\"\n    type=\"button\"\n    class=\"clear-button btn btn-circle btn-xs btn-ghost element-cancel\"\n    [disabled]=\"disabled\"\n    [attr.aria-label]=\"clearButtonLabel | translate\"\n    (click)=\"deleteAllCriteria($event)\"></button>\n</div>\n",
      styles: [":host{--search-bar-icon-color: var(--element-text-primary);--input-background-color: var(--element-base-1);--input-background-hover-color: var(--element-base-1);--filter-search-background-color: var(--element-base-1);--filter-pill-background-color: var(--element-base-0)}.dark-background{--input-background-color: var(--element-base-0);--input-background-hover-color: var(--element-ui-4);--filter-search-background-color: var(--element-base-0);--filter-pill-background-color: var(--element-base-1)}.filtered-search{border-radius:4px;display:flex;flex-direction:row;line-height:24px;background-color:var(--filter-search-background-color);overflow-x:auto;overflow-y:hidden;min-block-size:32px;align-items:center}.filtered-search:hover:not(.disabled) .placeholder-icon,.filtered-search:hover:not(.disabled) input:not(:focus)::placeholder{color:var(--element-text-primary)}.filtered-search.focus-within:not(.disabled):focus-within{box-shadow:0 0 0 2px var(--element-focus-default)}.filtered-search.focus-within:not(.disabled):focus-within .value-input{box-shadow:none;border:0}.filtered-search.focus-within:not(.disabled):focus-within .placeholder-icon{color:var(--element-text-primary)}.filtered-search .placeholder-icon.empty{color:var(--element-text-secondary)}.filtered-search .criterion-value:not(input) .criterion-value-text{padding-block:0;padding-inline:8px;margin-inline-end:2px}.filtered-search:not(.disabled) .criterion-label:hover,.filtered-search:not(.disabled) .criterion-value-text:hover,.filtered-search:not(.disabled) :not(.invalid-criterion) .element-cancel:hover,.filtered-search:not(.disabled) .criterion-operator:hover{background:var(--element-action-secondary-hover)}.filtered-search .criterion-label{border-start-start-radius:24px;border-end-start-radius:24px}.filtered-search.disabled{color:var(--element-text-disabled)}.filtered-search.disabled input,.filtered-search.disabled button,.filtered-search.disabled .badge,.filtered-search.disabled .placeholder-icon,.filtered-search.disabled ::placeholder{color:var(--element-text-disabled)}.filtered-search.disabled .element-cancel.criterion-value-button{display:none}.criteria{display:flex;cursor:pointer;white-space:nowrap;margin-block:2px;margin-inline:4px;border-radius:24px}.criteria.invalid-criterion{box-shadow:0 0 0 1px var(--element-status-danger)}.criteria:not(.invalid-criterion) .invalid-criterion>span{box-shadow:inset 0 0 0 1px var(--element-status-danger);padding:1px!important}.criteria:not(.invalid-criterion) .invalid-criterion>span>span{block-size:22px;line-height:22px}.criteria.disabled{cursor:inherit}.criterion-label,.criterion-value{background:var(--filter-pill-background-color);display:inline-flex;align-items:center;padding:0 8px;padding-inline-start:12px}.criterion-value{border:0;border-start-start-radius:0;border-end-start-radius:0;border-start-end-radius:24px;border-end-end-radius:24px;outline:none}.criterion-value.datepicker{inline-size:auto}.criterion-operator{display:inline-flex;align-items:center}.criterion-operator .criterion-operator-text{min-inline-size:20px;text-align:center;padding-inline:4px}.criterion-value,.operator-input,.criterion-operator{background:var(--filter-pill-background-color)}.criterion-value-button{background-color:transparent;font-size:1.5rem;border:0}.criterion-value-text+.criterion-value-button{margin-inline-start:0}.value-input{border:0;flex-grow:1;line-height:24px;background-color:var(--input-background-color);margin:0;outline:none}.operator-input{display:inline-flex;align-items:center;margin-inline-end:4px;padding-inline-start:12px;padding-block:0;border:0;outline:none}input::placeholder{color:var(--element-text-secondary);padding-inline:0;margin-block:0;margin-inline:4px}input:focus::placeholder,.criteria+input::placeholder{color:transparent!important}.clear-button{margin-inline-end:-2px;margin-block:-2px}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}input[type=number]{-moz-appearance:textfield}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
      }]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    doSearch: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    doSearchOnInputChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    lazyCriterionProvider: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    lazyValueProvider: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    strictCriterion: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    strictValue: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    onlySelectValue: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    lazyLoadingDebounceTime: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    searchDebounceTime: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    placeholder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    submitText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    selectedCriteriaIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    optionsInScrollableView: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    searchCriteria: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    criteria: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    exclusiveCriteria: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    maxCriteria: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    maxCriteriaOptions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    searchLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    clearButtonLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    itemCountText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    colorVariant: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    items: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disableFreeTextSearch: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    noMatchingCriteriaText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    clearInputButton: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['clearInputButton', {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
      }]
    }],
    valueInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['valueInput', {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
      }]
    }]
  });
})();
class SiTypeaheadModule {}
SiTypeaheadModule.ɵfac = function SiTypeaheadModule_Factory(t) {
  return new (t || SiTypeaheadModule)();
};
SiTypeaheadModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiTypeaheadModule
});
SiTypeaheadModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.OverlayModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTypeaheadModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.OverlayModule],
      declarations: [SiTypeaheadComponent, SiTypeaheadDirective],
      exports: [SiTypeaheadDirective]
    }]
  }], null, null);
})();
class SiFilteredSearchModule {}
SiFilteredSearchModule.ɵfac = function SiFilteredSearchModule_Factory(t) {
  return new (t || SiFilteredSearchModule)();
};
SiFilteredSearchModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiFilteredSearchModule
});
SiFilteredSearchModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule, SiDatepickerModule, SiTranslateModule, SiTypeaheadModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiFilteredSearchModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule, SiDatepickerModule, SiTranslateModule, SiTypeaheadModule],
      declarations: [SiFilteredSearchComponent, ToLabelPipe],
      exports: [SiFilteredSearchComponent]
    }]
  }], null, null);
})();
class SiFileDropzoneComponent {
  constructor(locale) {
    this.locale = locale;
    /**
     * Text or translation key of the input file selector (is combined with the `uploadTextRest`).
     */
    this.uploadTextFileSelect = 'click to upload';
    /**
     * Text or translation key of the drag&drop field (is combined with the `uploadTextFileSelect`).
     */
    this.uploadDropText = 'Drop files here or';
    /**
     * Text or translation key for max file size.
     */
    this.maxFileSizeText = 'Maximum upload size';
    /**
     * Text or translation key for accepted types.
     */
    this.acceptText = 'Accepted file types';
    /**
     * Text or translation key of message title if incorrect file type is dragged / dropped.
     */
    this.errorTextFileType = 'Incorrect file type selected';
    /**
     * Message or translation key if file exceeds the maximum file size limit.
     */
    this.errorTextFileMaxSize = 'File exceeds allowed maximum size';
    /**
     * Defines whether the file input allows selecting multiple files.
     */
    this.multiple = false;
    /**
     * Event emitted when files are added.
     */
    this.filesAdded = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.maxFileSizeString = '';
    this.dragOver = false;
    this.numberFormat = new Intl.NumberFormat(this.locale, {
      maximumFractionDigits: 2
    });
  }
  ngOnChanges(changes) {
    if (changes.maxFileSize) {
      this.maxFileSizeString = this.maxFileSize ? this.fileSizeToString(this.maxFileSize) : '';
    }
  }
  dropHandler(event) {
    event.preventDefault();
    this.handleFiles(event.dataTransfer.files);
    this.dragOver = false;
  }
  dragOverHandler(event) {
    event.preventDefault();
    event.stopPropagation();
    this.dragOver = true;
  }
  inputEnterHandler() {
    this.fileInput?.nativeElement.click();
  }
  inputHandler(event) {
    this.handleFiles(event.target.files);
  }
  handleFiles(files) {
    if (!files?.length) {
      return;
    }
    const newFiles = [];
    // eslint-disable-next-line @typescript-eslint/prefer-for-of
    for (let i = 0; i < files.length; i++) {
      newFiles.push(this.makeUploadFile(files[i]));
    }
    newFiles.sort((a, b) => a.fileName.localeCompare(b.fileName));
    this.filesAdded.emit(newFiles);
  }
  reset() {
    if (this.fileInput) {
      this.fileInput.nativeElement.value = '';
    }
  }
  makeUploadFile(file) {
    const uploadFile = {
      fileName: file.name,
      file,
      size: this.fileSizeToString(file.size),
      progress: 0,
      status: 'added'
    };
    // use MIME type of file if set. Otherwise fall back to file name ending
    const ext = '.' + uploadFile.file.name.split('.').pop();
    if (!this.verifyFileType(uploadFile.file.type, ext)) {
      uploadFile.status = 'invalid';
      uploadFile.errorText = this.errorTextFileType;
    } else if (!this.verifyFileSize(uploadFile.file.size)) {
      uploadFile.status = 'invalid';
      uploadFile.errorText = this.errorTextFileMaxSize;
    }
    return uploadFile;
  }
  verifyFileSize(size) {
    return !this.maxFileSize || size <= this.maxFileSize;
  }
  verifyFileType(fileType, ext) {
    if (!this.accept) {
      return true;
    }
    if (fileType === undefined && ext === undefined) {
      return false;
    }
    // Spec says that comma is the delimiter for filetypes. Also allow pipe for compatibility
    return this.accept.split(/,|\|/).some(acceptedType => {
      // convert accept glob into regex (example: images/* --> images/.*)
      const acceptedRegex = acceptedType.replace('.', '\.').replace('*', '.*').trim();
      // if fileType is set and accepted type looks like a MIME type, match that otherwise extension
      if (fileType && acceptedType.includes('/')) {
        return !!fileType.match(acceptedRegex);
      }
      return !!ext?.match(acceptedRegex);
    });
  }
  fileSizeToString(num) {
    let suffix = 'B';
    if (num >= 1073741824) {
      num /= 1073741824;
      suffix = 'GB';
    }
    if (num >= 1048576) {
      num /= 1048576;
      suffix = 'MB';
    } else if (num >= 1024) {
      num /= 1024;
      suffix = 'KB';
    }
    return this.numberFormat.format(num) + suffix;
  }
}
SiFileDropzoneComponent.ɵfac = function SiFileDropzoneComponent_Factory(t) {
  return new (t || SiFileDropzoneComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID));
};
SiFileDropzoneComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiFileDropzoneComponent,
  selectors: [["si-file-dropzone"]],
  viewQuery: function SiFileDropzoneComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c52, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.fileInput = _t.first);
    }
  },
  inputs: {
    uploadTextFileSelect: "uploadTextFileSelect",
    uploadDropText: "uploadDropText",
    maxFileSizeText: "maxFileSizeText",
    acceptText: "acceptText",
    errorTextFileType: "errorTextFileType",
    errorTextFileMaxSize: "errorTextFileMaxSize",
    accept: "accept",
    maxFileSize: "maxFileSize",
    multiple: "multiple"
  },
  outputs: {
    filesAdded: "filesAdded"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 14,
  vars: 11,
  consts: [[1, "drag-and-drop", "rounded", "p-6", 3, "drop", "dragover", "dragleave"], ["role", "presentation", 1, "display-6", "element-upload", "mb-6"], [1, "drag-and-drop-description", "si-title-2", "d-flex"], [1, "select-file", "mb-0"], ["tabindex", "0", 1, "select-file", 3, "keydown.enter"], ["type", "file", "tabindex", "-1", 1, "d-none", 3, "accept", "multiple", "change"], ["fileInput", ""], ["class", "allowed si-caption mt-5", 4, "ngIf"], [1, "allowed", "si-caption", "mt-5"], [4, "ngIf"]],
  template: function SiFileDropzoneComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("drop", function SiFileDropzoneComponent_Template_div_drop_0_listener($event) {
        return ctx.dropHandler($event);
      })("dragover", function SiFileDropzoneComponent_Template_div_dragover_0_listener($event) {
        return ctx.dragOverHandler($event);
      })("dragleave", function SiFileDropzoneComponent_Template_div_dragleave_0_listener() {
        return ctx.dragOver = false;
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "i", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "span", 2)(3, "span");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](5, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6, " \xA0 ");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "label", 3)(8, "span", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown.enter", function SiFileDropzoneComponent_Template_span_keydown_enter_8_listener() {
        return ctx.inputEnterHandler();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](9);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](10, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](11, "input", 5, 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function SiFileDropzoneComponent_Template_input_change_11_listener($event) {
        return ctx.inputHandler($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](13, SiFileDropzoneComponent_div_13_Template, 3, 2, "div", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("drag-over", ctx.dragOver);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](5, 7, ctx.uploadDropText));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](10, 9, ctx.uploadTextFileSelect));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("accept", ctx.accept)("multiple", ctx.multiple);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.maxFileSize || ctx.accept);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:block}.select-file[_ngcontent-%COMP%]{margin-block-end:0;cursor:pointer;font-weight:700;color:var(--element-ui-0)}.select-file[_ngcontent-%COMP%]:hover, .select-file[_ngcontent-%COMP%]:active{text-decoration:underline}.drag-and-drop[_ngcontent-%COMP%]{background-color:var(--element-base-1);border:1px dashed var(--element-ui-2);display:flex;flex-direction:column;justify-content:center;align-items:center}.drag-and-drop.drag-over[_ngcontent-%COMP%]{border:1px solid var(--element-focus-default);box-shadow:0 0 0 1px var(--element-focus-default)}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiFileDropzoneComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-file-dropzone',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div\n  class=\"drag-and-drop rounded p-6\"\n  [class.drag-over]=\"dragOver\"\n  (drop)=\"dropHandler($event)\"\n  (dragover)=\"dragOverHandler($event)\"\n  (dragleave)=\"dragOver = false\"\n>\n  <i class=\"display-6 element-upload mb-6\" role=\"presentation\"></i>\n  <span class=\"drag-and-drop-description si-title-2 d-flex\">\n    <span>{{ uploadDropText | translate }}</span>\n    &nbsp;\n    <label class=\"select-file mb-0\">\n      <span\n        class=\"select-file\"\n        tabindex=\"0\"\n        (keydown.enter)=\"inputEnterHandler()\"\n      >{{ uploadTextFileSelect | translate }}</span>\n      <input\n        #fileInput\n        type=\"file\"\n        tabindex=\"-1\"\n        class=\"d-none\"\n        [accept]=\"accept\"\n        [multiple]=\"multiple\"\n        (change)=\"inputHandler($event)\"\n      >\n    </label>\n  </span>\n  <div *ngIf=\"maxFileSize || accept\" class=\"allowed si-caption mt-5\">\n    <ng-container *ngIf=\"maxFileSize\">\n      {{ maxFileSizeText | translate }}: {{ maxFileSizeString }}.\n    </ng-container>\n    <ng-container *ngIf=\"accept\">\n      {{ acceptText | translate }}: {{ accept }}.\n    </ng-container>\n  </div>\n</div>\n",
      styles: [":host{display:block}.select-file{margin-block-end:0;cursor:pointer;font-weight:700;color:var(--element-ui-0)}.select-file:hover,.select-file:active{text-decoration:underline}.drag-and-drop{background-color:var(--element-base-1);border:1px dashed var(--element-ui-2);display:flex;flex-direction:column;justify-content:center;align-items:center}.drag-and-drop.drag-over{border:1px solid var(--element-focus-default);box-shadow:0 0 0 1px var(--element-focus-default)}\n"]
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.LOCALE_ID]
      }]
    }];
  }, {
    uploadTextFileSelect: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    uploadDropText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    maxFileSizeText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    acceptText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    errorTextFileType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    errorTextFileMaxSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    accept: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    maxFileSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    multiple: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    filesAdded: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    fileInput: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['fileInput']
    }]
  });
})();
class SiFileUploaderComponent {
  constructor(cdRef, http) {
    this.cdRef = cdRef;
    this.http = http;
    /**
     * Text of the link to open the file select dialog (follows `uploadDropText`).
     */
    this.uploadTextFileSelect = 'click to upload';
    /**
     * Text instructing a user to drop the files inside the dropzone.
     */
    this.uploadDropText = 'Drop files here or';
    /**
     * Text to describe the maximum file size.
     */
    this.maxFileSizeText = 'Maximum upload size';
    /**
     * Error message shown when the maximum number of files are reached.
     */
    this.maxFilesReachedText = 'Maximum number of files reached';
    /**
     * Text for the accepted file types.
     */
    this.acceptText = 'Accepted file types';
    /**
     * Text used inside the upload button.
     */
    this.uploadButtonText = 'Upload';
    /**
     * Text used inside the clear button.
     */
    this.clearButtonText = 'Clear';
    /**
     * Text shown during the file upload.
     */
    this.uploadingText = 'Uploading';
    /**
     * Text shown to remove a file from the file list. Required for a11y.
     */
    this.removeButtonText = 'Remove';
    /**
     * Text of cancel button. Shown during upload. Required for a11y.
     */
    this.cancelButtonText = 'Cancel';
    /**
     * Text shown if the upload was successful.
     */
    this.successTextTitle = 'Upload completed';
    /**
     * Text shown if the upload failed.
     */
    this.errorUploadFailed = 'Upload failed';
    /**
     * On failed upload, show the error received from the server.
     */
    this.showHttpError = false;
    /**
     * Text shown to indicate that an incorrect file type was added to file list.
     */
    this.errorTextFileType = 'Incorrect file type selected';
    /**
     * Message or translation key if file exceeds the maximum file size limit.
     */
    this.errorTextFileMaxSize = 'File exceeds allowed maximum size';
    /**
     * Config for HTTP request to upload file.
     */
    this.uploadConfig = {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_33__.HttpHeaders({
        'Accept': 'application/json'
      }),
      method: 'POST',
      url: '',
      fieldName: 'upload_file',
      responseType: 'json'
    };
    /**
     * Define maximal allowed number of files.
     */
    this.maxFiles = 10;
    /**
     * Maximum number of concurrent uploads.
     */
    this.maxConcurrentUploads = 3;
    /**
     * Numbers of retries for failed uploads.
     */
    this.retries = 0;
    /**
     * Auto-upload mode - automatically start upload once files are added.
     */
    this.autoUpload = false;
    /**
     * Disable the upload button.
     */
    this.disableUpload = false;
    /**
     * Output callback event will provide you if upload is finished. If an error
     * occurred it will be emitted.
     */
    this.uploadCompleted = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter(true);
    /**
     * Output which fires whenever new files are added to or removed from the uploader.
     */
    this.filesChanges = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter(true);
    this.files = [];
    this.pending = 0;
    this.uploading = 0;
    this.uploadEnabled = false;
    this.maxFilesReached = false;
    this.trackByItem = (_index, item) => item;
  }
  ngOnChanges(changes) {
    if (changes.maxFiles || changes.disableUpload) {
      this.updateStates();
    }
  }
  handleFiles(files) {
    if (!files?.length) {
      return;
    }
    // for single-file case, replace exiting file if any
    if (this.maxFiles === 1 && this.files.length) {
      this.reset(false);
    }
    let numValid = this.countValid();
    for (const file of files) {
      if (this.isDuplicate(file)) {
        continue;
      }
      const canAdd = numValid + 1 <= this.maxFiles;
      const valid = file.status === 'added';
      if (valid && !canAdd) {
        this.maxFilesReached = true;
        break;
      } else if (valid) {
        numValid++;
      }
      this.files.push(file);
    }
    this.files.sort((a, b) => a.fileName.localeCompare(b.fileName));
    this.filesChanges.emit(this.files.slice());
    this.updateStates();
    if (this.autoUpload) {
      this.fileUpload(false);
    }
  }
  removeFile(index) {
    if (index >= 0) {
      this.files.splice(index, 1);
      this.filesChanges.emit(this.files.slice());
      this.dropZone?.reset();
      this.updateStates();
    }
  }
  cancelUpload(file) {
    if (file.subscription) {
      file.subscription.unsubscribe();
      this.pending--;
    }
    file.status = 'added';
    file.progress = 0;
    this.updateStates();
  }
  retryUpload(file) {
    file.status = 'added';
    this.doUpload([file], true);
  }
  reset(emit = true) {
    this.files.forEach(f => f.subscription?.unsubscribe());
    this.files = [];
    this.dropZone?.reset();
    this.updateStates();
    if (emit) {
      this.filesChanges.emit([]);
    }
  }
  fileUpload(doRetry = true) {
    if (!this.uploadEnabled) {
      return;
    }
    this.uploadEnabled = false;
    this.doUpload(this.files, doRetry);
  }
  doUpload(files, doRetry) {
    for (const file of files) {
      if (file.status !== 'added' && (!doRetry || file.status !== 'error')) {
        continue;
      }
      this.pending++;
      file.status = 'queued';
    }
    this.processQueue();
  }
  processQueue() {
    for (let i = 0; i < this.files.length && this.uploading < this.maxConcurrentUploads; i++) {
      const file = this.files[i];
      if (file.status === 'queued') {
        this.uploading++;
        this.uploadOneFile(file);
      }
    }
  }
  uploadOneFile(file) {
    let formData;
    if (!this.uploadConfig.sendBinary) {
      formData = new FormData();
      formData.append(this.uploadConfig.fieldName, file.file, file.fileName);
      if (this.uploadConfig.additionalFields) {
        Object.keys(this.uploadConfig.additionalFields).forEach(key => {
          formData.append(key, this.uploadConfig.additionalFields[key]);
        });
      }
    }
    const req = new _angular_common_http__WEBPACK_IMPORTED_MODULE_33__.HttpRequest(this.uploadConfig.method, this.uploadConfig.url, formData ?? file.file, {
      headers: this.uploadConfig.headers,
      responseType: this.uploadConfig.responseType,
      reportProgress: true
    });
    file.status = 'uploading';
    file.errorText = undefined;
    file.httpErrorText = undefined;
    const requestHandler = this.uploadConfig.handler ?? (this.http ? r => this.http.request(r) : undefined);
    if (!requestHandler) {
      return;
    }
    file.subscription = requestHandler(req).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_43__.retry)(this.retries)).subscribe(event => this.handleUploadEvent(file, event), error => this.handleUploadError(file, error), () => this.handleUploadComplete(file));
  }
  // this is a light check for duplicate file - name and size only, not content!
  isDuplicate(file) {
    for (const uploadFile of this.files) {
      if (uploadFile.file.name === file.file.name && uploadFile.file.size === file.file.size) {
        return true;
      }
    }
    return false;
  }
  handleUploadEvent(file, httpEvent) {
    if (httpEvent instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_33__.HttpResponse) {
      file.successResponse = httpEvent;
    } else if (httpEvent.type === _angular_common_http__WEBPACK_IMPORTED_MODULE_33__.HttpEventType.UploadProgress && httpEvent.total) {
      file.progress = Math.floor(100 * httpEvent.loaded / httpEvent.total);
      this.cdRef.markForCheck();
    }
  }
  handleUploadError(file, error) {
    this.uploadCompleted.emit({
      file: file.fileName,
      error
    });
    file.status = 'error';
    file.errorText = this.errorUploadFailed;
    if (this.showHttpError && error.status && error.statusText) {
      file.httpErrorText = `${error.status}: ${error.statusText}`;
    }
    this.oneUploadDone(file);
  }
  handleUploadComplete(file) {
    this.uploadCompleted.emit({
      file: file.fileName,
      response: file.successResponse
    });
    file.status = 'success';
    file.progress = 100;
    file.successResponse = undefined;
    if (this.autoUpload) {
      this.fadeOut(file);
    }
    this.oneUploadDone(file);
  }
  oneUploadDone(file) {
    file.subscription = undefined;
    this.pending--;
    this.uploading--;
    this.updateStates();
    this.processQueue();
  }
  fadeOut(file) {
    setTimeout(() => {
      file.fadeOut = true;
      this.cdRef.markForCheck();
      setTimeout(() => {
        this.removeFile(this.files.indexOf(file));
        this.cdRef.markForCheck();
      }, 500);
      this.cdRef.markForCheck();
    }, 3500);
  }
  updateStates() {
    this.uploadEnabled = !this.disableUpload && !this.pending && this.files.some(f => f.status === 'added' || f.status === 'error');
    if (this.maxFilesReached && this.countValid() < this.maxFiles) {
      this.maxFilesReached = false;
    }
  }
  countValid() {
    return this.files.reduce((acc, f) => acc + (f.status !== 'invalid' ? 1 : 0), 0);
  }
}
SiFileUploaderComponent.ɵfac = function SiFileUploaderComponent_Factory(t) {
  return new (t || SiFileUploaderComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_33__.HttpClient, 8));
};
SiFileUploaderComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiFileUploaderComponent,
  selectors: [["si-file-uploader"]],
  viewQuery: function SiFileUploaderComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c53, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.dropZone = _t.first);
    }
  },
  inputs: {
    uploadTextFileSelect: "uploadTextFileSelect",
    uploadDropText: "uploadDropText",
    maxFileSizeText: "maxFileSizeText",
    maxFilesReachedText: "maxFilesReachedText",
    acceptText: "acceptText",
    uploadButtonText: "uploadButtonText",
    clearButtonText: "clearButtonText",
    uploadingText: "uploadingText",
    removeButtonText: "removeButtonText",
    cancelButtonText: "cancelButtonText",
    successTextTitle: "successTextTitle",
    errorUploadFailed: "errorUploadFailed",
    showHttpError: "showHttpError",
    errorTextFileType: "errorTextFileType",
    errorTextFileMaxSize: "errorTextFileMaxSize",
    uploadConfig: "uploadConfig",
    accept: "accept",
    maxFileSize: "maxFileSize",
    maxFiles: "maxFiles",
    maxConcurrentUploads: "maxConcurrentUploads",
    retries: "retries",
    autoUpload: "autoUpload",
    disableUpload: "disableUpload"
  },
  outputs: {
    uploadCompleted: "uploadCompleted",
    filesChanges: "filesChanges"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 6,
  vars: 13,
  consts: [[1, "mb-4", 3, "uploadTextFileSelect", "uploadDropText", "multiple", "maxFileSizeText", "acceptText", "errorTextFileType", "errorTextFileMaxSize", "accept", "maxFileSize", "filesAdded"], ["dropZone", ""], ["class", "mb-4", "severity", "info", 3, "message", 4, "ngIf"], [1, "file-list"], ["class", "file d-flex", 3, "fade-out", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "buttons text-end mt-4", 4, "ngIf"], ["severity", "info", 1, "mb-4", 3, "message"], [1, "file", "d-flex"], ["role", "presentation", 1, "icon", "align-self-center", "ms-6", "me-4", "element-document"], [1, "flex-fill", "overflow-hidden", "py-3"], [1, "file-name", "text-truncate", "fw-bold"], [1, "file-size", "text-secondary"], ["class", "error text-truncate d-flex align-items-center", 3, "text-warning", "text-danger", 4, "ngIf"], ["class", "pt-3 pb-5 position-relative", 4, "ngIf"], [1, "status", "align-self-center", "text-nowrap", "px-5"], ["type", "button", "class", "btn btn-circle btn-sm btn-tertiary element-redo me-2", 3, "disabled", "title", "click", 4, "ngIf"], ["type", "button", "class", "btn btn-circle btn-sm btn-ghost element-delete", 3, "title", "click", 4, "ngIf"], ["type", "button", "class", "btn btn-circle btn-sm btn-tertiary element-cancel", 3, "title", "click", 4, "ngIf"], ["class", "mx-2", "icon", "element-circle-filled", "color", "status-success", "stackedIcon", "element-state-tick smooth-auto", "stackedColor", "status-success-contrast", 3, "alt", 4, "ngIf"], [1, "error", "text-truncate", "d-flex", "align-items-center"], ["size", "icon-small", "stackedIcon", "element-state-exclamation-mark smooth-auto", "alt", "", 1, "d-inline-block", "my-n2", "me-2", 3, "icon", "color", "stackedColor"], [4, "ngIf"], [1, "pt-3", "pb-5", "position-relative"], [1, "position-absolute", "si-caption", "end-0", "mt-n8"], ["height", "small", 3, "value", "ariaLabel"], ["type", "button", 1, "btn", "btn-circle", "btn-sm", "btn-tertiary", "element-redo", "me-2", 3, "disabled", "title", "click"], ["type", "button", 1, "btn", "btn-circle", "btn-sm", "btn-ghost", "element-delete", 3, "title", "click"], ["type", "button", 1, "btn", "btn-circle", "btn-sm", "btn-tertiary", "element-cancel", 3, "title", "click"], ["icon", "element-circle-filled", "color", "status-success", "stackedIcon", "element-state-tick smooth-auto", "stackedColor", "status-success-contrast", 1, "mx-2", 3, "alt"], [1, "buttons", "text-end", "mt-4"], ["type", "button", 1, "btn", "btn-secondary", "me-4", 3, "disabled", "click"], ["type", "button", 1, "btn", "btn-primary", 3, "disabled", "click"]],
  template: function SiFileUploaderComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "si-file-dropzone", 0, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("filesAdded", function SiFileUploaderComponent_Template_si_file_dropzone_filesAdded_0_listener($event) {
        return ctx.handleFiles($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiFileUploaderComponent_si_inline_notification_2_Template, 1, 1, "si-inline-notification", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiFileUploaderComponent_div_4_Template, 14, 10, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiFileUploaderComponent_div_5_Template, 7, 8, "div", 5);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("uploadTextFileSelect", ctx.uploadTextFileSelect)("uploadDropText", ctx.uploadDropText)("multiple", ctx.maxFiles > 1)("maxFileSizeText", ctx.maxFileSizeText)("acceptText", ctx.acceptText)("errorTextFileType", ctx.errorTextFileType)("errorTextFileMaxSize", ctx.errorTextFileMaxSize)("accept", ctx.accept)("maxFileSize", ctx.maxFileSize);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.maxFilesReached);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.files)("ngForTrackBy", ctx.trackByItem);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.autoUpload);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiIconComponent, SiInlineNotificationComponent, SiProgressbarComponent, SiFileDropzoneComponent, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:stretch}[_nghost-%COMP%] > *[_ngcontent-%COMP%]{min-inline-size:320px;max-inline-size:680px;inline-size:100%;align-self:center}.file-list[_ngcontent-%COMP%]{overflow-y:auto}.file[_ngcontent-%COMP%]{transition:opacity calc(.5s * var(--element-animations-enabled, 1))}.fade-out[_ngcontent-%COMP%]{opacity:0}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiFileUploaderComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-file-uploader',
      template: "<si-file-dropzone\n  #dropZone\n  class=\"mb-4\"\n  [uploadTextFileSelect]=\"uploadTextFileSelect\"\n  [uploadDropText]=\"uploadDropText\"\n  [multiple]=\"maxFiles > 1\"\n  [maxFileSizeText]=\"maxFileSizeText\"\n  [acceptText]=\"acceptText\"\n  [errorTextFileType]=\"errorTextFileType\"\n  [errorTextFileMaxSize]=\"errorTextFileMaxSize\"\n  [accept]=\"accept\"\n  [maxFileSize]=\"maxFileSize\"\n  (filesAdded)=\"handleFiles($event)\"\n></si-file-dropzone>\n\n<si-inline-notification\n  *ngIf=\"maxFilesReached\"\n  class=\"mb-4\"\n  severity=\"info\"\n  [message]=\"maxFilesReachedText\"\n></si-inline-notification>\n\n<div class=\"file-list\">\n  <div\n    *ngFor=\"let file of files; index as i; trackBy: trackByItem\"\n    class=\"file d-flex\"\n    [class.fade-out]=\"file.fadeOut\"\n  >\n    <i class=\"icon align-self-center ms-6 me-4 element-document\" role=\"presentation\"></i>\n    <div class=\"flex-fill overflow-hidden py-3\">\n      <div class=\"file-name text-truncate fw-bold\">{{ file.fileName }}</div>\n      <div class=\"file-size text-secondary\">{{ file.size }}</div>\n      <div\n        *ngIf=\"file.errorText\"\n        class=\"error text-truncate d-flex align-items-center\"\n        [class.text-warning]=\"file.status === 'invalid'\"\n        [class.text-danger]=\"file.status === 'error'\"\n      >\n        <si-icon\n          class=\"d-inline-block my-n2 me-2\"\n          size=\"icon-small\"\n          [icon]=\"file.status === 'invalid' ? 'element-triangle-filled' : 'element-circle-filled'\"\n          [color]=\"file.status === 'invalid' ? 'status-warning' : 'status-danger'\"\n          stackedIcon=\"element-state-exclamation-mark smooth-auto\"\n          [stackedColor]=\"file.status === 'invalid' ? 'status-warning-contrast' : 'status-danger-contrast'\"\n          alt=\"\"\n        ></si-icon>\n        {{ file.errorText | translate }}<ng-container *ngIf=\"file.httpErrorText\">: {{ file.httpErrorText }}</ng-container>\n      </div>\n      <div *ngIf=\"!file.errorText\" class=\"pt-3 pb-5 position-relative\">\n        <div class=\"position-absolute si-caption end-0 mt-n8\">{{ file.progress }} %</div>\n        <si-progressbar height=\"small\" [value]=\"file.progress\" [ariaLabel]=\"uploadingText\"></si-progressbar>\n      </div>\n    </div>\n    <div class=\"status align-self-center text-nowrap px-5\">\n      <button\n        *ngIf=\"file.status === 'error'\"\n        type=\"button\"\n        class=\"btn btn-circle btn-sm btn-tertiary element-redo me-2\"\n        [disabled]=\"!uploadEnabled\"\n        [title]=\"uploadButtonText | translate\"\n        [attr.aria-label]=\"uploadButtonText | translate\"\n        (click)=\"retryUpload(file)\"\n      ></button>\n      <button\n        *ngIf=\"file.status === 'added' || file.status === 'error' || file.status === 'invalid'\"\n        type=\"button\"\n        class=\"btn btn-circle btn-sm btn-ghost element-delete\"\n        [title]=\"removeButtonText | translate\"\n        [attr.aria-label]=\"removeButtonText | translate\"\n        (click)=\"removeFile(i)\"\n      ></button>\n      <button\n        *ngIf=\"file.status === 'uploading' || file.status === 'queued'\"\n        type=\"button\"\n        class=\"btn btn-circle btn-sm btn-tertiary element-cancel\"\n        [title]=\"cancelButtonText | translate\"\n        [attr.aria-label]=\"cancelButtonText | translate\"\n        (click)=\"cancelUpload(file)\"\n      ></button>\n      <si-icon\n        *ngIf=\"file.status === 'success'\"\n        class=\"mx-2\"\n        icon=\"element-circle-filled\"\n        color=\"status-success\"\n        stackedIcon=\"element-state-tick smooth-auto\"\n        stackedColor=\"status-success-contrast\"\n        [alt]=\"successTextTitle\"\n      ></si-icon>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"!autoUpload\" class=\"buttons text-end mt-4\">\n  <button\n    type=\"button\"\n    class=\"btn btn-secondary me-4\"\n    [disabled]=\"pending || !files.length\"\n    (click)=\"reset()\"\n  >{{ clearButtonText | translate }}</button>\n  <button\n    type=\"button\"\n    class=\"btn btn-primary\"\n    [disabled]=\"!uploadEnabled\"\n    (click)=\"fileUpload()\"\n  >{{ uploadButtonText | translate }}</button>\n</div>\n",
      styles: [":host{display:flex;flex-direction:column;justify-content:center;align-items:stretch}:host>*{min-inline-size:320px;max-inline-size:680px;inline-size:100%;align-self:center}.file-list{overflow-y:auto}.file{transition:opacity calc(.5s * var(--element-animations-enabled, 1))}.fade-out{opacity:0}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }, {
      type: _angular_common_http__WEBPACK_IMPORTED_MODULE_33__.HttpClient,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }];
  }, {
    uploadTextFileSelect: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    uploadDropText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    maxFileSizeText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    maxFilesReachedText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    acceptText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    uploadButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    clearButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    uploadingText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    removeButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    cancelButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    successTextTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    errorUploadFailed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showHttpError: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    errorTextFileType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    errorTextFileMaxSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    uploadConfig: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    accept: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    maxFileSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    maxFiles: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    maxConcurrentUploads: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    retries: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    autoUpload: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disableUpload: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    uploadCompleted: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    filesChanges: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    dropZone: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['dropZone']
    }]
  });
})();
class SiFileUploaderModule {}
SiFileUploaderModule.ɵfac = function SiFileUploaderModule_Factory(t) {
  return new (t || SiFileUploaderModule)();
};
SiFileUploaderModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiFileUploaderModule
});
SiFileUploaderModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiInlineNotificationModule, SiProgressbarModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiFileUploaderModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiInlineNotificationModule, SiProgressbarModule, SiTranslateModule],
      declarations: [SiFileDropzoneComponent, SiFileUploaderComponent],
      exports: [SiFileDropzoneComponent, SiFileUploaderComponent]
    }]
  }], null, null);
})();

// -------------------------------------------------------------------------------

class SiFormContainerComponent {
  constructor() {
    /**
     * A form container in readonly mode is only displaying the form content without ability
     * to change it. The edit panel with typically save and cancel buttons is hidden. Set
     * to true to display the edit panel.
     */
    this.readonly = false;
    /**
     * The title of the help link that is used to display the form validation problems within a popover.
     */
    this.helpTitle = 'Help';
    this.enableValidationHelp = false;
    /**
     * In some scenarios, one may not want the form container to be responsible for the layout relevant
     * `si-container-[xs|...]` classes, but let this be done by a different, nested component, e.g. by a
     * group box. In these cases, the property should be set to true.
     */
    this.disableContainerBreakpoints = false;
    /**
     * Every validation error has an errorCode. This map holds translate keys for error codes. The keys can
     * be used to display a translated message for each validation error. The defaults old english readable
     * key defaults for the Angular standard validators of the `Validators` class like `min`, `max` or `required`.
     *
     * Use the input to set your own translate keys for the form validators you need.
     */
    this.errorCodeTranslateKeyMap = new Map([['min', 'The value is too small.'], ['max', 'The value is too large.'], ['required', 'A value is required.'], ['requiredTrue', 'The value should be true.'], ['email', 'The email is not valid.'], ['minlength', 'The minimum number of characters is not met.'], ['maxlength', 'A maximum number of characters is exceeded.'], ['pattern', 'The value does not match the predefined pattern.']]);
    /**
     * A map the maps from control names of the form to their translate keys.
     * The initial map is empty and the user is responsible to add the required
     * translate keys.
     */
    this.controlNameTranslateKeyMap = new Map();
    this.trackByIndex = index => index;
  }
  /**
   * Indicates whether the user interacted with the form.
   * @returns `true`, if the user selected at least one form element and
   * [blurred](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event) by losing focus again
   * (e.g. by setting focus on another element), or by editing the content of a form element.
   * Otherwise `false`.
   */
  get userInteractedWithForm() {
    return !!this.form && (this.form.dirty || this.form.touched);
  }
  /**
   * Indicates whether content editor message shall be styled as success.
   * @returns `true`, if {@link SiFormContainerComponent.userInteractedWithForm} is true and
   * the form is valid.
   */
  get validFormContainerMessage() {
    return this.userInteractedWithForm && this.form.status === 'VALID';
  }
  /**
   * Indicates whether the content editor message shall be styled as warning.
   * @returns `true`, if {@link SiFormContainerComponent.userInteractedWithForm} is true and
   * the form is invalid.
   */
  get invalidFormContainerMessage() {
    return this.userInteractedWithForm && this.form.status === 'INVALID';
  }
  /**
   * Returns the validation errors of the form's control when the control name is provided. Otherwise,
   * returns all validation errors of the form. Returns an empty arry when no form is available or if
   * the name does not match to a control.
   * @param controlName An optional name of a control that is part of the form.
   */
  getValidationErrors(controlName) {
    if (!this.form) {
      return [];
    } else if (!controlName) {
      return this.getFormValidationErrorsPrivate(this.form);
    } else {
      const control = this.form.get(controlName);
      if (control) {
        return this.getFormValidationErrorsPrivate(control, controlName);
      } else {
        return [];
      }
    }
  }
  getControlNameTranslateKey(controlName) {
    if (!this.controlNameTranslateKeyMap) {
      return undefined;
    }
    return this.controlNameTranslateKeyMap.get(controlName) ?? controlName;
  }
  getErrorCodeTranslateKey(errorCode, controlName) {
    if (!this.errorCodeTranslateKeyMap) {
      return undefined;
    } else if (!controlName) {
      return this.errorCodeTranslateKeyMap.get(errorCode);
    } else {
      return this.errorCodeTranslateKeyMap.get(this.getControlErrorCodeTranslationKey(controlName, errorCode)) ?? this.errorCodeTranslateKeyMap.get(errorCode);
    }
  }
  getControlErrorCodeTranslationKey(controlName, errorCode) {
    return `${controlName}.${errorCode}`;
  }
  getFormValidationErrorsPrivate(control, controlName) {
    let errors = [];
    // a form must either consist of
    // a) a formgroup (with nested form controls or groups) or
    // b) a single form control
    if (control instanceof _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormGroup) {
      const formGroupErrors = this.getFormGroupErrors(control);
      errors = errors.concat(formGroupErrors);
      if (control.controls) {
        Object.keys(control.controls).forEach(key => {
          const formGroupControl = control.controls[key];
          const formGroupControlErrors = this.getFormValidationErrorsPrivate(formGroupControl, key);
          errors = errors.concat(formGroupControlErrors);
        });
      }
    } else if (control instanceof _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormControl) {
      const errorCodes = control.errors;
      if (errorCodes) {
        Object.keys(errorCodes).forEach(errorCode => {
          errors.push({
            controlName,
            controlNameTranslationKey: controlName ? this.getControlNameTranslateKey(controlName) : undefined,
            errorCode,
            errorCodeTranslationKey: this.getErrorCodeTranslateKey(errorCode, controlName),
            errorParams: errorCodes[errorCode]
          });
        });
      }
    }
    return errors;
  }
  getFormGroupErrors(formGroup) {
    const errors = [];
    const errorCodes = formGroup.errors;
    if (errorCodes) {
      Object.keys(errorCodes).forEach(errorCode => {
        errors.push({
          errorCode,
          errorCodeTranslationKey: this.getErrorCodeTranslateKey(errorCode),
          errorParams: errorCodes[errorCode]
        });
      });
    }
    return errors;
  }
}
SiFormContainerComponent.ɵfac = function SiFormContainerComponent_Factory(t) {
  return new (t || SiFormContainerComponent)();
};
SiFormContainerComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiFormContainerComponent,
  selectors: [["si-form-container"]],
  inputs: {
    form: "form",
    readonly: "readonly",
    contentContainerBreakpoints: "contentContainerBreakpoints",
    helpTitle: "helpTitle",
    enableValidationHelp: "enableValidationHelp",
    disableContainerBreakpoints: "disableContainerBreakpoints",
    errorCodeTranslateKeyMap: "errorCodeTranslateKeyMap",
    controlNameTranslateKeyMap: "controlNameTranslateKeyMap"
  },
  ngContentSelectors: _c55,
  decls: 7,
  vars: 4,
  consts: [[1, "d-flex", "flex-column", "align-content-stretch", "flex-grow-1", "flex-shrink-1"], [3, "ngSwitch"], ["class", "flex-grow-1 flex-shrink-1 overflow-auto", 4, "ngSwitchCase"], ["class", "flex-grow-1 flex-shrink-1 overflow-auto", "siResponsiveContainer", "", 3, "breakpoints", 4, "ngSwitchCase"], ["class", "d-flex flex-row flex-nowrap flex-grow-0 flex-shrink-0 p-4", 4, "ngIf"], ["contentTemplate", ""], [1, "flex-grow-1", "flex-shrink-1", "overflow-auto"], [4, "ngTemplateOutlet"], ["siResponsiveContainer", "", 1, "flex-grow-1", "flex-shrink-1", "overflow-auto", 3, "breakpoints"], [1, "d-flex", "flex-row", "flex-nowrap", "flex-grow-0", "flex-shrink-0", "p-4"], [1, "d-flex", "flex-grow-1", "flex-shrink-1", "justify-content-end", "text-end", "overflow-hidden", "mx-6", "my-auto"], [4, "ngIf"], [1, "m-auto", "flex-grow-0", "flex-shrink-0"], ["popoverContent", ""], ["triggers", "click", "containerClass", "form-container-help-popover", "tabindex", "0", 1, "form-container-edit-help", "ms-0", "me-6", "my-auto", 3, "innerHTML", "siPopover", "keydown.enter"], ["popoverTrigger", ""], [1, "p-0", "list-unstyled"], ["class", "form-container-help-popover-error", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "form-container-help-popover-error"]],
  template: function SiFormContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c54);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](1, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiFormContainerComponent_div_2_Template, 2, 1, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiFormContainerComponent_div_3_Template, 2, 2, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiFormContainerComponent_div_4_Template, 6, 5, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiFormContainerComponent_ng_template_5_Template, 1, 0, "ng-template", null, 5, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitch", ctx.disableContainerBreakpoints);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", true);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", false);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.readonly);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgSwitch, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgSwitchCase, SiPopoverDirective, SiResponsiveContainerDirective, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:flex;flex:1 1 auto;flex-direction:column}[_nghost-%COMP%]   [_ngcontent-%COMP%]::slotted([si-form-container-message]), [_nghost-%COMP%]     [si-form-container-message]{max-inline-size:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.form-container-edit-help[_ngcontent-%COMP%]{text-decoration:underline;cursor:pointer}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiFormContainerComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-form-container',
      template: "<div class=\"d-flex flex-column align-content-stretch flex-grow-1 flex-shrink-1\">\n\n  <ng-container [ngSwitch]=\"disableContainerBreakpoints\">\n    <div *ngSwitchCase=\"true\" class=\"flex-grow-1 flex-shrink-1 overflow-auto\">\n      <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </div>\n    <div *ngSwitchCase=\"false\"\n      class=\"flex-grow-1 flex-shrink-1 overflow-auto\"\n      siResponsiveContainer\n      [breakpoints]=\"contentContainerBreakpoints\"\n    >\n      <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </div>\n  </ng-container>\n\n  <div *ngIf=\"!readonly\" class=\"d-flex flex-row flex-nowrap flex-grow-0 flex-shrink-0 p-4\">\n    <div class=\"d-flex flex-grow-1 flex-shrink-1 justify-content-end text-end overflow-hidden mx-6 my-auto\"\n      [class.text-success]=\"validFormContainerMessage\"\n      [class.text-danger]=\"invalidFormContainerMessage\">\n      <ng-content select=\"[si-form-container-message]\"></ng-content>\n    </div>\n\n    <ng-container *ngIf=\"enableValidationHelp && getValidationErrors() && invalidFormContainerMessage\">\n      <ng-template #popoverContent>\n        <ul class=\"p-0 list-unstyled\">\n          <li\n            *ngFor=\"let error of getValidationErrors(); trackBy: trackByIndex\"\n            class=\"form-container-help-popover-error\"\n          >\n            <b *ngIf=\"error.controlNameTranslationKey\">{{ error.controlNameTranslationKey | translate }}: </b>\n            <span *ngIf=\"error.errorCode\">\n              {{ (error.errorCodeTranslationKey || error.errorCode) | translate:error.errorParams }}\n            </span>\n          </li>\n        </ul>\n      </ng-template>\n      <span class=\"form-container-edit-help ms-0 me-6 my-auto\"\n        [innerHTML]=\"helpTitle | translate\"\n        [siPopover]=\"popoverContent\"\n        triggers=\"click\"\n        #popoverTrigger\n        (keydown.enter)=\"popoverTrigger.click()\"\n        containerClass=\"form-container-help-popover\"\n        tabindex=\"0\"></span>\n    </ng-container>\n\n    <div class=\"m-auto flex-grow-0 flex-shrink-0\">\n      <ng-content select=\"[si-form-container-buttons]\"></ng-content>\n    </div>\n  </div>\n</div>\n\n<ng-template #contentTemplate>\n  <ng-content select=\"[si-form-container-content]\"></ng-content>\n</ng-template>\n",
      styles: [":host{display:flex;flex:1 1 auto;flex-direction:column}:host ::slotted([si-form-container-message]),:host ::ng-deep [si-form-container-message]{max-inline-size:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.form-container-edit-help{text-decoration:underline;cursor:pointer}\n"]
    }]
  }], null, {
    form: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    contentContainerBreakpoints: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    helpTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    enableValidationHelp: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disableContainerBreakpoints: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    errorCodeTranslateKeyMap: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    controlNameTranslateKeyMap: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiFormItemComponent {
  constructor() {
    /**
     * Per default, the label is suffixed with a colon. To turn this off,
     * set the value to `false`.
     */
    this.labelColon = false;
    /**
     * Per default, the label wraps into multiple lines if the text is too
     * long for its container. If you want the label to be inline (and
     * possibly clipped), set the value to `false`.
     */
    this.labelWrap = true;
    /**
     * Enables a user to hide the border around the form item.
     */
    this.hideBorder = true;
    /**
     * Use readonly to specify that the content cannot be modified.
     */
    this.readonly = false;
    /**
     * Defines that this form item is required for the overall form to be valid.
     */
    this.required = false;
    this.cdRef = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef);
  }
  ngAfterViewInit() {
    this.contentChildren = this.content.nativeElement.getElementsByTagName('*');
    this.afterViewInitRespectingChangeDetection();
  }
  get displayLabel() {
    return this.label && this.label.trim().length > 0;
  }
  get displayLabelColon() {
    return this.labelColon && this.displayLabel;
  }
  afterViewInitRespectingChangeDetection() {
    setTimeout(() => {
      this.relevantInputElement = this.getRelevantInputElement();
      this.mapLabelToInput();
      this.cdRef.markForCheck();
    });
  }
  getRelevantInputElement() {
    const contentChildren = this.contentChildren ?? this.content.nativeElement.getElementsByTagName('*');
    const relevantInputTypes = ['input', 'meter', 'progress', 'select', 'textarea'];
    let currentChildElement;
    if (contentChildren) {
      // eslint-disable-next-line @typescript-eslint/prefer-for-of
      for (let i = 0; i < contentChildren.length; i++) {
        currentChildElement = contentChildren[i];
        if (relevantInputTypes.includes(currentChildElement.nodeName.toLowerCase())) {
          return currentChildElement;
        }
      }
    }
    return undefined;
  }
  mapLabelToInput() {
    // only necessary if we do not know the inputId
    if (!this.inputId && this.relevantInputElement && this.relevantInputElement.id) {
      this.inputId = this.relevantInputElement.id;
    }
  }
}
SiFormItemComponent.ɵfac = function SiFormItemComponent_Factory(t) {
  return new (t || SiFormItemComponent)();
};
SiFormItemComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiFormItemComponent,
  selectors: [["si-form-item"]],
  viewQuery: function SiFormItemComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c6, 7);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.content = _t.first);
    }
  },
  hostVars: 6,
  hostBindings: function SiFormItemComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("hide-border", ctx.hideBorder)("readonly", ctx.readonly)("required", ctx.required);
    }
  },
  inputs: {
    inputId: "inputId",
    label: "label",
    labelClass: "labelClass",
    labelColon: "labelColon",
    labelWidth: "labelWidth",
    labelWrap: "labelWrap",
    hideBorder: "hideBorder",
    contentClass: "contentClass",
    readonly: "readonly",
    required: "required"
  },
  ngContentSelectors: _c1,
  decls: 5,
  vars: 11,
  consts: [[1, "col-form-label", 3, "ngClass"], ["class", "form-item-label-text", 3, "text-break", "text-truncate", 4, "ngIf"], [1, "form-item-content", 3, "ngClass"], ["content", ""], [1, "form-item-label-text"], [4, "ngIf"]],
  template: function SiFormItemComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "label", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiFormItemComponent_span_1_Template, 4, 8, "span", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2, 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      let tmp_2_0;
      let tmp_7_0;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("width", ctx.labelWidth || ctx.labelWidth === 0 ? ctx.labelWidth : "", "px");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("required", ctx.required && !ctx.readonly);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", (tmp_2_0 = ctx.labelClass) !== null && tmp_2_0 !== undefined ? tmp_2_0 : "");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("for", ctx.inputId)("title", !ctx.labelWrap ? ctx.label : "");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.displayLabel);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("hide-border", ctx.hideBorder);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", (tmp_7_0 = ctx.contentClass) !== null && tmp_7_0 !== undefined ? tmp_7_0 : "");
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{flex-direction:column;border:0;padding-inline-start:2px;margin-block-end:16px;display:flex;padding-inline-end:2px}[_nghost-%COMP%]   label[_ngcontent-%COMP%], [_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%]{max-inline-size:none;flex-basis:100%}[_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%]{min-inline-size:100%}.readonly[_nghost-%COMP%]   .col-form-label[_ngcontent-%COMP%]{pointer-events:none}.form-item-content[_ngcontent-%COMP%]{display:flex;align-items:flex-end;flex-wrap:wrap;position:relative}.si-container-sm[_nghost-%COMP%], .si-container-sm   [_nghost-%COMP%], .si-container-md[_nghost-%COMP%], .si-container-md   [_nghost-%COMP%], .si-container-lg[_nghost-%COMP%], .si-container-lg   [_nghost-%COMP%], .si-container-xl[_nghost-%COMP%], .si-container-xl   [_nghost-%COMP%], .si-container-xxl[_nghost-%COMP%], .si-container-xxl   [_nghost-%COMP%]{flex-direction:row;box-shadow:inset 1px -1px 0 0 var(--element-ui-4),inset -1px 0 0 0 var(--element-ui-4)}.si-container-sm[_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-sm   [_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-sm[_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-sm   [_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-md[_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-md   [_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-md[_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-md   [_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-lg[_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-lg   [_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-lg[_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-lg   [_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-xl[_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-xl   [_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-xl[_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-xl   [_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-xxl[_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-xxl   [_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-xxl[_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-xxl   [_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%]{flex-grow:0;flex-shrink:0}.si-container-sm[_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-sm   [_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-md[_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-md   [_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-lg[_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-lg   [_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-xl[_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-xl   [_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-xxl[_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-xxl   [_nghost-%COMP%]   label[_ngcontent-%COMP%]{padding-inline:16px;margin-block-start:1px}.si-container-sm[_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%], .si-container-sm   [_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%], .si-container-md[_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%], .si-container-md   [_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%], .si-container-lg[_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%], .si-container-lg   [_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%], .si-container-xl[_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%], .si-container-xl   [_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%], .si-container-xxl[_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%], .si-container-xxl   [_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%]{flex:none;min-inline-size:0}.si-container-sm[_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%] + .form-item-content[_ngcontent-%COMP%], .si-container-sm   [_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%] + .form-item-content[_ngcontent-%COMP%], .si-container-md[_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%] + .form-item-content[_ngcontent-%COMP%], .si-container-md   [_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%] + .form-item-content[_ngcontent-%COMP%], .si-container-lg[_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%] + .form-item-content[_ngcontent-%COMP%], .si-container-lg   [_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%] + .form-item-content[_ngcontent-%COMP%], .si-container-xl[_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%] + .form-item-content[_ngcontent-%COMP%], .si-container-xl   [_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%] + .form-item-content[_ngcontent-%COMP%], .si-container-xxl[_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%] + .form-item-content[_ngcontent-%COMP%], .si-container-xxl   [_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%] + .form-item-content[_ngcontent-%COMP%]{flex:auto}.si-container-sm[_nghost-%COMP%]   label[style*=\"width: 0\"][_ngcontent-%COMP%] > .form-item-label-text[_ngcontent-%COMP%], .si-container-sm   [_nghost-%COMP%]   label[style*=\"width: 0\"][_ngcontent-%COMP%] > .form-item-label-text[_ngcontent-%COMP%], .si-container-md[_nghost-%COMP%]   label[style*=\"width: 0\"][_ngcontent-%COMP%] > .form-item-label-text[_ngcontent-%COMP%], .si-container-md   [_nghost-%COMP%]   label[style*=\"width: 0\"][_ngcontent-%COMP%] > .form-item-label-text[_ngcontent-%COMP%], .si-container-lg[_nghost-%COMP%]   label[style*=\"width: 0\"][_ngcontent-%COMP%] > .form-item-label-text[_ngcontent-%COMP%], .si-container-lg   [_nghost-%COMP%]   label[style*=\"width: 0\"][_ngcontent-%COMP%] > .form-item-label-text[_ngcontent-%COMP%], .si-container-xl[_nghost-%COMP%]   label[style*=\"width: 0\"][_ngcontent-%COMP%] > .form-item-label-text[_ngcontent-%COMP%], .si-container-xl   [_nghost-%COMP%]   label[style*=\"width: 0\"][_ngcontent-%COMP%] > .form-item-label-text[_ngcontent-%COMP%], .si-container-xxl[_nghost-%COMP%]   label[style*=\"width: 0\"][_ngcontent-%COMP%] > .form-item-label-text[_ngcontent-%COMP%], .si-container-xxl   [_nghost-%COMP%]   label[style*=\"width: 0\"][_ngcontent-%COMP%] > .form-item-label-text[_ngcontent-%COMP%]{display:none}.si-container-sm[_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]), .si-container-sm   [_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]), .si-container-md[_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]), .si-container-md   [_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]), .si-container-lg[_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]), .si-container-lg   [_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]), .si-container-xl[_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]), .si-container-xl   [_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]), .si-container-xxl[_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]), .si-container-xxl   [_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]){flex-basis:16.6666666667%;max-inline-size:16.6666666667%}.si-container-sm[_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]) + .form-item-content[_ngcontent-%COMP%], .si-container-sm   [_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]) + .form-item-content[_ngcontent-%COMP%], .si-container-md[_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]) + .form-item-content[_ngcontent-%COMP%], .si-container-md   [_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]) + .form-item-content[_ngcontent-%COMP%], .si-container-lg[_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]) + .form-item-content[_ngcontent-%COMP%], .si-container-lg   [_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]) + .form-item-content[_ngcontent-%COMP%], .si-container-xl[_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]) + .form-item-content[_ngcontent-%COMP%], .si-container-xl   [_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]) + .form-item-content[_ngcontent-%COMP%], .si-container-xxl[_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]) + .form-item-content[_ngcontent-%COMP%], .si-container-xxl   [_nghost-%COMP%]   label[_ngcontent-%COMP%]:not([style*=\"width:\"]) + .form-item-content[_ngcontent-%COMP%]{flex-basis:83.3333333333%;max-inline-size:83.3333333333%}.si-container-sm[_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-sm   [_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-md[_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-md   [_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-lg[_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-lg   [_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-xl[_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-xl   [_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-xxl[_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-xxl   [_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%]{border:0}.si-container-sm.hide-border[_nghost-%COMP%], .si-container-sm   .hide-border[_nghost-%COMP%], .si-container-md.hide-border[_nghost-%COMP%], .si-container-md   .hide-border[_nghost-%COMP%], .si-container-lg.hide-border[_nghost-%COMP%], .si-container-lg   .hide-border[_nghost-%COMP%], .si-container-xl.hide-border[_nghost-%COMP%], .si-container-xl   .hide-border[_nghost-%COMP%], .si-container-xxl.hide-border[_nghost-%COMP%], .si-container-xxl   .hide-border[_nghost-%COMP%]{box-shadow:none}.si-container-xs[_nghost-%COMP%], .si-container-xs   [_nghost-%COMP%]{flex-direction:column;border:0;padding-inline-start:2px}.si-container-xs[_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-xs   [_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-xs[_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-xs   [_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%]{max-inline-size:none;flex-basis:100%}.si-container-xs[_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%], .si-container-xs   [_nghost-%COMP%]   label[style*=\"width:\"][_ngcontent-%COMP%]{min-inline-size:100%}.si-container-xs[_nghost-%COMP%]   label[_ngcontent-%COMP%], .si-container-xs   [_nghost-%COMP%]   label[_ngcontent-%COMP%]{padding-block-start:0;padding-inline-start:.5rem;margin-block-end:4px}.si-container-xs[_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%], .si-container-xs   [_nghost-%COMP%]   .form-item-content[_ngcontent-%COMP%]{box-shadow:inset 1px -1px 0 0 var(--element-ui-4),inset -1px 0 0 0 var(--element-ui-4)}.si-container-xs[_nghost-%COMP%]   .form-item-content.hide-border[_ngcontent-%COMP%], .si-container-xs   [_nghost-%COMP%]   .form-item-content.hide-border[_ngcontent-%COMP%]{box-shadow:none}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiFormItemComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-form-item',
      template: "<label\n  class=\"col-form-label\"\n  [class.required]=\"required && !readonly\"\n  [ngClass]=\"labelClass ?? ''\"\n  [attr.for]=\"inputId\"\n  [attr.title]=\"!labelWrap ? label : ''\"\n  [style.width.px]=\"(labelWidth || labelWidth === 0) ? labelWidth : ''\">\n  <span\n    *ngIf=\"displayLabel\"\n    class=\"form-item-label-text\"\n    [class.text-break]=\"labelWrap\"\n    [class.text-truncate]=\"!labelWrap\"\n    >{{ label! | translate }}<ng-container *ngIf=\"displayLabelColon\">:</ng-container></span>\n</label>\n<div\n  #content\n  class=\"form-item-content\"\n  [class.hide-border]=\"hideBorder\"\n  [ngClass]=\"contentClass ?? ''\">\n  <ng-content></ng-content>\n</div>\n",
      styles: [":host{flex-direction:column;border:0;padding-inline-start:2px;margin-block-end:16px;display:flex;padding-inline-end:2px}:host label,:host .form-item-content{max-inline-size:none;flex-basis:100%}:host label[style*=\"width:\"]{min-inline-size:100%}:host.readonly .col-form-label{pointer-events:none}.form-item-content{display:flex;align-items:flex-end;flex-wrap:wrap;position:relative}:host-context(.si-container-sm),:host-context(.si-container-md),:host-context(.si-container-lg),:host-context(.si-container-xl),:host-context(.si-container-xxl){flex-direction:row;box-shadow:inset 1px -1px 0 0 var(--element-ui-4),inset -1px 0 0 0 var(--element-ui-4)}:host-context(.si-container-sm) label,:host-context(.si-container-sm) .form-item-content,:host-context(.si-container-md) label,:host-context(.si-container-md) .form-item-content,:host-context(.si-container-lg) label,:host-context(.si-container-lg) .form-item-content,:host-context(.si-container-xl) label,:host-context(.si-container-xl) .form-item-content,:host-context(.si-container-xxl) label,:host-context(.si-container-xxl) .form-item-content{flex-grow:0;flex-shrink:0}:host-context(.si-container-sm) label,:host-context(.si-container-md) label,:host-context(.si-container-lg) label,:host-context(.si-container-xl) label,:host-context(.si-container-xxl) label{padding-inline:16px;margin-block-start:1px}:host-context(.si-container-sm) label[style*=\"width:\"],:host-context(.si-container-md) label[style*=\"width:\"],:host-context(.si-container-lg) label[style*=\"width:\"],:host-context(.si-container-xl) label[style*=\"width:\"],:host-context(.si-container-xxl) label[style*=\"width:\"]{flex:none;min-inline-size:0}:host-context(.si-container-sm) label[style*=\"width:\"]+.form-item-content,:host-context(.si-container-md) label[style*=\"width:\"]+.form-item-content,:host-context(.si-container-lg) label[style*=\"width:\"]+.form-item-content,:host-context(.si-container-xl) label[style*=\"width:\"]+.form-item-content,:host-context(.si-container-xxl) label[style*=\"width:\"]+.form-item-content{flex:auto}:host-context(.si-container-sm) label[style*=\"width: 0\"]>.form-item-label-text,:host-context(.si-container-md) label[style*=\"width: 0\"]>.form-item-label-text,:host-context(.si-container-lg) label[style*=\"width: 0\"]>.form-item-label-text,:host-context(.si-container-xl) label[style*=\"width: 0\"]>.form-item-label-text,:host-context(.si-container-xxl) label[style*=\"width: 0\"]>.form-item-label-text{display:none}:host-context(.si-container-sm) label:not([style*=\"width:\"]),:host-context(.si-container-md) label:not([style*=\"width:\"]),:host-context(.si-container-lg) label:not([style*=\"width:\"]),:host-context(.si-container-xl) label:not([style*=\"width:\"]),:host-context(.si-container-xxl) label:not([style*=\"width:\"]){flex-basis:16.6666666667%;max-inline-size:16.6666666667%}:host-context(.si-container-sm) label:not([style*=\"width:\"])+.form-item-content,:host-context(.si-container-md) label:not([style*=\"width:\"])+.form-item-content,:host-context(.si-container-lg) label:not([style*=\"width:\"])+.form-item-content,:host-context(.si-container-xl) label:not([style*=\"width:\"])+.form-item-content,:host-context(.si-container-xxl) label:not([style*=\"width:\"])+.form-item-content{flex-basis:83.3333333333%;max-inline-size:83.3333333333%}:host-context(.si-container-sm) .form-item-content,:host-context(.si-container-md) .form-item-content,:host-context(.si-container-lg) .form-item-content,:host-context(.si-container-xl) .form-item-content,:host-context(.si-container-xxl) .form-item-content{border:0}:host-context(.si-container-sm).hide-border,:host-context(.si-container-md).hide-border,:host-context(.si-container-lg).hide-border,:host-context(.si-container-xl).hide-border,:host-context(.si-container-xxl).hide-border{box-shadow:none}:host-context(.si-container-xs){flex-direction:column;border:0;padding-inline-start:2px}:host-context(.si-container-xs) label,:host-context(.si-container-xs) .form-item-content{max-inline-size:none;flex-basis:100%}:host-context(.si-container-xs) label[style*=\"width:\"]{min-inline-size:100%}:host-context(.si-container-xs) label{padding-block-start:0;padding-inline-start:.5rem;margin-block-end:4px}:host-context(.si-container-xs) .form-item-content{box-shadow:inset 1px -1px 0 0 var(--element-ui-4),inset -1px 0 0 0 var(--element-ui-4)}:host-context(.si-container-xs) .form-item-content.hide-border{box-shadow:none}\n"]
    }]
  }], null, {
    inputId: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    label: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    labelClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    labelColon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    labelWidth: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    labelWrap: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    hideBorder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.hide-border']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    contentClass: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.readonly']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    required: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.required']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    content: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['content', {
        static: true
      }]
    }]
  });
})();
class SiFormModule {}
SiFormModule.ɵfac = function SiFormModule_Factory(t) {
  return new (t || SiFormModule)();
};
SiFormModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiFormModule
});
SiFormModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiPopoverModule, SiResizeObserverModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiFormModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [SiFormContainerComponent, SiFormItemComponent],
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiPopoverModule, SiResizeObserverModule, SiTranslateModule],
      exports: [SiFormContainerComponent, SiFormItemComponent]
    }]
  }], null, null);
})();

// Adds a window listener which can optionally be active, returns the unregister function.
// For some events (e.g. "touchmove") an explicit "passive: false" is required in order to
// be able to do $event.preventDefault(). Unfortunately there is no way in Angular to pass
// options to Rendrer2/EventManager event handling.
const listenGlobal = (eventName, handler, active) => {
  let opts = false;
  if (active !== undefined) {
    opts = {
      passive: !active
    };
  }
  window.addEventListener(eventName, handler, opts);
  return () => {
    window.removeEventListener(eventName, handler, opts);
  };
};
class SiSliderComponent {
  get isDisabled() {
    return this.disabled || this.min === this.max;
  }
  constructor(zone, changeDetectorRef) {
    this.zone = zone;
    this.changeDetectorRef = changeDetectorRef;
    /**
     * Minimum of slider range.
     */
    this.min = 0;
    /**
     * Maximum of slider range.
     */
    this.max = 100;
    /**
     * Label to describe minimum of slider range.
     */
    this.minLabel = '';
    /**
     * Label to describe maximum of slider range.
     */
    this.maxLabel = '';
    /**
     * Interval to step through the slider.
     */
    this.step = 1;
    /**
     * Disables option to change slider value.
     */
    this.disabled = false;
    /**
     * Text for aria-label of increment. Needed for a11y.
     */
    this.incrementLabel = 'increment';
    /**
     * Text for aria-label of decrement. Needed for a11y.
     */
    this.decrementLabel = 'decrement';
    /**
     * Text for aria-label of slider. Needed for a11y
     */
    this.sliderLabel = 'value';
    /**
     * Output callback that triggers when the slider value changes.
     */
    this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.indicatorPos = 50;
    this.isDragging = false;
    this.autoUpdate$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.timer)(400, 80); // 250
    this.rtl = false;
    this.unlistenDragEvents = [];
    this.onTouchedCallback = () => {};
    this.onChangeCallback = () => {};
  }
  incrementValue() {
    this.value = this.normalizeValue(this.value + this.step);
    this.valueChanged();
  }
  decrementValue() {
    this.value = this.normalizeValue(this.value - this.step);
    this.valueChanged();
  }
  roundToStepPrecision(value) {
    const factor = 1 / this.step;
    if (factor > 1) {
      return Math.round(value * factor) / factor;
    }
    return Math.round(value / this.step) * this.step;
  }
  normalizeValue(value) {
    return Math.min(Math.max(this.roundToStepPrecision(value), this.min), this.max);
  }
  updateIndicatorPosition() {
    const range = this.max - this.min;
    if (range === 0) {
      this.indicatorPos = 50;
      return;
    }
    const indicatorPos = (this.value - this.min) * 100 / range;
    this.indicatorPos = Math.max(Math.min(indicatorPos, 100), 0);
  }
  handleTouchMove(event) {
    if (event.cancelable) {
      event.preventDefault();
      event.stopPropagation();
    }
    this.handleDragMove(event.touches[0]);
  }
  handleMouseMove(event) {
    event.preventDefault();
    event.stopPropagation();
    this.handleDragMove(event);
  }
  handleDragMove(event) {
    const pointerPosX = event.clientX;
    const handleRect = this.handleRef.nativeElement.getBoundingClientRect();
    const handleWrapperWidth = this.handleRef.nativeElement.parentElement.clientWidth;
    const direction = this.rtl ? -1 : 1;
    const pointerPosDelta = Math.round(pointerPosX - (handleRect.x + handleRect.width / 2)) * direction;
    const valueDelta = pointerPosDelta / handleWrapperWidth * (this.max - this.min);
    const newValue = this.normalizeValue(this.value + valueDelta);
    if (pointerPosDelta > 0 && newValue > this.value || pointerPosDelta < 0 && newValue < this.value) {
      // the zone is required to work around a problem on native device where CD doesn't trigger
      this.zone.run(() => {
        this.changeDetectorRef.markForCheck();
        this.value = newValue;
        this.valueChanged();
      });
    }
    window.getSelection()?.removeAllRanges();
  }
  handleDragEnd() {
    this.isDragging = false;
    this.unlistenDragEvents.forEach(handler => handler());
    this.unlistenDragEvents.length = 0;
  }
  handleUndefinedValue() {
    this.value ?? (this.value = this.roundToStepPrecision((this.min + this.max) / 2));
  }
  ngOnChanges() {
    this.handleUndefinedValue();
    this.updateIndicatorPosition();
  }
  handlePointerDown(event) {
    event.stopPropagation();
  }
  autoUpdateKeydown(event) {
    const rtlCorrectedKey = correctKeyRTL(event.key);
    if (rtlCorrectedKey === 'ArrowLeft') {
      this.autoUpdateStart(event, false);
    } else if (rtlCorrectedKey === 'ArrowRight') {
      this.autoUpdateStart(event, true);
    }
  }
  autoUpdateStart(event, isIncrement) {
    event.preventDefault();
    const trigger = isIncrement ? () => this.incrementValue() : () => this.decrementValue();
    this.autoUpdateSubs?.unsubscribe();
    this.autoUpdateSubs = this.autoUpdate$.subscribe(trigger);
    trigger();
  }
  autoUpdateStop() {
    if (this.autoUpdateSubs) {
      this.autoUpdateSubs.unsubscribe();
      this.autoUpdateSubs = undefined;
    }
  }
  handleMouseDown(event) {
    this.unlistenDragEvents.push(listenGlobal('mousemove', moveEvent => this.handleMouseMove(moveEvent)));
    this.unlistenDragEvents.push(listenGlobal('mouseup', () => this.handleDragEnd()));
    this.isDragging = true;
    this.rtl = isRTL();
    this.handleMouseMove(event);
  }
  handleTouchStart(event) {
    if (event.touches.length !== 1) {
      return;
    }
    this.unlistenDragEvents.push(listenGlobal('touchmove', e => this.handleTouchMove(e), true));
    this.unlistenDragEvents.push(listenGlobal('touchend', () => this.handleDragEnd()));
    this.isDragging = true;
    this.rtl = isRTL();
    this.handleTouchMove(event);
  }
  valueChanged() {
    this.updateIndicatorPosition();
    this.onTouchedCallback();
    this.onChangeCallback(this.value);
    this.valueChange.emit(this.value);
  }
  writeValue(val) {
    this.value = val;
    this.handleUndefinedValue();
    this.updateIndicatorPosition();
  }
  registerOnChange(fn) {
    this.onChangeCallback = fn;
  }
  registerOnTouched(fn) {
    this.onTouchedCallback = fn;
  }
  setDisabledState(isDisabled) {
    this.disabled = isDisabled;
  }
}
SiSliderComponent.ɵfac = function SiSliderComponent_Factory(t) {
  return new (t || SiSliderComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiSliderComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiSliderComponent,
  selectors: [["si-slider"]],
  viewQuery: function SiSliderComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c56, 7);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.handleRef = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function SiSliderComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("pointerdown", function SiSliderComponent_pointerdown_HostBindingHandler($event) {
        return ctx.handlePointerDown($event);
      })("mousedown", function SiSliderComponent_mousedown_HostBindingHandler($event) {
        return ctx.handlePointerDown($event);
      })("touchstart", function SiSliderComponent_touchstart_HostBindingHandler($event) {
        return ctx.handlePointerDown($event);
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx.isDisabled);
    }
  },
  inputs: {
    value: "value",
    min: "min",
    max: "max",
    minLabel: "minLabel",
    maxLabel: "maxLabel",
    step: "step",
    disabled: "disabled",
    thumbIcon: "thumbIcon",
    incrementLabel: "incrementLabel",
    decrementLabel: "decrementLabel",
    sliderLabel: "sliderLabel"
  },
  outputs: {
    valueChange: "valueChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
    // eslint-disable-next-line @angular-eslint/no-forward-ref
    useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => SiSliderComponent),
    multi: true
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  ngContentSelectors: _c1,
  decls: 19,
  vars: 21,
  consts: [[1, "slider-container"], ["type", "button", 1, "btn", "btn-sm", "btn-circle", "btn-secondary", "element-minus", "decrement-button", 3, "disabled", "mousedown", "touchstart", "keydown.enter", "touchend", "mouseup", "keyup.enter", "mouseleave"], [1, "slider-wrapper"], [1, "value-indicator-wrapper"], [1, "value-indicator"], [1, "slider"], [1, "track"], [1, "thumb-handle-wrapper", 3, "mousedown", "touchstart"], [1, "thumb-handle"], ["handle", ""], ["tabindex", "0", 1, "thumb", 3, "keydown", "keyup"], [3, "ngClass", 4, "ngIf"], ["class", "hover-circle", 4, "ngIf"], ["type", "button", 1, "btn", "btn-sm", "btn-circle", "btn-secondary", "element-plus", "increment-button", 3, "disabled", "mousedown", "touchstart", "keydown.enter", "touchend", "mouseup", "keyup.enter", "mouseleave"], ["class", "range-indicator-wrapper", 4, "ngIf"], [3, "ngClass"], [1, "hover-circle"], [1, "range-indicator-wrapper"], [1, "range-indicator"], [1, "ms-auto"]],
  template: function SiSliderComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "button", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mousedown", function SiSliderComponent_Template_button_mousedown_1_listener($event) {
        return ctx.autoUpdateStart($event, false);
      })("touchstart", function SiSliderComponent_Template_button_touchstart_1_listener($event) {
        return ctx.autoUpdateStart($event, false);
      })("keydown.enter", function SiSliderComponent_Template_button_keydown_enter_1_listener($event) {
        return ctx.autoUpdateStart($event, false);
      })("touchend", function SiSliderComponent_Template_button_touchend_1_listener() {
        return ctx.autoUpdateStop();
      })("mouseup", function SiSliderComponent_Template_button_mouseup_1_listener() {
        return ctx.autoUpdateStop();
      })("keyup.enter", function SiSliderComponent_Template_button_keyup_enter_1_listener() {
        return ctx.autoUpdateStop();
      })("mouseleave", function SiSliderComponent_Template_button_mouseleave_1_listener() {
        return ctx.autoUpdateStop();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 2)(4, "div", 3)(5, "span", 4)(6, "span");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "div", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](9, "div", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "div", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mousedown", function SiSliderComponent_Template_div_mousedown_10_listener($event) {
        return ctx.handleMouseDown($event);
      })("touchstart", function SiSliderComponent_Template_div_touchstart_10_listener($event) {
        return ctx.handleTouchStart($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](11, "div", 8, 9)(13, "div", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown", function SiSliderComponent_Template_div_keydown_13_listener($event) {
        return ctx.autoUpdateKeydown($event);
      })("keyup", function SiSliderComponent_Template_div_keyup_13_listener() {
        return ctx.autoUpdateStop();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](14, SiSliderComponent_i_14_Template, 1, 1, "i", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](15, SiSliderComponent_div_15_Template, 1, 0, "div", 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()()()()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "button", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mousedown", function SiSliderComponent_Template_button_mousedown_16_listener($event) {
        return ctx.autoUpdateStart($event, true);
      })("touchstart", function SiSliderComponent_Template_button_touchstart_16_listener($event) {
        return ctx.autoUpdateStart($event, true);
      })("keydown.enter", function SiSliderComponent_Template_button_keydown_enter_16_listener($event) {
        return ctx.autoUpdateStart($event, true);
      })("touchend", function SiSliderComponent_Template_button_touchend_16_listener() {
        return ctx.autoUpdateStop();
      })("mouseup", function SiSliderComponent_Template_button_mouseup_16_listener() {
        return ctx.autoUpdateStop();
      })("keyup.enter", function SiSliderComponent_Template_button_keyup_enter_16_listener() {
        return ctx.autoUpdateStop();
      })("mouseleave", function SiSliderComponent_Template_button_mouseleave_16_listener() {
        return ctx.autoUpdateStop();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](17, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](18, SiSliderComponent_div_18_Template, 6, 2, "div", 14);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx.isDisabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 17, ctx.decrementLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("inset-inline-start", ctx.indicatorPos, "%");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dragging", ctx.isDragging);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dragging", ctx.isDragging);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("inset-inline-start", ctx.indicatorPos, "%");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dragging", ctx.isDragging);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.thumbIcon);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.thumbIcon);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx.isDisabled);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](17, 19, ctx.incrementLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.minLabel && ctx.maxLabel);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column}.slider-container[_ngcontent-%COMP%]{display:flex;align-items:flex-end}.decrement-button[_ngcontent-%COMP%]{margin-inline-end:4px}.increment-button[_ngcontent-%COMP%]{margin-inline-start:4px}.slider-wrapper[_ngcontent-%COMP%]{position:relative;flex:1 1 0;min-inline-size:0;display:flex;flex-direction:column}.value-indicator-wrapper[_ngcontent-%COMP%]{position:relative;margin-inline:12px;text-align:start}.value-indicator[_ngcontent-%COMP%]{position:relative;display:inline-block;white-space:nowrap;color:var(--element-text-secondary)}.value-indicator[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{display:inline-block;margin-inline-start:-50%}.range-indicator-wrapper[_ngcontent-%COMP%]{margin-block:0;margin-inline:36px}.range-indicator-wrapper[_ngcontent-%COMP%]   .range-indicator[_ngcontent-%COMP%]{display:inline-flex;white-space:nowrap;inline-size:100%;color:var(--element-text-secondary)}.range-indicator-wrapper[_ngcontent-%COMP%]   .range-indicator[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{display:inline-block}.slider[_ngcontent-%COMP%]{position:relative;inline-size:100%;block-size:32px;cursor:pointer}.slider.dragging[_ngcontent-%COMP%]{cursor:grabbing}.disabled[_nghost-%COMP%]   .slider[_ngcontent-%COMP%]{cursor:default}.slider[_ngcontent-%COMP%]   .track[_ngcontent-%COMP%]{position:absolute;inset-block-start:50%;border-radius:var(--element-radius-1);margin-block-start:-2px;block-size:4px;inline-size:100%;background:var(--element-ui-4);pointer-events:none}.slider[_ngcontent-%COMP%]   .thumb-handle-wrapper[_ngcontent-%COMP%]{position:absolute;inset-block:0;inset-inline:12px}.disabled[_nghost-%COMP%]   .slider[_ngcontent-%COMP%]   .thumb-handle-wrapper[_ngcontent-%COMP%]{pointer-events:none}.slider[_ngcontent-%COMP%]   .thumb-handle[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;position:absolute;inset-block-start:50%;margin-block-start:-20px;margin-inline:-20px;inline-size:40px;block-size:40px}.disabled[_nghost-%COMP%]   .slider[_ngcontent-%COMP%]   .thumb-handle[_ngcontent-%COMP%]{pointer-events:none}.slider[_ngcontent-%COMP%]   .thumb[_ngcontent-%COMP%]{--thumb-state-color: var(--element-ui-0);display:flex;align-items:center;justify-content:center;block-size:24px;min-block-size:24px;inline-size:24px;min-inline-size:24px;border-radius:50%;border:1px solid var(--thumb-state-color);box-shadow:0 0 8px var(--element-box-shadow-color-1),0 8px 8px var(--element-box-shadow-color-2);background:var(--element-base-1)}.slider[_ngcontent-%COMP%]   .thumb[_ngcontent-%COMP%]:hover:not(.dragging){--thumb-state-color: var(--element-ui-0-hover);background:var(--element-action-secondary-hover)}.slider[_ngcontent-%COMP%]   .thumb[_ngcontent-%COMP%]:focus{box-shadow:0 0 0 var(--element-button-focus-overlay-width) var(--element-button-focus-overlay-color),0 0 0 calc(var(--element-button-focus-width) + var(--element-button-focus-overlay-width)) var(--element-focus-default)}.disabled[_nghost-%COMP%]   .slider[_ngcontent-%COMP%]   .thumb[_ngcontent-%COMP%]{--thumb-state-color: var(--element-ui-3);box-shadow:none}.slider[_ngcontent-%COMP%]   .thumb[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{font-size:1.5rem;color:var(--thumb-state-color)}.slider[_ngcontent-%COMP%]   .thumb[_ngcontent-%COMP%]:hover   .hover-circle[_ngcontent-%COMP%], .slider[_ngcontent-%COMP%]   .thumb[_ngcontent-%COMP%]:focus   .hover-circle[_ngcontent-%COMP%], .slider[_ngcontent-%COMP%]   .thumb.dragging[_ngcontent-%COMP%]   .hover-circle[_ngcontent-%COMP%]{display:block}.slider[_ngcontent-%COMP%]   .hover-circle[_ngcontent-%COMP%]{display:none;block-size:12px;inline-size:12px;border-radius:50%;background:var(--thumb-state-color)}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSliderComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-slider',
      providers: [{
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
        // eslint-disable-next-line @angular-eslint/no-forward-ref
        useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => SiSliderComponent),
        multi: true
      }],
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div class=\"slider-container\">\n  <button\n    [disabled]=\"isDisabled\"\n    type=\"button\"\n    class=\"btn btn-sm btn-circle btn-secondary element-minus decrement-button\"\n    (mousedown)=\"autoUpdateStart($event, false)\"\n    (touchstart)=\"autoUpdateStart($event, false)\"\n    (keydown.enter)=\"autoUpdateStart($event, false)\"\n    (touchend)=\"autoUpdateStop()\"\n    (mouseup)=\"autoUpdateStop()\"\n    (keyup.enter)=\"autoUpdateStop()\"\n    (mouseleave)=\"autoUpdateStop()\"\n    [attr.aria-label]=\"decrementLabel | translate\"\n  ></button>\n\n  <div class=\"slider-wrapper\">\n    <div class=\"value-indicator-wrapper\">\n      <span class=\"value-indicator\" [style.inset-inline-start.%]=\"indicatorPos\">\n        <span>\n          <ng-content></ng-content>\n        </span>\n      </span>\n    </div>\n\n    <div class=\"slider\" [class.dragging]=\"isDragging\">\n      <div class=\"track\"></div>\n      <div\n        class=\"thumb-handle-wrapper\"\n        [class.dragging]=\"isDragging\"\n        (mousedown)=\"handleMouseDown($event)\"\n        (touchstart)=\"handleTouchStart($event)\"\n      >\n        <div\n          #handle\n          class=\"thumb-handle\"\n          [style.inset-inline-start.%]=\"indicatorPos\"\n        >\n          <div\n            class=\"thumb\"\n            [class.dragging]=\"isDragging\"\n            tabindex=\"0\"\n            (keydown)=\"autoUpdateKeydown($event)\"\n            (keyup)=\"autoUpdateStop()\"\n          >\n            <i *ngIf=\"thumbIcon\" [ngClass]=\"thumbIcon\"></i>\n            <div *ngIf=\"!thumbIcon\" class=\"hover-circle\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <button\n    [disabled]=\"isDisabled\"\n    type=\"button\"\n    class=\"btn btn-sm btn-circle btn-secondary element-plus increment-button\"\n    (mousedown)=\"autoUpdateStart($event, true)\"\n    (touchstart)=\"autoUpdateStart($event, true)\"\n    (keydown.enter)=\"autoUpdateStart($event, true)\"\n    (touchend)=\"autoUpdateStop()\"\n    (mouseup)=\"autoUpdateStop()\"\n    (keyup.enter)=\"autoUpdateStop()\"\n    (mouseleave)=\"autoUpdateStop()\"\n    [attr.aria-label]=\"incrementLabel | translate\"\n  ></button>\n</div>\n\n<div *ngIf=\"minLabel && maxLabel\" class=\"range-indicator-wrapper\">\n  <div class=\"range-indicator\">\n    <span>{{ minLabel }}</span>\n    <span class=\"ms-auto\">{{ maxLabel }}</span>\n  </div>\n</div>\n",
      styles: [":host{display:flex;flex-direction:column}.slider-container{display:flex;align-items:flex-end}.decrement-button{margin-inline-end:4px}.increment-button{margin-inline-start:4px}.slider-wrapper{position:relative;flex:1 1 0;min-inline-size:0;display:flex;flex-direction:column}.value-indicator-wrapper{position:relative;margin-inline:12px;text-align:start}.value-indicator{position:relative;display:inline-block;white-space:nowrap;color:var(--element-text-secondary)}.value-indicator>span{display:inline-block;margin-inline-start:-50%}.range-indicator-wrapper{margin-block:0;margin-inline:36px}.range-indicator-wrapper .range-indicator{display:inline-flex;white-space:nowrap;inline-size:100%;color:var(--element-text-secondary)}.range-indicator-wrapper .range-indicator>span{display:inline-block}.slider{position:relative;inline-size:100%;block-size:32px;cursor:pointer}.slider.dragging{cursor:grabbing}:host.disabled .slider{cursor:default}.slider .track{position:absolute;inset-block-start:50%;border-radius:var(--element-radius-1);margin-block-start:-2px;block-size:4px;inline-size:100%;background:var(--element-ui-4);pointer-events:none}.slider .thumb-handle-wrapper{position:absolute;inset-block:0;inset-inline:12px}:host.disabled .slider .thumb-handle-wrapper{pointer-events:none}.slider .thumb-handle{display:flex;align-items:center;justify-content:center;position:absolute;inset-block-start:50%;margin-block-start:-20px;margin-inline:-20px;inline-size:40px;block-size:40px}:host.disabled .slider .thumb-handle{pointer-events:none}.slider .thumb{--thumb-state-color: var(--element-ui-0);display:flex;align-items:center;justify-content:center;block-size:24px;min-block-size:24px;inline-size:24px;min-inline-size:24px;border-radius:50%;border:1px solid var(--thumb-state-color);box-shadow:0 0 8px var(--element-box-shadow-color-1),0 8px 8px var(--element-box-shadow-color-2);background:var(--element-base-1)}.slider .thumb:hover:not(.dragging){--thumb-state-color: var(--element-ui-0-hover);background:var(--element-action-secondary-hover)}.slider .thumb:focus{box-shadow:0 0 0 var(--element-button-focus-overlay-width) var(--element-button-focus-overlay-color),0 0 0 calc(var(--element-button-focus-width) + var(--element-button-focus-overlay-width)) var(--element-focus-default)}:host.disabled .slider .thumb{--thumb-state-color: var(--element-ui-3);box-shadow:none}.slider .thumb i{font-size:1.5rem;color:var(--thumb-state-color)}.slider .thumb:hover .hover-circle,.slider .thumb:focus .hover-circle,.slider .thumb.dragging .hover-circle{display:block}.slider .hover-circle{display:none;block-size:12px;inline-size:12px;border-radius:50%;background:var(--thumb-state-color)}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    handleRef: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['handle', {
        static: true
      }]
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    min: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    max: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    minLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    maxLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    step: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    thumbIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    incrementLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    decrementLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    sliderLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    valueChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    isDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.disabled']
    }],
    handlePointerDown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['pointerdown', ['$event']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['mousedown', ['$event']]
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['touchstart', ['$event']]
    }]
  });
})();
class SiSliderModule {}
SiSliderModule.ɵfac = function SiSliderModule_Factory(t) {
  return new (t || SiSliderModule)();
};
SiSliderModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiSliderModule
});
SiSliderModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSliderModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule, SiTranslateModule],
      declarations: [SiSliderComponent],
      exports: [SiSliderComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

class SiSortBarComponent {
  constructor() {
    /**
     * Custom sort title.
     */
    this.sortTitle = 'Sort by';
    /**
     * Output callback event will provide you with a HttpParams object if active
     * sortCriteria change.
     */
    this.sortChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.activeSortCriteria = '';
    this.sortIsDescending = false;
    this.trackByIndex = index => index;
  }
  ngOnInit() {
    if (this.defaultSortCriteria) {
      this.setActive(this.defaultSortCriteria);
    }
  }
  setActive(key) {
    if (this.activeSortCriteria === key) {
      this.sortIsDescending = !this.sortIsDescending;
    }
    this.activeSortCriteria = key;
    const searchParams = new _angular_common_http__WEBPACK_IMPORTED_MODULE_33__.HttpParams().set('sort', this.activeSortCriteria).set('order', this.sortIsDescending ? 'desc' : 'asc');
    this.sortChange.emit(searchParams);
  }
}
SiSortBarComponent.ɵfac = function SiSortBarComponent_Factory(t) {
  return new (t || SiSortBarComponent)();
};
SiSortBarComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiSortBarComponent,
  selectors: [["si-sort-bar"]],
  inputs: {
    sortTitle: "sortTitle",
    sortCriteria: "sortCriteria",
    defaultSortCriteria: "defaultSortCriteria"
  },
  outputs: {
    sortChange: "sortChange"
  },
  decls: 5,
  vars: 5,
  consts: [[1, "list-header", "list-header-sorting"], [1, "list-title"], ["class", "sort-item", "tabindex", "0", 3, "click", "keydown.enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["tabindex", "0", 1, "sort-item", 3, "click", "keydown.enter"], [1, "icon"]],
  template: function SiSortBarComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiSortBarComponent_div_4_Template, 5, 7, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 3, ctx.sortTitle), ":");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.sortCriteria)("ngForTrackBy", ctx.trackByIndex);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, SiTranslatePipe],
  styles: [".list-title[_ngcontent-%COMP%]{font-weight:500;margin-inline-end:5px}.list-header-sorting[_ngcontent-%COMP%]{background:var(--element-ui-4);padding:6px 12px;display:flex;align-items:center}.sort-item[_ngcontent-%COMP%]{padding-block:0;padding-inline:5px;cursor:pointer;display:flex;align-items:center}"]
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiSortBarComponent.prototype, "sortCriteria", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSortBarComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-sort-bar',
      template: "<div class=\"list-header list-header-sorting\">\n  <div class=\"list-title\">{{ sortTitle | translate }}:</div>\n  <div\n    class=\"sort-item\"\n    *ngFor=\"let item of sortCriteria; trackBy: trackByIndex\"\n    (click)=\"setActive(item.key)\"\n    (keydown.enter)=\"setActive(item.key)\"\n    tabindex=\"0\"\n  >\n    <span>{{ item.name | translate }}</span>\n    <span\n      class=\"icon\"\n      [class.element-sort-up]=\"item.key === activeSortCriteria && !sortIsDescending\"\n      [class.element-sort-down]=\"item.key === activeSortCriteria && sortIsDescending\"\n    ></span>\n  </div>\n</div>\n",
      styles: [".list-title{font-weight:500;margin-inline-end:5px}.list-header-sorting{background:var(--element-ui-4);padding:6px 12px;display:flex;align-items:center}.sort-item{padding-block:0;padding-inline:5px;cursor:pointer;display:flex;align-items:center}\n"]
    }]
  }], null, {
    sortTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    sortCriteria: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    defaultSortCriteria: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    sortChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiSortBarModule {}
SiSortBarModule.ɵfac = function SiSortBarModule_Factory(t) {
  return new (t || SiSortBarModule)();
};
SiSortBarModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiSortBarModule
});
SiSortBarModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSortBarModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule],
      declarations: [SiSortBarComponent],
      exports: [SiSortBarComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

class SiStatusBarItemComponent {
  constructor() {
    this.blink = false;
    this.valueOnly = false;
    this.clickable = false;
    this.contrastFix = false;
    this.background = '';
  }
  ngOnChanges(changes) {
    if (changes.color || changes.blink) {
      setTimeout(() => this.contrastFix = !!this.color && this.blink && this.calculateContrastFix());
    }
    if (changes.status) {
      this.statusIcon = this.status ? STATUS_ICON[this.status] : undefined;
    }
    if (changes.status || changes.blink) {
      this.background = this.blink && this.status !== 'success' ? this.statusIcon?.background ?? '' : '';
    }
  }
  calculateContrastFix() {
    // see https://www.w3.org/TR/AERT/#color-contrast
    const rgb = getComputedStyle(this.bg.nativeElement).backgroundColor?.match(/\d+/g)?.map(v => +v);
    return !!rgb && Math.round((rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000) <= 128;
  }
}
SiStatusBarItemComponent.ɵfac = function SiStatusBarItemComponent_Factory(t) {
  return new (t || SiStatusBarItemComponent)();
};
SiStatusBarItemComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiStatusBarItemComponent,
  selectors: [["si-status-bar-item"]],
  viewQuery: function SiStatusBarItemComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c57, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.bg = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function SiStatusBarItemComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("clickable", ctx.clickable);
    }
  },
  inputs: {
    status: "status",
    statusAriaLabel: "statusAriaLabel",
    value: "value",
    heading: "heading",
    color: "color",
    blink: "blink",
    valueOnly: "valueOnly",
    clickable: "clickable"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 8,
  vars: 19,
  consts: [[1, "status-item", "rounded-2", "focus-inside", "d-flex", "align-items-center"], ["role", "none", 1, "bg", "focus-sub-inside", 3, "ngClass"], ["bg", ""], ["class", "color-bar me-3 mt-1 mb-1", 3, "background-color", 4, "ngIf"], ["class", "indicator me-4", "alt", "", 3, "icon", "color", "stackedIcon", "stackedColor", 4, "ngIf"], [1, "overflow-hidden"], ["class", "item-value fw-bold", 4, "ngIf"], ["class", "item-title text-truncate", 4, "ngIf"], [1, "color-bar", "me-3", "mt-1", "mb-1"], ["alt", "", 1, "indicator", "me-4", 3, "icon", "color", "stackedIcon", "stackedColor"], [1, "item-value", "fw-bold"], [1, "item-title", "text-truncate"]],
  template: function SiStatusBarItemComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "div", 1, 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiStatusBarItemComponent_div_3_Template, 1, 2, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiStatusBarItemComponent_si_icon_4_Template, 1, 4, "si-icon", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiStatusBarItemComponent_div_6_Template, 3, 3, "div", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiStatusBarItemComponent_div_7_Template, 3, 3, "div", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-muted", !ctx.value)("blink", ctx.blink && ctx.value);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx.clickable ? "0" : "")("aria-disabled", !ctx.value);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("background-color", ctx.blink && ctx.color ? ctx.color : null);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("custom-color", ctx.color)("contrast-fix", ctx.contrastFix)("d-none", !ctx.value);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx.background);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.statusIcon);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.statusIcon);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.value !== undefined);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.valueOnly);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiIconComponent, SiTranslatePipe],
  styles: ["@charset \"UTF-8\";[_nghost-%COMP%]{position:relative;padding-inline-end:4px;block-size:48px}.compact[_nghost-%COMP%]{block-size:36px}.compact[_nghost-%COMP%]   .status-item[_ngcontent-%COMP%]{padding-block:4px}.compact[_nghost-%COMP%]   .item-title[_ngcontent-%COMP%]{margin-block-start:-2px}.clickable[_nghost-%COMP%]:hover   .status-item[_ngcontent-%COMP%]{background-color:var(--element-base-0)!important}.clickable[_nghost-%COMP%]:hover   .bg[_ngcontent-%COMP%]{display:none!important}[_nghost-%COMP%]     .indicator-disabled{color:var(--element-ui-3)}.status-item[_ngcontent-%COMP%]{position:relative;padding-block:8px;padding-inline:4px 8px;min-inline-size:100px;color:var(--element-text-primary);white-space:nowrap}.status-item[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{pointer-events:none}.bg[_ngcontent-%COMP%]{position:absolute;inset:0;border-radius:var(--element-radius-2);pointer-events:none}.bg.custom-color[_ngcontent-%COMP%]{opacity:.5}.bg.custom-color.contrast-fix[_ngcontent-%COMP%]{opacity:.25}.item-title[_ngcontent-%COMP%], .item-value[_ngcontent-%COMP%]{position:relative}.item-title[_ngcontent-%COMP%]:before, .item-value[_ngcontent-%COMP%]:before{content:\"\\200b\"}.color-bar[_ngcontent-%COMP%]{align-self:stretch;min-inline-size:4px;border-radius:2px;background:var(--element-ui-4)}.item-title[_ngcontent-%COMP%]{margin-block-start:2px;line-height:1rem}.item-value[_ngcontent-%COMP%]{line-height:1}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiStatusBarItemComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-status-bar-item',
      template: "<div\n  class=\"status-item rounded-2 focus-inside d-flex align-items-center\"\n  [class.text-muted]=\"!value\"\n  [class.blink]=\"blink && value\"\n  [attr.tabindex]=\"clickable ? '0' : ''\"\n  [attr.aria-disabled]=\"!value\"\n>\n  <div #bg\n    role=\"none\"\n    class=\"bg focus-sub-inside\"\n    [class.custom-color]=\"color\"\n    [class.contrast-fix]=\"contrastFix\"\n    [ngClass]=\"background\"\n    [class.d-none]=\"!value\"\n    [style.background-color]=\"blink && color ? color : null\"\n  ></div>\n  <div\n    *ngIf=\"!statusIcon\"\n    class=\"color-bar me-3 mt-1 mb-1\"\n    [style.background-color]=\"value && color ? color : null\"\n  ></div>\n  <si-icon\n    *ngIf=\"statusIcon\"\n    class=\"indicator me-4\"\n    [icon]=\"statusIcon.icon\"\n    [color]=\"value ? statusIcon.color : 'indicator-disabled'\"\n    [stackedIcon]=\"statusIcon.stacked\"\n    [stackedColor]=\"value ? statusIcon.stackedColor : 'text-inverse'\"\n    alt=\"\"\n  ></si-icon>\n  <div class=\"overflow-hidden\">\n    <div *ngIf=\"value !== undefined\" class=\"item-value fw-bold\">{{ value.toString() | translate }}</div>\n    <div *ngIf=\"!valueOnly\" class=\"item-title text-truncate\">{{ heading | translate }}</div>\n  </div>\n</div>\n",
      styles: ["@charset \"UTF-8\";:host{position:relative;padding-inline-end:4px;block-size:48px}:host.compact{block-size:36px}:host.compact .status-item{padding-block:4px}:host.compact .item-title{margin-block-start:-2px}:host.clickable:hover .status-item{background-color:var(--element-base-0)!important}:host.clickable:hover .bg{display:none!important}:host ::ng-deep .indicator-disabled{color:var(--element-ui-3)}.status-item{position:relative;padding-block:8px;padding-inline:4px 8px;min-inline-size:100px;color:var(--element-text-primary);white-space:nowrap}.status-item>*{pointer-events:none}.bg{position:absolute;inset:0;border-radius:var(--element-radius-2);pointer-events:none}.bg.custom-color{opacity:.5}.bg.custom-color.contrast-fix{opacity:.25}.item-title,.item-value{position:relative}.item-title:before,.item-value:before{content:\"\\200b\"}.color-bar{align-self:stretch;min-inline-size:4px;border-radius:2px;background:var(--element-ui-4)}.item-title{margin-block-start:2px;line-height:1rem}.item-value{line-height:1}\n"]
    }]
  }], null, {
    status: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    statusAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    color: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    blink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    valueOnly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    clickable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.clickable']
    }],
    bg: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['bg']
    }]
  });
})();

// this is a function because Angular compiler exports arrows for no good reason
// eslint-disable-next-line prefer-arrow/prefer-arrow-functions
function itemSortFunction(a, b) {
  return a.status && b.status ? STATUS_ICON[a.status].severity - STATUS_ICON[b.status].severity : 0;
}
let idCounter = 1;
/**
 * The status bar is the main component within an application to inform users at all times
 * about important status information.
 */
class SiStatusBarComponent {
  constructor(element, blinkService, translateService, resizeObserver, cdRef, measureService) {
    this.element = element;
    this.blinkService = blinkService;
    this.translateService = translateService;
    this.resizeObserver = resizeObserver;
    this.cdRef = cdRef;
    this.measureService = measureService;
    /**
     * When true, items with a value have a blinking background
     */
    this.blink = false;
    /**
     * Text/translation key on mute button for screen reader
     */
    this.muteButtonText = 'Mute/unmute';
    /**
     * Text/translation key for "All OK" status in mobile
     */
    this.allOkText = 'All OK';
    /**
     * compact mode
     */
    this.compact = false;
    /**
     * Text for the navbar expand button. Required for a11y
     */
    this.expandButtonText = 'expand';
    /**
     * Text for the navbar collapse button. Required for a11y
     */
    this.collapseButtonText = 'collapse';
    /**
     * Emitted when the mute toggle button is clicked
     */
    this.muteToggle = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.responsiveItems = [];
    this.responsiveMode = 0;
    this.expanded = 0;
    this.placeholderHeight = 0;
    this.statusId = `__si-status-bar-${idCounter++}`;
    this.resizeSubs = this.resizeObserver.observe(this.element.nativeElement, 100, true).subscribe(() => this.resizeHandler());
    this.resizeSubs.add(translateService.translationChange.subscribe(() => this.resizeHandler()));
  }
  ngOnChanges(changes) {
    if (this.blinkService && changes.blink) {
      this.blinkSubs?.unsubscribe();
      if (this.blink) {
        const pulse = this.blinkPulse ?? this.blinkService.pulse$;
        this.blinkSubs = pulse.subscribe(onOff => {
          this.blinkOnOff = onOff;
          this.cdRef.markForCheck();
        });
      }
    }
    this.resizeHandler();
  }
  ngOnDestroy() {
    this.resizeSubs.unsubscribe();
    this.blinkSubs?.unsubscribe();
  }
  ngDoCheck() {
    if (this.responsiveMode) {
      this.calcResponsiveItems();
    }
  }
  onItemClicked(item) {
    if (item.action) {
      item.action(item);
    }
  }
  toggleExpand() {
    clearTimeout(this.timer);
    if (!this.expanded) {
      this.expanded = 2;
      this.placeholderHeight = this.theBar.nativeElement.offsetHeight;
      this.contentHeight = 0;
      this.cdRef.markForCheck();
      this.timer = window.setTimeout(() => {
        this.contentHeight = this.content.nativeElement.scrollHeight;
        this.cdRef.markForCheck();
        window.setTimeout(() => {
          this.contentHeight = undefined;
          this.cdRef.markForCheck();
        }, 500);
      }, 10);
    } else {
      this.contentHeight = this.content.nativeElement.scrollHeight;
      this.expanded = 1;
      this.cdRef.markForCheck();
      window.setTimeout(() => {
        this.contentHeight = 0;
        this.cdRef.markForCheck();
        window.setTimeout(() => {
          this.placeholderHeight = 0;
          this.expanded = 0;
          this.cdRef.markForCheck();
        }, 500);
      }, 10);
    }
  }
  trackByIndex(index) {
    return index;
  }
  resizeHandler() {
    const size = this.element.nativeElement.clientWidth;
    const muteWidth = this.muteButton !== undefined ? SiStatusBarComponent.muteButtonWidth : 0;
    const customWidth = this.custom.nativeElement.scrollWidth ?? 0;
    const minWidth = this.items.length * (SiStatusBarComponent.itemMinWidth + SiStatusBarComponent.itemSpacing) + SiStatusBarComponent.itemSpacing + muteWidth + customWidth;
    if (size < minWidth) {
      this.setResponsiveMode(true);
    } else if (this.items.length) {
      this.calculateRequiredWidth(muteWidth, customWidth);
    }
  }
  setResponsiveMode(responsive) {
    if (responsive) {
      const size = this.element.nativeElement.clientWidth;
      this.responsiveMode = Math.max(Math.floor(size / SiStatusBarComponent.itemMaxWidth) - 1, 2);
    } else {
      this.responsiveMode = 0;
    }
    if (this.responsiveMode) {
      this.contentHeight = this.expanded ? this.content.nativeElement.scrollHeight : 0;
    } else {
      this.expanded = 0;
      this.placeholderHeight = 0;
      this.contentHeight = undefined;
    }
    this.cdRef.markForCheck();
  }
  calcResponsiveItems() {
    const activeItems = this.items.filter(item => item.value).sort(itemSortFunction);
    if (activeItems.length > this.responsiveMode) {
      activeItems[this.responsiveMode - 1] = {
        status: activeItems[this.responsiveMode - 1].status,
        color: activeItems[this.responsiveMode - 1].color,
        value: activeItems.length - this.responsiveMode + 1 + '+',
        title: '',
        action: () => this.toggleExpand(),
        isSpecial: true
      };
      activeItems.length = this.responsiveMode;
    } else if (!activeItems.length) {
      activeItems.push({
        status: 'success',
        title: '',
        value: this.allOkText,
        isSpecial: true
      });
    }
    if (activeItems.length === this.responsiveMode) {
      activeItems[activeItems.length - 1].mutePadding = true;
    }
    this.responsiveItems = activeItems;
    this.cdRef.markForCheck();
  }
  calculateRequiredWidth(muteWidth, customWidth) {
    const keys = this.items.map(item => item.title);
    this.translateService.translateAsync(keys).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.first)()).subscribe(translations => {
      const size = this.element.nativeElement.clientWidth;
      const requiredWidth = this.items.reduce((acc, item) => {
        const textWidth = this.measureService.measureText(translations[item.title]);
        const itemWidth = Math.max(SiStatusBarComponent.itemMinWidth, textWidth + (item.color ? SiStatusBarComponent.itemPaddingXdeprecated : SiStatusBarComponent.itemPaddingX)) + SiStatusBarComponent.itemSpacing;
        return acc + itemWidth;
      }, muteWidth + customWidth + SiStatusBarComponent.itemSpacing);
      this.setResponsiveMode(size < requiredWidth);
    });
  }
}
SiStatusBarComponent.itemMinWidth = 100;
SiStatusBarComponent.itemMaxWidth = 152;
SiStatusBarComponent.itemSpacing = 4;
SiStatusBarComponent.itemPaddingX = 44; // padding + icon size + icon margin
SiStatusBarComponent.itemPaddingXdeprecated = 20; // padding + color bar
SiStatusBarComponent.muteButtonWidth = 48;
SiStatusBarComponent.ɵfac = function SiStatusBarComponent_Factory(t) {
  return new (t || SiStatusBarComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](BlinkService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiTranslateService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ResizeObserverService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](TextMeasureService));
};
SiStatusBarComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiStatusBarComponent,
  selectors: [["si-status-bar"]],
  viewQuery: function SiStatusBarComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c58, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c6, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c59, 7);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.theBar = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.content = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.custom = _t.first);
    }
  },
  inputs: {
    items: "items",
    blink: "blink",
    muteButton: "muteButton",
    muteButtonText: "muteButtonText",
    allOkText: "allOkText",
    compact: "compact",
    blinkPulse: "blinkPulse",
    expandButtonText: "expandButtonText",
    collapseButtonText: "collapseButtonText"
  },
  outputs: {
    muteToggle: "muteToggle"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  ngContentSelectors: _c1,
  decls: 18,
  vars: 32,
  consts: [[1, "expand-placeholder"], ["aria-busy", "true", 3, "ngClass"], ["thebar", ""], [1, "status-bar-wrapper", "elevation-2", "rounded-2"], ["class", "align-items-center overflow-hidden", 4, "ngIf"], [1, "main-content", "align-items-center", "overflow-hidden"], ["content", ""], ["class", "mobile-spacer", 4, "ngIf"], [1, "d-flex", "flex-fill", "position-relative", 3, "id"], ["class", "bar-item", 3, "compact", "value", "heading", "status", "color", "blink", "clickable", "flex-basis", "click", "keydown.enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "custom-content", "bar-item", "d-flex"], [3, "siResizeObserver"], ["custom", ""], [4, "ngIf"], ["class", "d-flex align-items-center justify-content-center", 4, "ngIf"], ["muteButtonTemplate", ""], [1, "align-items-center", "overflow-hidden"], [1, "d-flex", "flex-fill", "position-relative"], ["class", "bar-item compact", 3, "value", "heading", "status", "color", "blink", "clickable", "mute-padding", "flex-basis", "valueOnly", "click", "keydown.enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "mobile-mute", 4, "ngIf"], [1, "bar-item", "compact", 3, "value", "heading", "status", "color", "blink", "clickable", "valueOnly", "click", "keydown.enter"], [1, "mobile-mute"], [4, "ngTemplateOutlet"], [1, "mobile-spacer"], [1, "bar-item", 3, "value", "heading", "status", "color", "blink", "clickable", "click", "keydown.enter"], [1, "d-flex", "align-items-center", "justify-content-center"], ["tabindex", "0", "role", "button", 1, "collapse-expand", "text-center", "p-0", "focus-force", 3, "keydown.enter", "click"], [1, "icon", "element-down-2"], ["type", "button", 1, "bar-item", "mute-button", "btn", "btn-circle", "btn-sm", "btn-tertiary", "ms-5", 3, "click"]],
  template: function SiStatusBarComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1, 2)(3, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiStatusBarComponent_div_4_Template, 4, 3, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 5, 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiStatusBarComponent_div_7_Template, 1, 0, "div", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "div", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](9, SiStatusBarComponent_si_status_bar_item_9_Template, 1, 10, "si-status-bar-item", 9);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "div", 10)(11, "div", 11, 12);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("siResizeObserver", function SiStatusBarComponent_Template_div_siResizeObserver_11_listener() {
        return ctx.resizeHandler();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](13);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](14, SiStatusBarComponent_ng_container_14_Template, 2, 1, "ng-container", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](15, SiStatusBarComponent_div_15_Template, 4, 7, "div", 14);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](16, SiStatusBarComponent_ng_template_16_Template, 2, 7, "ng-template", null, 15, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("height", ctx.placeholderHeight, "px");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("expanded", ctx.expanded);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("responsive", ctx.responsiveMode)("expanded", ctx.expanded)("compact", ctx.responsiveMode || ctx.compact)("pulse-off", ctx.blinkOnOff === false)("pulse-on", ctx.blinkOnOff);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx.responsiveMode ? "responsive-" + ctx.responsiveMode : "");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("pe-2", ctx.muteButton !== undefined);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.responsiveMode);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("max-height", ctx.contentHeight, "px");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.responsiveMode);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("d-none", ctx.responsiveMode && !ctx.expanded)("flex-wrap", ctx.responsiveMode);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx.statusId);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.items)("ngForTrackBy", ctx.trackByIndex);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("pb-2", ctx.responsiveMode && ctx.expanded);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.muteButton !== undefined && !ctx.responsiveMode);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.responsiveMode);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, SiResizeObserverDirective, SiStatusBarItemComponent, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:block;position:relative;margin-block-end:16px}[_nghost-%COMP%]     .blink{transition:color calc(.5s * var(--element-animations-enabled, 1))}[_nghost-%COMP%]     .bg{transition:opacity calc(.5s * var(--element-animations-enabled, 1))}.pulse-off[_ngcontent-%COMP%]     .bg{opacity:.1!important}.status-bar-wrapper[_ngcontent-%COMP%]{padding-inline:8px;background-color:var(--element-base-1)}.status-bar-wrapper[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{display:flex}.mobile-spacer[_ngcontent-%COMP%]{margin-block:4px;margin-inline:0;background:var(--element-base-0);block-size:1px}.bar-item[_ngcontent-%COMP%]{margin-block:8px}.custom-content[_ngcontent-%COMP%]{margin-inline-start:auto}.clickable[_ngcontent-%COMP%]{cursor:pointer}.mute-padding[_ngcontent-%COMP%]{padding-inline-end:44px}.mobile-mute[_ngcontent-%COMP%]{position:absolute;inset-inline-end:8px}.main-content[_ngcontent-%COMP%]   .mute-button[_ngcontent-%COMP%]{margin-inline-end:4px}.collapse-expand[_ngcontent-%COMP%]{background-color:var(--element-base-1);border-radius:0 0 20px 20px;box-shadow:0 8px 8px #00000014;inline-size:40px;cursor:pointer}.collapse-expand[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{margin-block-start:-4px;transition:transform calc(.4s * var(--element-animations-enabled, 1))}.collapse-expand[_ngcontent-%COMP%]   i.expanded[_ngcontent-%COMP%]{transform:rotate(180deg)}.compact[_ngcontent-%COMP%]   .bar-item[_ngcontent-%COMP%]{margin-block:2px}.responsive[_ngcontent-%COMP%]   si-status-bar-item[_ngcontent-%COMP%]     .status-item{max-inline-size:unset;position:absolute;inset-block:0;inset-inline:0 4px}.responsive[_ngcontent-%COMP%]   si-status-bar-item.mute-padding[_ngcontent-%COMP%]     .status-item{inset-inline-end:44px}.responsive.expanded[_ngcontent-%COMP%]{position:absolute;inset-block-start:0;inset-inline:0;z-index:1028}.responsive[_ngcontent-%COMP%]   .status-bar-wrapper[_ngcontent-%COMP%] > .main-content[_ngcontent-%COMP%]{display:block;transition:max-block-size calc(.5s * var(--element-animations-enabled, 1))}"],
  changeDetection: 0
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiStatusBarComponent.prototype, "items", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiStatusBarComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-status-bar',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div\n  class=\"expand-placeholder\"\n  [class.expanded]=\"expanded\"\n  [style.height.px]=\"placeholderHeight\"\n></div>\n<div #thebar\n  aria-busy=\"true\"\n  [class.responsive]=\"responsiveMode\"\n  [class.expanded]=\"expanded\"\n  [class.compact]=\"responsiveMode || compact\"\n  [class.pulse-off]=\"blinkOnOff === false\"\n  [class.pulse-on]=\"blinkOnOff\"\n  [ngClass]=\"responsiveMode ? 'responsive-' + responsiveMode : ''\"\n>\n  <div class=\"status-bar-wrapper elevation-2 rounded-2\" [class.pe-2]=\"muteButton !== undefined\">\n    <div *ngIf=\"responsiveMode\" class=\"align-items-center overflow-hidden\">\n      <div class=\"d-flex flex-fill position-relative\">\n        <si-status-bar-item\n          *ngFor=\"let item of responsiveItems; trackBy: trackByIndex\"\n          class=\"bar-item compact\"\n          [value]=\"item.value\"\n          [heading]=\"item.title\"\n          [status]=\"item.status\"\n          [color]=\"item.color\"\n          [blink]=\"item.blink !== false && blink && !expanded\"\n          [clickable]=\"!!item.action\"\n          [class.mute-padding]=\"item.mutePadding && muteButton !== undefined\"\n          [style.flex-basis.%]=\"responsiveMode ? 100 / responsiveMode : null\"\n          [valueOnly]=\"item.isSpecial\"\n          (click)=\"onItemClicked(item)\"\n          (keydown.enter)=\"onItemClicked(item)\"\n        ></si-status-bar-item>\n      </div>\n      <div *ngIf=\"muteButton !== undefined\" class=\"mobile-mute\">\n        <ng-container *ngTemplateOutlet=\"muteButtonTemplate\"></ng-container>\n      </div>\n    </div>\n    <div #content\n      class=\"main-content align-items-center overflow-hidden\"\n      [style.max-height.px]=\"contentHeight\"\n    >\n      <div *ngIf=\"responsiveMode\" class=\"mobile-spacer\"></div>\n      <div\n        class=\"d-flex flex-fill position-relative\"\n        [id]=\"statusId\"\n        [class.d-none]=\"responsiveMode && !expanded\"\n        [class.flex-wrap]=\"responsiveMode\"\n      >\n        <si-status-bar-item\n          *ngFor=\"let item of items; trackBy: trackByIndex\"\n          class=\"bar-item\"\n          [class.compact]=\"responsiveMode || compact\"\n          [value]=\"item.value\"\n          [heading]=\"item.title\"\n          [status]=\"item.status\"\n          [color]=\"item.color\"\n          [blink]=\"item.blink !== false && blink\"\n          [clickable]=\"!!item.action\"\n          [style.flex-basis.%]=\"responsiveMode ? 100 / responsiveMode : null\"\n          (click)=\"onItemClicked(item)\"\n          (keydown.enter)=\"onItemClicked(item)\"\n        ></si-status-bar-item>\n      </div>\n      <div class=\"custom-content bar-item d-flex\">\n        <div #custom [class.pb-2]=\"responsiveMode && expanded\" (siResizeObserver)=\"resizeHandler()\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n      <ng-container *ngIf=\"muteButton !== undefined && !responsiveMode\">\n        <ng-container *ngTemplateOutlet=\"muteButtonTemplate\"></ng-container>\n      </ng-container>\n    </div>\n  </div>\n  <div *ngIf=\"responsiveMode\" class=\"d-flex align-items-center justify-content-center\">\n    <a\n      class=\"collapse-expand text-center p-0 focus-force\"\n      tabindex=\"0\"\n      role=\"button\"\n      [attr.aria-label]=\"(expanded ? collapseButtonText : expandButtonText) | translate\"\n      [attr.aria-expanded]=\"!!expanded\"\n      [attr.aria-controls]=\"statusId\"\n      (keydown.enter)=\"toggleExpand()\"\n      (click)=\"toggleExpand()\"\n    >\n      <i class=\"icon element-down-2\" [class.expanded]=\"expanded === 2\"></i>\n    </a>\n  </div>\n</div>\n\n<ng-template #muteButtonTemplate>\n  <button\n    type=\"button\"\n    class=\"bar-item mute-button btn btn-circle btn-sm btn-tertiary ms-5\"\n    [class.element-sound-mute]=\"muteButton === false\"\n    [class.element-sound-on]=\"muteButton === true\"\n    [attr.aria-label]=\"muteButtonText | translate\"\n    (click)=\"muteToggle.emit()\"\n  ></button>\n</ng-template>\n",
      styles: [":host{display:block;position:relative;margin-block-end:16px}:host ::ng-deep .blink{transition:color calc(.5s * var(--element-animations-enabled, 1))}:host ::ng-deep .bg{transition:opacity calc(.5s * var(--element-animations-enabled, 1))}.pulse-off ::ng-deep .bg{opacity:.1!important}.status-bar-wrapper{padding-inline:8px;background-color:var(--element-base-1)}.status-bar-wrapper>*{display:flex}.mobile-spacer{margin-block:4px;margin-inline:0;background:var(--element-base-0);block-size:1px}.bar-item{margin-block:8px}.custom-content{margin-inline-start:auto}.clickable{cursor:pointer}.mute-padding{padding-inline-end:44px}.mobile-mute{position:absolute;inset-inline-end:8px}.main-content .mute-button{margin-inline-end:4px}.collapse-expand{background-color:var(--element-base-1);border-radius:0 0 20px 20px;box-shadow:0 8px 8px #00000014;inline-size:40px;cursor:pointer}.collapse-expand i{margin-block-start:-4px;transition:transform calc(.4s * var(--element-animations-enabled, 1))}.collapse-expand i.expanded{transform:rotate(180deg)}.compact .bar-item{margin-block:2px}.responsive si-status-bar-item ::ng-deep .status-item{max-inline-size:unset;position:absolute;inset-block:0;inset-inline:0 4px}.responsive si-status-bar-item.mute-padding ::ng-deep .status-item{inset-inline-end:44px}.responsive.expanded{position:absolute;inset-block-start:0;inset-inline:0;z-index:1028}.responsive .status-bar-wrapper>.main-content{display:block;transition:max-block-size calc(.5s * var(--element-animations-enabled, 1))}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: BlinkService
    }, {
      type: SiTranslateService
    }, {
      type: ResizeObserverService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }, {
      type: TextMeasureService
    }];
  }, {
    items: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    blink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    muteButton: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    muteButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    allOkText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    compact: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    blinkPulse: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    expandButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    collapseButtonText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    muteToggle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    theBar: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['thebar', {
        static: true
      }]
    }],
    content: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['content', {
        static: true
      }]
    }],
    custom: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['custom', {
        static: true
      }]
    }]
  });
})();
class SiStatusBarModule {}
SiStatusBarModule.ɵfac = function SiStatusBarModule_Factory(t) {
  return new (t || SiStatusBarModule)();
};
SiStatusBarModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiStatusBarModule
});
SiStatusBarModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiResizeObserverModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiStatusBarModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiResizeObserverModule, SiTranslateModule],
      declarations: [SiStatusBarComponent, SiStatusBarItemComponent],
      exports: [SiStatusBarComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

// ------------------------------------------------------------------------------

class SiCircleStatusComponent {
  constructor(blinkService, cdRef) {
    this.blinkService = blinkService;
    this.cdRef = cdRef;
    /**
     * event direction is out
     */
    this.eventOut = false;
    /**
     * Whether the status should appear with a pulsing circle around the badge.
     */
    this.blink = false;
    this.backgroundClass = '';
    this.theAriaLabel = '';
    this.blinkOn = false;
    this.contrastFix = false;
  }
  ngOnChanges(changes) {
    if (this.blinkService && changes.blink) {
      this.blinkSubs?.unsubscribe();
      if (this.blink) {
        const pulse = this.blinkPulse ?? this.blinkService.pulse$;
        this.blinkSubs = pulse.subscribe(onOff => {
          this.blinkOn = onOff;
          this.cdRef.markForCheck();
        });
      } else {
        this.blinkOn = false;
      }
    }
    if (changes.status) {
      this.statusIcon = this.status && this.status !== 'success' ? STATUS_ICON[this.status] : undefined;
      this.backgroundClass = this.statusIcon?.background ?? '';
    }
    if (changes.ariaLabel || changes.status || changes.icon) {
      this.calcAriaLabel();
    }
    if (changes.color || changes.blink) {
      setTimeout(() => {
        this.cdRef.markForCheck();
        this.contrastFix = !!this.color && this.blink && this.calculateContrastFix();
      });
    }
  }
  ngOnDestroy() {
    this.blinkSubs?.unsubscribe();
  }
  calcAriaLabel() {
    if (this.ariaLabel) {
      this.theAriaLabel = this.ariaLabel;
    } else {
      const statusName = this.status && STATUS_ICON[this.status] ? this.status : 'none';
      const direction = this.eventOut ? ' out' : '';
      const iconName = this.icon?.replace('element-', '') ?? '';
      this.theAriaLabel = `${iconName}${this.status && this.icon ? ' in ' : ''}status ${statusName}${direction}`;
    }
  }
  calculateContrastFix() {
    // see https://www.w3.org/TR/AERT/#color-contrast
    const rgb = getComputedStyle(this.bg.nativeElement).backgroundColor?.match(/\d+/g)?.map(v => +v);
    return !!rgb && Math.round((rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000) <= 128;
  }
}
SiCircleStatusComponent.ɵfac = function SiCircleStatusComponent_Factory(t) {
  return new (t || SiCircleStatusComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](BlinkService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiCircleStatusComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiCircleStatusComponent,
  selectors: [["si-circle-status"]],
  viewQuery: function SiCircleStatusComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c57, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.bg = _t.first);
    }
  },
  inputs: {
    status: "status",
    color: "color",
    icon: "icon",
    eventOut: "eventOut",
    blink: "blink",
    blinkPulse: "blinkPulse",
    ariaLabel: "ariaLabel"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 8,
  vars: 18,
  consts: [["role", "status", 1, "status-indication", "d-flex", "align-items-center", "justify-content-center"], [1, "bg", 3, "ngClass"], ["bg", ""], ["class", "deprecated-dot", 3, "background-color", 4, "ngIf"], ["size", "status-icon", "class", "indicator", "alt", "", 3, "icon", "color", "stackedIcon", "stackedColor", 4, "ngIf"], ["class", "icon text-body event-out element-right-4 flip-rtl", "role", "presentation", 4, "ngIf"], ["class", "icon position-relative text-body", "role", "presentation", 3, "ngClass", 4, "ngIf"], [1, "deprecated-dot"], ["size", "status-icon", "alt", "", 1, "indicator", 3, "icon", "color", "stackedIcon", "stackedColor"], ["role", "presentation", 1, "icon", "text-body", "event-out", "element-right-4", "flip-rtl"], ["role", "presentation", 1, "icon", "position-relative", "text-body", 3, "ngClass"]],
  template: function SiCircleStatusComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "div", 1, 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiCircleStatusComponent_div_4_Template, 1, 2, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiCircleStatusComponent_si_icon_5_Template, 1, 4, "si-icon", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiCircleStatusComponent_i_6_Template, 1, 0, "i", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiCircleStatusComponent_i_7_Template, 1, 1, "i", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("has-icon", ctx.icon);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 16, ctx.theAriaLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("background-color", ctx.color);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("pulse", ctx.blinkOn)("deprecated-color", !ctx.status)("contrast-fix", ctx.contrastFix);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx.backgroundClass);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.status);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.statusIcon);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.eventOut);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.icon);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiIconComponent, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:inline-block;vertical-align:middle}[_nghost-%COMP%]     .status-icon{font-size:24px}.status-indication[_ngcontent-%COMP%]{position:relative;inline-size:40px;block-size:40px;border-radius:50%;border:1px solid transparent}.status-indication.has-icon[_ngcontent-%COMP%]{border-color:var(--element-ui-4);background-color:var(--element-base-1);margin-block:6px;margin-inline:0 12px}.status-indication.has-icon[_ngcontent-%COMP%]   .deprecated-dot[_ngcontent-%COMP%], .status-indication.has-icon[_ngcontent-%COMP%]   .indicator[_ngcontent-%COMP%]{position:absolute}.status-indication.has-icon[_ngcontent-%COMP%]   .deprecated-dot[_ngcontent-%COMP%]{inset-block-start:3px;inset-inline-end:-1px}.status-indication.has-icon[_ngcontent-%COMP%]   .indicator[_ngcontent-%COMP%]{inset-block-start:-9px;inset-inline-end:-13px}.status-indication[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{pointer-events:none;line-height:0}.event-out[_ngcontent-%COMP%]{position:absolute;inset-block-end:11px;inset-inline-end:-13px}.bg[_ngcontent-%COMP%]{position:absolute;inset:0;border-radius:50%;transition:opacity calc(.5s * var(--element-animations-enabled, 1));opacity:0}.pulse.deprecated-color[_ngcontent-%COMP%]{opacity:.5}.pulse.deprecated-color.contrast-fix[_ngcontent-%COMP%]{opacity:.25}.pulse[_ngcontent-%COMP%]:not(.deprecated-color){opacity:1}.deprecated-dot[_ngcontent-%COMP%]{inline-size:8px;block-size:8px;border-radius:50%}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiCircleStatusComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-circle-status',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div\n  class=\"status-indication d-flex align-items-center justify-content-center\"\n  [class.has-icon]=\"icon\"\n  role=\"status\"\n  [attr.aria-label]=\"theAriaLabel | translate\"\n>\n  <div\n    #bg\n    class=\"bg\"\n    [class.pulse]=\"blinkOn\"\n    [class.deprecated-color]=\"!status\"\n    [class.contrast-fix]=\"contrastFix\"\n    [ngClass]=\"backgroundClass\"\n    [style.background-color]=\"color\"\n  ></div>\n  <div *ngIf=\"!status\" class=\"deprecated-dot\" [style.background-color]=\"color\"></div>\n  <si-icon\n    *ngIf=\"statusIcon\"\n    size=\"status-icon\"\n    class=\"indicator\"\n    [icon]=\"statusIcon.icon\"\n    [color]=\"statusIcon.color\"\n    [stackedIcon]=\"statusIcon.stacked\"\n    [stackedColor]=\"statusIcon.stackedColor\"\n    alt=\"\"\n  ></si-icon>\n  <i\n    *ngIf=\"eventOut\"\n    class=\"icon text-body event-out element-right-4 flip-rtl\"\n    role=\"presentation\"\n  ></i>\n  <i\n    *ngIf=\"icon\"\n    class=\"icon position-relative text-body\"\n    [ngClass]=\"icon\"\n    role=\"presentation\"\n  ></i>\n</div>\n",
      styles: [":host{display:inline-block;vertical-align:middle}:host ::ng-deep .status-icon{font-size:24px}.status-indication{position:relative;inline-size:40px;block-size:40px;border-radius:50%;border:1px solid transparent}.status-indication.has-icon{border-color:var(--element-ui-4);background-color:var(--element-base-1);margin-block:6px;margin-inline:0 12px}.status-indication.has-icon .deprecated-dot,.status-indication.has-icon .indicator{position:absolute}.status-indication.has-icon .deprecated-dot{inset-block-start:3px;inset-inline-end:-1px}.status-indication.has-icon .indicator{inset-block-start:-9px;inset-inline-end:-13px}.status-indication>*{pointer-events:none;line-height:0}.event-out{position:absolute;inset-block-end:11px;inset-inline-end:-13px}.bg{position:absolute;inset:0;border-radius:50%;transition:opacity calc(.5s * var(--element-animations-enabled, 1));opacity:0}.pulse.deprecated-color{opacity:.5}.pulse.deprecated-color.contrast-fix{opacity:.25}.pulse:not(.deprecated-color){opacity:1}.deprecated-dot{inline-size:8px;block-size:8px;border-radius:50%}\n"]
    }]
  }], function () {
    return [{
      type: BlinkService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    status: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    color: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    icon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    eventOut: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    blink: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    blinkPulse: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    ariaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    bg: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['bg']
    }]
  });
})();
class SiCircleStatusModule {}
SiCircleStatusModule.ɵfac = function SiCircleStatusModule_Factory(t) {
  return new (t || SiCircleStatusModule)();
};
SiCircleStatusModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiCircleStatusModule
});
SiCircleStatusModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiCircleStatusModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiTranslateModule],
      declarations: [SiCircleStatusComponent],
      exports: [SiCircleStatusComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

class SiTreeViewItemTemplateDirective {
  constructor(template) {
    this.template = template;
  }
}
SiTreeViewItemTemplateDirective.ɵfac = function SiTreeViewItemTemplateDirective_Factory(t) {
  return new (t || SiTreeViewItemTemplateDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef));
};
SiTreeViewItemTemplateDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiTreeViewItemTemplateDirective,
  selectors: [["", "siTreeViewItemTemplate", ""]],
  inputs: {
    name: ["siTreeViewItemTemplate", "name"]
  }
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTreeViewItemTemplateDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siTreeViewItemTemplate]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
    }];
  }, {
    name: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input,
      args: ['siTreeViewItemTemplate']
    }]
  });
})();
class FolderStateEventArgs {
  constructor(treeItem, oldState, newState) {
    this.treeItem = treeItem;
    this.oldState = oldState;
    this.newState = newState;
  }
}
class CheckboxClickEventArgs {
  constructor(target, oldState, newState) {
    this.target = target;
    this.oldState = oldState;
    this.newState = newState;
  }
}
class ClickEventArgs {
  constructor(target, mouseEvent) {
    this.target = target;
    this.mouseEvent = mouseEvent;
  }
}
class ClickEventArgs2 {
  constructor(target, itemTop, itemHeight) {
    this.target = target;
    this.itemTop = itemTop;
    this.itemHeight = itemHeight;
  }
}
class LoadChildrenEventArgs {
  constructor(treeItem, callback) {
    this.treeItem = treeItem;
    this.callback = callback;
  }
}
class ItemsVirtualizedArgs {
  constructor(treeItems, virtualized) {
    this.treeItems = treeItems;
    this.virtualized = virtualized;
  }
}
const DEFAULT_TREE_ICON_SET = {
  headerHome: 'element-home',
  headerArrow: 'element-left-2 flip-rtl',
  itemMenu: 'element-options-vertical',
  itemCollapsed: 'element-down-2',
  itemCollapsedFlat: 'element-right-2 flip-rtl',
  itemCollapsedLeft: 'element-right-2 flip-rtl',
  itemExpanded: 'element-up-2',
  itemExpandedFlat: 'element-down-3',
  itemExpandedLeft: 'element-down-2'
};
const DEFAULT_CHILDREN_INDENTATION = 14;
const ROOT_LEVEL = -1;
const childrenLoaded = item => (item.children?.length ?? 0) > 0;
const hasChildren = item => item.state !== 'leaf';
const removeUndefinedState = state => state ?? 'collapsed';
/**
 * Collapses the tree item except for leaf items.
 */
const collapse = item => {
  if (item?.state !== 'leaf') {
    item.state = 'collapsed';
  }
};
/**
 * Expands the tree item except for leaf items.
 */
const expand = item => {
  if (item?.state !== 'leaf') {
    item.state = 'expanded';
  }
};
const expandRecursive = item => {
  if (item.parent) {
    expand(item.parent);
    expandRecursive(item.parent);
  }
};
const boxClicked = (treeItem, inheritChecked) => {
  if (treeItem.showCheckbox) {
    treeItem.checked = treeItem.checked === 'checked' ? 'unchecked' : 'checked';
    if (inheritChecked) {
      checkAllChildren(treeItem, treeItem.checked);
      updateCheckStateOfParents(treeItem);
    }
  }
  if (treeItem.showOptionbox && treeItem.checked === 'unchecked') {
    treeItem.parent?.children?.forEach(item => item.checked = 'unchecked');
    treeItem.checked = 'checked';
  }
};
/**
 * Changes the folder state to a new state based on the old state.
 * If a client calls this method, the same is responsible to load the children in case the new state is 'expanding'!!!
 *
 * @param deleteChildrenOnCollapse If set to true, the children are deleted upon collapsing the item.
 */
const doFolderStateChange = (item, deleteChildrenOnCollapse, newState) => {
  if (item?.state === 'collapsed' && (!newState || newState === 'expanded')) {
    item.state = childrenLoaded(item) ? 'expanded' : 'expanding';
  } else if (item?.state === 'expanding' && (!newState || newState === 'collapsed')) {
    item.state = 'collapsed';
  } else if (item?.state === 'expanded' && (!newState || newState === 'collapsed')) {
    if (deleteChildrenOnCollapse) {
      item.children = [];
    }
    item.state = 'collapsed';
  }
};
const enableCheckboxRecursive = (item, enable) => {
  item.showCheckbox = enable;
  if (childrenLoaded(item)) {
    item.children?.forEach(child => enableCheckboxRecursive(child, enable));
  }
};
const enableOptionboxRecursive = (item, enable) => {
  item.showOptionbox = enable;
  if (childrenLoaded(item)) {
    item.children?.forEach(child => enableOptionboxRecursive(child, enable));
  }
};
const parentCountRecursive = (item, stackLevel) => {
  if (item?.parent && item.parent.level !== ROOT_LEVEL) {
    return parentCountRecursive(item.parent, stackLevel + 1);
  }
  return stackLevel;
};
const selectItemsBetween = (roots, start, end) => {
  if (start === end) {
    return;
  }
  const foundItems = [];
  const inBetweenState = {
    startIsFirst: false,
    inBetween: false,
    done: false
  };
  for (const root of roots) {
    getItemsBetweenRecursive(foundItems, root, start, end, inBetweenState);
    if (inBetweenState.done) {
      break;
    }
  }
  foundItems.forEach(item => {
    if (item.selectable) {
      item.selected = true;
    }
  });
  return foundItems;
};
const selectRecursive = (item, select) => {
  if (item.selectable) {
    item.selected = select;
  }
  if (childrenLoaded(item)) {
    item.children?.forEach(child => selectRecursive(child, select));
  }
};
const setBoxStateRecursive = (item, state) => {
  item.checked = state;
  if (childrenLoaded(item)) {
    item.children?.forEach(child => setBoxStateRecursive(child, state));
  }
};
/**
 * Sets the item to be active or not; all other items of the tree are reset.
 */
const setActive = (item, active) => {
  const getRoot = _item => _item.parent ? getRoot(_item.parent) : _item;
  resetActive(getRoot(item));
  item.active = active;
};
const resetActive = item => {
  item.active = false;
  if (childrenLoaded(item)) {
    item.children?.forEach(childItem => resetActive(childItem));
  }
};
/**
 * Sets the treeItem as selectable or not
 */
const setSelectable = (item, selectable) => {
  item.selectable = selectable;
  if (item.selected && !item.selectable) {
    item.selected = selectable;
  }
};
const deleteItem = item => {
  if (item.parent) {
    const idx = item.parent.children?.indexOf(item) ?? -1;
    if (idx < 0) {
      return;
    }
    item.parent.children?.splice(idx, 1);
  }
};
const addChildItem = (item, child, position) => {
  if (position < 0) {
    return;
  }
  child.parent = item;
  if (!item.children) {
    item.children = [];
    item.children.push(child);
    return;
  }
  if (position >= item.children.length) {
    item.children.push(child);
    return;
  }
  item.children.splice(position, 0, child);
};
const checkAllChildren = (treeItem, check) => {
  if (childrenLoaded(treeItem)) {
    treeItem.children?.forEach(item => {
      item.checked = check;
      checkAllChildren(item, check);
    });
  }
};
const getItemsBetweenRecursive = (found, current, start, end, inBetweenState) => {
  if (inBetweenState.done) {
    return;
  }
  if (current === start && !inBetweenState.inBetween) {
    // This is the first found tree item within the selection, the start tree item (the item which is clicked first) is ordered
    // before the end tree item (the item which is clicked second).
    // The recursive function is from now on handling tree node which are in between the two selections.
    // Note, we don't need to select it, as it is already selected with previous click
    inBetweenState.startIsFirst = true;
    inBetweenState.inBetween = true;
  } else if (current === end && !inBetweenState.inBetween) {
    // This is the first found tree item within the selection, the end tree item (the item which is clicked second) is ordered
    // before the start tree item (the item which is clicked first).
    // The recursive function is from now on handling tree node which are in between the two selections.
    inBetweenState.startIsFirst = false;
    inBetweenState.inBetween = true;
    found.push(current);
  } else if (current === end && inBetweenState.inBetween) {
    found.push(current);
    inBetweenState.inBetween = false;
    inBetweenState.done = true;
    return; // the end of the search
  } else if (current === start && inBetweenState.inBetween) {
    inBetweenState.inBetween = false;
    inBetweenState.done = true;
    return; // the end of the search
  } else if (inBetweenState.inBetween) {
    found.push(current);
  }
  if (current.state === 'expanded') {
    current.children?.forEach(item => getItemsBetweenRecursive(found, item, start, end, inBetweenState));
  }
};
const updateCheckStateOfParents = treeItem => {
  if (treeItem.parent) {
    let allChecked = true;
    let allUnchecked = true;
    for (const item of treeItem.parent?.children ?? []) {
      if (item.checked === 'indeterminate') {
        treeItem.parent.checked = 'indeterminate';
        updateCheckStateOfParents(treeItem.parent);
        return;
      }
      if (item.checked === 'checked') {
        allUnchecked = false;
      }
      if (item.checked === 'unchecked') {
        allChecked = false;
      }
      if (!allChecked && !allUnchecked) {
        treeItem.parent.checked = 'indeterminate';
        updateCheckStateOfParents(treeItem.parent);
        return;
      }
    }
    if (allChecked) {
      treeItem.parent.checked = 'checked';
    } else {
      treeItem.parent.checked = 'unchecked';
    }
    updateCheckStateOfParents(treeItem.parent);
  }
};

/**
 * Supports communication between the TreeViewComponent and the TreeViewItemComponent and the services.
 * Stores tree specific settings.
 * One instance per TreeViewComponent exists.
 */
class SiTreeViewService {
  constructor() {
    this.clickEvent = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.contextMenuOpenEvent = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.folderClickEvent = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.checkboxClickEvent = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.loadChildrenEvent = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.scrollIntoViewEvent = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.inheritChecked = true;
    this.enableContextMenuButton = true;
    this.deleteChildrenOnCollapse = false;
    this.enableSelection = false;
    this.enableDataField1 = false;
    this.enableDataField2 = false;
    this.enableStateIndicator = true;
    this.enableIcon = true;
    this.enableCheckbox = false;
    this.enableOptionbox = false;
    this.flatTree = false;
    this.singleSelectMode = false;
    this.childrenIndentation = 14;
    this.groupedList = false;
    this.isVirtualized = true;
    this.folderStateStart = true;
    this.contextMenuDropUp = false;
    this.noActionsString = 'No actions available';
    this.triggerMarkForCheck = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
  }
  isGroupedItem(item) {
    return (!item.parent || item.parent.level === ROOT_LEVEL) && this.groupedList;
  }
}
SiTreeViewService.ɵfac = function SiTreeViewService_Factory(t) {
  return new (t || SiTreeViewService)();
};
SiTreeViewService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiTreeViewService,
  factory: SiTreeViewService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTreeViewService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
  }], null, null);
})();
class SiTreeViewItemComponent {
  /**
   * @defaultref {@link _indentLevel}
   */
  set indentLevel(value) {
    this._indentLevel = value;
  }
  /**
   * @defaultref {@link _contextMenuItems}
   */
  set contextMenuItemsProvider(items) {
    this._contextMenuItems = items;
  }
  get contextMenuItems() {
    if (this._contextMenuItemsCurrent) {
      return this._contextMenuItemsCurrent;
    }
    if (this._contextMenuItems) {
      if (Array.isArray(this._contextMenuItems)) {
        return this._contextMenuItems;
      } else {
        this._contextMenuItemsCurrent = this._contextMenuItems(this.treeItem);
        if (!this._contextMenuItemsCurrent?.length) {
          this._contextMenuItemsCurrent = this._noActions;
          this._hasNoActions = true;
        }
        return this._contextMenuItemsCurrent;
      }
    } else {
      return null;
    }
  }
  get isContextMenuButtonVisible() {
    return this.enableContextMenuButton && !!this._contextMenuItems && (!Array.isArray(this._contextMenuItems) || !!this._contextMenuItems.length);
  }
  /**
   * @defaultref {@link stickyEndItems}
   * @deprecated Use `stickyEndItems` instead.
   */
  set stickyRightItems(value) {
    this.stickyEndItems = value;
  }
  get stickyRightItems() {
    return this.stickyEndItems;
  }
  constructor(element, siTreeViewService, cdRef) {
    this.element = element;
    this.siTreeViewService = siTreeViewService;
    this.cdRef = cdRef;
    this.scrollIntoView = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.childrenLoaded = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.contextMenuAriaLabel = 'Open context menu';
    this._contextMenuItems = [];
    this._noActions = [{
      title: this.siTreeViewService.noActionsString,
      isHeading: true
    }];
    this._hasNoActions = false;
    this.stickyEndItems = false;
    this.displayFolderState = false;
    this.subscriptions = [];
    this._indentLevel = 0;
  }
  ngAfterViewInit() {
    if (this.savedElement) {
      this.siTreeViewService.scrollIntoViewEvent.next(this.savedElement);
      this.savedElement = undefined;
    }
    this.nextSiblingElement = this.element.nativeElement?.nextElementSibling;
  }
  ngOnInit() {
    this.subscriptions.push(this.scrollIntoView.subscribe(event => this.onScrollIntoViewByConsumer(event)));
    this.subscriptions.push(this.childrenLoaded.subscribe(event => this.childrenLoadingDone(event)));
    this.subscriptions.push(this.siTreeViewService.triggerMarkForCheck.subscribe(() => this.cdRef.markForCheck()));
  }
  ngOnDestroy() {
    this.subscriptions.filter(subscription => !!subscription).forEach(subscription => subscription.unsubscribe());
  }
  get enableSelection() {
    return this.siTreeViewService.enableSelection;
  }
  get enableContextMenuButton() {
    return this.siTreeViewService.enableContextMenuButton;
  }
  get enableDataField1() {
    return this.siTreeViewService.enableDataField1;
  }
  get enableDataField2() {
    return this.siTreeViewService.enableDataField2;
  }
  get deleteChildrenOnCollapse() {
    return this.siTreeViewService.deleteChildrenOnCollapse;
  }
  get paddingStart() {
    return this.siTreeViewService.groupedList ? '0' : this._indentLevel * this.siTreeViewService.childrenIndentation + 'px';
  }
  get biggerPaddingStart() {
    const basePadding = this.showFolderStateStart ? 24 : 0;
    return (this.siTreeViewService.groupedList ? basePadding : this._indentLevel * this.siTreeViewService.childrenIndentation + basePadding) + 'px';
  }
  get isGroupedItem() {
    return this.siTreeViewService.isGroupedItem(this.treeItem);
  }
  get showFolderState() {
    return !this.isFlatTree() && (!!this.isGroupedItem || !this.siTreeViewService.groupedList);
  }
  get showFolderStateStart() {
    return this.displayFolderState && this.siTreeViewService.folderStateStart && !this.isFlatTree() && (!!this.isGroupedItem || !this.siTreeViewService.groupedList);
  }
  get showFolderStateEnd() {
    return this.displayFolderState && !this.showFolderStateStart;
  }
  get isExpanding() {
    return this.treeItem.state === 'expanding';
  }
  get showStateIndicator() {
    return this.siTreeViewService.enableStateIndicator;
  }
  get showIcon() {
    return this.siTreeViewService.enableIcon && !!this.treeItem.icon;
  }
  get showCheckOrOptionBox() {
    return !!this.treeItem.showCheckbox || !!this.treeItem.showOptionbox;
  }
  getItemFolderStateClass() {
    if (this.treeItem.state === 'collapsed') {
      if (this.siTreeViewService.flatTree) {
        // flat tree mode
        return this.icons.itemCollapsedFlat;
      } else if (this.siTreeViewService.folderStateStart) {
        // normal tree mode; folder state icon shown on the left (in LTR) side
        return this.icons.itemCollapsedLeft; // si-tree-view-item-collapsed
      } else {
        // normal tree mode; folder state icon shown on the right (in LTR) side
        return this.icons.itemCollapsed; // si-tree-view-item-collapsed
      }
    } else if (this.treeItem.state === 'expanding') {
      return 'si-tree-view-item-expanding'; // because empty is treated as disabled
    } else if (this.treeItem.state === 'expanded') {
      if (this.siTreeViewService.flatTree) {
        // flat tree mode
        return this.icons.itemExpandedFlat;
      } else if (this.siTreeViewService.folderStateStart) {
        // normal tree mode; folder state icon shown on the left (in LTR) side
        return this.icons.itemExpandedLeft; // si-tree-view-item-expanded
      } else {
        // normal tree mode; folder state icon shown on the right (in LTR) side
        return this.icons.itemExpanded; // si-tree-view-item-expanded
      }
    }

    return '';
  }
  /**
   * Show filled icon if the item is selected.
   **/
  getIconClass() {
    let iconClass = this.treeItem.icon;
    if (this.treeItem.selected && this.treeItem.selectable && this.enableSelection) {
      iconClass = iconClass + ' ' + iconClass + '-filled';
    }
    return iconClass ?? '';
  }
  getStateIndicatorColor() {
    return this.treeItem ? this.treeItem.stateIndicatorColor : '';
  }
  onItemFolderClicked(newState) {
    this.nextSiblingElement = this.element.nativeElement?.nextElementSibling;
    const oldState = removeUndefinedState(this.treeItem.state);
    doFolderStateChange(this.treeItem, this.deleteChildrenOnCollapse, newState);
    this.siTreeViewService.folderClickEvent.next(new FolderStateEventArgs(this.treeItem, oldState, removeUndefinedState(this.treeItem.state)));
    if (this.treeItem.state === 'expanding') {
      this.siTreeViewService.loadChildrenEvent.next(this.treeItem);
    }
    if (this.treeItem.state === 'expanded') {
      this.scrollChildNodeIntoViewPort();
    }
  }
  childrenLoadingDone(item) {
    if (item === this.treeItem) {
      rxjs__WEBPACK_IMPORTED_MODULE_44__.asyncScheduler.schedule(() => this.scrollChildNodeIntoViewPort(), 0);
    }
  }
  scrollChildNodeIntoViewPort() {
    const task = () => {
      const container = this.element.nativeElement.closest('.si-tree-view');
      const first = this.element.nativeElement;
      this.nextSiblingElement = this.nextSiblingElement?.previousElementSibling ?? this.nextSiblingElement;
      const last = container?.contains(this.nextSiblingElement) ? this.nextSiblingElement : this.element.nativeElement.parentElement?.lastElementChild;
      const fits = container?.offsetHeight - (last?.offsetTop + last?.getBoundingClientRect().height - first?.offsetTop) >= 0;
      const targetElement = fits ? last : first;
      if (targetElement) {
        const observer = new window.IntersectionObserver(([entry]) => {
          requestAnimationFrame(() => {
            const scrollElement = targetElement.firstChild ?? targetElement;
            if (fits) {
              scrollElement.scrollIntoView({
                block: 'nearest',
                behavior: 'smooth'
              });
            } else {
              // scrollIntoView messes up with page scroll when body also has a scroll for { block : 'start' }
              const totalScrollTop = container?.scrollTop + first?.getBoundingClientRect().top - container?.getBoundingClientRect().top;
              container?.scrollTo({
                top: totalScrollTop,
                behavior: 'smooth'
              });
            }
          });
          observer.disconnect();
        }, {
          root: null,
          threshold: 1
        });
        observer.observe(targetElement);
      }
    };
    rxjs__WEBPACK_IMPORTED_MODULE_44__.asyncScheduler.schedule(task, 0);
  }
  onItemClicked(event) {
    this.siTreeViewService.clickEvent.next(new ClickEventArgs(this.treeItem, event));
    if (!this.siTreeViewService.enableSelection && (this.siTreeViewService.enableCheckbox || this.siTreeViewService.enableOptionbox)) {
      this.onBoxClicked();
    }
  }
  onMouseDownTreeItem(event) {
    if (event.shiftKey) {
      // let selection: Selection = window.getSelection();
      // selection.removeAllRanges();
      // we do not want the tree item text selected: thus we prevent the default behavior in this situation
      event.preventDefault();
    }
  }
  onToggleContextMenu(state) {
    if (state) {
      const elRect = this.element.nativeElement.getBoundingClientRect();
      this.siTreeViewService.contextMenuOpenEvent.next(new ClickEventArgs2(this.treeItem, elRect.top, elRect.height));
      this.siTreeViewService.activeContextDropdown = this.contextDropdown;
    } else {
      if (this._contextMenuItemsCurrent) {
        this._contextMenuItemsCurrent = undefined;
        this._hasNoActions = false;
      }
      this.siTreeViewService.activeContextDropdown = undefined;
      this.element.nativeElement.focus();
    }
  }
  getInputType() {
    // This method will be called only when either of the showCheckbox or showOptionBox is true, thus
    // following condition can be shortened
    return this.treeItem.showCheckbox ? 'checkbox' : 'radio';
  }
  onBoxClicked() {
    if (!this.treeItem.selectable) {
      return;
    }
    const oldState = this.treeItem.checked ?? 'unchecked';
    boxClicked(this.treeItem, this.siTreeViewService.inheritChecked);
    this.siTreeViewService.checkboxClickEvent.next(new CheckboxClickEventArgs(this.treeItem, oldState, this.treeItem.checked ?? 'unchecked'));
  }
  renderMatchingTemplate(treeItem) {
    const templateDirective = this.templates.find(td => td.name === treeItem.templateName);
    return templateDirective ? templateDirective.template : this.templates.toArray()[0].template;
  }
  onContextMenu(event) {
    this.handleContextMenuEvent(event);
  }
  onKeydown(event) {
    const rtlCorrectedKey = correctKeyRTL(event.key);
    if (rtlCorrectedKey === 'Enter') {
      event.preventDefault();
      if (this.contextDropdown?.isOpen) {
        if (this._hasNoActions) {
          this.contextDropdown?.close();
        }
      } else {
        this.onItemClicked(event);
      }
    } else if (rtlCorrectedKey === 'ContextMenu' || rtlCorrectedKey === 'F10' && event.shiftKey) {
      this.handleContextMenuEvent(event);
    } else if (rtlCorrectedKey === 'ArrowLeft' && !this.contextDropdown?.isOpen) {
      if (!this.isFlatTree() && this.showFolderStateStart && (this.treeItem.state !== 'leaf' || this.isGroupedItem) || this.showFolderStateEnd) {
        event.preventDefault();
        this.onItemFolderClicked('collapsed');
      }
    } else if (rtlCorrectedKey === 'ArrowRight' && !this.contextDropdown?.isOpen) {
      if (this.showFolderStateStart && (this.treeItem.state !== 'leaf' || this.isGroupedItem) || this.showFolderStateEnd) {
        event.preventDefault();
        this.onItemFolderClicked('expanded');
      }
    } else if (this.showCheckOrOptionBox && (rtlCorrectedKey === 'Space' || rtlCorrectedKey === ' ')) {
      event.preventDefault();
      this.onBoxClicked();
    }
  }
  handleContextMenuEvent(event) {
    if (this.isContextMenuButtonVisible) {
      event.preventDefault();
      this.contextDropdown.toggle();
      this.siTreeViewService.activeContextDropdown?.close();
      this.siTreeViewService.activeContextDropdown = this.contextDropdown;
      const windowContextMenuHandler = contextMenuEvent => {
        contextMenuEvent.preventDefault();
        window.removeEventListener('contextmenu', windowContextMenuHandler);
      };
      window.addEventListener('contextmenu', windowContextMenuHandler);
    }
  }
  isFlatTree() {
    return this.siTreeViewService.flatTree;
  }
  /**
   * Called by the consumer when they want a node to be scrolled into view.
   */
  onScrollIntoViewByConsumer(item) {
    if (item === this.treeItem) {
      this.savedElement = this.element;
      this.siTreeViewService.scrollIntoViewEvent.next(this.element);
    }
  }
}
SiTreeViewItemComponent.ɵfac = function SiTreeViewItemComponent_Factory(t) {
  return new (t || SiTreeViewItemComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiTreeViewService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiTreeViewItemComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiTreeViewItemComponent,
  selectors: [["si-tree-view-item"]],
  viewQuery: function SiTreeViewItemComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c60, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.contextDropdown = _t.first);
    }
  },
  hostBindings: function SiTreeViewItemComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("contextmenu", function SiTreeViewItemComponent_contextmenu_HostBindingHandler($event) {
        return ctx.onContextMenu($event);
      })("keydown", function SiTreeViewItemComponent_keydown_HostBindingHandler($event) {
        return ctx.onKeydown($event);
      });
    }
  },
  inputs: {
    indentLevel: "indentLevel",
    treeItem: "treeItem",
    scrollIntoView: "scrollIntoView",
    childrenLoaded: "childrenLoaded",
    contextMenuAriaLabel: "contextMenuAriaLabel",
    templates: "templates",
    contextMenuItemsProvider: "contextMenuItemsProvider",
    stickyRightItems: "stickyRightItems",
    stickyEndItems: "stickyEndItems",
    displayFolderState: "displayFolderState",
    icons: "icons"
  },
  decls: 2,
  vars: 2,
  consts: [["class", "si-tree-view-li si-tree-view-li-item focus-direct-sub-inside", 3, "si-tree-view-item-context-menu-visible", "si-tree-view-item-active", "si-tree-view-item-selected", "si-tree-view-item-not-selectable", "padding-inline-start", 4, "ngIf"], ["class", "si-tree-view-li focus-direct-sub-inside", 4, "ngIf"], [1, "si-tree-view-li", "si-tree-view-li-item", "focus-direct-sub-inside"], [1, "si-tree-view-item", 3, "mousedown"], ["class", "si-tree-stretch-center si-tree-view-item-toggle", "tabindex", "-1", 3, "margin-inline-start", "padding-inline-start", "click", 4, "ngIf"], ["class", "form-check input-box", "tabindex", "-1", 4, "ngIf"], [1, "si-tree-view-item-main", "d-flex", "flex-grow-1", "align-self-stretch", 3, "click"], ["class", "si-tree-stretch-center", 4, "ngIf"], [1, "si-tree-view-item-object-data", "d-flex", "flex-column", "justify-content-center"], [4, "ngIf"], ["class", "si-tree-view-item-object-data-field-1", 4, "ngIf"], ["class", "si-tree-view-item-object-data-field-2", 4, "ngIf"], ["class", "badge flex-shrink-0", 3, "ngClass", 4, "ngIf"], [1, "si-tree-view-item-end-icons", "d-flex", "ms-2", "align-items-center"], ["class", "si-tree-view-state-indicator", 3, "background-color", "si-tree-view-state-indicator-endmost", 4, "ngIf"], ["siDropdown", "", "dropdownContainer", "body", "dropdownDirection", "down", "dropdownAlign", "end", "class", "si-tree-stretch-center si-tree-context-menu-btn", 3, "dropdownResponsiveDirection", "dropdownResponsiveDirectionToPlacement", "dropdownIsDisabled", "dropdownFocusOnClose", "dropdownOnToggle", 4, "ngIf"], ["class", "si-tree-stretch-center si-tree-view-item-toggle si-tree-view-item-toggle-end", "tabindex", "-1", 3, "disabled", "click", 4, "ngIf"], ["class", "si-tree-stretch-center si-tree-view-item-toggle si-tree-view-item-toggle-end", 4, "ngIf"], ["tabindex", "-1", 1, "si-tree-stretch-center", "si-tree-view-item-toggle", 3, "click"], ["class", "si-tree-view-item-dropdown-caret", 3, "ngClass", 4, "ngIf"], [1, "si-tree-view-item-dropdown-caret", 3, "ngClass"], ["tabindex", "-1", 1, "form-check", "input-box"], ["tabindex", "-1", 1, "form-check-input", 3, "type", "indeterminate", "checked", "disabled", "click"], [1, "si-tree-stretch-center"], [1, "si-tree-view-item-icon", 3, "ngClass"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "si-tree-view-item-object-data-field-1"], [1, "si-tree-view-item-object-data-field-2"], [1, "badge", "flex-shrink-0", 3, "ngClass"], [1, "si-tree-view-state-indicator"], ["siDropdown", "", "dropdownContainer", "body", "dropdownDirection", "down", "dropdownAlign", "end", 1, "si-tree-stretch-center", "si-tree-context-menu-btn", 3, "dropdownResponsiveDirection", "dropdownResponsiveDirectionToPlacement", "dropdownIsDisabled", "dropdownFocusOnClose", "dropdownOnToggle"], ["contextDropdown", "si-dropdown"], ["siDropdownToggle", "", "role", "button"], [1, "si-tree-view-item-icon", "si-tree-view-menu-btn", 3, "ngClass"], ["siDropdownMenu", "", "class", "me-5", 3, "items", "dropstart", "actionParam", "focusOnLoad", 4, "ngIf"], ["siDropdownMenu", "", 1, "me-5", 3, "items", "dropstart", "actionParam", "focusOnLoad"], ["tabindex", "-1", 1, "si-tree-stretch-center", "si-tree-view-item-toggle", "si-tree-view-item-toggle-end", 3, "click"], ["class", "si-tree-view-item-icon", 4, "ngIf"], ["class", "si-tree-view-item-icon", 3, "ngClass", 4, "ngIf"], [1, "si-tree-view-item-icon"], [1, "si-tree-stretch-center", "si-tree-view-item-toggle", "si-tree-view-item-toggle-end"], [1, "si-tree-view-item-icon", "si-tree-view-item-icon-spacer"], [1, "si-tree-view-li", "focus-direct-sub-inside"], [1, "si-tree-view-item-group"], ["class", "si-tree-stretch-center si-tree-view-item-toggle", "tabindex", "-1", 3, "click", 4, "ngIf"], [1, "mb-0"], ["class", "si-tree-stretch-center", "tabindex", "-1", 3, "disabled", "click", 4, "ngIf"], ["tabindex", "-1", 1, "form-check-input", 3, "type", "indeterminate", "checked", "click"], ["tabindex", "-1", 1, "si-tree-stretch-center", 3, "click"]],
  template: function SiTreeViewItemComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiTreeViewItemComponent_div_0_Template, 17, 25, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTreeViewItemComponent_div_1_Template, 8, 6, "div", 1);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.isGroupedItem);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.isGroupedItem);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, SiDropdownDirective, SiDropdownMenuDirective, SiDropdownToggleDirective, SiLoadingSpinnerComponent, SiMenuComponent, SiTranslatePipe],
  styles: [".si-tree-view-top-level-item[_nghost-%COMP%] > .si-tree-view-li[_ngcontent-%COMP%]{margin-block:var(--si-tree-view-padding-base-vertical)}.si-tree-view-top-level-item[_nghost-%COMP%] +   .si-tree-view-top-level-item>.si-tree-view-li{margin-block-start:0}.si-tree-view-li.si-tree-view-li-item[_ngcontent-%COMP%]{position:relative}.si-tree-view-li.si-tree-view-li-item[_ngcontent-%COMP%]:hover, .si-tree-view-li.si-tree-view-li-item.si-tree-view-item-context-menu-visible[_ngcontent-%COMP%], .si-tree-view-li.si-tree-view-li-item[_ngcontent-%COMP%]:hover   .si-tree-view-item-end-icons[_ngcontent-%COMP%], .si-tree-view-li.si-tree-view-li-item.si-tree-view-item-context-menu-visible[_ngcontent-%COMP%]   .si-tree-view-item-end-icons[_ngcontent-%COMP%]{background-color:var(--si-tree-view-item-hover-color)}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-selected[_ngcontent-%COMP%], .si-tree-view-li.si-tree-view-li-item.si-tree-view-item-selected[_ngcontent-%COMP%]   .si-tree-view-item-end-icons[_ngcontent-%COMP%]{background-color:var(--si-tree-view-item-select-color)}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-selected[_ngcontent-%COMP%] > .si-tree-view-item[_ngcontent-%COMP%] > .si-tree-view-item-main[_ngcontent-%COMP%] > .si-tree-view-item-object-data[_ngcontent-%COMP%] > h5[_ngcontent-%COMP%]{font-weight:700}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable[_ngcontent-%COMP%], .si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%], .si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable[_ngcontent-%COMP%]   .si-tree-view-item-icon[_ngcontent-%COMP%], .si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable[_ngcontent-%COMP%]   .si-tree-view-item-object-data-field-1[_ngcontent-%COMP%]{color:var(--element-text-disabled)}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable[_ngcontent-%COMP%]:hover, .si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable[_ngcontent-%COMP%]   .si-tree-view-item-end-icons[_ngcontent-%COMP%]{background-color:unset}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable[_ngcontent-%COMP%]   .si-tree-view-item[_ngcontent-%COMP%]:hover{background-color:unset;cursor:default}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable[_ngcontent-%COMP%]   .si-tree-view-item-dropdown-caret[_ngcontent-%COMP%], .si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable[_ngcontent-%COMP%]   .si-tree-view-item-toggle-end[_ngcontent-%COMP%]{cursor:pointer}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable[_ngcontent-%COMP%]   .si-tree-view-item-toggle-end[_ngcontent-%COMP%]   .si-tree-view-item-icon[_ngcontent-%COMP%]{color:var(--element-text-primary)}.si-tree-view-li.si-tree-view-li-item[_ngcontent-%COMP%]   .si-tree-view-item-end-icons[_ngcontent-%COMP%]{background-color:var(--si-tree-view-background)}.si-tree-view-item-group[_ngcontent-%COMP%], .si-tree-view-item[_ngcontent-%COMP%]{display:flex;align-items:center}.si-tree-stretch-center[_ngcontent-%COMP%]{align-self:stretch;display:flex;align-items:center;justify-content:center;margin:0;text-decoration:none}.si-tree-view-item-toggle.disabled[_ngcontent-%COMP%]   .si-tree-view-item-icon[_ngcontent-%COMP%]{inline-size:24px}.si-tree-stretch-center[_ngcontent-%COMP%] + .si-tree-view-item-toggle-end[_ngcontent-%COMP%]   .si-tree-view-item-icon[_ngcontent-%COMP%]{margin-inline-start:-4px}.si-tree-view-item-icon[_ngcontent-%COMP%]{padding-inline-end:8px}.si-tree-view-item-icon.si-tree-view-item-icon-spacer[_ngcontent-%COMP%]{box-sizing:content-box;inline-size:var(--si-tree-view-icon-size)}.si-tree-view-item-object-data[_ngcontent-%COMP%], .si-tree-view-item-icon[_ngcontent-%COMP%]{margin-block:0;margin-inline:calc(var(--si-tree-view-padding-base-horizontal) / 4)}.si-tree-view-item[_ngcontent-%COMP%]{justify-content:space-between;cursor:pointer;min-block-size:var(--si-tree-view-item-min-height);padding-inline:var(--si-tree-view-padding-base-horizontal) calc(var(--si-tree-view-padding-base-horizontal) / 4)}.si-tree-view-flat[_nghost-%COMP%]   .si-tree-view-item[_ngcontent-%COMP%], .si-tree-view-flat   [_nghost-%COMP%]   .si-tree-view-item[_ngcontent-%COMP%]{padding-inline-start:calc(var(--si-tree-view-padding-base-horizontal) / 2)}.si-tree-view-state-indicator[_ngcontent-%COMP%]{margin-block:0;margin-inline:calc(var(--si-tree-view-padding-base-horizontal) * .75);min-inline-size:6px;block-size:6px;border-radius:50%}.si-tree-view-state-indicator.si-tree-view-state-indicator-endmost[_ngcontent-%COMP%]{margin-inline-end:calc(var(--si-tree-view-padding-base-horizontal) * 1.75)}.si-tree-view-item-group[_ngcontent-%COMP%]{padding-block:calc(2 * var(--si-tree-view-padding-base-vertical));padding-inline:calc(var(--si-tree-view-padding-base-horizontal) / 2);cursor:default}.si-tree-view-item-group[_ngcontent-%COMP%]   .si-tree-view-item-dropdown-caret[_ngcontent-%COMP%]:hover, .si-tree-view-item-group[_ngcontent-%COMP%]   .si-tree-view-item-icon[_ngcontent-%COMP%]:hover{cursor:pointer}.si-tree-view-item-dropdown-caret[_ngcontent-%COMP%], .si-tree-view-item-dropdown-caret[_ngcontent-%COMP%]:hover, .si-tree-view-item-icon[_ngcontent-%COMP%], .si-tree-view-item-icon[_ngcontent-%COMP%]:hover{color:var(--element-text-primary);text-decoration:none;font-size:var(--si-tree-view-icon-size)}.si-tree-view-item-main[_ngcontent-%COMP%]{overflow-x:hidden}.si-tree-view-item-main[_ngcontent-%COMP%] > .badge[_ngcontent-%COMP%]{margin-block:auto}.si-tree-view-item-object-data[_ngcontent-%COMP%] > .si-tree-view-item-object-data-field-1[_ngcontent-%COMP%]{color:var(--si-tree-view-item-object-data-field-1-color)}.si-tree-ellipsis[_nghost-%COMP%]   .si-tree-view-item-object-data[_ngcontent-%COMP%]{overflow-x:hidden}.si-tree-view-item-object-data[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{white-space:nowrap;margin-block:0;line-height:var(--si-tree-view-item-line-height)}.si-tree-ellipsis[_nghost-%COMP%]   .si-tree-view-item-object-data[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{overflow:hidden;text-overflow:ellipsis}.si-tree-view-item-object-data[_ngcontent-%COMP%] > h5[_ngcontent-%COMP%]{font-size:var(--si-tree-view-item-object-data-h5-font-size);font-weight:var(--si-tree-view-item-object-data-h5-font-weight)}.si-tree-view-menu-btn[_ngcontent-%COMP%]{pointer-events:none}.si-tree-view-item-end-icons[_ngcontent-%COMP%]{block-size:calc(var(--si-tree-view-item-min-height) - 2 * (var(--element-button-focus-width) + var(--element-button-focus-overlay-width)))}.si-tree-view-item-end-icons.si-tree-view-item-end-icons-sticky[_ngcontent-%COMP%]{position:sticky;inset-inline-end:0}.input-box[_ngcontent-%COMP%]{margin-inline:2px 12px}.form-check-input[_ngcontent-%COMP%]{inset-block-start:2px}si-loading-spinner[_ngcontent-%COMP%]{--loading-spinner-size: var(--si-tree-view-icon-size)}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTreeViewItemComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-tree-view-item',
      template: "<div\n  *ngIf=\"!isGroupedItem\"\n  class=\"si-tree-view-li si-tree-view-li-item focus-direct-sub-inside\"\n  [class.si-tree-view-item-context-menu-visible]=\"contextDropdown?.isOpen ?? false\"\n  [class.si-tree-view-item-active]=\"treeItem.active\"\n  [class.si-tree-view-item-selected]=\"enableSelection && treeItem.selected\"\n  [class.si-tree-view-item-not-selectable]=\"!treeItem.selectable\"\n  [attr.aria-disabled]=\"!treeItem.selectable\"\n  [style.padding-inline-start]=\"biggerPaddingStart\"\n>\n  <div class=\"si-tree-view-item\" (mousedown)=\"onMouseDownTreeItem($event)\">\n    <a\n      *ngIf=\"showFolderStateStart && treeItem.state !== 'leaf'\"\n      [style.margin-inline-start]=\"'-' + biggerPaddingStart\"\n      [style.padding-inline-start]=\"paddingStart\"\n      class=\"si-tree-stretch-center si-tree-view-item-toggle\"\n      (click)=\"onItemFolderClicked()\"\n      tabindex=\"-1\"\n    >\n      <si-loading-spinner *ngIf=\"isExpanding\"></si-loading-spinner>\n      <i\n        *ngIf=\"!isExpanding\"\n        class=\"si-tree-view-item-dropdown-caret\"\n        [ngClass]=\"getItemFolderStateClass()\"\n      ></i>\n    </a>\n\n    <a *ngIf=\"showCheckOrOptionBox\" class=\"form-check input-box\" tabindex=\"-1\">\n      <input\n        [type]=\"getInputType()\"\n        class=\"form-check-input\"\n        (click)=\"onBoxClicked()\"\n        [indeterminate]=\"this.treeItem.checked === 'indeterminate' ? true: null\"\n        [checked]=\"this.treeItem.checked === 'checked'\"\n        [disabled]=\"!treeItem?.selectable\"\n        [attr.aria-label]=\"(treeItem.label ?? '') | translate\"\n        tabindex=\"-1\"\n      >\n    </a>\n\n    <div\n      class=\"si-tree-view-item-main d-flex flex-grow-1 align-self-stretch\"\n      (click)=\"onItemClicked($event)\"\n    >\n      <div *ngIf=\"showIcon\" class=\"si-tree-stretch-center\">\n        <span class=\"si-tree-view-item-icon\" [ngClass]=\"getIconClass()\"></span>\n      </div>\n\n      <div class=\"si-tree-view-item-object-data d-flex flex-column justify-content-center\">\n        <h5 *ngIf=\"!templates?.length\" >{{ (treeItem.label ?? '') | translate }}</h5>\n        <div *ngIf=\"templates?.length\">\n          <ng-container\n            *ngTemplateOutlet=\"renderMatchingTemplate(treeItem); context: { $implicit: treeItem }\"\n          ></ng-container>\n        </div>\n        <p\n          *ngIf=\"enableDataField1 && treeItem.dataField1\"\n          class=\"si-tree-view-item-object-data-field-1\"\n        >{{ treeItem.dataField1 | translate }}</p>\n        <p\n          *ngIf=\"enableDataField2 && treeItem.dataField2\"\n          class=\"si-tree-view-item-object-data-field-2\"\n        >{{ treeItem.dataField2 | translate }}</p>\n      </div>\n\n      <span\n        *ngIf=\"treeItem.badge\"\n        class=\"badge flex-shrink-0\"\n        [ngClass]=\"'bg-' + (treeItem.badgeColor || 'default')\"\n      >{{ treeItem.badge }}</span>\n    </div>\n\n    <div\n      class=\"si-tree-view-item-end-icons d-flex ms-2 align-items-center\"\n      [class.si-tree-view-item-end-icons-sticky]=\"stickyEndItems\"\n    >\n      <div\n        *ngIf=\"showStateIndicator\"\n        class=\"si-tree-view-state-indicator\"\n        [style.background-color]=\"getStateIndicatorColor()\"\n        [class.si-tree-view-state-indicator-endmost]=\"!enableContextMenuButton && !showFolderStateEnd\"\n      ></div>\n      <div\n        siDropdown\n        #contextDropdown=\"si-dropdown\"\n        dropdownContainer=\"body\"\n        dropdownDirection=\"down\"\n        dropdownAlign=\"end\"\n        [dropdownResponsiveDirection]=\"true\"\n        [dropdownResponsiveDirectionToPlacement]=\"false\"\n        [dropdownIsDisabled]=\"!treeItem?.selectable\"\n        [dropdownFocusOnClose]=\"false\"\n        (dropdownOnToggle)=\"onToggleContextMenu($event)\"\n        *ngIf=\"isContextMenuButtonVisible\"\n        class=\"si-tree-stretch-center si-tree-context-menu-btn\"\n      >\n        <div siDropdownToggle [attr.aria-label]=\"contextMenuAriaLabel | translate\" role=\"button\">\n          <i class=\"si-tree-view-item-icon si-tree-view-menu-btn\" [ngClass]=\"icons?.itemMenu ?? ''\"></i>\n        </div>\n        <si-menu\n          *ngIf=\"contextDropdown?.isOpen ?? false\"\n          [items]=\"contextMenuItems!\"\n          [dropstart]=\"true\"\n          [actionParam]=\"treeItem\"\n          [focusOnLoad]=\"true\"\n          siDropdownMenu\n          class=\"me-5\"\n        ></si-menu>\n      </div>\n      <a\n        *ngIf=\"showFolderStateEnd && treeItem.state !== 'leaf'\"\n        class=\"si-tree-stretch-center si-tree-view-item-toggle si-tree-view-item-toggle-end\"\n        [class.disabled]=\"!getItemFolderStateClass()\"\n        (click)=\"onItemFolderClicked()\"\n        tabindex=\"-1\"\n      >\n        <si-loading-spinner *ngIf=\"isExpanding\" class=\"si-tree-view-item-icon\"></si-loading-spinner>\n        <i\n          *ngIf=\"!isExpanding\"\n          class=\"si-tree-view-item-icon\"\n          [ngClass]=\"getItemFolderStateClass()\"\n        ></i>\n      </a>\n      <div\n        *ngIf=\"showFolderStateEnd && treeItem.state === 'leaf'\"\n        class=\"si-tree-stretch-center si-tree-view-item-toggle si-tree-view-item-toggle-end\"\n      >\n        <i\n          class=\"si-tree-view-item-icon si-tree-view-item-icon-spacer\"\n        ></i>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div\n  *ngIf=\"isGroupedItem\"\n  class=\"si-tree-view-li focus-direct-sub-inside\"\n>\n  <div class=\"si-tree-view-item-group\">\n    <a\n      *ngIf=\"showFolderStateStart\"\n      class=\"si-tree-stretch-center si-tree-view-item-toggle\"\n      (click)=\"onItemFolderClicked()\"\n      tabindex=\"-1\"\n    >\n      <si-loading-spinner *ngIf=\"isExpanding\"></si-loading-spinner>\n      <i\n        *ngIf=\"!isExpanding\"\n        class=\"si-tree-view-item-icon\"\n        [ngClass]=\"getItemFolderStateClass()\"\n      ></i>\n    </a>\n    <a *ngIf=\"showCheckOrOptionBox\" class=\"form-check input-box\" tabindex=\"-1\">\n      <input\n        [type]=\"getInputType()\"\n        class=\"form-check-input\"\n        [indeterminate]=\"this.treeItem.checked === 'indeterminate' ? true: null\"\n        [checked]=\"this.treeItem.checked === 'checked'\"\n        (click)=\"onBoxClicked()\"\n        [attr.aria-label]=\"(treeItem.label ?? '') | translate\"\n        tabindex=\"-1\"\n      >\n    </a>\n    <p class=\"mb-0\">{{ (treeItem.label ?? '') | translate }}</p>\n    <a\n      *ngIf=\"showFolderStateEnd\"\n      class=\"si-tree-stretch-center\"\n      [class.disabled]=\"!getItemFolderStateClass()\"\n      (click)=\"onItemFolderClicked()\"\n      tabindex=\"-1\"\n    >\n      <si-loading-spinner *ngIf=\"isExpanding\"></si-loading-spinner>\n      <i\n        *ngIf=\"!isExpanding\"\n        class=\"si-tree-view-item-icon\"\n        [ngClass]=\"getItemFolderStateClass()\"\n      ></i>\n    </a>\n  </div>\n</div>\n",
      styles: [":host.si-tree-view-top-level-item>.si-tree-view-li{margin-block:var(--si-tree-view-padding-base-vertical)}:host.si-tree-view-top-level-item+::ng-deep .si-tree-view-top-level-item>.si-tree-view-li{margin-block-start:0}.si-tree-view-li.si-tree-view-li-item{position:relative}.si-tree-view-li.si-tree-view-li-item:hover,.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-context-menu-visible,.si-tree-view-li.si-tree-view-li-item:hover .si-tree-view-item-end-icons,.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-context-menu-visible .si-tree-view-item-end-icons{background-color:var(--si-tree-view-item-hover-color)}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-selected,.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-selected .si-tree-view-item-end-icons{background-color:var(--si-tree-view-item-select-color)}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-selected>.si-tree-view-item>.si-tree-view-item-main>.si-tree-view-item-object-data>h5{font-weight:700}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable,.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable h5,.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable .si-tree-view-item-icon,.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable .si-tree-view-item-object-data-field-1{color:var(--element-text-disabled)}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable:hover,.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable .si-tree-view-item-end-icons{background-color:unset}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable .si-tree-view-item:hover{background-color:unset;cursor:default}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable .si-tree-view-item-dropdown-caret,.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable .si-tree-view-item-toggle-end{cursor:pointer}.si-tree-view-li.si-tree-view-li-item.si-tree-view-item-not-selectable .si-tree-view-item-toggle-end .si-tree-view-item-icon{color:var(--element-text-primary)}.si-tree-view-li.si-tree-view-li-item .si-tree-view-item-end-icons{background-color:var(--si-tree-view-background)}.si-tree-view-item-group,.si-tree-view-item{display:flex;align-items:center}.si-tree-stretch-center{align-self:stretch;display:flex;align-items:center;justify-content:center;margin:0;text-decoration:none}.si-tree-view-item-toggle.disabled .si-tree-view-item-icon{inline-size:24px}.si-tree-stretch-center+.si-tree-view-item-toggle-end .si-tree-view-item-icon{margin-inline-start:-4px}.si-tree-view-item-icon{padding-inline-end:8px}.si-tree-view-item-icon.si-tree-view-item-icon-spacer{box-sizing:content-box;inline-size:var(--si-tree-view-icon-size)}.si-tree-view-item-object-data,.si-tree-view-item-icon{margin-block:0;margin-inline:calc(var(--si-tree-view-padding-base-horizontal) / 4)}.si-tree-view-item{justify-content:space-between;cursor:pointer;min-block-size:var(--si-tree-view-item-min-height);padding-inline:var(--si-tree-view-padding-base-horizontal) calc(var(--si-tree-view-padding-base-horizontal) / 4)}:host-context(.si-tree-view-flat) .si-tree-view-item{padding-inline-start:calc(var(--si-tree-view-padding-base-horizontal) / 2)}.si-tree-view-state-indicator{margin-block:0;margin-inline:calc(var(--si-tree-view-padding-base-horizontal) * .75);min-inline-size:6px;block-size:6px;border-radius:50%}.si-tree-view-state-indicator.si-tree-view-state-indicator-endmost{margin-inline-end:calc(var(--si-tree-view-padding-base-horizontal) * 1.75)}.si-tree-view-item-group{padding-block:calc(2 * var(--si-tree-view-padding-base-vertical));padding-inline:calc(var(--si-tree-view-padding-base-horizontal) / 2);cursor:default}.si-tree-view-item-group .si-tree-view-item-dropdown-caret:hover,.si-tree-view-item-group .si-tree-view-item-icon:hover{cursor:pointer}.si-tree-view-item-dropdown-caret,.si-tree-view-item-dropdown-caret:hover,.si-tree-view-item-icon,.si-tree-view-item-icon:hover{color:var(--element-text-primary);text-decoration:none;font-size:var(--si-tree-view-icon-size)}.si-tree-view-item-main{overflow-x:hidden}.si-tree-view-item-main>.badge{margin-block:auto}.si-tree-view-item-object-data>.si-tree-view-item-object-data-field-1{color:var(--si-tree-view-item-object-data-field-1-color)}:host.si-tree-ellipsis .si-tree-view-item-object-data{overflow-x:hidden}.si-tree-view-item-object-data>*{white-space:nowrap;margin-block:0;line-height:var(--si-tree-view-item-line-height)}:host.si-tree-ellipsis .si-tree-view-item-object-data>*{overflow:hidden;text-overflow:ellipsis}.si-tree-view-item-object-data>h5{font-size:var(--si-tree-view-item-object-data-h5-font-size);font-weight:var(--si-tree-view-item-object-data-h5-font-weight)}.si-tree-view-menu-btn{pointer-events:none}.si-tree-view-item-end-icons{block-size:calc(var(--si-tree-view-item-min-height) - 2 * (var(--element-button-focus-width) + var(--element-button-focus-overlay-width)))}.si-tree-view-item-end-icons.si-tree-view-item-end-icons-sticky{position:sticky;inset-inline-end:0}.input-box{margin-inline:2px 12px}.form-check-input{inset-block-start:2px}si-loading-spinner{--loading-spinner-size: var(--si-tree-view-icon-size)}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: SiTreeViewService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    indentLevel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    treeItem: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    scrollIntoView: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    childrenLoaded: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    contextMenuAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    templates: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    contextMenuItemsProvider: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    stickyRightItems: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    stickyEndItems: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    displayFolderState: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    icons: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    contextDropdown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['contextDropdown']
    }],
    onContextMenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['contextmenu', ['$event']]
    }],
    onKeydown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keydown', ['$event']]
    }]
  });
})();
const trackByIdentity = (index, item) => item;
/**
 * Creates a trackByFunction for ngFor, that tracks an Item by its identity.
 * It should be used with a generic parameter, to generate a proper type:
 *
 * @example  @Input() trackByFunction = buildTrackByIdentity<ItemType>()
 */
const buildTrackByIdentity = () => trackByIdentity;
const trackByIndex = index => index;
/**
 * Creates a trackByFunction for ngFor, that tracks an Item by its index.
 * It should be used with a generic parameter, to generate a proper type:
 *
 * @example  @Input() trackByFunction = buildTrackByIdentity<ItemType>()
 */
const buildTrackByIndex = () => trackByIndex;

/**
 * Provides the functionality to flatten the hierarchical tree structure into a flat one dimensional array; called flattenedTrees.
 * The TreeViewComponent uses this flattened trees (the array) to bind the contained tree/list items to the GUI into a list.
 * In addition the service provides the number of 'normal' list items and the number of group items.
 * Important:
 * The coupling to the TreeViewComponent is high, thus the service is provided only by the TreeViewComponent.
 */
class SiTreeViewConverterService {
  constructor(siTreeViewService) {
    this.siTreeViewService = siTreeViewService;
    /**
     * The flattened tree array; filled upon calling the method 'fillFlattenedTree'
     */
    this.flattenedTrees = [];
    /**
     * The number of group items of the flattened tree.
     */
    this.groupItemsCount = 0;
    /**
     * The total items count of the flattened tree.
     */
    this.itemsTotal = 0;
  }
  /**
   * Flattens the tree handed over as parameter.
   * Takes the mode of the tree into consideration:
   * In case of a flat tree: only the first level of the items parameter is copied into the flattenedTrees array.
   * In case of a grouped tree: only the first two levels are copied into the flattenedTrees array
   * In the other cases all tree nodes are copied into the flattenedTrees array.
   */
  fillFlattenedTree(items) {
    if (this.siTreeViewService.flatTree === false) {
      this.flattenedTrees = [];
      if (this.siTreeViewService.groupedList) {
        this.fillFlattenedTreeRecursive(items, 2, 0);
      } else {
        this.fillFlattenedTreeRecursive(items);
      }
    } else {
      this.flattenedTrees = items;
      this.groupItemsCount = 0;
    }
    this.itemsTotal = items.length;
  }
  fillFlattenedTreeRecursive(items, noOfLevels, stackLevel) {
    if (noOfLevels !== undefined && stackLevel !== undefined && noOfLevels <= stackLevel) {
      return;
    }
    stackLevel = stackLevel ?? 0;
    for (const current of items) {
      this.flattenedTrees.push(current);
      if (this.siTreeViewService.isGroupedItem(current)) {
        this.groupItemsCount++;
      }
      if (current.state === 'expanded') {
        this.fillFlattenedTreeRecursive(current.children ?? [], noOfLevels, stackLevel + 1);
      }
    }
  }
}
SiTreeViewConverterService.ɵfac = function SiTreeViewConverterService_Factory(t) {
  return new (t || SiTreeViewConverterService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](SiTreeViewService));
};
SiTreeViewConverterService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiTreeViewConverterService,
  factory: SiTreeViewConverterService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTreeViewConverterService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
  }], function () {
    return [{
      type: SiTreeViewService
    }];
  }, null);
})();

/**
 * This service provides helper functionality for the tree view to read the height of the tree/list items and
 * the group list items out of the DOM.
 *
 * Important: The coupling to the TreeViewComponent is very high as the service contains knowledge on the HTML structure!!!
 * Thus the service is provided only by the TreeViewComponent.
 *
 * Constraint: The height of the items (DOM elements) must be all the same; The height of the grouped items (DOM elements)
 * must be all the same;
 */
class SiTreeViewItemHeightService {
  constructor(siTreeViewService) {
    this.siTreeViewService = siTreeViewService;
  }
  /**
   * Updates the height of a list item, if an appropriate item is in the DOM.
   *
   * @returns The new height of the list item; or undefined if no list item is in the DOM yet.
   */
  updateItemHeight(elementList, flattenedTrees, itemsBase, virtualizedItems) {
    let newHeight;
    let itemsTop = itemsBase + virtualizedItems;
    if (itemsTop > flattenedTrees.length) {
      itemsTop = flattenedTrees.length;
    }
    for (let i = itemsBase; i < itemsTop; i++) {
      if (this.siTreeViewService.isGroupedItem(flattenedTrees[i]) === false) {
        newHeight = this.getItemHeightOfListElement(elementList, i - itemsBase);
        break;
      }
    }
    if (newHeight !== undefined) {
      this.itemHeight = newHeight;
    }
    return newHeight;
  }
  /**
   * Updates the height of a group item, if an appropriate item is in the DOM.
   *
   * @returns The new height of the group item; or undefined if no group item is in the DOM yet.
   */
  updateGroupedItemHeight(elementList, flattenedTrees, itemsBase, virtualizedItems) {
    let newHeight;
    let itemsTop = itemsBase + virtualizedItems;
    if (itemsTop > flattenedTrees.length) {
      itemsTop = flattenedTrees.length;
    }
    for (let i = itemsBase; i < itemsTop; i++) {
      if (this.siTreeViewService.isGroupedItem(flattenedTrees[i])) {
        newHeight = this.getItemHeightOfListElement(elementList, i - itemsBase);
        break;
      }
    }
    if (newHeight !== undefined) {
      this.groupItemHeight = newHeight;
    }
    return newHeight;
  }
  getItemHeightOfListElement(elementList, index) {
    const items = elementList.querySelectorAll('si-tree-view-item');
    if (index < items.length) {
      return items.item(index).getBoundingClientRect().height;
    }
    return undefined;
  }
}
SiTreeViewItemHeightService.ɵfac = function SiTreeViewItemHeightService_Factory(t) {
  return new (t || SiTreeViewItemHeightService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](SiTreeViewService));
};
SiTreeViewItemHeightService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiTreeViewItemHeightService,
  factory: SiTreeViewItemHeightService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTreeViewItemHeightService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
  }], function () {
    return [{
      type: SiTreeViewService
    }];
  }, null);
})();

/**
 * Provides helper functionality to virtualize a list of items.
 * The number of virtualized items is the product of the pageSize and the pagesVirtualized (no of pages virtualized);
 * The paging algorithm works as follows:
 * If scrolling down, between two and three pages are kept above the 'visible' area;
 * The trigger is therefore if more than three pages are above the visible area, one page is removed from the top and added at the bottom.
 * If scrolling up, between one and two pages are kept above the 'visible' area;
 * The trigger is therefore if less than one page is above the visible area, one page is added on top and removed from the bottom.
 * All remaining items which are not virtualized, need to be simulated with two div-elements whose height can be set with the calculated
 * properties heightBefore and heightAfter.
 * See the test client for further information on the  usage.
 * Constraint:
 * The virtualization calculation works correct only when all list items are of the same height!
 * If the 'group' mode is enabled, the corresponding group-items can have a different height, but for all group-items it must be the same.
 */
class SiTreeViewVirtualizationService {
  /**
   * Creates an instance of TreeListVirtualizationService.
   */
  constructor(siTreeViewService, siTreeViewItemHeightService) {
    this.siTreeViewService = siTreeViewService;
    this.siTreeViewItemHeightService = siTreeViewItemHeightService;
    /**
     * The number of list items of a virtualized page.
     * Choose a value, which is roughly half of the number of items you expect to be displayed on the visible screen.
     */
    this.pageSize = 10;
    /**
     * The number of pages to be virtualized.
     */
    this.pagesVirtualized = 6;
    this.itemsVirtualizedChanged = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    /**
     * The total height of the 'simulated' list items which are ordered before the virtualized list items.
     */
    this._heightBefore = 0;
    /**
     * The total height of the 'simulated' list items which are ordered after the virtualized list items.
     */
    this._heightAfter = 0;
    this._pageBase = 0;
    this.scrollTopPrev = 0;
    this._itemsVirtualized = [];
    this.groupItemsCountBefore = 0;
    this.listItemsCountBefore = 0;
    this.groupItemsCountAfter = 0;
    this.listItemsCountAfter = 0;
    this.groupItemsCountVirtualized = 0;
    this.listItemsCountVirtualized = 0;
    this.listItemsPerVirtPage = [];
    this.groupItemsPerVirtPage = [];
  }
  /**
   * Returns the virtualized items.
   */
  get itemsVirtualized() {
    return this._itemsVirtualized;
  }
  /**
   * The total height of the 'simulated' list items which are ordered before the virtualized list items.
   */
  get heightBefore() {
    return this._heightBefore;
  }
  /**
   * The total height of the 'simulated' list items which are ordered after the virtualized list items.
   */
  get heightAfter() {
    return this._heightAfter;
  }
  /**
   * The index of the first (base) page being virtualized.
   */
  get pageBase() {
    return this._pageBase;
  }
  /**
   * The list item index of the base page.
   */
  get itemBaseIdx() {
    return this._pageBase * this.pageSize;
  }
  /**
   * Returns the number of virtualized items.
   */
  get itemsVirtualizedCount() {
    return this.itemsVirtualized.length;
  }
  /**
   * Call this method upon scroll handler notifications!
   *
   * @param scrollTop; the scrollTop value retrieved form the event target.
   * @param itemsAll; all items of the list;
   */
  handleScroll(scrollTop, itemsAll) {
    if (this.siTreeViewService.groupedList) {
      this.handleScrollGrouped(scrollTop, itemsAll);
    } else {
      this.handleScrollSimple(scrollTop, itemsAll);
    }
  }
  /**
   * Resets the virtualization to 'show' the items of the first page onwards.
   */
  resetVirtualizedItemList(itemsAll) {
    this._pageBase = 0;
    this.updateVirtualizedItemListIntern(itemsAll);
  }
  /**
   * Updates the virtualized items. Call this method for use cases such as:
   * - The list items array contains added or removed items which could be in the 'visible' area
   * - The item height has changed.
   */
  updateVirtualizedItemList(itemsAll) {
    this.updateVirtualizedItemListIntern(itemsAll);
  }
  /**
   * Checks if the specified item is currently virtualized.
   * If not, the virtualization is recalculated in order that the item is part of the virtualized items.
   */
  virtualizeItem(item, itemsAll) {
    if (this.checkIfItemDisplayed(item) === false) {
      this.setBasePageForItemToDisplay(item, itemsAll);
    }
  }
  /**
   * Calculates the first visible tree item based on current scroll position.
   */
  calculateFirstVisibleTreeItem() {
    let item;
    let totalItemHeight = 0;
    // Approx Y-position of the middle of the first visible (top) tree item
    const topItemPos = this.scrollTopPrev + (this.siTreeViewItemHeightService.itemHeight ?? 0) / 2 - this.heightBefore;
    for (let idx = 0; idx < this._itemsVirtualized.length && totalItemHeight < topItemPos; idx++) {
      item = this._itemsVirtualized[idx];
      totalItemHeight += this.isGroupItem(item) ? this.siTreeViewItemHeightService.groupItemHeight ?? 0 : this.siTreeViewItemHeightService.itemHeight ?? 0;
    }
    return item;
  }
  get listItemsCountTotal() {
    return this.listItemsCountBefore + this.listItemsCountVirtualized + this.listItemsCountAfter;
  }
  get groupItemsCountTotal() {
    return this.groupItemsCountBefore + this.groupItemsCountVirtualized + this.groupItemsCountAfter;
  }
  get itemsCountTotal() {
    return this.listItemsCountTotal + this.groupItemsCountTotal;
  }
  get itemsCountVirtualizedMax() {
    return this.pageSize * this.pagesVirtualized;
  }
  updateVirtualizedItemListIntern(itemsAll, scrolledPages) {
    // Note!!!:
    // The order of functionality within this method must be maintained as state of this object is changed!!!
    const itemsVirtualizedOld = this._itemsVirtualized.slice();
    this._itemsVirtualized = itemsAll.slice(this.pageBase * this.pageSize, this.itemsCountVirtualizedMax + this.pageBase * this.pageSize);
    this.updateItemsTypeCount(itemsAll, scrolledPages);
    if (this.siTreeViewService.groupedList) {
      this.calculateBeforeAndAfterForGroupList();
    } else {
      this.calculateBeforeAndAfter();
    }
    this.maintainVirtualizationNotifies(itemsVirtualizedOld);
  }
  /**
   * Notifies a consumer about changes of virtualized tree/list items in case of a pageBase change.
   * => One notification is sent for every tree/list item which went out of the virtualized items list or came into the virtualized items.
   */
  maintainVirtualizationNotifies(itemsVirtualizedOld) {
    const itemsAdded = [];
    const itemsRemoved = [];
    for (const item of itemsVirtualizedOld) {
      if (!this._itemsVirtualized.includes(item)) {
        itemsRemoved.push(item);
      }
    }
    for (const item of this._itemsVirtualized) {
      if (!itemsVirtualizedOld.includes(item)) {
        itemsAdded.push(item);
      }
    }
    if (itemsRemoved.length > 0) {
      this.itemsVirtualizedChanged.next(new ItemsVirtualizedArgs(itemsRemoved, false));
    }
    if (itemsAdded.length > 0) {
      this.itemsVirtualizedChanged.next(new ItemsVirtualizedArgs(itemsAdded, true));
    }
  }
  calculateBasePage(idx) {
    this._pageBase = Math.floor(idx / this.pageSize - this.pagesVirtualized / 2);
    if (this.pageBase < 0) {
      this._pageBase = 0;
    }
  }
  /**
   * Calculates the height [px] for the divs before and after the tree list in case of 'grouped' mode!
   */
  calculateBeforeAndAfterForGroupList() {
    const groupItemHeight = this.siTreeViewItemHeightService.groupItemHeight ?? 0;
    const listItemHeight = this.siTreeViewItemHeightService.itemHeight ?? 0;
    const scrollHeight = this.listItemsCountTotal * listItemHeight + this.groupItemsCountTotal * groupItemHeight;
    this._heightBefore = this.listItemsCountBefore * listItemHeight + this.groupItemsCountBefore * groupItemHeight;
    this._heightAfter = scrollHeight - this.heightBefore - (this.listItemsCountVirtualized * listItemHeight + this.groupItemsCountVirtualized * groupItemHeight);
  }
  /**
   * Calculates the height [px] for the divs before and after the tree list in case of 'non-grouped' mode!
   */
  calculateBeforeAndAfter() {
    if (this.siTreeViewItemHeightService.itemHeight === undefined || this.siTreeViewItemHeightService.itemHeight === 0) {
      return;
    }
    const scrollHeight = this.itemsCountTotal * this.siTreeViewItemHeightService.itemHeight;
    this._heightBefore = this.pageBase * this.pageSize * this.siTreeViewItemHeightService.itemHeight;
    this._heightAfter = scrollHeight - this.heightBefore - this.itemsVirtualizedCount * this.siTreeViewItemHeightService.itemHeight;
  }
  checkIfItemDisplayed(currentItem) {
    for (const item of this._itemsVirtualized) {
      if (item === currentItem) {
        return true;
      }
    }
    return false;
  }
  setBasePageForItemToDisplay(item, itemsAll) {
    for (let i = 0; i < itemsAll.length; i++) {
      if (itemsAll[i] === item) {
        this.calculateBasePage(i);
        this.updateVirtualizedItemListIntern(itemsAll);
        return;
      }
    }
  }
  /**
   * Updates the number of grouped items and list items for the whole list for the different areas:
   * - The not virtualized items on top of the list (represented by the 'beforeHeight')
   * - The virtualized items
   * - The not virtualized items on the bottom of the list (represented by the 'afterHeight')
   */
  updateItemsTypeCount(itemsAll, scrolledPages) {
    if (this.siTreeViewService.groupedList) {
      this.updateItemsTypeCountForGroupList(itemsAll, scrolledPages);
    } else {
      this.groupItemsCountBefore = 0;
      this.groupItemsCountVirtualized = 0;
      this.groupItemsCountAfter = 0;
      this.listItemsCountBefore = this.itemBaseIdx;
      this.listItemsCountVirtualized = this.itemsVirtualizedCount;
      this.listItemsCountAfter = itemsAll.length - this.listItemsCountBefore - this.listItemsCountVirtualized;
    }
    this.updateItemsTypeCountPerVirtPage();
    if (this.itemsCountTotal !== itemsAll.length) {
      console.error('TreeListVirtualizationService: updateVirtualizedItemList().updateListItemsTypeCount() calculation error!');
    }
  }
  /**
   * Updates the number of grouped items and list items per virtualized page.
   */
  updateItemsTypeCountPerVirtPage() {
    this.listItemsPerVirtPage = [];
    this.groupItemsPerVirtPage = [];
    for (let basePgIdx = 0; basePgIdx < this.pagesVirtualized; basePgIdx++) {
      const baseIdx = basePgIdx * this.pageSize;
      let groupItemsCount = 0;
      let listItemsCount = 0;
      for (let idx = baseIdx; idx < baseIdx + this.pageSize; idx++) {
        if (idx < this.itemsVirtualized.length) {
          const item = this.itemsVirtualized[idx];
          if (this.isGroupItem(item)) {
            groupItemsCount++;
          } else {
            listItemsCount++;
          }
        } else {
          break;
        }
      }
      this.listItemsPerVirtPage.push(listItemsCount);
      this.groupItemsPerVirtPage.push(groupItemsCount);
    }
  }
  calculateVirtPageHeight(index) {
    if (index >= this.groupItemsPerVirtPage.length) {
      return 0;
    }
    if (this.siTreeViewService.groupedList) {
      if (this.siTreeViewItemHeightService.itemHeight !== undefined) {
        return this.listItemsPerVirtPage[index] * this.siTreeViewItemHeightService.itemHeight + this.groupItemsPerVirtPage[index] * (this.siTreeViewItemHeightService.groupItemHeight ?? 0);
      } else {
        return this.groupItemsPerVirtPage[index] * (this.siTreeViewItemHeightService.groupItemHeight ?? 0);
      }
    } else {
      return this.listItemsPerVirtPage[index] * (this.siTreeViewItemHeightService.itemHeight ?? 0);
    }
  }
  updateItemsTypeCountForGroupList(itemsAll, scrolledPages) {
    if (scrolledPages !== undefined && scrolledPages !== 0) {
      this.updateItemsTypeCountForGroupListScrolling(itemsAll, scrolledPages);
    } else {
      this.updateListItemsTypeCountForGroupListFull(itemsAll);
    }
  }
  updateItemsTypeCountForGroupListScrolling(itemsAll, scrolledPages) {
    // this method optimizes the update of the type counters in regards of performance in case of scrolling
    // the method considers the difference of the pageBase for the calculation of the counters.
    scrolledPages = scrolledPages ?? 0;
    const oldBaseIndex = (this.pageBase - scrolledPages) * this.pageSize;
    const newBaseIndex = this.pageBase * this.pageSize;
    this.groupItemsCountAfter = this.groupItemsCountAfter + this.groupItemsCountVirtualized;
    this.listItemsCountAfter = this.listItemsCountAfter + this.listItemsCountVirtualized;
    this.groupItemsCountVirtualized = 0;
    this.listItemsCountVirtualized = 0;
    if (scrolledPages > 0) {
      for (let idx = oldBaseIndex; idx < newBaseIndex; idx++) {
        if (this.isGroupItem(itemsAll[idx])) {
          this.groupItemsCountBefore++;
          this.groupItemsCountAfter--;
        } else {
          this.listItemsCountBefore++;
          this.listItemsCountAfter--;
        }
      }
    } else {
      for (let idx = newBaseIndex; idx < oldBaseIndex; idx++) {
        if (this.isGroupItem(itemsAll[idx])) {
          this.groupItemsCountBefore--;
          this.groupItemsCountAfter++;
        } else {
          this.listItemsCountBefore--;
          this.listItemsCountAfter++;
        }
      }
    }
    const upper = newBaseIndex + this.itemsVirtualizedCount;
    for (let vi = newBaseIndex; vi < upper; vi++) {
      if (this.isGroupItem(itemsAll[vi])) {
        this.groupItemsCountVirtualized++;
      } else {
        this.listItemsCountVirtualized++;
      }
    }
    this.groupItemsCountAfter = this.groupItemsCountAfter - this.groupItemsCountVirtualized;
    this.listItemsCountAfter = this.listItemsCountAfter - this.listItemsCountVirtualized;
  }
  updateListItemsTypeCountForGroupListFull(itemsAll) {
    // does fully update the counters for the whole list.
    this.groupItemsCountBefore = 0;
    this.groupItemsCountVirtualized = 0;
    this.groupItemsCountAfter = 0;
    const virtTop = this.itemBaseIdx + this.itemsVirtualizedCount;
    for (let i = 0; i < itemsAll.length; i++) {
      if (this.isGroupItem(itemsAll[i])) {
        if (i < this.itemBaseIdx) {
          this.groupItemsCountBefore++;
        } else if (i < virtTop) {
          this.groupItemsCountVirtualized++;
        } else {
          this.groupItemsCountAfter++;
        }
      }
    }
    this.listItemsCountBefore = this.itemBaseIdx - this.groupItemsCountBefore;
    this.listItemsCountVirtualized = this.itemsVirtualizedCount - this.groupItemsCountVirtualized;
    this.listItemsCountAfter = itemsAll.length - this.listItemsCountBefore - this.listItemsCountVirtualized - this.groupItemsCountBefore - this.groupItemsCountVirtualized - this.groupItemsCountAfter;
  }
  isGroupItem(item) {
    return !item.parent && this.siTreeViewService.groupedList;
  }
  handleScrollSimple(scrollTop, itemsAll) {
    // Notes:
    // This method is used in case all tree list items are of the same height.
    // This allows for an optimized and proper calculation of the pageBase.
    // pageBase stores the index of the first page which is virtualized.
    // totalDeltaScrollVirt corresponds to the total virtualized items height above the visible are!
    const totalDeltaScrollVirt = scrollTop - this.heightBefore;
    let updateVirtList = false;
    const pageHeight = this.pageSize * (this.siTreeViewItemHeightService.itemHeight ?? 0);
    const pageBaseOld = this.pageBase;
    const pageChangeDownTrigger = 3;
    if (this.scrollTopPrev < scrollTop) {
      // Scroll down:
      // We do keep always between two and three pages virtualized above the view, when scrolling down.
      // => We remove pages from the top only when more than three pages are 'above' the visible view
      // => It is mandatory, that the trigger points are calculated exactly in order to get a nice scrolling behavior for all situations
      if (totalDeltaScrollVirt > pageChangeDownTrigger * pageHeight) {
        const pagesOutsideView = totalDeltaScrollVirt / pageHeight;
        // Two pages shall remain 'above' the view;
        // It is important that this number is higher than the trigger when scrolling up (which is one page, see the next else statement)
        // Thus we have a hysteresis of one page in order to avoid scrollbar jitters!!
        this._pageBase = this.pageBase + Math.floor(pagesOutsideView) - (pageChangeDownTrigger - 1);
        updateVirtList = true;
      }
    } else if (this.scrollTopPrev > scrollTop) {
      // scroll up
      if (totalDeltaScrollVirt < pageHeight) {
        // we add pages to the top as soon as only one page (or smaller) is 'above' the visible view
        const pagesOutsideView = totalDeltaScrollVirt / pageHeight;
        this._pageBase = this.pageBase + Math.floor(pagesOutsideView) - (pageChangeDownTrigger - 2);
        if (this.pageBase < 0) {
          this._pageBase = 0; // pageBase cannot be lower than 0; if pageBase=0 then we have no pages above the visible view.
        }

        if (this._pageBase !== pageBaseOld) {
          updateVirtList = true;
        }
      }
    }
    this.scrollTopPrev = scrollTop;
    if (updateVirtList) {
      this.updateVirtualizedItemListIntern(itemsAll, this.pageBase - pageBaseOld);
    }
  }
  handleScrollGrouped(scrollTop, itemsAll) {
    // Notes:
    // This method is used in case the tree list is grouped => the group items have a different height than the other items.
    // This allows for an optimized and avaeraged calculation of the new pageBase.
    // pageBase stores the index of the first page which is virtualized.
    // totalDeltaScrollVirt corresponds to the total virtualized items height above the visible are!
    const totalDeltaScrollVirt = scrollTop - this.heightBefore;
    const pageHeightFirst3 = this.calculateVirtPageHeight(0) + this.calculateVirtPageHeight(1) + this.calculateVirtPageHeight(2);
    let updateVirtList = false;
    const pageHeightFirst1 = this.calculateVirtPageHeight(0);
    const pageHeightAvg = pageHeightFirst3 / 3;
    const pageBaseOld = this.pageBase;
    if (this.scrollTopPrev < scrollTop) {
      // Scroll down:
      // We do keep always between two and three pages virtualized above the view, when scrolling down.
      // => We remove pages from the top only when more than three pages are 'above' the visible view.
      // => It is mandatory, that the trigger points are calculated exactly in order to get a nice scrolling behavior for all situations.
      if (totalDeltaScrollVirt > pageHeightFirst3) {
        // Next calculation is averaged. It seems not needed to properly calculate it based on the all the real items.
        const pagesOutsideView = totalDeltaScrollVirt / pageHeightAvg;
        // Two pages shall remain 'above' the view;
        // It is important that this number is higher than the trigger when scrolling up (which is one page, see next else).
        // Thus we have a hysteresis of one page in order to avoid scrollbar jitters!!
        this._pageBase = this.pageBase + Math.floor(pagesOutsideView) - 2;
        updateVirtList = true;
      }
    } else if (this.scrollTopPrev > scrollTop) {
      // scroll up
      if (totalDeltaScrollVirt < pageHeightFirst1) {
        // we add pages to the top as soon as only one page (or smaller) is 'above' the visible view
        const pagesOutsideView = totalDeltaScrollVirt / pageHeightAvg;
        this._pageBase = this.pageBase + Math.floor(pagesOutsideView) - 1;
        if (this.pageBase < 0) {
          this._pageBase = 0; // pageBase cannot be lower than 0; if pageBase=0 then we have no pages above the visible view.
        }

        if (this._pageBase !== pageBaseOld) {
          updateVirtList = true;
        }
      }
    }
    this.scrollTopPrev = scrollTop;
    if (updateVirtList) {
      this.updateVirtualizedItemListIntern(itemsAll, this.pageBase - pageBaseOld);
    }
  }
}
SiTreeViewVirtualizationService.ɵfac = function SiTreeViewVirtualizationService_Factory(t) {
  return new (t || SiTreeViewVirtualizationService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](SiTreeViewService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](SiTreeViewItemHeightService));
};
SiTreeViewVirtualizationService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiTreeViewVirtualizationService,
  factory: SiTreeViewVirtualizationService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTreeViewVirtualizationService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable
  }], function () {
    return [{
      type: SiTreeViewService
    }, {
      type: SiTreeViewItemHeightService
    }];
  }, null);
})();

/*
 * WARNING: Parts of this component are made to be used in conjunction with Bootstrap.
 * Bootstrap is not included with this package and has to be installed separately.
 */
/**
 * Implements a tree view with the following main capabilities:
 * Showing multiple trees. The data of the trees is set via the input property 'items'.
 * Showing the trees in a flat mode with navigation/bread/crumb on top.
 * A tree/list item is composed of a 'folder' icon, any item icon, the label, two additional datafields and a context menu button.
 * Children of parent nodes are lazy loaded upon request (in case they are not yet available in model.)
 * Context menu support via context menu item: the context menu items can be set via input properties.
 * Multi selection and focus support.
 * Checkboxes and / or option boxes per tree node.
 * Virtualization support: Input properties allow to set the page size and the number of pages to be virtualized.
 * Current limitation is roughly half a million of nodes. This is due to some 'strange' behavior with flex containers.
 * Set the input properties 'pageSize' and 'pagesVirtualized' to a reasonable amount of virtualized items.
 * The number of virtualized items is the product of the pageSize and the pagesVirtualized (no of pages virtualized).
 * Choose a value in the area of 50 virtualized items, dependent on the screen size. Check at runtime if appropriate!
 * Grouped List support: The component does also support grouped lists.
 * See the test client implementation of this package for all functionality.
 */
class SiTreeViewComponent {
  /**
   * Number of rows per page. Used for the virtualization of rows (number of
   * rows per page).
   * @defaultref {@link SiTreeViewVirtualizationService#pageSize}
   */
  set pageSize(value) {
    this.siTreeViewVirtualizationService.pageSize = value < 5 ? 5 : value;
    this.resetVirtualizedItemList();
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Number of pages which are virtualized.
   * @defaultref {@link SiTreeViewVirtualizationService#pagesVirtualized}
   */
  set pagesVirtualized(value) {
    this.siTreeViewVirtualizationService.pagesVirtualized = value < 5 ? 5 : value;
    this.resetVirtualizedItemList();
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets the height of the div above the virtualized rows.
   */
  get heightBefore() {
    return this.siTreeViewVirtualizationService.heightBefore + 'px';
  }
  /**
   * Gets the height of the div below the virtualized rows.
   */
  get heightAfter() {
    return this.siTreeViewVirtualizationService.heightAfter + 'px';
  }
  /**
   * Returns the virtualized items in the tree list uses virtualization, otherwise all items are returned as a flat list.
   * Bind these to the HTML.
   */
  get itemsVirtualized() {
    return this.isVirtualized ? this.siTreeViewVirtualizationService.itemsVirtualized : this.siTreeViewConverterService.flattenedTrees;
  }
  constructor(element, siTreeViewService, siTreeViewConverterService, siTreeViewVirtualizationService, siTreeViewItemHeightService, cdRef) {
    this.element = element;
    this.siTreeViewService = siTreeViewService;
    this.siTreeViewConverterService = siTreeViewConverterService;
    this.siTreeViewVirtualizationService = siTreeViewVirtualizationService;
    this.siTreeViewItemHeightService = siTreeViewItemHeightService;
    this.cdRef = cdRef;
    /**
     * Needs to be called by the consumer, if a tree model gets added or removed
     * items by the consumer. The tree list component needs to know, as it has to
     * update the flattened tree and the optional virtualization.
     * @deprecated Use the {@link refresh} method instead.
     */
    this.updateTreeDisplay = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    /**
     * Push the tree item to be scrolled into view. Tree items will be expanded if
     * required.
     * @deprecated Use the {@link scrollItemIntoView} method instead.
     */
    this.scrollIntoView = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    /**
     * The context menu items which are bound to the context menu of all tree items,
     * or a menu item provider function that is invoked for each tree item once.
     */
    this.contextMenuItems = [];
    /**
     * The indentation in pixel for the children in respect to its parent.
     */
    this.childrenIndentation = DEFAULT_CHILDREN_INDENTATION;
    /**
     * Enable horizontal scrolling. When disabled (the default), an ellipsis is used for overflowing text
     */
    this.horizontalScrolling = false;
    /**
     * Enable the compact mode, making it more vertically compact.
     */
    this.compactMode = false;
    /**
     * Enable buttons for collapse and expand all.
     * Does not work when `flatTree` is enabled.
     */
    this.expandCollapseAll = false;
    /**
     * Tooltip text shown for the expand all icon.
     */
    this.expandAllTooltip = 'Expand all';
    /**
     * Tooltip text shown for the collapse all icon.
     */
    this.collapseAllTooltip = 'Collapse all';
    /**
     * Text or translation key for aria-label of context menu dropdown. Needed for a11y.
     */
    this.contextMenuAriaLabel = 'Open context menu';
    /**
     * Triggered upon virtualization (or unvirtualization) of a tree item.
     */
    this.itemsVirtualizedChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Triggered upon clicking the folder of a tree item.
     */
    this.treeItemFolderClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Triggered upon a state change of the folder of a tree item.
     */
    this.treeItemFolderStateChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Triggered upon clicking the label of a tree item.
     */
    this.treeItemClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Triggered upon clicking the checkbox of a tree item.
     */
    this.treeItemCheckboxClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Triggered upon the request of loading the children of a tree item.
     */
    this.loadChildren = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Triggered upon the selection of a tree item (multi selection supported).
     */
    this.treeItemsSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Track-by function for tree items. By default, items are tracked by their identity.
     */
    this.trackByFunction = buildTrackByIdentity();
    this.initialized = false;
    this.scrollHandlerAdded = false;
    this.updateTreeItemHeightRequired = true; // must be set to true so the height is initially calculated once at least
    this.updateGroupItemHeightRequired = true; // must be set to true so the height is initially calculated once at least
    this.selectedTreeItems = [];
    this._items = [];
    this.breadCrumbTreeItems = [];
    this.subscriptions = [];
    this._multiSelectionActive = false;
    this.scrollChildIntoView = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.childrenLoaded = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.hasAnyChildren = true;
    this.expandItem = {
      icon: 'element-expand-all',
      action: () => {
        this.expandAll();
      },
      tooltip: this.expandAllTooltip
    };
    this.collapseItem = {
      icon: 'element-collapse-all',
      action: () => {
        this.collapseAll();
      },
      tooltip: this.collapseAllTooltip
    };
    this.scrollFunction = event => this.onScroll(event);
  }
  ngOnInit() {
    this.subscriptions.push(this.siTreeViewService.clickEvent.subscribe(event => this.onItemClicked(event)));
    this.subscriptions.push(this.siTreeViewService.contextMenuOpenEvent.subscribe(event => this.onContextMenuOpenClicked(event)));
    this.subscriptions.push(this.siTreeViewService.folderClickEvent.subscribe(event => this.onItemFolderClicked(event)));
    this.subscriptions.push(this.siTreeViewService.checkboxClickEvent.subscribe(event => this.onItemCheckboxClicked(event)));
    this.subscriptions.push(this.siTreeViewService.loadChildrenEvent.subscribe(event => this.onLoadChildren(event)));
    this.subscriptions.push(this.siTreeViewService.scrollIntoViewEvent.subscribe(event => this.onScrollIntoView(event)));
    this.subscriptions.push(this.updateTreeDisplay.subscribe(() => this.refresh()));
    this.subscriptions.push(this.scrollIntoView.subscribe(item => this.onScrollIntoViewByConsumer(item)));
    this.subscriptions.push(this.siTreeViewVirtualizationService.itemsVirtualizedChanged.subscribe(event => {
      this.itemsVirtualizedChanged.next(event);
      this.cdRef.markForCheck();
    }));
    this.initialized = true;
    this.handleTreeMode();
    this.icons = {
      ...DEFAULT_TREE_ICON_SET,
      ...this.icons
    };
  }
  ngOnDestroy() {
    this.subscriptions.filter(subscription => !!subscription).forEach(subscription => subscription.unsubscribe());
    this.removeScrollHandler();
  }
  ngOnChanges(changes) {
    this.expandItem.tooltip = this.expandAllTooltip;
    this.collapseItem.tooltip = this.collapseAllTooltip;
    if (changes.icons) {
      this.icons = {
        ...DEFAULT_TREE_ICON_SET,
        ...this.icons
      };
    }
  }
  ngAfterViewInit() {
    this.addScrollHandler();
  }
  ngAfterViewChecked() {
    if (this.updateTreeItemHeightRequired && this.siTreeViewConverterService.flattenedTrees.length > 0) {
      const oldHeight = this.siTreeViewItemHeightService.itemHeight;
      const elementList = this.getTreeViewElement();
      let newHeight;
      if (this.siTreeViewService.isVirtualized) {
        newHeight = this.siTreeViewItemHeightService.updateItemHeight(elementList, this.siTreeViewConverterService.flattenedTrees, this.siTreeViewVirtualizationService.itemBaseIdx, this.siTreeViewVirtualizationService.itemsVirtualizedCount);
      } else {
        newHeight = this.siTreeViewItemHeightService.updateItemHeight(elementList, this.siTreeViewConverterService.flattenedTrees, 0, this.siTreeViewConverterService.flattenedTrees.length);
      }
      if (newHeight !== undefined && newHeight > 0) {
        this.updateTreeItemHeightRequired = false;
        if (oldHeight !== newHeight) {
          const task = () => {
            this.updateVirtualizedItemList();
            this.cdRef.markForCheck();
          };
          rxjs__WEBPACK_IMPORTED_MODULE_44__.asyncScheduler.schedule(task, 0);
        }
      }
    }
    if (this.updateGroupItemHeightRequired && this.siTreeViewConverterService.flattenedTrees.length > 0) {
      const oldHeight = this.siTreeViewItemHeightService.groupItemHeight;
      const elementList = this.getTreeViewElement();
      let newHeight;
      if (this.siTreeViewService.isVirtualized) {
        newHeight = this.siTreeViewItemHeightService.updateGroupedItemHeight(elementList, this.siTreeViewConverterService.flattenedTrees, this.siTreeViewVirtualizationService.itemBaseIdx, this.siTreeViewVirtualizationService.itemsVirtualizedCount);
      } else {
        newHeight = this.siTreeViewItemHeightService.updateGroupedItemHeight(elementList, this.siTreeViewConverterService.flattenedTrees, 0, this.siTreeViewConverterService.flattenedTrees.length);
      }
      if (newHeight !== undefined) {
        this.updateGroupItemHeightRequired = false;
        if (oldHeight !== newHeight) {
          const task = () => {
            this.updateVirtualizedItemList();
            this.cdRef.markForCheck();
          };
          rxjs__WEBPACK_IMPORTED_MODULE_44__.asyncScheduler.schedule(task, 0);
        }
      }
    }
  }
  /**
   * @defaultref {@link SiTreeViewService#folderStateStart}
   * @deprecated Use `folderStateStart` instead.
   */
  set folderStateLeft(value) {
    this.folderStateStart = value;
  }
  get folderStateLeft() {
    return this.folderStateStart;
  }
  /**
   * Sets if the folder state icon shall be shown on the left (in LTR) or on the right (in LTR) side
   * of the tree item. Per default the icon will be shown on the left (in LTR). Has no
   * effect if flatTree is enabled.
   * @defaultref {@link SiTreeViewService#folderStateStart}
   */
  set folderStateStart(value) {
    this.siTreeViewService.folderStateStart = value;
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the folder state icon is shown on the left (in LTR) of the right (in LTR) side of the item
   */
  get folderStateStart() {
    return this.siTreeViewService.folderStateStart;
  }
  /**
   * Sets if the tree list shall virtualize the tree items.
   * This input field must be set at startup and shall not be changed afterwards.
   * @defaultref {@link SiTreeViewService#isVirtualized}
   */
  set isVirtualized(value) {
    this.siTreeViewService.isVirtualized = value;
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the tree list is virtualized.
   */
  get isVirtualized() {
    return this.siTreeViewService.isVirtualized;
  }
  /**
   * Sets the root tree items of all the trees (Required).
   * @defaultref {@link _items}
   */
  set items(items) {
    this._items = items;
    // Create a virtual root node so there is just a single root node. This makes sure the tree
    // can be fully traversed starting from any node. This is needed e.g. for recursively
    // removing the "active" state from other nodes.
    const virtualRoot = {
      label: 'root',
      level: ROOT_LEVEL,
      children: items,
      state: 'expanded',
      selectable: false
    };
    this.setTreeItemDefaults(virtualRoot);
    this.initializeTreeItemsRecursive(this._items, virtualRoot);
    this.fillFlattenedTree(this._items, true);
    this.latestFolderChanged = this._items[0];
  }
  /**
   * Gets the root items of the tree view.
   */
  get items() {
    return this._items;
  }
  /**
   * Sets the tree item to be selected.
   */
  set selectedItem(treeItem) {
    const isMultipleTreeItems = Array.isArray(treeItem);
    if (!isMultipleTreeItems && treeItem && !treeItem.selectable) {
      return;
    }
    for (const element of this._items) {
      selectRecursive(element, false);
    }
    this.selectedTreeItems = [];
    if (!treeItem) {
      this.siTreeViewService.triggerMarkForCheck.next();
      return;
    }
    if (!isMultipleTreeItems) {
      treeItem.selected = true;
      this.selectedTreeItems.push(treeItem);
      this.setFlatTreeSelectedFolder(treeItem.parent);
      if (this.isVirtualized) {
        this.siTreeViewVirtualizationService.virtualizeItem(treeItem, this.siTreeViewConverterService.flattenedTrees);
      }
      // wait one cycle until the new children (in case of page virtualization) are created
      const task = () => {
        this.scrollChildIntoView.next(treeItem);
        this.cdRef.markForCheck();
        this.siTreeViewService.triggerMarkForCheck.next();
      };
      rxjs__WEBPACK_IMPORTED_MODULE_44__.asyncScheduler.schedule(task, 0);
    } else if (!this.singleSelectMode) {
      const task = () => {
        for (const item of treeItem) {
          if (item.selectable === false) {
            continue;
          }
          item.selected = true;
          this.selectedTreeItems.push(item);
        }
        this.cdRef.markForCheck();
        this.siTreeViewService.triggerMarkForCheck.next();
      };
      rxjs__WEBPACK_IMPORTED_MODULE_44__.asyncScheduler.schedule(task, 0);
    }
  }
  /**
   * Sets if the tree shall force single tree item selection.
   * @defaultref {@link SiTreeViewService#singleSelectMode}
   */
  set singleSelectMode(value) {
    this.siTreeViewService.singleSelectMode = value;
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the tree view is set to single selection only.
   */
  get singleSelectMode() {
    return this.siTreeViewService.singleSelectMode;
  }
  /**
   * Shows or hides additional information below the label.
   * @defaultref {@link SiTreeViewService#enableDataField1}
   */
  set enableDataField1(value) {
    this.siTreeViewService.enableDataField1 = value;
    // Note:
    // We need to update the tree item height not earlier than when the corresponding DOM element is rendered (the layout renderer did run).
    // Thus, we set only a flag and check if update is needed within the ngAfterViewChecked hook.
    this.updateTreeItemHeightRequired = true;
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the dataField1 is shown/hidden.
   */
  get enableDataField1() {
    return this.siTreeViewService.enableDataField1;
  }
  /**
   * Shows or hides additional information below the label.
   * @defaultref {@link SiTreeViewService#enableDataField2}
   */
  set enableDataField2(value) {
    this.siTreeViewService.enableDataField2 = value;
    // Note:
    // We need to update the tree item height not earlier than when the corresponding DOM element is
    // rendered (the layout renderer did run). Thus, we set only a flag and check if update is needed
    // within the ngAfterViewChecked hook.
    this.updateTreeItemHeightRequired = true;
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the dataField2 is shown/hidden.
   */
  get enableDataField2() {
    return this.siTreeViewService.enableDataField2;
  }
  /**
   * Shows or hides state pipe.
   * @defaultref {@link SiTreeViewService#enableStateIndicator}
   */
  set enableStateIndicator(value) {
    this.siTreeViewService.enableStateIndicator = value;
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the state pipe is shown/hidden.
   */
  get enableStateIndicator() {
    return this.siTreeViewService.enableStateIndicator;
  }
  /**
   * Shows or hides icon
   * @defaultref {@link SiTreeViewService#enableIcon}
   */
  set enableIcon(value) {
    this.siTreeViewService.enableIcon = value;
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the icon is shown/hidden.
   */
  get enableIcon() {
    return this.siTreeViewService.enableIcon;
  }
  /**
   * Shows or hides context menu button.
   * @defaultref {@link SiTreeViewService#enableContextMenuButton}
   */
  set enableContextMenuButton(value) {
    this.siTreeViewService.enableContextMenuButton = value;
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the context menu button is shown/hidden.
   */
  get enableContextMenuButton() {
    return this.siTreeViewService.enableContextMenuButton;
  }
  /**
   * Allows / disabled selecting of tree items by clicking on them.
   * @defaultref {@link SiTreeViewService#enableSelection}
   */
  set enableSelection(value) {
    this.siTreeViewService.enableSelection = value;
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the tree item selection is enabled/disabled.
   */
  get enableSelection() {
    return this.siTreeViewService.enableSelection;
  }
  /**
   * Sets if children are deleted upon collapsing tree items. This feature might
   * be used, if children shall be lazy loaded always upon expanding a tree
   * item.
   * @defaultref {@link SiTreeViewService#deleteChildrenOnCollapse}
   */
  set deleteChildrenOnCollapse(value) {
    this.siTreeViewService.deleteChildrenOnCollapse = value;
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if children are deleted upon collapsing tree items.
   */
  get deleteChildrenOnCollapse() {
    return this.siTreeViewService.deleteChildrenOnCollapse;
  }
  /**
   * Sets if the tree view shall be displayed as flat tree list with a
   * breadcrumb. A flat tree only shows the one level at the time and lists the
   * tree items of the current level as a list.
   * @defaultref {@link SiTreeViewService#flatTree}
   */
  set flatTree(value) {
    const old = this.siTreeViewService.flatTree;
    this.siTreeViewService.flatTree = value;
    if (old !== this.siTreeViewService.flatTree) {
      this.handleTreeMode();
    }
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the tree view is displayed as flat tree list with a breadcrumb.
   */
  get flatTree() {
    return this.siTreeViewService.flatTree;
  }
  /**
   * Sets if the tree view is displayed as a grouped list.
   * Important: In this mode, only the first two hierarchies of the tree model
   * are considered!
   * @defaultref {@link SiTreeViewService#groupedList}
   */
  set groupedList(value) {
    const old = this.siTreeViewService.groupedList;
    this.siTreeViewService.groupedList = value;
    if (this.siTreeViewService.groupedList) {
      // Note:
      // We need to update the tree item height not earlier than when the corresponding DOM element
      // is rendered (the layout renderer did run). Thus, we set only a flag and check if update is
      // needed within the ngAfterViewChecked hook.
      this.updateGroupItemHeightRequired = true;
    }
    if (old !== this.siTreeViewService.groupedList) {
      this.fillFlattenedTree(this._items, true);
    }
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the tree view is displayed displayed as a grouped list.
   * Important: In this mode, only the first two hierarchies of the tree model
   * are considered!
   */
  get groupedList() {
    return this.siTreeViewService.groupedList;
  }
  /**
   * Sets if the tree items shall show a checkbox.
   * @defaultref {@link SiTreeViewService#enableCheckbox}
   */
  set enableCheckbox(value) {
    this.siTreeViewService.enableCheckbox = value;
    for (const element of this._items) {
      enableCheckboxRecursive(element, this.siTreeViewService.enableCheckbox);
    }
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the tree item show a checkbox.
   */
  get enableCheckbox() {
    return this.siTreeViewService.enableCheckbox;
  }
  /**
   * Sets if the tree items shall show an optionbox.
   * @defaultref {@link SiTreeViewService#enableOptionbox}
   */
  set enableOptionbox(value) {
    this.siTreeViewService.enableOptionbox = value;
    for (const element of this._items) {
      enableOptionboxRecursive(element, this.siTreeViewService.enableOptionbox);
    }
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the tree items shall show an optionbox.
   */
  get enableOptionbox() {
    return this.siTreeViewService.enableOptionbox;
  }
  /**
   * Sets if the checkbox state of a tree item is inherited to its children/parent.
   * @defaultref {@link SiTreeViewService#inheritChecked}
   */
  set inheritChecked(value) {
    this.siTreeViewService.inheritChecked = value;
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets if the checkbox state of a tree item is inherited to its children/parent.
   */
  get inheritChecked() {
    return this.siTreeViewService.inheritChecked;
  }
  /**
   * Returns the last breadcrumb tree item. Can be null in case the flat tree
   * shows the root.
   */
  get lastBreadCrumbItem() {
    const item = this.breadCrumbTreeItems[this.breadCrumbTreeItems.length - 1];
    return item ? item : null;
  }
  /**
   * Returns true if the header shows the root/home of the tree.
   */
  get headerShowsRoot() {
    return this.lastBreadCrumbItem == null;
  }
  /**
   * Sets the string to be shown when there are no content actions.
   * @defaultref {@link SiTreeViewService#noActionsString}
   */
  set noActionsString(value) {
    this.siTreeViewService.noActionsString = value;
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  /**
   * Gets the string to be shown when there are no content actions.
   */
  get noActionsString() {
    return this.siTreeViewService.noActionsString;
  }
  /**
   * Called by the owner of the tree upon returning the retrieved children of a
   * 'load children' request.
   */
  childrenLoadingDone(item, children) {
    const oldState = item.state ?? 'collapsed';
    if (item?.state === 'expanding') {
      this.initializeTreeItemsRecursive(children, item, (item.level ?? 0) + 1);
      item.children = children;
      item.state = 'expanded';
    }
    const newState = item.state ?? 'collapsed';
    this.updateBreadCrumb(this.evalLowestBreadCrumbNode());
    if (this.flatTree) {
      this.fillFlattenedTree(children);
    } else {
      this.fillFlattenedTree(this._items);
    }
    if (oldState !== newState) {
      this.treeItemFolderStateChanged.emit(new FolderStateEventArgs(item, oldState, newState));
    }
    this.childrenLoaded.next(item);
    this.cdRef.markForCheck();
  }
  onFlatTreeNavigateUp() {
    if (this.lastBreadCrumbItem) {
      this.onBreadCrumbItemClicked(this.lastBreadCrumbItem.parent);
    }
  }
  onFlatTreeNavigateHome() {
    this.onBreadCrumbItemClicked();
  }
  onTreeArrowKeydown(event) {
    const rtlCorrectedKey = correctKeyRTL(event.key);
    if (rtlCorrectedKey === 'ArrowLeft' && this.flatTree) {
      if (this.lastBreadCrumbItem) {
        this.onFlatTreeNavigateUp();
      } else {
        this.onFlatTreeNavigateHome();
      }
      setTimeout(() => {
        if (this.treeViewInnerElement) {
          this.treeViewInnerElement.nativeElement.focus();
        }
      });
    }
  }
  /**
   * Updates the tree to visualize the provided tree item by expanding all its parent items, collapsing all
   * other first level tree items and scroll to the provided item.
   * @param item The tree item that shall be visible.
   */
  showTreeItem(item) {
    this.doShowTreeItem(item);
    const task = () => {
      this.scrollChildIntoView.next(item);
      this.cdRef.markForCheck();
    };
    rxjs__WEBPACK_IMPORTED_MODULE_44__.asyncScheduler.schedule(task, 0);
  }
  doShowTreeItem(item, collapseOtherNodes = true) {
    if (item.parent && item.parent.level !== ROOT_LEVEL) {
      this.expandTreeItem(item.parent);
      if (item.parent.parent && item.parent.parent.level !== ROOT_LEVEL) {
        this.doShowTreeItem(item.parent, collapseOtherNodes);
      } else if (collapseOtherNodes) {
        const myRoot = item.parent;
        for (const root of this.items) {
          if (myRoot !== root) {
            this.collapseTreeItem(root);
          }
        }
      }
    }
  }
  /**
   * Expands all tree items.
   * @param items Optional param for recursion, will expand these items. If empty, all tree items will be expanded.
   */
  expandAll(items) {
    (items ?? this._items).forEach(item => {
      if (hasChildren(item) && childrenLoaded(item)) {
        if (item.state === 'collapsed') {
          this.expandTreeItem(item);
        }
        this.expandAll(item.children);
      }
    });
  }
  /**
   * Expands the provided tree item.
   * @param item The tree item to be expanded.
   */
  expandTreeItem(item) {
    const oldState = removeUndefinedState(item.state);
    expand(item);
    this.latestFolderChanged = item;
    this.siTreeViewService.folderClickEvent.next(new FolderStateEventArgs(item, oldState, removeUndefinedState(item.state)));
  }
  /**
   * Collapses all tree items.
   * @param items Optional param for recursion, will collapse these items. If empty, all tree items will be collapsed.
   */
  collapseAll(items) {
    (items ?? this._items).forEach(item => {
      if (hasChildren(item)) {
        if (item.state === 'expanded' || item.state === 'expanding') {
          this.collapseTreeItem(item);
        }
        this.collapseAll(item.children);
      }
    });
  }
  /**
   * Collapses the provided tree item.
   * @param item The tree item to be collapsed.
   */
  collapseTreeItem(item) {
    const oldState = item.state ?? 'collapsed';
    collapse(item);
    this.latestFolderChanged = item;
    this.siTreeViewService.folderClickEvent.next(new FolderStateEventArgs(item, oldState, removeUndefinedState(item.state)));
  }
  getTreeViewElement() {
    return this.element.nativeElement.querySelector('.si-tree-view');
  }
  /**
   * Forces a refresh of the view considering the current tree item model. Needs
   * to be called when tree items have been added, removed, or updated via model
   * in ways that do not trigger an automatic update of the view.
   */
  refresh() {
    if (!this.flatTree) {
      this.fillFlattenedTree(this._items);
    } else {
      this.fillFlattenedTree(this.evalListItemsForFlatTreeMode());
    }
    this.cdRef.markForCheck();
  }
  /**
   * Scrolls the specified tree item into view. Tree items will be expanded if
   * required.
   */
  scrollItemIntoView(treeItem) {
    this.onScrollIntoViewByConsumer(treeItem);
  }
  evalListItemsForFlatTreeMode() {
    return this.lastBreadCrumbItem ? this.lastBreadCrumbItem.children ?? [] : this._items;
  }
  collapseChildrenFlatTreeModeOnly(items) {
    this.collapseChildren(items, true);
  }
  collapseChildren(items, flatModeOnly = false) {
    if (flatModeOnly && !this.flatTree) {
      return;
    }
    for (const item of items) {
      if (item.state === 'expanded' || item.state === 'expanding') {
        const oldState = item.state;
        collapse(item);
        this.latestFolderChanged = item;
        this.treeItemFolderStateChanged.next(new FolderStateEventArgs(item, oldState, item.state));
      }
    }
  }
  addScrollHandler() {
    if (!this.scrollHandlerAdded && this.isVirtualized) {
      // TODO: other solution as .addEventListener
      this.getTreeViewElement().addEventListener('scroll', this.scrollFunction, false);
      this.scrollHandlerAdded = true;
    }
  }
  removeScrollHandler() {
    if (this.scrollHandlerAdded) {
      this.getTreeViewElement().removeEventListener('scroll', this.scrollFunction, false);
      this.scrollHandlerAdded = false;
    }
  }
  onKeyUpShift(event) {
    if (this._multiSelectionActive) {
      this._multiSelectionActive = false;
      this.emitSelectedItems();
    }
  }
  onKeyUpCtrl(event) {
    if (this._multiSelectionActive) {
      this._multiSelectionActive = false;
      this.emitSelectedItems();
    }
  }
  onKeyUpMeta(event) {
    if (this._multiSelectionActive) {
      this._multiSelectionActive = false;
      this.emitSelectedItems();
    }
  }
  onMouseLeave(event) {
    if (this._multiSelectionActive) {
      this._multiSelectionActive = false;
      this.emitSelectedItems();
    }
  }
  onContextMenuOpenClicked(event) {
    setActive(event.target, true);
    const listRect = this.element.nativeElement.getBoundingClientRect();
    this.siTreeViewService.contextMenuDropUp = event.itemTop + 3 * (this.siTreeViewItemHeightService.itemHeight ?? 0) > listRect.bottom;
    this.cdRef.markForCheck();
  }
  onItemClicked(event) {
    let skipFocus = false;
    if (!event.target.selectable) {
      return;
    }
    if ((event.mouseEvent.ctrlKey || navigator.platform.match('Mac') && event.mouseEvent.metaKey) && !this.singleSelectMode) {
      this._multiSelectionActive = true;
      this.multiSelectionStart = event.target;
      if (event.target.selected) {
        skipFocus = true;
      }
      event.target.selected = !event.target.selected;
      if (event.target.selected && !this.singleSelectMode) {
        this.selectedTreeItems.push(event.target);
      } else {
        const idx = this.selectedTreeItems.indexOf(event.target);
        if (idx !== -1) {
          this.selectedTreeItems.splice(idx, 1);
        }
      }
    } else if (event.mouseEvent.shiftKey && !this.singleSelectMode) {
      this._multiSelectionActive = true;
      // If the anchor has not been established, set it to the first item in the selected
      // items list if defined ELSE the first item in the tree
      if (!this.multiSelectionStart) {
        this.multiSelectionStart = this.selectedTreeItems?.[0] ?? this._items?.[0];
      }
      // If the tree is in flat mode, ensure the anchor is inside the currently selected folder
      if (this.flatTree) {
        const treeItems = (event.target.parent ? event.target.parent.children : this._items) ?? [];
        if (treeItems.findIndex(ti => ti === this.multiSelectionStart) < 0) {
          // Move anchor to top-level item in current folder!
          this.multiSelectionStart = treeItems[0];
        }
      }
      for (const element of this._items) {
        selectRecursive(element, false);
      }
      this.multiSelectionStart.selected = true;
      const selectedItems = selectItemsBetween(this._items, this.multiSelectionStart, event.target);
      this.selectedTreeItems = [this.multiSelectionStart];
      if (selectedItems) {
        this.selectedTreeItems.push(...selectedItems);
      }
    } else {
      this.multiSelectionStart = event.target;
      for (const element of this._items) {
        selectRecursive(element, false);
      }
      event.target.selected = true;
      this.selectedTreeItems = [event.target];
    }
    for (const element of this._items) {
      resetActive(element);
    }
    if (!skipFocus) {
      setActive(event.target, true);
    }
    this.treeItemClicked.emit(event.target);
    if (!this._multiSelectionActive) {
      this.emitSelectedItems();
      // Note, if multi selection would be active, we would emit the selected items only upon 'keyup' event for Shift and Control
      // and upon document.mouseleave event
    }

    this.cdRef.markForCheck();
    this.siTreeViewService.triggerMarkForCheck.next();
  }
  emitSelectedItems() {
    if (this.enableSelection) {
      if (this.siTreeViewService.groupedList) {
        const filtered = this.selectedTreeItems.filter(item => !this.siTreeViewService.isGroupedItem(item));
        this.treeItemsSelected.emit(filtered);
      } else {
        this.treeItemsSelected.emit(this.selectedTreeItems);
      }
    }
  }
  handleTreeMode() {
    let ti;
    if (this.isVirtualized) {
      ti = this.siTreeViewVirtualizationService.calculateFirstVisibleTreeItem();
    }
    if (this.flatTree) {
      this.siTreeViewService.childrenIndentation = 0;
      if (!this.latestFolderChanged) {
        // no folder state change of any tree item so far => display the root item in the list
        this.fillFlattenedTree(this._items, true);
      } else if (this.latestFolderChanged.state === 'expanded') {
        this.fillFlattenedTree(this.latestFolderChanged.children ?? [], true);
      } else if (this.latestFolderChanged.parent) {
        this.fillFlattenedTree(this.latestFolderChanged.parent?.children ?? [], true);
      } else {
        this.fillFlattenedTree(this._items, true);
      }
      this.updateBreadCrumb(this.evalLowestBreadCrumbNode());
      if (ti && !this.siTreeViewConverterService.flattenedTrees.includes(ti, 0)) {
        ti = this.siTreeViewConverterService.flattenedTrees[0];
      }
    } else {
      this.siTreeViewService.childrenIndentation = this.childrenIndentation;
      this.fillFlattenedTree(this._items, true);
    }
    this.onScrollIntoViewByConsumer(ti);
  }
  evalLowestBreadCrumbNode() {
    if (this.latestFolderChanged) {
      return this.latestFolderChanged.state === 'expanded' ? this.latestFolderChanged : this.latestFolderChanged.parent;
    }
    return undefined;
  }
  onItemFolderClicked(eventArgs) {
    this.treeItemFolderClicked.emit(eventArgs);
    this.treeItemFolderStateChanged.emit(eventArgs);
    this.latestFolderChanged = eventArgs.treeItem;
    this.updateBreadCrumb(this.evalLowestBreadCrumbNode());
    if (!this.flatTree) {
      this.fillFlattenedTree(this._items);
    } else if (this.latestFolderChanged.state === 'expanded') {
      this.fillFlattenedTree(this.latestFolderChanged.children ?? []);
      setTimeout(() => {
        this.treeViewInnerElement?.nativeElement.focus();
      });
    }
  }
  updateBreadCrumb(treeItem) {
    if (!treeItem || treeItem.level === ROOT_LEVEL) {
      this.breadCrumbTreeItems = [];
    } else {
      this.breadCrumbTreeItems = [treeItem];
      this.pushParentItemsIntoBreadCrumbRecursive(treeItem);
      this.breadCrumbTreeItems = this.breadCrumbTreeItems.reverse();
    }
  }
  pushParentItemsIntoBreadCrumbRecursive(treeItem) {
    if (treeItem?.parent && treeItem?.parent?.level !== ROOT_LEVEL) {
      this.breadCrumbTreeItems.push(treeItem.parent);
      this.pushParentItemsIntoBreadCrumbRecursive(treeItem.parent);
    }
  }
  onItemCheckboxClicked(eventArgs) {
    this.siTreeViewService.triggerMarkForCheck.next();
    this.treeItemCheckboxClicked.emit(eventArgs);
  }
  onLoadChildren(treeItem) {
    this.loadChildren.emit(new LoadChildrenEventArgs(treeItem, (item, children) => this.childrenLoadingDone(item, children)));
  }
  setFlatTreeSelectedFolder(treeItem) {
    if (this.flatTree) {
      this.latestFolderChanged = treeItem;
      if (treeItem) {
        expand(treeItem);
      }
      this.onBreadCrumbItemClicked(treeItem);
    }
  }
  onBreadCrumbItemClicked(treeItem) {
    if (treeItem && treeItem.level !== ROOT_LEVEL) {
      this.fillFlattenedTree(treeItem.children ?? [], true);
    } else {
      this.fillFlattenedTree(this._items, true);
    }
    this.updateBreadCrumb(treeItem);
  }
  onScroll(event) {
    if (this.siTreeViewService.isVirtualized) {
      const scrollTop = event.target.scrollTop;
      this.siTreeViewVirtualizationService.handleScroll(scrollTop, this.siTreeViewConverterService.flattenedTrees);
    }
  }
  /**
   * Called by the consumer when he wants a node to be scrolled into view.
   */
  onScrollIntoViewByConsumer(treeItem) {
    if (treeItem) {
      if (this.isVirtualized) {
        this.siTreeViewVirtualizationService.virtualizeItem(treeItem, this.siTreeViewConverterService.flattenedTrees);
      }
      // wait one cycle until the new children (in case of page virtualization) are created
      const task = () => {
        this.doShowTreeItem(treeItem, false); // keep previously opened nodes as it is
        rxjs__WEBPACK_IMPORTED_MODULE_44__.asyncScheduler.schedule(() => {
          this.scrollChildIntoView.next(treeItem);
          this.cdRef.markForCheck();
        }, 0);
      };
      rxjs__WEBPACK_IMPORTED_MODULE_44__.asyncScheduler.schedule(task, 0);
    }
  }
  onScrollIntoView(elementTreeItem) {
    const clientRectNode = elementTreeItem.nativeElement.getBoundingClientRect();
    const clientRect = this.element.nativeElement.getBoundingClientRect();
    if (clientRectNode.top < clientRect.top || clientRectNode.top + this.siTreeViewItemHeightService.itemHeight > clientRect.bottom) {
      elementTreeItem.nativeElement.scrollIntoView();
    }
    this.cdRef.markForCheck();
  }
  fillFlattenedTree(items, resetVirtualization = false) {
    this.collapseChildrenFlatTreeModeOnly(items);
    this.siTreeViewConverterService.fillFlattenedTree(items);
    if (resetVirtualization) {
      this.resetVirtualizedItemList();
    } else {
      this.updateVirtualizedItemList();
    }
  }
  updateHasChildren() {
    this.hasAnyChildren = !!this.siTreeViewConverterService.flattenedTrees?.some(item => hasChildren(item));
  }
  updateVirtualizedItemList() {
    this.updateHasChildren();
    if (this.isVirtualized && this.initialized) {
      this.siTreeViewVirtualizationService.updateVirtualizedItemList(this.siTreeViewConverterService.flattenedTrees);
      this.cdRef.markForCheck();
    }
  }
  resetVirtualizedItemList() {
    this.updateHasChildren();
    if (this.isVirtualized && this.initialized) {
      this.siTreeViewVirtualizationService.resetVirtualizedItemList(this.siTreeViewConverterService.flattenedTrees);
    }
  }
  initializeTreeItemsRecursive(items, parent, level) {
    level ?? (level = 0);
    for (const item of items) {
      item.parent = parent;
      item.level = level;
      this.setTreeItemDefaults(item);
      if (item.children?.length) {
        this.initializeTreeItemsRecursive(item.children, item, level + 1);
      }
    }
  }
  setTreeItemDefaults(item) {
    item.children ?? (item.children = []);
    item.state ?? (item.state = 'collapsed');
    item.active ?? (item.active = false);
    item.checked ?? (item.checked = 'unchecked');
    item.selected ?? (item.selected = false);
    item.selectable ?? (item.selectable = true);
    item.showCheckbox ?? (item.showCheckbox = this.siTreeViewService.enableCheckbox ?? false);
    item.showOptionbox ?? (item.showOptionbox = this.siTreeViewService.enableOptionbox ?? false);
  }
}
SiTreeViewComponent.ɵfac = function SiTreeViewComponent_Factory(t) {
  return new (t || SiTreeViewComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiTreeViewService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiTreeViewConverterService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiTreeViewVirtualizationService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiTreeViewItemHeightService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiTreeViewComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiTreeViewComponent,
  selectors: [["si-tree-view"]],
  contentQueries: function SiTreeViewComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, SiTreeViewItemTemplateDirective, 4);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.templates = _t);
    }
  },
  viewQuery: function SiTreeViewComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c62, 7, _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.treeViewInnerElement = _t.first);
    }
  },
  hostBindings: function SiTreeViewComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keyup.shift", function SiTreeViewComponent_keyup_shift_HostBindingHandler($event) {
        return ctx.onKeyUpShift($event);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveDocument"])("keyup.control", function SiTreeViewComponent_keyup_control_HostBindingHandler($event) {
        return ctx.onKeyUpCtrl($event);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveDocument"])("keyup.meta", function SiTreeViewComponent_keyup_meta_HostBindingHandler($event) {
        return ctx.onKeyUpMeta($event);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveDocument"])("mouseleave", function SiTreeViewComponent_mouseleave_HostBindingHandler($event) {
        return ctx.onMouseLeave($event);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveDocument"]);
    }
  },
  inputs: {
    updateTreeDisplay: "updateTreeDisplay",
    scrollIntoView: "scrollIntoView",
    contextMenuItems: "contextMenuItems",
    childrenIndentation: "childrenIndentation",
    horizontalScrolling: "horizontalScrolling",
    compactMode: "compactMode",
    expandCollapseAll: "expandCollapseAll",
    expandAllTooltip: "expandAllTooltip",
    collapseAllTooltip: "collapseAllTooltip",
    contextMenuAriaLabel: "contextMenuAriaLabel",
    icons: "icons",
    trackByFunction: "trackByFunction",
    pageSize: "pageSize",
    pagesVirtualized: "pagesVirtualized",
    folderStateLeft: "folderStateLeft",
    folderStateStart: "folderStateStart",
    isVirtualized: "isVirtualized",
    items: "items",
    selectedItem: "selectedItem",
    singleSelectMode: "singleSelectMode",
    enableDataField1: "enableDataField1",
    enableDataField2: "enableDataField2",
    enableStateIndicator: "enableStateIndicator",
    enableIcon: "enableIcon",
    enableContextMenuButton: "enableContextMenuButton",
    enableSelection: "enableSelection",
    deleteChildrenOnCollapse: "deleteChildrenOnCollapse",
    flatTree: "flatTree",
    groupedList: "groupedList",
    enableCheckbox: "enableCheckbox",
    enableOptionbox: "enableOptionbox",
    inheritChecked: "inheritChecked",
    noActionsString: "noActionsString"
  },
  outputs: {
    itemsVirtualizedChanged: "itemsVirtualizedChanged",
    treeItemFolderClicked: "treeItemFolderClicked",
    treeItemFolderStateChanged: "treeItemFolderStateChanged",
    treeItemClicked: "treeItemClicked",
    treeItemCheckboxClicked: "treeItemCheckboxClicked",
    loadChildren: "loadChildren",
    treeItemsSelected: "treeItemsSelected"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([SiTreeViewConverterService, SiTreeViewItemHeightService, SiTreeViewService, SiTreeViewVirtualizationService]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 7,
  vars: 9,
  consts: [["class", "si-tree-view-expand-collapse-container", "role", "menu", 4, "ngIf"], ["class", "si-tree-view-header", 4, "ngIf"], ["siListInteraction", "", "listInteractionOrientation", "vert", 1, "si-tree-view", "focus-inside", 3, "keydown"], ["treeViewInner", ""], [3, "w-100", "height", 4, "ngIf"], ["class", "si-tree-view-root-ul", 4, "ngIf"], ["role", "menu", 1, "si-tree-view-expand-collapse-container"], ["itemClass", "btn btn-circle btn-tertiary", "role", "menuitem", 1, "si-tree-view-expand-collapse", 3, "item", "disableListInteraction"], [1, "si-tree-view-header"], ["class", "si-tree-view-header-btn", "tabindex", "0", 3, "disabled", "ngClass", "click", "keydown.enter", 4, "ngIf"], ["class", "text-center text-truncate", 4, "ngIf"], ["tabindex", "0", 1, "si-tree-view-header-btn", 3, "ngClass", "click", "keydown.enter"], [1, "text-center", "text-truncate"], [1, "si-tree-view-root-ul"], ["class", "focus-none", "siListInteractionItem", "", 3, "si-tree-ellipsis", "si-tree-view-top-level-item", "treeItem", "templates", "scrollIntoView", "childrenLoaded", "indentLevel", "icons", "contextMenuItemsProvider", "stickyEndItems", "displayFolderState", "contextMenuAriaLabel", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["siListInteractionItem", "", 1, "focus-none", 3, "treeItem", "templates", "scrollIntoView", "childrenLoaded", "indentLevel", "icons", "contextMenuItemsProvider", "stickyEndItems", "displayFolderState", "contextMenuAriaLabel"]],
  template: function SiTreeViewComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiTreeViewComponent_div_0_Template, 3, 4, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTreeViewComponent_div_1_Template, 4, 3, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2, 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown", function SiTreeViewComponent_Template_div_keydown_2_listener($event) {
        return ctx.onTreeArrowKeydown($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiTreeViewComponent_div_4_Template, 1, 4, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiTreeViewComponent_div_5_Template, 2, 2, "div", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiTreeViewComponent_div_6_Template, 1, 4, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.flatTree && ctx.expandCollapseAll);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.flatTree);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("si-tree-horizontal-scroll", ctx.horizontalScrolling)("si-tree-view-flat", ctx.flatTree);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.isVirtualized);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.itemsVirtualized);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.isVirtualized);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiListInteractionDirective, SiListInteractionItemDirective, SiMenuItemComponent, SiTreeViewItemComponent, SiTranslatePipe],
  styles: ["@keyframes _ngcontent-%COMP%_si-spin{0%{transform:rotate(0)}to{transform:rotate(359deg)}}[_nghost-%COMP%]{--si-tree-view-background: var(--element-base-1);--si-tree-view-border-color: var(--element-ui-4);--si-tree-view-icon-size: 24px;--si-tree-view-padding-base-horizontal: 8px;--si-tree-view-padding-base-vertical: 8px;--si-tree-view-expand-collapse-height: 32px;--si-tree-view-expand-collapse-padding-horizontal: 6px;--si-tree-view-expand-collapse-padding-vertical: 4px;--si-tree-view-expand-collapse-border-radius: var(--element-radius-1);--si-tree-view-item-hover-color: var(--element-base-1-hover);--si-tree-view-item-select-color: var(--element-base-1-selected);--si-tree-view-item-line-height: 1.143;--si-tree-view-item-min-height: 40px;--si-tree-view-item-object-data-field-1-color: var(--element-text-secondary);--si-tree-view-item-object-data-h5-font-size: .875rem;--si-tree-view-item-object-data-h5-font-weight: normal;display:flex;flex-direction:column;background-color:var(--si-tree-view-background)}.tree-sm[_nghost-%COMP%]{--si-tree-view-item-min-height: 32px;--si-tree-view-padding-base-vertical: 0px}.tree-xs[_nghost-%COMP%]{--si-tree-view-item-min-height: 24px;--si-tree-view-padding-base-vertical: 0px}.si-tree-view-expand-collapse-container[_ngcontent-%COMP%]{margin-block:var(--si-tree-view-padding-base-vertical) calc(-.5 * var(--si-tree-view-padding-base-vertical));margin-inline:var(--si-tree-view-padding-base-horizontal)}.si-tree-view-expand-collapse[_ngcontent-%COMP%]{display:inline-block;margin-inline-start:calc(var(--si-tree-view-padding-base-vertical) / 2)}.si-tree-view-expand-collapse[_ngcontent-%COMP%]:first-child{margin-inline-start:0}.si-tree-view-expand-collapse[_ngcontent-%COMP%]     .dropdown-item{padding-block:var(--si-tree-view-expand-collapse-padding-vertical);padding-inline:var(--si-tree-view-expand-collapse-padding-horizontal);block-size:calc(var(--si-tree-view-expand-collapse-height) - var(--si-tree-view-expand-collapse-padding-vertical));border-radius:var(--si-tree-view-expand-collapse-border-radius)}.si-tree-view-expand-collapse[_ngcontent-%COMP%]     .dropdown-item .item-icon{margin-inline:0}.si-tree-view-header[_ngcontent-%COMP%]{padding:calc(var(--si-tree-view-padding-base-horizontal) / 2);border-block-end:1px solid var(--si-tree-view-border-color)}.si-tree-view-header[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{align-self:center}.si-tree-view-header-btn[_ngcontent-%COMP%]{cursor:pointer;margin-inline-end:calc(var(--si-tree-view-padding-base-horizontal) / 2);font-size:var(--si-tree-view-icon-size)}.si-tree-view[_ngcontent-%COMP%]{overflow:auto;flex:1 0 0;min-block-size:0}.si-tree-view.si-tree-horizontal-scroll[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;align-content:flex-start}.si-tree-view-root-ul[_ngcontent-%COMP%]{list-style:none;padding:0;margin:0;flex:1 1 auto}@supports (-webkit-touch-callout: none){.si-tree-horizontal-scroll[_ngcontent-%COMP%]{transform:translateZ(0)}}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTreeViewComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-tree-view',
      providers: [SiTreeViewConverterService, SiTreeViewItemHeightService, SiTreeViewService, SiTreeViewVirtualizationService],
      template: "<div\n  *ngIf=\"!flatTree && expandCollapseAll\"\n  class=\"si-tree-view-expand-collapse-container\"\n  role=\"menu\"\n>\n  <si-menu-item\n    class=\"si-tree-view-expand-collapse\"\n    [item]=\"expandItem\"\n    itemClass=\"btn btn-circle btn-tertiary\"\n    [disableListInteraction]=\"true\"\n    role=\"menuitem\"\n  ></si-menu-item>\n  <si-menu-item\n    class=\"si-tree-view-expand-collapse\"\n    [item]=\"collapseItem\"\n    itemClass=\"btn btn-circle btn-tertiary\"\n    [disableListInteraction]=\"true\"\n    role=\"menuitem\"\n  ></si-menu-item>\n</div>\n<div *ngIf=\"flatTree\" class=\"si-tree-view-header\" >\n  <span *ngIf=\"!lastBreadCrumbItem\"\n    class=\"si-tree-view-header-btn\"\n    [class.disabled]=\"headerShowsRoot\"\n    [ngClass]=\"icons.headerHome\"\n    (click)=\"onFlatTreeNavigateHome()\"\n    (keydown.enter)=\"onFlatTreeNavigateHome()\"\n    tabindex=\"0\"\n  ></span>\n  <span *ngIf=\"lastBreadCrumbItem\"\n    class=\"si-tree-view-header-btn\"\n    [class.disabled]=\"headerShowsRoot\"\n    [ngClass]=\"icons.headerArrow\"\n    (click)=\"onFlatTreeNavigateUp()\"\n    (keydown.enter)=\"onFlatTreeNavigateUp()\"\n    tabindex=\"0\"\n  ></span>\n  <span *ngIf=\"lastBreadCrumbItem\" class=\"text-center text-truncate\">{{ (lastBreadCrumbItem.label ?? '') | translate }}</span>\n</div>\n<div\n  #treeViewInner\n  class=\"si-tree-view focus-inside\"\n  [class.si-tree-horizontal-scroll]=\"horizontalScrolling\"\n  [class.si-tree-view-flat]=\"flatTree\"\n  siListInteraction\n  listInteractionOrientation=\"vert\"\n  (keydown)=\"onTreeArrowKeydown($event)\"\n>\n  <div *ngIf=\"isVirtualized\" [class.w-100]=\"horizontalScrolling\" [style.height]=\"heightBefore\"></div>\n  <div *ngIf=\"itemsVirtualized\" class=\"si-tree-view-root-ul\">\n    <si-tree-view-item\n      *ngFor=\"let treeItem of itemsVirtualized; trackBy: trackByFunction\"\n      class=\"focus-none\"\n      [class.si-tree-ellipsis]=\"!horizontalScrolling\"\n      [class.si-tree-view-top-level-item]=\"!compactMode && (flatTree || (treeItem.level ?? 0) < 2)\"\n      [treeItem]=\"treeItem\"\n      [templates]=\"templates\"\n      [scrollIntoView]=\"scrollChildIntoView\"\n      [childrenLoaded]=\"childrenLoaded\"\n      [indentLevel]=\"treeItem.level ?? 0\"\n      [icons]=\"icons\"\n      [contextMenuItemsProvider]=\"contextMenuItems\"\n      [stickyEndItems]=\"horizontalScrolling\"\n      [displayFolderState]=\"hasAnyChildren\"\n      [contextMenuAriaLabel]=\"contextMenuAriaLabel\"\n      siListInteractionItem\n    >\n    </si-tree-view-item>\n  </div>\n  <div *ngIf=\"isVirtualized\" [class.w-100]=\"horizontalScrolling\" [style.height]=\"heightAfter\"></div>\n</div>\n",
      styles: ["@keyframes si-spin{0%{transform:rotate(0)}to{transform:rotate(359deg)}}:host{--si-tree-view-background: var(--element-base-1);--si-tree-view-border-color: var(--element-ui-4);--si-tree-view-icon-size: 24px;--si-tree-view-padding-base-horizontal: 8px;--si-tree-view-padding-base-vertical: 8px;--si-tree-view-expand-collapse-height: 32px;--si-tree-view-expand-collapse-padding-horizontal: 6px;--si-tree-view-expand-collapse-padding-vertical: 4px;--si-tree-view-expand-collapse-border-radius: var(--element-radius-1);--si-tree-view-item-hover-color: var(--element-base-1-hover);--si-tree-view-item-select-color: var(--element-base-1-selected);--si-tree-view-item-line-height: 1.143;--si-tree-view-item-min-height: 40px;--si-tree-view-item-object-data-field-1-color: var(--element-text-secondary);--si-tree-view-item-object-data-h5-font-size: .875rem;--si-tree-view-item-object-data-h5-font-weight: normal;display:flex;flex-direction:column;background-color:var(--si-tree-view-background)}:host.tree-sm{--si-tree-view-item-min-height: 32px;--si-tree-view-padding-base-vertical: 0px}:host.tree-xs{--si-tree-view-item-min-height: 24px;--si-tree-view-padding-base-vertical: 0px}.si-tree-view-expand-collapse-container{margin-block:var(--si-tree-view-padding-base-vertical) calc(-.5 * var(--si-tree-view-padding-base-vertical));margin-inline:var(--si-tree-view-padding-base-horizontal)}.si-tree-view-expand-collapse{display:inline-block;margin-inline-start:calc(var(--si-tree-view-padding-base-vertical) / 2)}.si-tree-view-expand-collapse:first-child{margin-inline-start:0}.si-tree-view-expand-collapse ::ng-deep .dropdown-item{padding-block:var(--si-tree-view-expand-collapse-padding-vertical);padding-inline:var(--si-tree-view-expand-collapse-padding-horizontal);block-size:calc(var(--si-tree-view-expand-collapse-height) - var(--si-tree-view-expand-collapse-padding-vertical));border-radius:var(--si-tree-view-expand-collapse-border-radius)}.si-tree-view-expand-collapse ::ng-deep .dropdown-item .item-icon{margin-inline:0}.si-tree-view-header{padding:calc(var(--si-tree-view-padding-base-horizontal) / 2);border-block-end:1px solid var(--si-tree-view-border-color)}.si-tree-view-header>*{align-self:center}.si-tree-view-header-btn{cursor:pointer;margin-inline-end:calc(var(--si-tree-view-padding-base-horizontal) / 2);font-size:var(--si-tree-view-icon-size)}.si-tree-view{overflow:auto;flex:1 0 0;min-block-size:0}.si-tree-view.si-tree-horizontal-scroll{display:flex;flex-wrap:wrap;align-content:flex-start}.si-tree-view-root-ul{list-style:none;padding:0;margin:0;flex:1 1 auto}@supports (-webkit-touch-callout: none){.si-tree-horizontal-scroll{transform:translateZ(0)}}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: SiTreeViewService
    }, {
      type: SiTreeViewConverterService
    }, {
      type: SiTreeViewVirtualizationService
    }, {
      type: SiTreeViewItemHeightService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    updateTreeDisplay: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    scrollIntoView: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    contextMenuItems: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    childrenIndentation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    horizontalScrolling: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    compactMode: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    expandCollapseAll: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    expandAllTooltip: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    collapseAllTooltip: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    contextMenuAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    icons: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    itemsVirtualizedChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    treeItemFolderClicked: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    treeItemFolderStateChanged: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    treeItemClicked: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    treeItemCheckboxClicked: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    loadChildren: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    treeItemsSelected: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    templates: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
      args: [SiTreeViewItemTemplateDirective]
    }],
    trackByFunction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    pageSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    pagesVirtualized: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    folderStateLeft: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    folderStateStart: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    isVirtualized: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    items: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    selectedItem: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    singleSelectMode: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    enableDataField1: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    enableDataField2: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    enableStateIndicator: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    enableIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    enableContextMenuButton: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    enableSelection: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    deleteChildrenOnCollapse: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    flatTree: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    groupedList: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    enableCheckbox: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    enableOptionbox: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    inheritChecked: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    noActionsString: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    onKeyUpShift: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['document:keyup.shift', ['$event']]
    }],
    onKeyUpCtrl: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['document:keyup.control', ['$event']]
    }],
    onKeyUpMeta: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['document:keyup.meta', ['$event']]
    }],
    onMouseLeave: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['document:mouseleave', ['$event']]
    }],
    treeViewInnerElement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['treeViewInner', {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef,
        static: true
      }]
    }]
  });
})();
class SiTreeViewModule {}
SiTreeViewModule.ɵfac = function SiTreeViewModule_Factory(t) {
  return new (t || SiTreeViewModule)();
};
SiTreeViewModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiTreeViewModule
});
SiTreeViewModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiDropdownModule, SiListInteractionModule, SiLoadingSpinnerModule, SiMenuModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTreeViewModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiDropdownModule, SiListInteractionModule, SiLoadingSpinnerModule, SiMenuModule, SiTranslateModule],
      declarations: [SiTreeViewComponent, SiTreeViewItemComponent, SiTreeViewItemTemplateDirective],
      exports: [SiTreeViewComponent, SiTreeViewItemComponent, SiTreeViewItemTemplateDirective]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

class SiWizardStepComponent {
  get isActive() {
    return this._isActive;
  }
  set isActive(value) {
    this._isActive = value;
    this.changeDetectorRef.markForCheck();
  }
  constructor(changeDetectorRef) {
    this.changeDetectorRef = changeDetectorRef;
    this.heading = '';
    this.isValid = true;
    this.isNextNavigable = true;
    this.failed = false;
    this.next = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.back = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.save = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this._isActive = false;
  }
  ngOnChanges() {
    this.parent?.notifyChildrenUpdated();
  }
  registerParent(parent) {
    this.parent = parent;
  }
}
SiWizardStepComponent.ɵfac = function SiWizardStepComponent_Factory(t) {
  return new (t || SiWizardStepComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiWizardStepComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiWizardStepComponent,
  selectors: [["si-wizard-step"]],
  inputs: {
    heading: "heading",
    isValid: "isValid",
    isNextNavigable: "isNextNavigable",
    failed: "failed"
  },
  outputs: {
    next: "next",
    back: "back",
    save: "save"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  ngContentSelectors: _c1,
  decls: 1,
  vars: 1,
  consts: [[4, "ngIf"]],
  template: function SiWizardStepComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiWizardStepComponent_div_0_Template, 2, 0, "div", 0);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.isActive);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf],
  encapsulation: 2,
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiWizardStepComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-wizard-step',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div *ngIf=\"isActive\">\n  <ng-content></ng-content>\n</div>\n"
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    isValid: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    isNextNavigable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    failed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    next: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    back: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    save: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiWizardComponent {
  constructor(changeDetectorRef) {
    this.changeDetectorRef = changeDetectorRef;
    /**
     * Description of back button.
     */
    this.backText = 'Back';
    /**
     * Description of next button.
     */
    this.nextText = 'Next';
    /**
     * Description of save button.
     */
    this.saveText = 'Save';
    /**
     * Text shown if you complete the wizard.
     */
    this.completionText = 'Wizard completed!';
    /**
     * Description of cancel button.
     */
    this.cancelText = 'Cancel';
    /**
     * Show cancel bottom
     */
    this.hasCancel = false;
    /**
     * Display a predefined page by the end of the wizard.
     */
    this.enableCompletionPage = false;
    /**
     * Define how many milliseconds the completion page is visible.
     */
    this.completionPageVisibleTime = 3000;
    /**
     * Class name of icon shown for current and upcoming steps.
     */
    this.stepIcon = 'element-not-checked';
    /**
     * Class name of icon shown when a step was completed.
     */
    this.stepCompletedIcon = 'element-checked-filled';
    /**
     * Class name of icon shown when a step had an error.
     */
    this.stepFailedIcon = 'element-warning-filled';
    /**
     * Callback function triggered after the wizard has been completed.
     */
    this.completionAction = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Callback function triggered if the wizard has been canceled.
     */
    this.cancel = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.index = 0;
    this.steps = [];
    this.allStepsAreVisible = true;
    this.visibleSteps = 0;
    this.showCompletionPage = false;
    this.trackByIndex = index => index;
    this.isSmall = false;
    this.destroyer = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
  }
  ngAfterContentInit() {
    this.updateSteps();
    this.currentStep = this.steps[0];
    this.changeDetectorRef.markForCheck();
    setTimeout(() => {
      if (this.steps.length > 0) {
        this.steps[0].isActive = true;
        this.changeDetectorRef.markForCheck();
      }
    });
    this.wizardSteps.changes.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.takeUntil)(this.destroyer)).subscribe(() => {
      this.updateSteps();
      if (!this.wizardSteps.some(step => step === this.currentStep)) {
        this.currentStep = this.wizardSteps.first;
        this.index = 0;
      } else {
        this.index = this.steps.indexOf(this.currentStep);
      }
      this.changeDetectorRef.markForCheck();
      setTimeout(() => {
        this.activate(this.currentStep);
        this.calculateNumberOfVisibleSteps();
        this.changeDetectorRef.markForCheck();
      });
    });
  }
  ngOnDestroy() {
    this.destroyer.next();
    this.destroyer.complete();
  }
  notifyChildrenUpdated() {
    this.changeDetectorRef.markForCheck();
  }
  canActivate(stepIndex) {
    if (stepIndex < 0) {
      return false;
    }
    // Can always activate previous steps
    if (stepIndex < this.index) {
      return true;
    }
    // We are already in the step. Nothing to activate.
    if (stepIndex === this.index) {
      return false;
    }
    // Fast-forward: check all steps if they are valid
    for (let i = this.index; i < stepIndex; i++) {
      const theStep = this.steps[i];
      if (!theStep.isValid) {
        return false;
      }
    }
    return true;
  }
  activateStep(event, stepIndex) {
    event.preventDefault();
    if (this.canActivate(stepIndex)) {
      if (stepIndex > this.index) {
        this.next(stepIndex - this.index);
      }
      if (stepIndex < this.index) {
        this.back(this.index - stepIndex);
      }
    }
  }
  getStateClass(stepIndex) {
    if (stepIndex === this.index) {
      return 'active';
    }
    if (!this.canActivate(stepIndex)) {
      return 'disabled';
    }
    if (stepIndex < this.index) {
      return 'completed';
    }
    return '';
  }
  getAriaDisabled(stepIndex) {
    if (!this.canActivate(stepIndex)) {
      return 'true';
    }
    return 'false';
  }
  getAriaCurrent(stepIndex) {
    if (stepIndex === this.index) {
      return 'step';
    }
    return 'false';
  }
  getStepClass(stepIndex) {
    const classes = ['step'];
    if (this.isVisibleStep(stepIndex + 1)) {
      classes.push('directly-following');
    } else if (stepIndex !== this.steps.length - 1) {
      classes.push('not-directly-following');
    }
    if (stepIndex !== 0 && !this.isVisibleStep(stepIndex - 1)) {
      classes.push('not-first-step');
    }
    if (this.isVisibleStep(stepIndex + 1)) {
      classes.push('line-' + this.getStateClass(stepIndex + 1));
    }
    return classes;
  }
  next(delta) {
    if (this.index === this.steps.length) {
      return;
    }
    const stepIndex = this.index + delta;
    const nextStep = this.steps[stepIndex];
    if (this.canActivate(stepIndex)) {
      this.currentStep.next.emit();
      if (this.currentStep.isNextNavigable) {
        this.activate(nextStep);
      }
    }
  }
  back(delta) {
    if (this.index === 0) {
      return;
    }
    this.currentStep.back.emit();
    this.activate(this.steps[this.index - delta]);
  }
  save() {
    this.currentStep.save.emit();
    if (this.enableCompletionPage && this.completionPageVisibleTime > 0) {
      this.showCompletionPage = true;
      setTimeout(() => {
        this.showCompletionPage = false;
        this.completionAction.emit();
        this.changeDetectorRef.markForCheck();
      }, this.completionPageVisibleTime);
    } else {
      this.completionAction.emit();
    }
  }
  getState(step, stepIndex) {
    if (step.failed === true) {
      return `title-warning ${this.stepFailedIcon}`;
    } else {
      const txtStyle = step.isActive ? 'wizard-active' : '';
      return stepIndex >= this.index ? `${this.stepIcon} ${txtStyle}` : `text-primary ${this.stepCompletedIcon}`;
    }
  }
  isVisibleStep(stepIndex) {
    if (this.allStepsAreVisible) {
      return true;
    }
    if (this.index === stepIndex) {
      return true;
    }
    let visibleStepsDelta = (this.visibleSteps - 1) / 2;
    for (let i = visibleStepsDelta; i > 0; i--) {
      if (this.index - i < 0 || this.index + i > this.steps.length - 1) {
        visibleStepsDelta = this.visibleSteps - i;
      }
    }
    for (let i = visibleStepsDelta; i > 0; i--) {
      if (stepIndex === this.index - i || stepIndex === this.index + i) {
        return true;
      }
    }
    return false;
  }
  activate(step) {
    if (this.currentStep) {
      this.currentStep.isActive = false;
    }
    step.isActive = true;
    this.currentStep = step;
    this.index = this.steps.indexOf(step);
  }
  calculateNumberOfVisibleSteps() {
    const containerWidth = this.wizardContainerElement.nativeElement.clientWidth;
    const prevNextWidth = this.wizardButtonContainerElement.nativeElement.clientWidth;
    const cancelWidth = this.hasCancel ? this.wizardCancelButtonContainerElement.nativeElement.clientWidth : 0;
    const oneStepWidth = this.wizardContainerElement.nativeElement.querySelector('.step')?.clientWidth;
    // visible steps can be only 3, 5, 7,..
    const allButtonsWidth = 2 * prevNextWidth + cancelWidth;
    let placeableSteps = oneStepWidth ? Math.floor((containerWidth - allButtonsWidth) / oneStepWidth) : 1;
    this.allStepsAreVisible = placeableSteps >= this.steps.length;
    if (!this.allStepsAreVisible && placeableSteps % 2 === 0) {
      placeableSteps--;
    }
    if (containerWidth < 540 + allButtonsWidth) {
      this.isSmall = true;
      this.visibleSteps = 3;
    } else {
      this.isSmall = false;
      this.visibleSteps = placeableSteps;
    }
  }
  updateSteps() {
    this.steps = this.wizardSteps.toArray();
    this.steps.forEach(step => step.registerParent(this));
  }
}
SiWizardComponent.ɵfac = function SiWizardComponent_Factory(t) {
  return new (t || SiWizardComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiWizardComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiWizardComponent,
  selectors: [["si-wizard"]],
  contentQueries: function SiWizardComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, SiWizardStepComponent, 4);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.wizardSteps = _t);
    }
  },
  viewQuery: function SiWizardComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c63, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c64, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c65, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.wizardContainerElement = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.wizardCancelButtonContainerElement = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.wizardButtonContainerElement = _t.first);
    }
  },
  inputs: {
    backText: "backText",
    nextText: "nextText",
    saveText: "saveText",
    completionText: "completionText",
    cancelText: "cancelText",
    hasCancel: "hasCancel",
    enableCompletionPage: "enableCompletionPage",
    completionPageVisibleTime: "completionPageVisibleTime",
    stepIcon: "stepIcon",
    stepCompletedIcon: "stepCompletedIcon",
    stepFailedIcon: "stepFailedIcon"
  },
  outputs: {
    completionAction: "completionAction",
    cancel: "cancel"
  },
  ngContentSelectors: _c1,
  decls: 2,
  vars: 2,
  consts: [[4, "ngIf"], ["class", "text-center", 4, "ngIf"], [1, "container-wizard", 3, "siResizeObserver"], ["container", ""], ["class", "me-7", 4, "ngIf"], [1, "wizard-btn-container"], ["buttonContainer", ""], [1, "back", 3, "click"], ["type", "button", 1, "btn", "btn-circle", "btn-secondary", "flip-rtl", "element-left-4", "mb-2"], [1, "visually-hidden"], [1, "si-title-2", "text-primary"], [1, "container-steps"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "next", 3, "click"], ["type", "button", 1, "btn", "btn-circle", "btn-primary", "flip-rtl", "element-right-4", "mb-2", 3, "disabled"], [1, "container-wizard"], ["type", "button", "class", "btn btn-info save", 3, "disabled", "click", 4, "ngIf"], [1, "me-7"], ["cancelButtonContainer", ""], [1, "wizard-btn-container", 3, "click"], ["type", "button", 1, "btn", "btn-circle", "btn-sm", "btn-secondary", "element-cancel", "mt-2", "mb-4"], [3, "ngClass", "small", 4, "ngIf"], [3, "ngClass"], [1, "focus-inside", 3, "ngClass", "click"], [1, "title", "text-center"], ["type", "button", 1, "btn", "btn-info", "save", 3, "disabled", "click"], [1, "text-center"], [1, "display-1", "text-success", "element-checked"], [1, "si-title-1"]],
  template: function SiWizardComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiWizardComponent_ng_container_0_Template, 29, 30, "ng-container", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiWizardComponent_div_1_Template, 5, 3, "div", 1);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.showCompletionPage);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.showCompletionPage);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiResizeObserverDirective, SiTranslatePipe],
  styles: [".title-secondary[_ngcontent-%COMP%]{color:var(--element-text-secondary)}.title-warning[_ngcontent-%COMP%]{color:var(--element-status-warning)}.container-steps[_ngcontent-%COMP%]{display:flex;justify-content:center;padding-block:0;padding-inline:6px}.container-steps.small[_ngcontent-%COMP%]{inline-size:100%}.directly-following[_ngcontent-%COMP%]:not(:last-child):after{background-color:var(--element-ui-2);content:\"\";position:absolute;block-size:2px;inline-size:calc(100% - 1.5rem - 8px);inset-block-start:calc(.75rem - 1px);inset-inline-start:calc(50% + .75rem + 4px)}.not-directly-following[_ngcontent-%COMP%]:last-child:after, .not-first-step[_ngcontent-%COMP%]:first-child:before{border-block-start:2px var(--element-ui-2) dashed;content:\"\";position:absolute;block-size:2px;inline-size:1.875rem;inset-block-start:calc(.75rem - 1px);inset-inline-start:calc(50% + .75rem + 4px)}.not-first-step[_ngcontent-%COMP%]:first-child:before{inset-inline-start:calc(50% - 2.625rem - 4px);border-color:var(--element-ui-0)}.wizard-active[_ngcontent-%COMP%]{color:var(--element-ui-0)}.step[_ngcontent-%COMP%]{position:relative;text-align:center;margin-block-start:8px;padding-block:0;padding-inline:16px}.step[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{font-size:1.5rem}.step[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:var(--element-ui-2)}.step[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{color:var(--element-text-secondary)}.step[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]:hover{text-decoration:none}.step[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{inline-size:9.75rem;margin-block-start:12px}.step[_ngcontent-%COMP%]   .active[_ngcontent-%COMP%], .step[_ngcontent-%COMP%]   .active[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{color:var(--element-ui-0)}.step[_ngcontent-%COMP%]   .disabled[_ngcontent-%COMP%], .step[_ngcontent-%COMP%]   .disabled[_ngcontent-%COMP%]:hover{opacity:.5;text-decoration:none}.step[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:not(.disabled):hover, .step[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:not(.disabled):hover   i[_ngcontent-%COMP%], .step[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:not(.disabled):hover   .title[_ngcontent-%COMP%]{color:var(--element-ui-0-hover)!important;text-decoration:none}.step[_ngcontent-%COMP%]   .completed[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{color:var(--element-text-primary)}.step.line-completed[_ngcontent-%COMP%]:after{background-color:var(--element-ui-0)}.step.line-active[_ngcontent-%COMP%]:after{background-color:var(--element-ui-0)}.step.line-disabled[_ngcontent-%COMP%]:after{opacity:.5}.step.small[_ngcontent-%COMP%], .step.small[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{inline-size:100%}.title[_ngcontent-%COMP%]{font-size:.875rem;line-height:20px}.container-wizard[_ngcontent-%COMP%]{inline-size:100%;display:flex;flex-wrap:nowrap;justify-content:center;padding-block:8px 12px;padding-inline:0}.container-wizard.display-one-step[_ngcontent-%COMP%]{justify-content:space-between}.wizard-btn-container[_ngcontent-%COMP%]{max-inline-size:50px;min-inline-size:40px;text-align:center;cursor:pointer}.wizard-btn-container.wizard-text-deactivate[_ngcontent-%COMP%]:hover{cursor:not-allowed;color:var(--element-text-secondary)}.wizard-btn-container[_ngcontent-%COMP%]   .disabled[_ngcontent-%COMP%]{opacity:.5}.wizard-btn-container[_ngcontent-%COMP%]   .invisible[_ngcontent-%COMP%]{visibility:hidden}.wizard-btn-container[_ngcontent-%COMP%]:hover   .text-primary[_ngcontent-%COMP%]{color:var(--element-ui-0-hover)!important}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiWizardComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-wizard',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<ng-container *ngIf=\"!showCompletionPage\">\n  <div\n    #container\n    class=\"container-wizard\"\n    [class.display-one-step]=\"visibleSteps === 1\"\n    (siResizeObserver)=\"calculateNumberOfVisibleSteps()\"\n  >\n    <div class=\"me-7\" *ngIf=\"hasCancel\" #cancelButtonContainer>\n      <div class=\"wizard-btn-container\" (click)=\"cancel.emit()\">\n        <button type=\"button\" class=\"btn btn-circle btn-sm btn-secondary element-cancel mt-2 mb-4\">\n          <span class=\"visually-hidden\">{{ cancelText | translate }}</span>\n        </button>\n        <div class=\"si-title-2 text-primary\">{{ cancelText | translate }}</div>\n      </div>\n    </div>\n    <div class=\"wizard-btn-container\" #buttonContainer>\n      <div class=\"back\" [class.invisible]=\"index === 0\" (click)=\"back(1)\">\n        <button type=\"button\" class=\"btn btn-circle btn-secondary flip-rtl element-left-4 mb-2\">\n          <span class=\"visually-hidden\">{{ backText | translate }}</span>\n        </button>\n        <div class=\"si-title-2 text-primary\">{{ backText | translate }}</div>\n      </div>\n    </div>\n    <div class=\"container-steps\" [class.small]=\"isSmall\">\n      <ng-container *ngFor=\"let step of steps; let stepIndex = index; trackBy: trackByIndex\">\n        <div *ngIf=\"isVisibleStep(stepIndex)\" [ngClass]=\"getStepClass(stepIndex)\" [class.small]=\"isSmall\">\n          <a (click)=\"activateStep($event, stepIndex)\"\n            class=\"focus-inside\"\n            [ngClass]=\"getStateClass(stepIndex)\"\n            [attr.aria-current]=\"getAriaCurrent(stepIndex)\"\n            [attr.href]=\"!canActivate(stepIndex) || !currentStep.isNextNavigable ? null : '#'\">\n            <i [ngClass]=\"[getState(step, stepIndex)]\"></i>\n            <div class=\"title text-center\" [attr.aria-disabled]=\"getAriaDisabled(stepIndex)\">{{ step.heading | translate }}</div>\n          </a>\n        </div>\n      </ng-container>\n    </div>\n    <div class=\"wizard-btn-container\" [class.wizard-text-deactivate]=\"!currentStep.isValid\">\n      <div class=\"next\" [class.invisible]=\"index === steps.length - 1\" (click)=\"next(1)\">\n        <button type=\"button\" class=\"btn btn-circle btn-primary flip-rtl element-right-4 mb-2\" [disabled]=\"!currentStep.isValid\">\n          <span class=\"visually-hidden\">{{ nextText | translate }}</span>\n        </button>\n        <div class=\"si-title-2 text-primary\" [class.disabled]=\"!currentStep.isValid\" [attr.aria-disabled]=\"!currentStep.isValid\">{{ nextText | translate }}</div>\n      </div>\n    </div>\n  </div>\n  <div>\n    <ng-content></ng-content>\n  </div>\n  <div class=\"container-wizard\">\n    <button\n      *ngIf=\"index === steps.length - 1\"\n      type=\"button\"\n      class=\"btn btn-info save\"\n      (click)=\"save()\"\n      [disabled]=\"!currentStep.isValid || !currentStep.isNextNavigable\"\n    >{{ saveText | translate }}</button>\n  </div>\n</ng-container>\n\n<div *ngIf=\"showCompletionPage\" class=\"text-center\">\n  <i class=\"display-1 text-success element-checked\"></i>\n  <p class=\"si-title-1\"> {{ completionText | translate }}</p>\n</div>\n",
      styles: [".title-secondary{color:var(--element-text-secondary)}.title-warning{color:var(--element-status-warning)}.container-steps{display:flex;justify-content:center;padding-block:0;padding-inline:6px}.container-steps.small{inline-size:100%}.directly-following:not(:last-child):after{background-color:var(--element-ui-2);content:\"\";position:absolute;block-size:2px;inline-size:calc(100% - 1.5rem - 8px);inset-block-start:calc(.75rem - 1px);inset-inline-start:calc(50% + .75rem + 4px)}.not-directly-following:last-child:after,.not-first-step:first-child:before{border-block-start:2px var(--element-ui-2) dashed;content:\"\";position:absolute;block-size:2px;inline-size:1.875rem;inset-block-start:calc(.75rem - 1px);inset-inline-start:calc(50% + .75rem + 4px)}.not-first-step:first-child:before{inset-inline-start:calc(50% - 2.625rem - 4px);border-color:var(--element-ui-0)}.wizard-active{color:var(--element-ui-0)}.step{position:relative;text-align:center;margin-block-start:8px;padding-block:0;padding-inline:16px}.step i{font-size:1.5rem}.step a{color:var(--element-ui-2)}.step a .title{color:var(--element-text-secondary)}.step a .title:hover{text-decoration:none}.step a .title{inline-size:9.75rem;margin-block-start:12px}.step .active,.step .active .title{color:var(--element-ui-0)}.step .disabled,.step .disabled:hover{opacity:.5;text-decoration:none}.step a:not(.disabled):hover,.step a:not(.disabled):hover i,.step a:not(.disabled):hover .title{color:var(--element-ui-0-hover)!important;text-decoration:none}.step .completed .title{color:var(--element-text-primary)}.step.line-completed:after{background-color:var(--element-ui-0)}.step.line-active:after{background-color:var(--element-ui-0)}.step.line-disabled:after{opacity:.5}.step.small,.step.small a .title{inline-size:100%}.title{font-size:.875rem;line-height:20px}.container-wizard{inline-size:100%;display:flex;flex-wrap:nowrap;justify-content:center;padding-block:8px 12px;padding-inline:0}.container-wizard.display-one-step{justify-content:space-between}.wizard-btn-container{max-inline-size:50px;min-inline-size:40px;text-align:center;cursor:pointer}.wizard-btn-container.wizard-text-deactivate:hover{cursor:not-allowed;color:var(--element-text-secondary)}.wizard-btn-container .disabled{opacity:.5}.wizard-btn-container .invisible{visibility:hidden}.wizard-btn-container:hover .text-primary{color:var(--element-ui-0-hover)!important}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    wizardSteps: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
      args: [SiWizardStepComponent]
    }],
    wizardContainerElement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['container', {
        static: false
      }]
    }],
    wizardCancelButtonContainerElement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['cancelButtonContainer', {
        static: false
      }]
    }],
    wizardButtonContainerElement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['buttonContainer', {
        static: false
      }]
    }],
    backText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    nextText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    saveText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    completionText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    cancelText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    hasCancel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    enableCompletionPage: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    completionPageVisibleTime: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    stepIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    stepCompletedIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    stepFailedIcon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    completionAction: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    cancel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiWizardModule {}
SiWizardModule.ɵfac = function SiWizardModule_Factory(t) {
  return new (t || SiWizardModule)();
};
SiWizardModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiWizardModule
});
SiWizardModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiResizeObserverModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiWizardModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiResizeObserverModule, SiTranslateModule],
      declarations: [SiWizardComponent, SiWizardStepComponent],
      exports: [SiWizardComponent, SiWizardStepComponent]
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

class SiCardComponent {
  constructor() {
    this.classCard = true;
    /**
     * Input list of primary action items. Supports up to **4** actions and omits additional ones.
     */
    this.primaryActions = [];
    /**
     * Input list of secondary action items.
     */
    this.secondaryActions = [];
    /**
     * The view type of the content action bar of the card. Default is `collapsible`
     * for dashboards. However, in some cases you might need to change to `expanded`
     * or `mobile`.
     */
    this.actionBarViewType = 'collapsible';
    /**
     * Optional setting of html title attribute for the content action bar.
     * Helpful for a11y when only one action is configured in expand mode.
     */
    this.actionBarTitle = '';
  }
  get classElevation() {
    return true;
  }
  /**
   * Returns `true` when primary or secondary actions are set.
   */
  get displayContentActionBar() {
    return this.primaryActions?.length > 0 || this.secondaryActions?.length > 0;
  }
}
SiCardComponent.ɵfac = function SiCardComponent_Factory(t) {
  return new (t || SiCardComponent)();
};
SiCardComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiCardComponent,
  selectors: [["si-card"]],
  hostVars: 4,
  hostBindings: function SiCardComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("card", ctx.classCard)("elevation-1", ctx.classElevation);
    }
  },
  inputs: {
    heading: "heading",
    primaryActions: "primaryActions",
    secondaryActions: "secondaryActions",
    actionBarViewType: "actionBarViewType",
    actionBarTitle: "actionBarTitle"
  },
  ngContentSelectors: _c68,
  decls: 8,
  vars: 4,
  consts: [[1, "card-header", "d-flex", "justify-content-between"], [1, "text-truncate"], [1, "cab", "d-flex", "ms-6", "my-n4", "me-n5"], ["class", "ms-auto", 3, "primaryActions", "secondaryActions", "viewType", 4, "ngIf"], [1, "ms-auto", 3, "primaryActions", "secondaryActions", "viewType"]],
  template: function SiCardComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c67);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](1, 0, ["#cardHeaderIcon", ""]);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](4, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiCardComponent_si_content_action_bar_6_Template, 2, 6, "si-content-action-bar", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](7, 1, ["#cardBody", ""]);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](4, 2, ctx.heading));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.displayContentActionBar);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiContentActionBarComponent, SiTranslatePipe],
  styles: [".card-header[_ngcontent-%COMP%]{block-size:40px}.text-truncate[_ngcontent-%COMP%]{flex:0 1 auto}.cab[_ngcontent-%COMP%]{flex:1 0 0;min-inline-size:40px}"]
});
(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([Required()], SiCardComponent.prototype, "heading", void 0);
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiCardComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-card',
      template: "<div class=\"card-header d-flex justify-content-between\">\n  <ng-content #cardHeaderIcon select=\"[headerIcon]\"></ng-content>\n  <div class=\"text-truncate\">{{ heading | translate }}</div>\n  <div class=\"cab d-flex ms-6 my-n4 me-n5\">\n    <si-content-action-bar\n      *ngIf=\"displayContentActionBar\"\n      [primaryActions]=\"primaryActions\"\n      [secondaryActions]=\"secondaryActions\"\n      [viewType]=\"actionBarViewType\"\n      class=\"ms-auto\"\n      [attr.title]=\"actionBarTitle | translate\">\n    </si-content-action-bar>\n  </div>\n</div>\n<ng-content #cardBody select=\"[body]\"></ng-content>\n",
      styles: [".card-header{block-size:40px}.text-truncate{flex:0 1 auto}.cab{flex:1 0 0;min-inline-size:40px}\n"]
    }]
  }], null, {
    classCard: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.card']
    }],
    classElevation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.elevation-1']
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    primaryActions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    secondaryActions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    actionBarViewType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    actionBarTitle: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiCardModule {}
SiCardModule.ɵfac = function SiCardModule_Factory(t) {
  return new (t || SiCardModule)();
};
SiCardModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiCardModule
});
SiCardModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.PortalModule, SiContentActionBarModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiCardModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.PortalModule, SiContentActionBarModule, SiTranslateModule],
      declarations: [SiCardComponent],
      exports: [SiCardComponent]
    }]
  }], null, null);
})();

/**
 * The component shall be use to indicate that an authenticated
 * user does not have the required permissions.
 */
class SiUnauthorizedPageComponent {
  constructor() {
    /** The element no access icon. */
    this.icon = 'element-no-access';
  }
}
SiUnauthorizedPageComponent.ɵfac = function SiUnauthorizedPageComponent_Factory(t) {
  return new (t || SiUnauthorizedPageComponent)();
};
SiUnauthorizedPageComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiUnauthorizedPageComponent,
  selectors: [["si-unauthorized-page"]],
  inputs: {
    icon: "icon",
    heading: "heading",
    subHeading: "subHeading",
    description: "description",
    link: "link"
  },
  ngContentSelectors: _c1,
  decls: 7,
  vars: 5,
  consts: [[1, "h-100", "d-flex", "flex-column", "justify-content-center", "align-items-center", "p-6"], [1, "state-icon", 3, "ngClass"], ["class", "my-8", 4, "ngIf"], ["class", "mb-6", 4, "ngIf"], ["class", "text-pre-wrap text-center si-body-1 mb-8", 4, "ngIf"], ["class", "btn btn-primary", 3, "siLink", 4, "ngIf"], [1, "my-8"], [1, "mb-6"], [1, "text-pre-wrap", "text-center", "si-body-1", "mb-8"], [1, "btn", "btn-primary", 3, "siLink"]],
  template: function SiUnauthorizedPageComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "span", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiUnauthorizedPageComponent_h1_2_Template, 3, 3, "h1", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, SiUnauthorizedPageComponent_h2_3_Template, 3, 3, "h2", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiUnauthorizedPageComponent_p_4_Template, 3, 3, "p", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiUnauthorizedPageComponent_a_5_Template, 3, 4, "a", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", ctx.icon);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.heading);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.subHeading);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.description);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.link);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiLinkDirective, SiTranslatePipe],
  styles: [".state-icon[_ngcontent-%COMP%]{color:var(--element-status-danger);font-size:96px}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiUnauthorizedPageComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-unauthorized-page',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div class=\"h-100 d-flex flex-column justify-content-center align-items-center p-6\">\n  <span class=\"state-icon\" [ngClass]=\"icon\"></span>\n  <h1 *ngIf=\"heading\" class=\"my-8\">{{ heading | translate }}</h1>\n  <h2 *ngIf=\"subHeading\" class=\"mb-6\">{{ subHeading | translate }}</h2>\n  <p\n    *ngIf=\"description\"\n    class=\"text-pre-wrap text-center si-body-1 mb-8\"\n  >{{ description | translate }}</p>\n  <a\n    *ngIf=\"link\"\n    [siLink]=\"link\"\n    class=\"btn btn-primary\"\n  >{{ link.title ? link.title : 'Go back' | translate }}</a>\n  <ng-content></ng-content>\n</div>\n",
      styles: [".state-icon{color:var(--element-status-danger);font-size:96px}\n"]
    }]
  }], null, {
    icon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    subHeading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    description: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    link: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiUnauthorizedPageModule {}
SiUnauthorizedPageModule.ɵfac = function SiUnauthorizedPageModule_Factory(t) {
  return new (t || SiUnauthorizedPageModule)();
};
SiUnauthorizedPageModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiUnauthorizedPageModule
});
SiUnauthorizedPageModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterModule, SiLinkModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiUnauthorizedPageModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [SiUnauthorizedPageComponent],
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_router__WEBPACK_IMPORTED_MODULE_27__.RouterModule, SiLinkModule, SiTranslateModule],
      exports: [SiUnauthorizedPageComponent]
    }]
  }], null, null);
})();
class SiDatatableInteractionDirective {
  onKeydown(event) {
    if (event.key === 'ArrowDown') {
      const first = this.selectionType === 'cell' ? this.element.querySelector('.datatable-row-wrapper > .datatable-body-row .datatable-body-cell') : this.element.querySelector('.datatable-row-wrapper > .datatable-body-row');
      if (first) {
        first.focus();
      }
    } else if (event.key === 'ArrowUp') {
      const last = this.selectionType === 'cell' ? this.element.querySelector('.datatable-row-wrapper:last-child > .datatable-body-row .datatable-body-cell') : this.element.querySelector('.datatable-row-wrapper:last-child > .datatable-body-row');
      if (last) {
        last.focus();
      }
    }
  }
  onMousedown(event) {
    this.isMousedown = true;
  }
  onMouseup(event) {
    this.isMousedown = false;
  }
  onFocusin(event) {
    const target = event.target;
    if (!target) {
      return;
    }
    clearTimeout(this.autoSelectTimeout);
    if (!this.isMousedown && this.datatableInteractionAutoSelect && (this.selectionType === 'single' || this.selectionType === 'cell')) {
      this.autoSelectTimeout = setTimeout(() => {
        const enterEvent = new KeyboardEvent('keydown', {
          key: 'enter'
        });
        Object.defineProperty(enterEvent, 'keyCode', {
          get: () => 13
        });
        target.dispatchEvent(enterEvent);
      }, 100);
    }
    if (this.element.classList.contains('virtualized')) {
      if (this.tableBody) {
        const lastList = this.selectionType === 'cell' ? this.tableBody.querySelectorAll('.datatable-row-wrapper:last-child > .datatable-body-row .datatable-body-cell') : this.tableBody.querySelectorAll('.datatable-row-wrapper:last-child > .datatable-body-row');
        if (Array.from(lastList).includes(target)) {
          this.tableBody.scrollTop = this.tableBody.scrollTop + lastList[0].clientHeight;
        } else {
          const firstList = this.selectionType === 'cell' ? this.tableBody.querySelectorAll('.datatable-row-wrapper:first-child > .datatable-body-row .datatable-body-cell') : this.tableBody.querySelectorAll('.datatable-row-wrapper:first-child > .datatable-body-row');
          if (Array.from(firstList).includes(target)) {
            this.tableBody.scrollTop = this.tableBody.scrollTop - firstList[0].clientHeight;
          }
        }
      }
    }
  }
  constructor(elementRef) {
    /**
     * The selection type of the datatable, will automatically be set if set for datatable.
     */
    this.selectionType = '';
    /**
     * Automatically select every row or cell that is navigated trough.
     * Is ignored unless `selectionType` is `single` or `cell`.
     */
    this.datatableInteractionAutoSelect = false;
    this.tabIndex = '0';
    this.isMousedown = false;
    this.element = elementRef.nativeElement;
  }
  ngOnInit() {
    this.tableBody = this.element.querySelector('datatable-body');
    if (this.tableBody) {
      this.tableBody.tabIndex = -1;
    }
  }
  ngOnDestroy() {
    clearTimeout(this.autoSelectTimeout);
  }
}
SiDatatableInteractionDirective.ɵfac = function SiDatatableInteractionDirective_Factory(t) {
  return new (t || SiDatatableInteractionDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
};
SiDatatableInteractionDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiDatatableInteractionDirective,
  selectors: [["", "siDatatableInteraction", ""]],
  hostVars: 1,
  hostBindings: function SiDatatableInteractionDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown", function SiDatatableInteractionDirective_keydown_HostBindingHandler($event) {
        return ctx.onKeydown($event);
      })("mousedown", function SiDatatableInteractionDirective_mousedown_HostBindingHandler($event) {
        return ctx.onMousedown($event);
      })("mouseup", function SiDatatableInteractionDirective_mouseup_HostBindingHandler($event) {
        return ctx.onMouseup($event);
      })("focusin", function SiDatatableInteractionDirective_focusin_HostBindingHandler($event) {
        return ctx.onFocusin($event);
      });
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx.tabIndex);
    }
  },
  inputs: {
    selectionType: "selectionType",
    datatableInteractionAutoSelect: "datatableInteractionAutoSelect"
  },
  exportAs: ["si-datatable-interaction"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDatatableInteractionDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siDatatableInteraction]',
      exportAs: 'si-datatable-interaction'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }];
  }, {
    selectionType: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    datatableInteractionAutoSelect: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    tabIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['attr.tabindex']
    }],
    onKeydown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['keydown', ['$event']]
    }],
    onMousedown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['mousedown', ['$event']]
    }],
    onMouseup: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['mouseup', ['$event']]
    }],
    onFocusin: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostListener,
      args: ['focusin', ['$event']]
    }]
  });
})();
class SiDatatableModule {}
SiDatatableModule.ɵfac = function SiDatatableModule_Factory(t) {
  return new (t || SiDatatableModule)();
};
SiDatatableModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiDatatableModule
});
SiDatatableModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiDatatableModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule],
      declarations: [SiDatatableInteractionDirective],
      exports: [SiDatatableInteractionDirective]
    }]
  }], null, null);
})();
const SI_DATATABLE_CONFIG = {
  cssClasses: {
    sortAscending: 'icon element-sort-up text-primary',
    sortDescending: 'icon element-sort-down text-primary',
    pagerLeftArrow: 'icon element-left-2 flip-rtl',
    pagerRightArrow: 'icon element-right-2 flip-rtl',
    pagerPrevious: 'icon element-double-left flip-rtl',
    pagerNext: 'icon element-double-right flip-rtl'
  },
  headerHeight: 40,
  footerHeight: 40,
  rowHeight: 64,
  rowHeightSmall: 48,
  rowHeightExtraSmall: 32,
  rowHeightTiny: 24
};
class SiLocaleId extends String {
  constructor(service) {
    super();
    this.service = service;
  }
  toString() {
    return this.service.locale === 'template' ? 'en' : this.service.locale;
  }
}
class SiLocaleStore {}
const SI_LOCALE_LOCAL_STORAGE_KEY = 'lang';
let SiDefaultLocaleStore = class SiDefaultLocaleStore extends SiLocaleStore {
  constructor(platformId) {
    super();
    this.isBrowser = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId);
  }
  get locale() {
    if (this.isBrowser) {
      return localStorage.getItem(SI_LOCALE_LOCAL_STORAGE_KEY) ?? undefined;
    } else {
      return undefined;
    }
  }
  saveLocale(locale) {
    if (this.isBrowser) {
      localStorage.setItem(SI_LOCALE_LOCAL_STORAGE_KEY, locale);
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(true);
    } else {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(false);
    }
  }
};
SiDefaultLocaleStore = (0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__param)(0, (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID))], SiDefaultLocaleStore);
const SI_LOCALE_STORE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('SI_LOCALE_STORE');
const SI_LOCALE_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('SI_LOCALE_CONFIG');
// this is a function because Angular compiler exports arrows for no good reason
// eslint-disable-next-line prefer-arrow/prefer-arrow-functions
function defaultLocaleInitializer(localeId) {
  if (localeId === 'en') {
    return Promise.resolve();
  } else {
    return Promise.reject();
  }
}
class SiLocaleService {
  constructor(translate, platformId, localeStore, config) {
    this.translate = translate;
    this.localeStore = localeStore;
    this.config = config;
    this.isBrowser = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId);
    if (!config) {
      this.config = {
        availableLocales: ['en'],
        defaultLocale: 'en',
        localeInitializer: defaultLocaleInitializer,
        fallbackEnabled: false,
        dynamicLanguageChange: false
      };
    }
    if (!this.config.defaultLocale) {
      if (this.config.availableLocales && this.config.availableLocales.length > 0) {
        this.config.defaultLocale = this.config.availableLocales[0];
      } else {
        this.config.defaultLocale = 'en';
      }
    }
    if (!this.config.availableLocales || this.config.availableLocales.length === 0) {
      this.config.availableLocales = [this.config.defaultLocale];
    }
    // Also adds all locales to the translate service to enable
    // components working with the translate service directly to still work.
    this.translate.availableLanguages = this.config.availableLocales;
    if (!this.config.localeInitializer) {
      this.config.localeInitializer = defaultLocaleInitializer;
    }
    if (!this.config.fallbackEnabled) {
      this.config.fallbackEnabled = false;
    }
    if (!this.config.dynamicLanguageChange) {
      this.config.dynamicLanguageChange = false;
    }
    if (!this.localeStore) {
      this.localeStore = new SiDefaultLocaleStore(platformId);
    }
    const savedLocale = this.localeStore.locale;
    // The following check is important. We do not control the store and when it comes from
    // a remove backend, someone might give us a locale that we do not understand. In this
    // case we switch to the default.
    let initialLocale;
    const browserCultureLang = getBrowserCultureLanguage();
    const browserLang = getBrowserLanguage();
    if (this.hasLocale(savedLocale)) {
      initialLocale = savedLocale;
    } else if (this.translate.currentLanguage) {
      initialLocale = this.translate.currentLanguage;
    } else if (this.hasLocale(browserCultureLang)) {
      initialLocale = browserCultureLang;
    } else if (this.hasLocale(browserLang)) {
      initialLocale = browserLang;
    } else {
      initialLocale = this.config.defaultLocale;
    }
    this.locale$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(initialLocale);
    this.doSetLocale(initialLocale);
    // If a user changes the language on the translate service directly,
    // we synchronize the change again.
    this.translate.translationChange.subscribe(() => {
      this.locale = this.translate.currentLanguage;
    });
    if (this.config.fallbackEnabled) {
      translate.setDefaultLanguage(this.config.defaultLocale);
    }
  }
  /**
   * Sets a new locale to the locale service and also to the translate
   * service.
   * @throws An error if the new value is not configured in the available locales
   * or if the new locale cannot be saved, an error is thrown.
   */
  set locale(value) {
    if (value === this.locale$.value || value === this._nextLocale) {
      return;
    }
    if (!this.hasLocale(value)) {
      throw new Error(`The value ${value} does not exist in the available locales.`);
    }
    this.localeStore.saveLocale(value).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.first)()).subscribe(saveSucceed => {
      if (saveSucceed) {
        if (this.config.dynamicLanguageChange) {
          this.doSetLocale(value);
        } else if (this.isBrowser) {
          window.location.reload();
        }
      } else {
        throw new Error(`Could not save new locale ${value}.`);
      }
    }, () => {
      throw new Error(`Could not save new locale ${value}.`);
    });
  }
  get locale() {
    return this.locale$.value;
  }
  doSetLocale(value) {
    this._nextLocale = value;
    this.config.localeInitializer(value).then(() => {
      this.translate.setCurrentLanguage(value).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.first)()).subscribe(() => {
        if (this.locale$.value !== value) {
          this.locale$.next(value);
        }
      });
    }, () => {
      console.error(`Could not initialize new locale ${value}. Setting default locale ${this.config.defaultLocale}`);
      // Initialization of locale rejected. Setting default locale.
      this.translate.setCurrentLanguage(this.config.defaultLocale).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.first)()).subscribe(() => {
        if (this.locale$.value !== this.config.defaultLocale) {
          this.locale$.next(this.config.defaultLocale);
        }
      });
    });
  }
  /**
   * Test if the given locale is part of the available locales.
   * @param locale The locale to be tested.
   */
  hasLocale(locale) {
    if (locale) {
      return this.config.availableLocales.includes(locale);
    }
    return false;
  }
}
SiLocaleService.ɵfac = function SiLocaleService_Factory(t) {
  return new (t || SiLocaleService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](SiTranslateService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](SiLocaleStore, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](SI_LOCALE_CONFIG, 8));
};
SiLocaleService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiLocaleService,
  factory: SiLocaleService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiLocaleService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: SiTranslateService
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }, {
      type: SiLocaleStore,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [SI_LOCALE_CONFIG]
      }]
    }];
  }, null);
})();
class SiLocalizationModule {}
SiLocalizationModule.ɵfac = function SiLocalizationModule_Factory(t) {
  return new (t || SiLocalizationModule)();
};
SiLocalizationModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiLocalizationModule
});
SiLocalizationModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiLocalizationModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      declarations: [],
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiTranslateModule],
      exports: []
    }]
  }], null, null);
})();

// -------------------------------------------------------------------------------

class SiTabComponent {
  constructor() {
    /** Hides the tab item completely if set. */
    this.hidden = false;
    this.active = false;
  }
  get isHidden() {
    return this.hidden || !this.active ? true : null;
  }
  registerParent(parent) {
    this.parent = parent;
  }
  ngOnChanges() {
    this.parent?.notifyChildrenChanged();
  }
}
SiTabComponent.ɵfac = function SiTabComponent_Factory(t) {
  return new (t || SiTabComponent)();
};
SiTabComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiTabComponent,
  selectors: [["si-tab"]],
  hostVars: 1,
  hostBindings: function SiTabComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("hidden", ctx.isHidden);
    }
  },
  inputs: {
    heading: "heading",
    icon: "icon",
    iconAltText: "iconAltText",
    badgeContent: "badgeContent",
    badgeColor: "badgeColor",
    hidden: "hidden"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  ngContentSelectors: _c1,
  decls: 1,
  vars: 0,
  template: function SiTabComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTabComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-tab',
      template: '<ng-content></ng-content>',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush
    }]
  }], null, {
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    icon: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    iconAltText: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    badgeContent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    badgeColor: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    hidden: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    isHidden: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['attr.hidden']
    }]
  });
})();
const SCROLL_INCREMENT = 55;
class SiTabsetComponent {
  /**
   * Sets a selected tab index. This will activate the tab of the provided
   * index, activates the tab and fires a notification about the change.
   * If index is passed as -1 i.e. `selectedTabIndex = -1`, this implies to clear all tab selection.
   * @defaultref {@link _selectedTabIndex}
   */
  set selectedTabIndex(tabIndex) {
    if (this.initialized && this.tabs.get(tabIndex)) {
      this.selectTab(this.tabs.get(tabIndex));
    } else {
      this.initTabIndex = tabIndex;
    }
  }
  /**
   * Returns the currently selected tab index.
   */
  get selectedTabIndex() {
    return this.tabs.toArray().findIndex(tab => tab.active);
  }
  constructor(changeDetectorRef) {
    this.changeDetectorRef = changeDetectorRef;
    this.initialized = false;
    /**
     * Component variable to indicate if scrolling is necessary or the container is big enough to display all tabs.
     */
    this.scrollable = false;
    this.xPos = 0;
    this.endArrowDisabled = false;
    /**
     * If selectDefaultTab is passed as 'false', this implies no default tab selection
     * i.e. on initial load of tabset component no tab gets selected.
     */
    this.selectDefaultTab = true;
    /**
     * Event emitter to notify about selected tab index changes. You can either
     * use bi-directional binding with [(selectedTabIndex)] or separate both with
     * [selectedTabIndex]=... and (selectedTabIndexChange)=...
     */
    this.selectedTabIndexChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Event emitter to notify when a tab became inactive.
     */
    this.deselect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.initTabIndex = 0;
    this.trackByIndex = index => index;
  }
  ngAfterViewInit() {
    this.initialized = true;
    this.subscription = this.tabs.changes.subscribe(() => {
      this.tabs.forEach(tab => tab.registerParent(this));
      this.changeDetectorRef.markForCheck();
    });
    this.tabs.notifyOnChanges();
    if (this.selectDefaultTab) {
      if (this.tabs.length) {
        setTimeout(() => this.selectTab(this.tabs.get(this.initTabIndex)));
      } else {
        // no tabs are there yet. But maybe there will be some soon, so let's wait for it
        this.subscription.add(this.tabs.changes.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.first)(() => !!this.tabs.length), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_45__.observeOn)(rxjs__WEBPACK_IMPORTED_MODULE_44__.asyncScheduler)).subscribe(() => {
          this.selectTab(this.tabs.get(this.initTabIndex));
          this.changeDetectorRef.markForCheck();
        }));
      }
    }
    setTimeout(() => {
      this.resize();
    });
  }
  ngOnDestroy() {
    this.subscription?.unsubscribe();
    this.subscription = undefined;
  }
  notifyChildrenChanged() {
    this.changeDetectorRef.markForCheck();
  }
  resize() {
    this.scrollable = Math.round(this.tabContainer.nativeElement.offsetWidth) < this.innerTabContainer.nativeElement.scrollWidth;
    this.scroll(0);
  }
  /**
   * Finds the index of the provided tab and sets the index as new selected tab index
   *
   * @param selectedTab The tab to be selected. This must already be part of the container.
   */
  selectTab(selectedTab) {
    const tabs = this.tabs.toArray();
    const newTabIndex = tabs.indexOf(selectedTab);
    const currentTabIndex = tabs.findIndex(tab => tab.active);
    let continueWithSelection = newTabIndex !== currentTabIndex;
    if (continueWithSelection && currentTabIndex !== -1) {
      const currentTab = tabs[currentTabIndex];
      const deselectEvent = {
        target: currentTab,
        tabIndex: currentTabIndex,
        cancel: () => {
          continueWithSelection = false;
          currentTab.active = true;
        }
      };
      currentTab.active = false;
      this.deselect.emit(deselectEvent);
    }
    if (continueWithSelection) {
      selectedTab.active = true;
      this.selectedTabIndexChange.emit(newTabIndex);
    }
  }
  /**
   * Scrolls the tab headers to the end (right in LTR).
   */
  scrollEnd() {
    this.scroll(SCROLL_INCREMENT);
  }
  /**
   * Scrolls the tab headers to the start (left in LTR).
   */
  scrollStart() {
    this.scroll(-SCROLL_INCREMENT);
  }
  scroll(inc) {
    this.xPos += inc;
    this.xPos = Math.max(0, Math.min(this.innerTabContainer.nativeElement.scrollWidth - this.innerTabContainer.nativeElement.offsetWidth, this.xPos));
    this.endArrowDisabled = this.xPos + this.tabContainer.nativeElement.offsetWidth >= this.innerTabContainer.nativeElement.scrollWidth;
    this.innerTabContainer.nativeElement.style.transform = `translateX(${this.xPos * (isRTL() ? 1 : -1)}px)`;
  }
  mouseScroll(event) {
    if (event.deltaY < 0) {
      this.scroll(-SCROLL_INCREMENT);
    } else {
      this.scroll(SCROLL_INCREMENT);
    }
    if (this.xPos || !this.endArrowDisabled) {
      event.preventDefault();
    }
  }
}
SiTabsetComponent.ɵfac = function SiTabsetComponent_Factory(t) {
  return new (t || SiTabsetComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiTabsetComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiTabsetComponent,
  selectors: [["si-tabset"]],
  contentQueries: function SiTabsetComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, SiTabComponent, 4);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.tabs = _t);
    }
  },
  viewQuery: function SiTabsetComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c69, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c70, 7);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.tabContainer = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.innerTabContainer = _t.first);
    }
  },
  inputs: {
    selectDefaultTab: "selectDefaultTab",
    selectedTabIndex: "selectedTabIndex"
  },
  outputs: {
    selectedTabIndexChange: "selectedTabIndexChange",
    deselect: "deselect"
  },
  ngContentSelectors: _c1,
  decls: 9,
  vars: 6,
  consts: [["siListInteraction", "", "listInteractionPosition", "adjacent", 1, "nav", "nav-tabs", "tab-container-header", "focus-inside", 3, "siResizeObserver"], ["type", "button", "class", "tab-container-control focus-inside", "tabindex", "-1", 3, "hidden", "keydown.enter", "mousedown", 4, "ngIf"], [1, "tab-container-buttonbar", 3, "wheel"], ["tabContainer", ""], ["role", "tablist", 1, "tab-container-buttonbar-list", "focus-inside"], ["innerTabContainer", ""], ["class", "nav-item", "role", "presentation", 3, "active", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["type", "button", "class", "tab-container-control is-end focus-inside", "tabindex", "-1", 3, "hidden", "keydown.enter", "mousedown", 4, "ngIf"], ["type", "button", "tabindex", "-1", 1, "tab-container-control", "focus-inside", 3, "hidden", "keydown.enter", "mousedown"], [1, "icon", "element-left-3", "flip-rtl"], ["role", "presentation", 1, "nav-item"], ["siListInteractionItem", "", "role", "tab", "tabindex", "0", 1, "nav-link", "focus-inside", 3, "keydown.enter", "click"], [1, "text-truncate"], [3, "icon", "alt", 4, "ngIf"], ["class", "badge", 3, "ngClass", 4, "ngIf"], [3, "icon", "alt"], [1, "badge", 3, "ngClass"], ["type", "button", "tabindex", "-1", 1, "tab-container-control", "is-end", "focus-inside", 3, "hidden", "keydown.enter", "mousedown"], [1, "icon", "element-right-3", "flip-rtl"]],
  template: function SiTabsetComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("siResizeObserver", function SiTabsetComponent_Template_div_siResizeObserver_0_listener() {
        return ctx.resize();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiTabsetComponent_button_1_Template, 2, 1, "button", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2, 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("wheel", function SiTabsetComponent_Template_div_wheel_2_listener($event) {
        return ctx.mouseScroll($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "ul", 4, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, SiTabsetComponent_li_6_Template, 7, 11, "li", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiTabsetComponent_button_7_Template, 2, 1, "button", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](8);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("is-scrollable", ctx.scrollable);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.scrollable);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.tabs)("ngForTrackBy", ctx.trackByIndex);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.scrollable);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiIconComponent, SiListInteractionDirective, SiListInteractionItemDirective, SiResizeObserverDirective, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:block;flex-direction:column}*[_ngcontent-%COMP%]:focus{outline:0}.tab-container-header[_ngcontent-%COMP%]{overflow:hidden;display:flex}.tab-container-buttonbar[_ngcontent-%COMP%]{flex:1;overflow:hidden}.tab-container-buttonbar-list[_ngcontent-%COMP%]{display:flex;margin:0;padding:0;list-style-type:none;transition:calc(.25s * var(--element-animations-enabled, 1))}.tab-container-buttonbar-list-item[_ngcontent-%COMP%]{flex:none}.tab-container-control[_ngcontent-%COMP%]{inline-size:40px;block-size:38px;background:transparent;border:0;-webkit-user-select:none;user-select:none}.tab-container-control[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{font-size:30px}.tab-container-control[_ngcontent-%COMP%]:hover{color:var(--element-text-active)}.tab-container-control[_ngcontent-%COMP%]:disabled{color:var(--element-text-disabled);cursor:default}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTabsetComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-tabset',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div\n  class=\"nav nav-tabs tab-container-header focus-inside\"\n  [class.is-scrollable]=\"scrollable\"\n  siListInteraction\n  listInteractionPosition=\"adjacent\"\n  (siResizeObserver)=\"resize()\"\n>\n  <button\n    *ngIf=\"scrollable\"\n    type=\"button\"\n    class=\"tab-container-control focus-inside\"\n    [hidden]=\"!xPos\"\n    tabindex=\"-1\"\n    (keydown.enter)=\"scrollStart()\"\n    (mousedown)=\"scrollStart()\"\n  >\n    <i class=\"icon element-left-3 flip-rtl\"></i>\n  </button>\n\n  <div class=\"tab-container-buttonbar\" #tabContainer (wheel)=\"mouseScroll($event)\">\n    <ul\n      class=\"tab-container-buttonbar-list focus-inside\"\n      #innerTabContainer\n      role=\"tablist\"\n    >\n      <li\n        *ngFor=\"let tab of tabs; trackBy: trackByIndex\"\n        [attr.hidden]=\"tab.hidden || null\"\n        [class.active]=\"tab.active\"\n        class=\"nav-item\"\n        role=\"presentation\"\n      >\n        <div\n          siListInteractionItem\n          role=\"tab\"\n          tabindex=\"0\"\n          class=\"nav-link focus-inside\"\n          [class.active]=\"tab.active\"\n          [attr.aria-selected]=\"tab.active\"\n          (keydown.enter)=\"selectTab(tab)\"\n          (click)=\"selectTab(tab)\"\n        >\n          <span class=\"text-truncate\">{{ tab.heading! | translate }}</span>\n          <si-icon *ngIf=\"tab.icon\" [icon]=\"tab.icon\" [alt]=\"tab.iconAltText\"></si-icon>\n          <span *ngIf=\"tab.badgeContent\" class=\"badge\" [ngClass]=\"'bg-' + tab.badgeColor\">\n            {{ tab.badgeContent | translate }}\n          </span>\n        </div>\n      </li>\n    </ul>\n  </div>\n  <button\n    *ngIf=\"scrollable\"\n    type=\"button\"\n    class=\"tab-container-control is-end focus-inside\"\n    [hidden]=\"endArrowDisabled\"\n    tabindex=\"-1\"\n    (keydown.enter)=\"scrollEnd()\"\n    (mousedown)=\"scrollEnd()\"\n  >\n    <i class=\"icon element-right-3 flip-rtl\"></i>\n  </button>\n</div>\n\n<ng-content></ng-content>\n",
      styles: [":host{display:block;flex-direction:column}*:focus{outline:0}.tab-container-header{overflow:hidden;display:flex}.tab-container-buttonbar{flex:1;overflow:hidden}.tab-container-buttonbar-list{display:flex;margin:0;padding:0;list-style-type:none;transition:calc(.25s * var(--element-animations-enabled, 1))}.tab-container-buttonbar-list-item{flex:none}.tab-container-control{inline-size:40px;block-size:38px;background:transparent;border:0;-webkit-user-select:none;user-select:none}.tab-container-control i{font-size:30px}.tab-container-control:hover{color:var(--element-text-active)}.tab-container-control:disabled{color:var(--element-text-disabled);cursor:default}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    tabs: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChildren,
      args: [SiTabComponent]
    }],
    tabContainer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['tabContainer', {
        static: true
      }]
    }],
    innerTabContainer: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['innerTabContainer', {
        static: true
      }]
    }],
    selectDefaultTab: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    selectedTabIndex: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    selectedTabIndexChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    deselect: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
const components = [SiTabsetComponent, SiTabComponent];
class SiTabsModule {}
SiTabsModule.ɵfac = function SiTabsModule_Factory(t) {
  return new (t || SiTabsModule)();
};
SiTabsModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiTabsModule
});
SiTabsModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiListInteractionModule, SiResizeObserverModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiTabsModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, SiIconModule, SiListInteractionModule, SiResizeObserverModule, SiTranslateModule],
      declarations: components,
      exports: components
    }]
  }], null, null);
})();

// ------------------------------------------------------------------------------

/**
 * SiThemeStore object is used by the theme service to load and
 * store the themes. You can inject your own implementation to provide
 * a backend implementation. Otherwise a localStorage based implementation
 * is used.
 */
class SiThemeStore {}
const SI_THEME_LOCAL_STORAGE_KEY = 'si-themes';
let SiDefaultThemeStore = class SiDefaultThemeStore extends SiThemeStore {
  constructor(platformId) {
    super();
    this.isBrowser = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId);
  }
  loadActiveTheme() {
    if (!this.isBrowser) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(undefined);
    }
    const store = this.loadStore();
    if (store.activeTheme) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(store.themes[store.activeTheme]);
    } else {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(undefined);
    }
  }
  activateTheme(name) {
    if (!this.isBrowser) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(false);
    }
    const store = this.loadStore();
    if (store.themes[name]) {
      store.activeTheme = name;
      this.saveStore(store);
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(true);
    } else {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(false);
    }
  }
  deactivateTheme() {
    if (!this.isBrowser) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(false);
    }
    const store = this.loadStore();
    store.activeTheme = undefined;
    this.saveStore(store);
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(true);
  }
  loadThemeNames() {
    if (!this.isBrowser) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)([]);
    }
    const store = this.loadStore();
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(Array.from(Object.keys(store.themes)));
  }
  saveTheme(theme) {
    if (!this.isBrowser) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(false);
    }
    const store = this.loadStore();
    store.themes[theme.name] = theme;
    this.saveStore(store);
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(true);
  }
  loadTheme(name) {
    if (!this.isBrowser) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(undefined);
    }
    const store = this.loadStore();
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(store.themes[name]);
  }
  deleteTheme(name) {
    if (!this.isBrowser) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(false);
    }
    const store = this.loadStore();
    delete store.themes[name];
    if (store.activeTheme === name) {
      store.activeTheme = undefined;
    }
    this.saveStore(store);
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(true);
  }
  loadStore() {
    const storeStr = localStorage.getItem(SI_THEME_LOCAL_STORAGE_KEY);
    if (storeStr) {
      return JSON.parse(storeStr);
    } else {
      return {
        activeTheme: undefined,
        themes: {}
      };
    }
  }
  saveStore(store) {
    localStorage.setItem(SI_THEME_LOCAL_STORAGE_KEY, JSON.stringify(store));
  }
};
SiDefaultThemeStore = (0,tslib__WEBPACK_IMPORTED_MODULE_32__.__decorate)([(0,tslib__WEBPACK_IMPORTED_MODULE_32__.__param)(0, (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID))], SiDefaultThemeStore);
const ELEMENT_THEME_NAME = 'element';
const elementTheme = {
  name: 'element',
  groups: [{
    name: 'Branding',
    description: 'Configure the brand logo.',
    properties: [{
      name: '--element-brand-logo-url',
      usage: 'Enter a custom URL to a brand logo.',
      type: 'url'
    }, {
      name: '--element-brand-logo-text',
      usage: 'Enter a custom accessibility text for the brand logo.',
      type: 'text'
    }]
  }, {
    name: 'Basic definitions',
    description: 'Basic definitions',
    properties: [{
      name: '--element-body-font-family',
      usage: 'The theme only uses one font everywhere.',
      type: 'font'
    }, {
      name: '--element-button-radius',
      usage: 'Button border radius',
      type: 'text'
    }, {
      name: '--element-button-focus-width',
      usage: 'Focus width',
      type: 'text'
    }, {
      name: '--element-button-focus-overlay-width',
      usage: 'Focus overlay width',
      type: 'text'
    }, {
      name: '--element-button-focus-overlay-color',
      usage: 'Focus overlay color',
      type: 'text'
    }, {
      name: '--element-input-radius',
      usage: 'Input field border radius',
      type: 'text'
    }, {
      name: '--element-logo-color',
      usage: 'Logo color',
      type: 'text'
    }, {
      name: '--element-radius-1',
      usage: 'Border radius-1',
      type: 'text'
    }, {
      name: '--element-radius-2',
      usage: 'Border radius-2',
      type: 'text'
    }, {
      name: '--element-radius-3',
      usage: 'Border radius-3',
      type: 'text'
    }]
  }, {
    name: 'UI',
    description: 'UI colors are used on structural properties and icons and provide good contrast when used over any background.',
    properties: [{
      name: '--element-ui-0',
      usage: 'Logo, selected (active) elements',
      type: 'color'
    }, {
      name: '--element-ui-0-hover',
      usage: 'Selected hover',
      type: 'color'
    }, {
      name: '--element-ui-1',
      usage: 'Primary icons',
      type: 'color'
    }, {
      name: '--element-ui-2',
      usage: 'Secondary icons',
      type: 'color'
    }, {
      name: '--element-ui-3',
      usage: 'Disabled',
      type: 'color'
    }, {
      name: '--element-ui-4',
      usage: 'Borders',
      type: 'color'
    }, {
      name: '--element-ui-5',
      usage: 'Inverse',
      type: 'color'
    }, {
      name: '--element-ui-6',
      usage: 'Shadows',
      type: 'color'
    }, {
      name: '--element-box-shadow-color-1',
      usage: 'Box shadow color 1',
      type: 'color'
    }, {
      name: '--element-box-shadow-color-2',
      usage: 'Box shadow color 2',
      type: 'color'
    }, {
      name: '--element-focus-default',
      usage: 'Default focus color',
      type: 'color'
    }]
  }, {
    name: 'Base',
    description: 'Base colors are used as backgrounds of containers.',
    properties: [{
      name: '--element-base-0',
      usage: 'Page background, row background',
      type: 'color'
    }, {
      name: '--element-base-1',
      usage: 'Header, navigation, card, table background',
      type: 'color'
    }, {
      name: '--element-base-1-hover',
      usage: 'Hover on base-1 backgrounds, like table, tree, or menu',
      type: 'color'
    }, {
      name: '--element-base-1-selected',
      usage: 'Selected on base-1 backgrounds, like table, tree, or menu',
      type: 'color'
    }, {
      name: '--element-base-2',
      usage: 'Page background with higher contrast pages in dark mode',
      type: 'color'
    }, {
      name: '--element-base-information',
      usage: 'Informational component background for e.g. badges',
      type: 'gradient'
    }, {
      name: '--element-base-success',
      usage: 'Success component background for e.g. badges',
      type: 'gradient'
    }, {
      name: '--element-base-caution',
      usage: 'Caution component background for e.g. badges',
      type: 'gradient'
    }, {
      name: '--element-base-warning',
      usage: 'Warning component background for e.g. badges',
      type: 'gradient'
    }, {
      name: '--element-base-danger',
      usage: 'Danger component background for e.g. badges',
      type: 'gradient'
    }, {
      name: '--element-base-translucent-1',
      usage: 'Translucent background, e.g. backdrop',
      type: 'gradient'
    }, {
      name: '--element-base-translucent-2',
      usage: 'Slightly translucent background, e.g. toasts',
      type: 'gradient'
    }]
  }, {
    name: 'Actions',
    description: 'Action colors are used to indicate actions that users can perform.',
    properties: [{
      name: '--element-action-primary',
      usage: 'Primary interaction',
      type: 'gradient'
    }, {
      name: '--element-action-primary-hover',
      usage: 'Primary action background on hover',
      type: 'gradient'
    }, {
      name: '--element-action-primary-text',
      usage: 'Primary text color',
      type: 'color'
    }, {
      name: '--element-action-secondary',
      usage: 'Secondary interaction',
      type: 'gradient'
    }, {
      name: '--element-action-secondary-hover',
      usage: 'Secondary action background on hover',
      type: 'gradient'
    }, {
      name: '--element-action-secondary-text',
      usage: 'Secondary text color',
      type: 'color'
    }, {
      name: '--element-action-secondary-text-hover',
      usage: 'Secondary text color on hover',
      type: 'color'
    }, {
      name: '--element-action-secondary-border',
      usage: 'Secondary border color',
      type: 'color'
    }, {
      name: '--element-action-secondary-border-hover',
      usage: 'Secondary border color on hover',
      type: 'color'
    }, {
      name: '--element-action-warning',
      usage: 'Warning',
      type: 'gradient'
    }, {
      name: '--element-action-warning-hover',
      usage: 'Warning action background on hover',
      type: 'gradient'
    }, {
      name: '--element-action-warning-text',
      usage: 'Warning text color',
      type: 'color'
    }, {
      name: '--element-action-danger',
      usage: 'Danger',
      type: 'gradient'
    }, {
      name: '--element-action-danger-hover',
      usage: 'Danger action background on hover',
      type: 'gradient'
    }, {
      name: '--element-action-danger-text',
      usage: 'Danger text color',
      type: 'color'
    }, {
      name: '--element-action-disabled-opacity',
      usage: 'Disabled action opacity',
      type: 'number'
    }]
  }, {
    name: 'Text',
    description: 'Similarly, categories for typography colors are also defined in this system.',
    properties: [{
      name: '--element-text-primary',
      usage: 'Primary',
      type: 'color'
    }, {
      name: '--element-text-secondary',
      usage: 'Secondary',
      type: 'color'
    }, {
      name: '--element-text-disabled',
      usage: 'Disabled',
      type: 'color'
    }, {
      name: '--element-text-inverse',
      usage: 'Inverse',
      type: 'color'
    }, {
      name: '--element-text-active',
      usage: 'Active',
      type: 'color'
    }, {
      name: '--element-text-information',
      usage: 'Informational',
      type: 'color'
    }, {
      name: '--element-text-success',
      usage: 'Success',
      type: 'color'
    }, {
      name: '--element-text-caution',
      usage: 'Caution',
      type: 'color'
    }, {
      name: '--element-text-warning',
      usage: 'Warning',
      type: 'color'
    }, {
      name: '--element-text-danger',
      usage: 'Danger',
      type: 'color'
    }]
  }, {
    name: 'Status',
    description: 'Status colors are used to describe and/or report on the status of different things.',
    properties: [{
      name: '--element-status-information',
      usage: 'Informational',
      type: 'color'
    }, {
      name: '--element-status-information-contrast',
      usage: 'Informational contrast',
      type: 'color'
    }, {
      name: '--element-status-success',
      usage: 'Success',
      type: 'color'
    }, {
      name: '--element-status-success-contrast',
      usage: 'Success contrast',
      type: 'color'
    }, {
      name: '--element-status-caution',
      usage: 'Caution',
      type: 'color'
    }, {
      name: '--element-status-caution-contrast',
      usage: 'Caution contrast',
      type: 'color'
    }, {
      name: '--element-status-warning',
      usage: 'Warning',
      type: 'color'
    }, {
      name: '--element-status-warning-contrast',
      usage: 'Warning contrast',
      type: 'color'
    }, {
      name: '--element-status-danger',
      usage: 'Danger',
      type: 'color'
    }, {
      name: '--element-status-danger-contrast',
      usage: 'Danger contrast',
      type: 'color'
    }]
  }]
};
class SiThemeService {
  get resolvedColorScheme() {
    return this._resolvedColorScheme;
  }
  get themeNames() {
    return this._themeNames;
  }
  constructor(platformId, themeStore, meta) {
    this.themeStore = themeStore;
    this.meta = meta;
    /**
     * The current color scheme. (e.g. light or dark).
     */
    this._resolvedColorScheme = 'light';
    this.resolvedColorSchemeSub = new rxjs__WEBPACK_IMPORTED_MODULE_30__.ReplaySubject(1);
    this.resolvedColorScheme$ = this.resolvedColorSchemeSub.asObservable();
    /**
     * All available theme names, including element theme name.
     */
    this._themeNames = [ELEMENT_THEME_NAME];
    this.themeNamesSub = new rxjs__WEBPACK_IMPORTED_MODULE_30__.ReplaySubject(1);
    this.themeNames$ = this.themeNamesSub.asObservable();
    /**
     * Emits events when the currently applied theme changes. Either by
     * changing to another theme or by re-applying a theme with updated
     * properties. When switching to default theme element, `undefined`
     * is emitted.
     */
    this.themeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.themes = new Map();
    this.isBrowser = (0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId);
    this.resolvedColorScheme$.subscribe(scheme => this._resolvedColorScheme = scheme);
    this.themeNames$.subscribe(names => this._themeNames = names);
    if (this.isBrowser) {
      this.darkMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      this.mediaQueryListener = () => this.toggleDark(this.darkMediaQuery.matches);
    }
    if (!this.themeStore) {
      this.themeStore = new SiDefaultThemeStore(platformId);
    }
    this.getActiveTheme().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_22__.take)(1)).subscribe(theme => this.applyThemeStyle(theme, this._resolvedColorScheme), error => console.error('Cannot load active theme', error));
    this.themeStore.loadThemeNames().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_22__.take)(1)).subscribe(names => {
      names.push(ELEMENT_THEME_NAME);
      this.themeNamesSub.next(names);
    }, error => console.error('Cannot load theme names', error));
  }
  hasTheme(name) {
    return this._themeNames.includes(name);
  }
  /**
   * Returns a clone of the theme with the given name or `undefined` if not
   * available or name is `element`.
   * @param name The name of the theme to be returned.
   * @returns The theme with the given name and `undefined` if name is `element`.
   */
  getTheme(name) {
    if (name === ELEMENT_THEME_NAME || !this.hasTheme(name)) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(undefined);
    }
    if (this.themes.has(name)) {
      const theme = this.themes.get(name);
      // return a clone to avoid changes as a side effect
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(this.cloneTheme(theme));
    }
    return this.themeStore.loadTheme(name).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.tap)(theme => {
      if (theme) {
        this.themes.set(theme.name, this.cloneTheme(theme));
      }
    }));
  }
  /**
   * Loads and returns the currently active theme. Returns undefined if no custom theme is used.
   * @returns A custom theme or `undefined` if the default element theme is used.
   */
  getActiveTheme() {
    if (this.activeThemeName) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(this.themes.get(this.activeThemeName));
    }
    return this.themeStore.loadActiveTheme().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.map)(theme => {
      if (theme) {
        this.activeThemeName = theme.name;
        this.themes.set(theme.name, theme);
        this.applyTheme(theme, this._resolvedColorScheme);
        return theme;
      }
      this.activeThemeName = ELEMENT_THEME_NAME;
      return undefined;
    }));
  }
  addOrUpdateTheme(theme) {
    const result = new rxjs__WEBPACK_IMPORTED_MODULE_30__.ReplaySubject(1);
    this.themeStore.saveTheme(theme).subscribe(saveResult => {
      if (saveResult) {
        this.themes.set(theme.name, this.cloneTheme(theme));
        // Update list of theme names when this is a new one
        if (!this.hasTheme(theme.name)) {
          const names = this._themeNames.concat(theme.name);
          this.themeNamesSub.next(names);
        }
      }
      result.next(saveResult);
      result.complete();
    }, error => result.error(error), () => result.complete());
    return result;
  }
  deleteTheme(name) {
    const result = new rxjs__WEBPACK_IMPORTED_MODULE_30__.ReplaySubject(1);
    if (!this.hasTheme(name) || name === ELEMENT_THEME_NAME) {
      result.next(false);
      result.complete();
    } else {
      this.removeThemeCSS(name);
      this.themeStore.deleteTheme(name).subscribe(deleteResult => {
        if (deleteResult) {
          this.themes.delete(name);
          const names = this._themeNames.filter(themeName => themeName !== name);
          this.themeNamesSub.next(names);
        }
        result.next(deleteResult);
        result.complete();
      }, error => result.error(error), () => result.complete());
    }
    return result;
  }
  resetPreview() {
    this.previewTheme = {
      name: '__preview',
      schemes: {
        dark: {},
        light: {}
      }
    };
    this.removeThemeCSS(this.previewTheme.name);
  }
  setActiveTheme(name, type) {
    const theType = type ?? this._resolvedColorScheme ?? 'auto';
    const theName = name ?? this.activeThemeName ?? ELEMENT_THEME_NAME;
    if (theName === this.activeThemeName) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(true);
    }
    if (!this.hasTheme(theName)) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(false);
    }
    const result = new rxjs__WEBPACK_IMPORTED_MODULE_30__.ReplaySubject(1);
    this.activeThemeName = theName;
    // Make the change in the remove store
    const store = theName !== ELEMENT_THEME_NAME ? this.themeStore.activateTheme(theName) : this.themeStore.deactivateTheme();
    store.pipe(
    // On success, load the theme
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.switchMap)(storeResult => {
      if (storeResult) {
        return this.getTheme(theName);
      } else {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_46__.throwError)('Cannot change active theme in theme store.');
      }
    }),
    // Only take one to avoid unsubscription issues
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_22__.take)(1)).subscribe(theme => {
      this.applyTheme(theme, theType);
      result.next(true);
    }, error => {
      console.error(`Activating theme ${name} failed`, error);
      result.next(false);
    }, () => result.complete());
    return result;
  }
  applyThemeType(type) {
    if (type === this._resolvedColorScheme || !this.darkMediaQuery || !this.mediaQueryListener) {
      return;
    }
    // need to use the deprecated version because of Safari
    this.darkMediaQuery.removeListener(this.mediaQueryListener);
    if (type === 'light') {
      this.toggleDark(false);
    } else if (type === 'dark') {
      this.toggleDark(true);
    } else {
      this.mediaQueryListener();
      this.darkMediaQuery.addListener(this.mediaQueryListener);
    }
  }
  applyTheme(theme, type, overwrite) {
    if (theme) {
      this.applyThemeStyle(theme, type, overwrite);
    } else {
      this.getActiveTheme().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_22__.take)(1)).subscribe(loadedTheme => this.applyThemeStyle(loadedTheme, type), error => console.error('Cannot load active theme', error));
    }
  }
  updateProperty(name, value, type) {
    if (!this.previewTheme) {
      this.resetPreview();
    }
    this.previewTheme.schemes[type][name] = value;
    this.createThemeCSS(this.previewTheme);
    document.documentElement.classList.add('theme-__preview');
    this.dispatchThemeSwitchEvent();
  }
  isThemeValid(data) {
    const theme = data;
    return data && typeof data === 'object' && 'name' in data && 'schemes' in data && typeof theme.name === 'string' && typeof theme.schemes === 'object' && this.isThemeTypeValid(theme, 'light') && this.isThemeTypeValid(theme, 'dark');
  }
  isThemeTypeValid(theme, type) {
    return !(type in theme.schemes) || typeof theme.schemes[type] === 'object' && Object.values(theme.schemes[type]).every(item => typeof item === 'string') && Object.keys(theme.schemes[type]).every(item => typeof item === 'string');
  }
  applyThemeStyle(theme, type, overwrite) {
    if (!this.isBrowser) {
      return;
    }
    this.resetPreview();
    if (theme && theme.name !== ELEMENT_THEME_NAME && (overwrite || !this.hasThemeCSS(theme))) {
      this.createThemeCSS(theme);
    }
    this.activateTheme(theme);
    if (type && type !== this._resolvedColorScheme) {
      this.applyThemeType(type);
    }
    this.themeChange.emit(theme);
  }
  activateTheme(theme) {
    const classList = document.documentElement.classList;
    classList.forEach(c => {
      if (c.startsWith('theme-')) {
        classList.remove(c);
      }
    });
    if (theme) {
      classList.add(`theme-${theme.name}`);
    }
  }
  hasThemeCSS(theme) {
    const id = `__theme-${theme.name}`;
    return !!document.getElementById(id);
  }
  createThemeCSS(theme) {
    let css = '';
    const themeSelector = `:root.theme-${theme.name}`;
    if (theme.schemes.light) {
      css = this.createThemeVariantCSS(css, themeSelector, theme.schemes.light);
    }
    if (theme.schemes.dark) {
      css = this.createThemeVariantCSS(css, themeSelector + '.app--dark', theme.schemes.dark);
    }
    this.removeThemeCSS(theme.name);
    const cssElement = document.createElement('style');
    cssElement.id = `__theme-${theme.name}`;
    cssElement.textContent = css;
    document.body.appendChild(cssElement);
  }
  createThemeVariantCSS(css, selector, scheme) {
    css += `${selector} {\n`;
    for (const key of Object.keys(scheme)) {
      css += `${key}: ${scheme[key]};\n`;
    }
    css += '}\n';
    return css;
  }
  removeThemeCSS(name) {
    const id = `__theme-${name}`;
    document.getElementById(id)?.remove();
    document.documentElement.classList.remove(`theme-${name}`);
  }
  toggleDark(dark) {
    if (!this.isBrowser) {
      return;
    }
    document.documentElement.classList.toggle('app--dark', dark);
    const colorScheme = dark ? 'dark' : 'light';
    this.meta.updateTag({
      name: 'color-scheme',
      content: colorScheme
    });
    this.resolvedColorSchemeSub.next(colorScheme);
    this.dispatchThemeSwitchEvent();
  }
  cloneTheme(theme) {
    const clone = {
      ...theme,
      schemes: {}
    };
    if (theme.schemes.light) {
      clone.schemes.light = {
        ...theme.schemes.light
      };
    }
    if (theme.schemes.dark) {
      clone.schemes.dark = {
        ...theme.schemes.dark
      };
    }
    return clone;
  }
  dispatchThemeSwitchEvent() {
    window.dispatchEvent(new CustomEvent('theme-switch', {
      detail: {
        dark: this._resolvedColorScheme === 'dark',
        colorScheme: this._resolvedColorScheme
      }
    }));
  }
}
SiThemeService.ɵfac = function SiThemeService_Factory(t) {
  return new (t || SiThemeService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](SiThemeStore, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_34__.Meta));
};
SiThemeService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiThemeService,
  factory: SiThemeService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiThemeService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }, {
      type: SiThemeStore,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }]
    }, {
      type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_34__.Meta
    }];
  }, null);
})();

/**
 * @deprecated use SiThemeService instead.
 */
class ThemeSwitcherService {
  constructor(themeService) {
    this.themeService = themeService;
    this.darkThemeToggle$ = this.themeService.resolvedColorScheme$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.map)(colorScheme => colorScheme === 'dark'));
  }
  setTheme(theme) {
    this.themeService.applyThemeType(theme);
  }
}
ThemeSwitcherService.ɵfac = function ThemeSwitcherService_Factory(t) {
  return new (t || ThemeSwitcherService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](SiThemeService));
};
ThemeSwitcherService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: ThemeSwitcherService,
  factory: ThemeSwitcherService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ThemeSwitcherService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: SiThemeService
    }];
  }, null);
})();
class SiSidePanelService {
  constructor() {
    this.contentSubject = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(undefined);
    this.content$ = this.contentSubject.asObservable();
    this.openSubject = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(false);
    this.isOpen$ = this.openSubject.asObservable();
    this.tempContentSubject = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(undefined);
    this.tempContent$ = this.tempContentSubject.asObservable();
  }
  setSidePanelContent(portal) {
    this.contentSubject.next(portal);
  }
  open() {
    this.hideTemporaryContent();
    this.openSubject.next(true);
  }
  close() {
    if (this.hideTemporaryContent()) {
      return;
    }
    this.openSubject.next(false);
  }
  toggle() {
    this.hideTemporaryContent();
    this.openSubject.next(!this.openSubject.value);
  }
  isOpen() {
    return this.openSubject.value;
  }
  isTemporaryOpen() {
    return !!this.tempContentSubject.value;
  }
  showTemporaryContent(portal) {
    this.hideTemporaryContent();
    this.tempContentSubject.next(portal);
    if (portal) {
      this.tempContentClosed = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
      return this.tempContentClosed.asObservable();
    }
    return rxjs__WEBPACK_IMPORTED_MODULE_47__.EMPTY;
  }
  hideTemporaryContent() {
    if (!this.isTemporaryOpen()) {
      return false;
    }
    if (this.tempContentClosed) {
      const sub = this.tempContentClosed;
      this.tempContentClosed = undefined;
      sub.next();
      sub.complete();
    }
    this.tempContentSubject.next(undefined);
    return true;
  }
}
SiSidePanelService.ɵfac = function SiSidePanelService_Factory(t) {
  return new (t || SiSidePanelService)();
};
SiSidePanelService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: SiSidePanelService,
  factory: SiSidePanelService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSidePanelService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();
class SiSidePanelComponent {
  get isCollapsible() {
    return this.collapsible && !this.showTempContent;
  }
  get isCollapsibleTemp() {
    return this.collapsible && this.showTempContent;
  }
  get isScrollMode() {
    return this.mode === 'scroll';
  }
  get isOverMode() {
    return this.mode === 'over';
  }
  get isNormalSize() {
    return this.size === 'regular';
  }
  get isWideSize() {
    return this.size === 'wide';
  }
  constructor(element, platformId, resizeObserver, service, cdRef) {
    this.element = element;
    this.resizeObserver = resizeObserver;
    this.service = service;
    this.cdRef = cdRef;
    /*
     * If true, the panel is collapsed instead of completely hidden, just like the vertical navbar
     */
    this.collapsible = false;
    /**
     * Header of side panel
     */
    this.heading = '';
    /**
     * Mode of side panel
     * (ignored below a certain width)
     */
    this.mode = 'over';
    /**
     * Size of side-panel
     */
    this.size = 'regular';
    /**
     * Aria label for close button. Needed for a11y
     */
    this.closeButtonLabel = 'close';
    /**
     * Toggle icon aria-label, required for a11y
     */
    this.toggleItemLabel = 'toggle';
    /**
     * Emits when the panel is closed
     */
    this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /**
     * Emits whenever the content is resized due to opening and closing or parent resize.
     */
    this.contentResize = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.isXs = false;
    this.isSm = false;
    this.isMd = true;
    this.isLg = false;
    this.isXl = false;
    this.isCollapsed = false;
    this.ready = false;
    this.isHidden = false;
    this.showTempContent = false;
    /**
     * The $rpanel-transition-duration in the style is 0.5 seconds.
     * Sending the resize event after resize need to wait until resize is done.
     */
    this.resizeEventDelay = 500;
    this.resizeEvent = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.openingOrClosing = false;
    this.previousContentDimensions = {
      width: 0,
      height: 0
    };
    this.isCollapsedInternal = false; // same as the other one, except w/o timeout for animation
    if ((0,_angular_common__WEBPACK_IMPORTED_MODULE_1__.isPlatformBrowser)(platformId)) {
      this.subscription = this.resizeEvent.asObservable().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_41__.debounceTime)(this.resizeEventDelay)).subscribe(() => {
        this.openingOrClosing = false;
        this.emitResizeOutputs();
        if (this.isCollapsedInternal && !this.collapsible) {
          this.isHidden = true;
        }
        this.cdRef.markForCheck();
      });
    }
  }
  ngOnInit() {
    // handle initial state to avoid flicker
    const collapsed = this.collapsed ?? !this.service.isOpen();
    this.isCollapsedInternal = collapsed;
    this.isHidden = collapsed;
    this.isCollapsed = collapsed;
    this.resizeSubs = this.resizeObserver.observe(this.element.nativeElement, 100, true).subscribe(dim => {
      this.setBreakpoints(dim.width, dim.height);
      if (!this.ready) {
        // delay because the initial sizing needs to settle
        setTimeout(() => {
          this.ready = true;
          this.cdRef.markForCheck();
        }, 100);
      }
      if (!this.openingOrClosing) {
        this.emitResizeOutputs();
      }
    });
    if (this.subscription) {
      this.subscription.add(this.service.content$.subscribe(portal => this.attachContent(portal)));
      this.subscription.add(this.service.tempContent$.subscribe(portal => this.attachTempContent(portal)));
      this.subscription.add(this.service.isOpen$.subscribe(state => this.openClose(state)));
    }
  }
  ngOnDestroy() {
    this.portalOutlet.detach();
    this.resizeSubs?.unsubscribe();
    this.subscription?.unsubscribe();
  }
  ngOnChanges(changes) {
    if (changes.collapsed) {
      if (this.collapsed) {
        this.service.close();
      } else {
        this.service.open();
      }
    }
  }
  toggleSidePanel() {
    if (this.collapsible) {
      this.service.toggle();
    } else {
      this.service.close();
    }
  }
  emitResizeOutputs() {
    const contentDimensions = this.getContentDimensions();
    if (contentDimensions.width !== this.previousContentDimensions.width || contentDimensions.height !== this.previousContentDimensions.height) {
      this.previousContentDimensions = contentDimensions;
      this.contentResize.emit(contentDimensions);
    }
  }
  getContentDimensions() {
    if (!this.isCollapsedInternal && this.isXs) {
      return {
        width: 0,
        height: 0
      };
    }
    const rect = this.contentElement.nativeElement.getBoundingClientRect();
    return {
      width: rect.width,
      height: rect.height
    };
  }
  setBreakpoints(width, height) {
    if (!width && !height) {
      // element is not visible, no point in changing anything
      return;
    }
    const breakpoints = this.breakpoints ?? BOOTSTRAP_BREAKPOINTS;
    this.isXs = width < breakpoints.smMinimum;
    this.isSm = width >= breakpoints.smMinimum && width < breakpoints.mdMinimum;
    this.isMd = width >= breakpoints.mdMinimum && width < breakpoints.lgMinimum;
    this.isLg = width >= breakpoints.lgMinimum && width < breakpoints.xlMinimum;
    this.isXl = width >= breakpoints.xlMinimum;
    this.cdRef.markForCheck();
  }
  sendResize() {
    if (this.isScrollMode || this.element.nativeElement.style.paddingRight !== '0') {
      this.openingOrClosing = true;
      this.resizeEvent.next();
    }
  }
  attachContent(portal) {
    this.portalOutlet.detach();
    if (portal) {
      this.portalOutlet.attach(portal);
    }
  }
  attachTempContent(portal) {
    this.tmpPortalOutlet.detach();
    if (portal) {
      this.tmpPortalOutlet.attach(portal);
      this.showTempContent = true;
      this.openClose(true, true);
    } else if (this.showTempContent) {
      this.showTempContent = false;
      this.openClose(this.service.isOpen(), true);
    }
  }
  openClose(open, regainFocus = false) {
    if (open !== this.isCollapsedInternal) {
      this.moveFocusInside(open && regainFocus);
      return;
    }
    this.isCollapsedInternal = !open;
    if (open) {
      this.isHidden = false;
    }
    setTimeout(() => this.doOpenClose(open));
  }
  doOpenClose(open) {
    this.moveFocusInside(open);
    this.isCollapsed = !open;
    this.collapsed = this.isCollapsed;
    if (this.isCollapsedInternal) {
      this.closed.emit();
    }
    this.sendResize();
    this.cdRef.markForCheck();
  }
  moveFocusInside(open) {
    if (open) {
      // moves the keyboard focus inside the panel so that the next tab is somewhere useful
      this.panelElement.nativeElement.focus();
      queueMicrotask(() => this.panelElement.nativeElement.blur());
    }
  }
}
SiSidePanelComponent.ɵfac = function SiSidePanelComponent_Factory(t) {
  return new (t || SiSidePanelComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ResizeObserverService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiSidePanelService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
};
SiSidePanelComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiSidePanelComponent,
  selectors: [["si-side-panel"]],
  viewQuery: function SiSidePanelComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c71, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c6, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c72, 7, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.CdkPortalOutlet);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c73, 7, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.CdkPortalOutlet);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.panelElement = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.contentElement = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.portalOutlet = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.tmpPortalOutlet = _t.first);
    }
  },
  hostAttrs: [1, "si-layout-inner"],
  hostVars: 28,
  hostBindings: function SiSidePanelComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("collapsible", ctx.isCollapsible)("collapsible-temp", ctx.isCollapsibleTemp)("rpanel-mode--scroll", ctx.isScrollMode)("rpanel-mode--over", ctx.isOverMode)("rpanel-size--regular", ctx.isNormalSize)("rpanel-size--wide", ctx.isWideSize)("rpanel-resize-xs", ctx.isXs)("rpanel-resize-sm", ctx.isSm)("rpanel-resize-md", ctx.isMd)("rpanel-resize-lg", ctx.isLg)("rpanel-resize-xl", ctx.isXl)("rpanel-collapsed", ctx.isCollapsed)("ready", ctx.ready)("rpanel-hidden", ctx.isHidden);
    }
  },
  inputs: {
    collapsible: "collapsible",
    collapsed: "collapsed",
    heading: "heading",
    mode: "mode",
    size: "size",
    closeButtonLabel: "closeButtonLabel",
    toggleItemLabel: "toggleItemLabel",
    breakpoints: "breakpoints"
  },
  outputs: {
    closed: "closed",
    contentResize: "contentResize"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  ngContentSelectors: _c75,
  decls: 12,
  vars: 4,
  consts: [["tabindex", "-1", 1, "side-panel", "elevation-1"], ["sidePanel", ""], [1, "inner"], ["cdkPortalOutlet", ""], ["portalOutlet", ""], ["tmpPortalOutlet", ""], [1, "main-content", "si-layout-inner"], ["content", ""]],
  template: function SiSidePanelComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c74);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0, 1)(2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](4, 3, 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](7, 3, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 6, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](11, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("d-none", ctx.showTempContent);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("d-none", !ctx.showTempContent);
    }
  },
  dependencies: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.CdkPortalOutlet],
  styles: ["[_nghost-%COMP%]{--rpanel-collapsed-padding: 0;--rpanel-size: 390px;display:block;padding-inline-end:var(--rpanel-size)}.ready[_nghost-%COMP%]{transition:padding-inline-end calc(.5s * var(--element-animations-enabled, 1))}.ready[_nghost-%COMP%]   .side-panel[_ngcontent-%COMP%]{transition:inline-size calc(.5s * var(--element-animations-enabled, 1))}[_nghost-%COMP%]   .side-panel[_ngcontent-%COMP%], [_nghost-%COMP%]   .side-panel[_ngcontent-%COMP%] > .inner[_ngcontent-%COMP%]{inline-size:var(--rpanel-size)}.collapsible[_nghost-%COMP%], .collapsible-temp[_nghost-%COMP%]{--rpanel-collapsed-width: 48px}.rpanel-size--wide[_nghost-%COMP%]{--rpanel-size: 500px}.rpanel-resize-sm.rpanel-mode--over[_nghost-%COMP%], .rpanel-resize-md.rpanel-mode--over[_nghost-%COMP%], .rpanel-resize-lg.rpanel-mode--over[_nghost-%COMP%], .rpanel-resize-xl.rpanel-mode--over[_nghost-%COMP%]{padding-inline-end:var(--rpanel-collapsed-width)}.rpanel-resize-lg.rpanel-mode--scroll.rpanel-size--wide[_nghost-%COMP%]{padding-inline-end:var(--rpanel-collapsed-width)}.rpanel-resize-sm.rpanel-mode--scroll[_nghost-%COMP%], .rpanel-resize-md.rpanel-mode--scroll[_nghost-%COMP%]{padding-inline-end:var(--rpanel-collapsed-width)}.rpanel-resize-xs.rpanel-mode--over[_nghost-%COMP%], .rpanel-resize-xs.rpanel-mode--scroll[_nghost-%COMP%]{padding-inline-end:var(--rpanel-collapsed-width)}.rpanel-resize-xs[_nghost-%COMP%]:not(.collapsible)   .side-panel[_ngcontent-%COMP%]{inset-block-start:0;z-index:1035}.rpanel-resize-xs.collapsible[_nghost-%COMP%]   .side-panel[_ngcontent-%COMP%]{z-index:1030}.rpanel-resize-xs[_nghost-%COMP%]:not(.rpanel-collapsed)   .side-panel[_ngcontent-%COMP%], .rpanel-resize-xs[_nghost-%COMP%]:not(.rpanel-collapsed)   .side-panel[_ngcontent-%COMP%] > .inner[_ngcontent-%COMP%]{inline-size:100%}.rpanel-hidden[_nghost-%COMP%]:not(.collapsible)   .side-panel[_ngcontent-%COMP%]{display:none}.rpanel-collapsed[_nghost-%COMP%]{padding-inline-end:var(--rpanel-collapsed-width)}.rpanel-collapsed[_nghost-%COMP%]:not(.collapsible)   .side-panel[_ngcontent-%COMP%]{inline-size:0;overflow:hidden}.rpanel-collapsed.collapsible[_nghost-%COMP%]   .side-panel[_ngcontent-%COMP%]{inline-size:var(--rpanel-collapsed-width);overflow:hidden}.side-panel[_ngcontent-%COMP%]{position:fixed;z-index:1029;inset-block:48px 0;inset-inline-end:0;overflow-x:hidden;background:var(--element-base-1);outline:0}.side-panel[_ngcontent-%COMP%] > .inner[_ngcontent-%COMP%]{display:flex;flex-direction:column;position:absolute;inset-block:0;inset-inline-start:0}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSidePanelComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-side-panel',
      host: {
        class: 'si-layout-inner'
      },
      template: "<div #sidePanel class=\"side-panel elevation-1\" tabindex=\"-1\">\n  <div class=\"inner\" [class.d-none]=\"showTempContent\">\n    <ng-content select=\"si-side-panel-content, si-right-panel-content\"></ng-content>\n    <ng-container #portalOutlet cdkPortalOutlet></ng-container>\n  </div>\n  <div class=\"inner\" [class.d-none]=\"!showTempContent\">\n    <ng-container #tmpPortalOutlet cdkPortalOutlet></ng-container>\n  </div>\n</div>\n<div #content class=\"main-content si-layout-inner\">\n  <ng-content></ng-content>\n</div>\n",
      styles: [":host{--rpanel-collapsed-padding: 0;--rpanel-size: 390px;display:block;padding-inline-end:var(--rpanel-size)}:host.ready{transition:padding-inline-end calc(.5s * var(--element-animations-enabled, 1))}:host.ready .side-panel{transition:inline-size calc(.5s * var(--element-animations-enabled, 1))}:host .side-panel,:host .side-panel>.inner{inline-size:var(--rpanel-size)}:host.collapsible,:host.collapsible-temp{--rpanel-collapsed-width: 48px}:host.rpanel-size--wide{--rpanel-size: 500px}:host.rpanel-resize-sm.rpanel-mode--over,:host.rpanel-resize-md.rpanel-mode--over,:host.rpanel-resize-lg.rpanel-mode--over,:host.rpanel-resize-xl.rpanel-mode--over{padding-inline-end:var(--rpanel-collapsed-width)}:host.rpanel-resize-lg.rpanel-mode--scroll.rpanel-size--wide{padding-inline-end:var(--rpanel-collapsed-width)}:host.rpanel-resize-sm.rpanel-mode--scroll,:host.rpanel-resize-md.rpanel-mode--scroll{padding-inline-end:var(--rpanel-collapsed-width)}:host.rpanel-resize-xs.rpanel-mode--over,:host.rpanel-resize-xs.rpanel-mode--scroll{padding-inline-end:var(--rpanel-collapsed-width)}:host.rpanel-resize-xs:not(.collapsible) .side-panel{inset-block-start:0;z-index:1035}:host.rpanel-resize-xs.collapsible .side-panel{z-index:1030}:host.rpanel-resize-xs:not(.rpanel-collapsed) .side-panel,:host.rpanel-resize-xs:not(.rpanel-collapsed) .side-panel>.inner{inline-size:100%}:host.rpanel-hidden:not(.collapsible) .side-panel{display:none}:host.rpanel-collapsed{padding-inline-end:var(--rpanel-collapsed-width)}:host.rpanel-collapsed:not(.collapsible) .side-panel{inline-size:0;overflow:hidden}:host.rpanel-collapsed.collapsible .side-panel{inline-size:var(--rpanel-collapsed-width);overflow:hidden}.side-panel{position:fixed;z-index:1029;inset-block:48px 0;inset-inline-end:0;overflow-x:hidden;background:var(--element-base-1);outline:0}.side-panel>.inner{display:flex;flex-direction:column;position:absolute;inset-block:0;inset-inline-start:0}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }, {
      type: ResizeObserverService
    }, {
      type: SiSidePanelService
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }];
  }, {
    collapsible: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    collapsed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    mode: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    size: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    closeButtonLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    toggleItemLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    breakpoints: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    closed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    contentResize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    isCollapsible: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.collapsible']
    }],
    isCollapsibleTemp: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.collapsible-temp']
    }],
    isScrollMode: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.rpanel-mode--scroll']
    }],
    isOverMode: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.rpanel-mode--over']
    }],
    isNormalSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.rpanel-size--regular']
    }],
    isWideSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.rpanel-size--wide']
    }],
    isXs: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.rpanel-resize-xs']
    }],
    isSm: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.rpanel-resize-sm']
    }],
    isMd: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.rpanel-resize-md']
    }],
    isLg: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.rpanel-resize-lg']
    }],
    isXl: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.rpanel-resize-xl']
    }],
    isCollapsed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.rpanel-collapsed']
    }],
    ready: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.ready']
    }],
    isHidden: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.rpanel-hidden']
    }],
    panelElement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['sidePanel', {
        static: true
      }]
    }],
    contentElement: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['content', {
        static: true
      }]
    }],
    portalOutlet: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['portalOutlet', {
        read: _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.CdkPortalOutlet,
        static: true
      }]
    }],
    tmpPortalOutlet: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: ['tmpPortalOutlet', {
        read: _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.CdkPortalOutlet,
        static: true
      }]
    }]
  });
})();

/**
 * @deprecated Use the `SiSidePanelComponent` instead.
 */
class SiRightPanelComponent extends SiSidePanelComponent {}
SiRightPanelComponent.ɵfac = /* @__PURE__ */function () {
  let ɵSiRightPanelComponent_BaseFactory;
  return function SiRightPanelComponent_Factory(t) {
    return (ɵSiRightPanelComponent_BaseFactory || (ɵSiRightPanelComponent_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](SiRightPanelComponent)))(t || SiRightPanelComponent);
  };
}();
SiRightPanelComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiRightPanelComponent,
  selectors: [["si-right-panel"]],
  hostAttrs: [1, "si-layout-inner"],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
  ngContentSelectors: _c75,
  decls: 12,
  vars: 4,
  consts: [["tabindex", "-1", 1, "side-panel", "elevation-1"], ["sidePanel", ""], [1, "inner"], ["cdkPortalOutlet", ""], ["portalOutlet", ""], ["tmpPortalOutlet", ""], [1, "main-content", "si-layout-inner"], ["content", ""]],
  template: function SiRightPanelComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c74);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0, 1)(2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](4, 3, 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](7, 3, 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 6, 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](11, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("d-none", ctx.showTempContent);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("d-none", !ctx.showTempContent);
    }
  },
  dependencies: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.CdkPortalOutlet],
  styles: [_c76],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiRightPanelComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-right-panel',
      host: {
        class: 'si-layout-inner'
      },
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div #sidePanel class=\"side-panel elevation-1\" tabindex=\"-1\">\n  <div class=\"inner\" [class.d-none]=\"showTempContent\">\n    <ng-content select=\"si-side-panel-content, si-right-panel-content\"></ng-content>\n    <ng-container #portalOutlet cdkPortalOutlet></ng-container>\n  </div>\n  <div class=\"inner\" [class.d-none]=\"!showTempContent\">\n    <ng-container #tmpPortalOutlet cdkPortalOutlet></ng-container>\n  </div>\n</div>\n<div #content class=\"main-content si-layout-inner\">\n  <ng-content></ng-content>\n</div>\n",
      styles: [":host{--rpanel-collapsed-padding: 0;--rpanel-size: 390px;display:block;padding-inline-end:var(--rpanel-size)}:host.ready{transition:padding-inline-end calc(.5s * var(--element-animations-enabled, 1))}:host.ready .side-panel{transition:inline-size calc(.5s * var(--element-animations-enabled, 1))}:host .side-panel,:host .side-panel>.inner{inline-size:var(--rpanel-size)}:host.collapsible,:host.collapsible-temp{--rpanel-collapsed-width: 48px}:host.rpanel-size--wide{--rpanel-size: 500px}:host.rpanel-resize-sm.rpanel-mode--over,:host.rpanel-resize-md.rpanel-mode--over,:host.rpanel-resize-lg.rpanel-mode--over,:host.rpanel-resize-xl.rpanel-mode--over{padding-inline-end:var(--rpanel-collapsed-width)}:host.rpanel-resize-lg.rpanel-mode--scroll.rpanel-size--wide{padding-inline-end:var(--rpanel-collapsed-width)}:host.rpanel-resize-sm.rpanel-mode--scroll,:host.rpanel-resize-md.rpanel-mode--scroll{padding-inline-end:var(--rpanel-collapsed-width)}:host.rpanel-resize-xs.rpanel-mode--over,:host.rpanel-resize-xs.rpanel-mode--scroll{padding-inline-end:var(--rpanel-collapsed-width)}:host.rpanel-resize-xs:not(.collapsible) .side-panel{inset-block-start:0;z-index:1035}:host.rpanel-resize-xs.collapsible .side-panel{z-index:1030}:host.rpanel-resize-xs:not(.rpanel-collapsed) .side-panel,:host.rpanel-resize-xs:not(.rpanel-collapsed) .side-panel>.inner{inline-size:100%}:host.rpanel-hidden:not(.collapsible) .side-panel{display:none}:host.rpanel-collapsed{padding-inline-end:var(--rpanel-collapsed-width)}:host.rpanel-collapsed:not(.collapsible) .side-panel{inline-size:0;overflow:hidden}:host.rpanel-collapsed.collapsible .side-panel{inline-size:var(--rpanel-collapsed-width);overflow:hidden}.side-panel{position:fixed;z-index:1029;inset-block:48px 0;inset-inline-end:0;overflow-x:hidden;background:var(--element-base-1);outline:0}.side-panel>.inner{display:flex;flex-direction:column;position:absolute;inset-block:0;inset-inline-start:0}\n"]
    }]
  }], null, null);
})();
class SiSidePanelContentComponent {
  constructor(service, accordionHcollapse) {
    this.service = service;
    /*
     * If true, the panel is collapsed instead of completely hidden, just like the vertical navbar
     */
    this.collapsible = false;
    /**
     * Header of side panel
     */
    this.heading = '';
    /**
     * Input list of primary action items
     */
    this.primaryActions = [];
    /**
     * Input list of secondary action items.
     */
    this.secondaryActions = [];
    /**
     * Status icons/actions
     */
    this.statusActions = [];
    /**
     * Toggles search bar
     */
    this.searchable = false;
    /**
     * Placeholder text for search
     */
    this.searchPlaceholder = 'Search...';
    /**
     * Aria label for close button. Needed for a11y
     */
    this.closeButtonLabel = 'close';
    /**
     * Toggle icon aria-label, required for a11y
     */
    this.toggleItemLabel = 'toggle';
    /**
     * Output for search bar input
     */
    this.searchEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.isCollapsed = false;
    this.trackByIndex = index => index;
    this.subscription = service.isOpen$.subscribe(state => {
      this.isCollapsed = !state;
      accordionHcollapse.hcollapsed$.next(!state);
    });
    this.subscription.add(accordionHcollapse.open$.subscribe(() => service.open()));
  }
  ngOnDestroy() {
    this.subscription?.unsubscribe();
  }
  toggleSidePanel(event) {
    event?.target?.blur();
    if (this.service.isTemporaryOpen()) {
      this.service.hideTemporaryContent();
    } else {
      this.service.toggle();
    }
  }
}
SiSidePanelContentComponent.ɵfac = function SiSidePanelContentComponent_Factory(t) {
  return new (t || SiSidePanelContentComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiSidePanelService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiAccordionHCollapseService));
};
SiSidePanelContentComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiSidePanelContentComponent,
  selectors: [["si-side-panel-content"]],
  hostVars: 2,
  hostBindings: function SiSidePanelContentComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("collapsed", ctx.isCollapsed);
    }
  },
  inputs: {
    collapsible: "collapsible",
    heading: "heading",
    primaryActions: "primaryActions",
    secondaryActions: "secondaryActions",
    statusActions: "statusActions",
    searchable: "searchable",
    searchPlaceholder: "searchPlaceholder",
    closeButtonLabel: "closeButtonLabel",
    toggleItemLabel: "toggleItemLabel"
  },
  outputs: {
    searchEvent: "searchEvent"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([SiAccordionHCollapseService])],
  ngContentSelectors: _c1,
  decls: 14,
  vars: 16,
  consts: [[1, "rpanel-header", "pt-5"], [1, "si-title-2", "my-0", "ms-6", "auto-hide", "text-truncate"], ["class", "auto-hide ms-auto border-end", "viewType", "expanded", 3, "primaryActions", "secondaryActions", "toggleItemLabel", 4, "ngIf"], ["type", "button", 1, "close-button", "btn", "btn-circle", "btn-sm", "btn-ghost", "element-cancel", "me-4", 3, "click"], ["type", "button", 1, "collapse-toggle", "flip-rtl", "btn", "btn-circle", "btn-sm", "btn-ghost", "mx-4", 3, "click"], [1, "rpanel-wrapper", "d-flex", "flex-column"], ["class", "rpanel-header rpanel-statusactions px-5 pb-4", 4, "ngIf"], ["class", "nav-search px-5 pt-2 auto-hide", 4, "ngIf"], [1, "rpanel-content"], ["viewType", "expanded", 1, "auto-hide", "ms-auto", "border-end", 3, "primaryActions", "secondaryActions", "toggleItemLabel"], [1, "rpanel-header", "rpanel-statusactions", "px-5", "pb-4"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "rpanel-statusaction position-relative focus-inside", 3, "siLink", 4, "ngIf"], ["class", "rpanel-statusaction dot-outer", "aria-hidden", "true", 4, "ngIf"], [1, "rpanel-statusaction", "position-relative", "focus-inside", 3, "siLink"], ["aria-hidden", "true", 1, "icon", 3, "ngClass"], ["class", "icon position-absolute", "aria-hidden", "true", 3, "ngClass", 4, "ngIf"], [1, "ms-2", "auto-hide"], ["aria-hidden", "true", 1, "icon", "position-absolute", 3, "ngClass"], ["aria-hidden", "true", 1, "rpanel-statusaction", "dot-outer"], [1, "dot", "text-muted", "text-center"], [1, "nav-search", "px-5", "pt-2", "auto-hide"], [1, "m-0", 3, "colorVariant", "placeholder", "debounceTime", "showIcon", "prohibitedCharacters", "searchChange"], ["searchBar", ""]],
  template: function SiSidePanelContentComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "p", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiSidePanelContentComponent_si_content_action_bar_4_Template, 1, 3, "si-content-action-bar", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "button", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiSidePanelContentComponent_Template_button_click_5_listener($event) {
        return ctx.toggleSidePanel($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "button", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiSidePanelContentComponent_Template_button_click_7_listener($event) {
        return ctx.toggleSidePanel($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](8, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](10, SiSidePanelContentComponent_div_10_Template, 2, 2, "div", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, SiSidePanelContentComponent_div_11_Template, 4, 7, "div", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "div", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](13);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 10, ctx.heading));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", (ctx.primaryActions == null ? null : ctx.primaryActions.length) || (ctx.secondaryActions == null ? null : ctx.secondaryActions.length));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 12, ctx.closeButtonLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("element-double-right", !ctx.isCollapsed)("element-double-left", ctx.isCollapsed);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](8, 14, ctx.toggleItemLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.statusActions == null ? null : ctx.statusActions.length);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.searchable);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiContentActionBarComponent, SiLinkDirective, SiSearchBarComponent, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column;flex:1}.collapsible[_nghost-%COMP%]   .close-button[_ngcontent-%COMP%], .collapsible   [_nghost-%COMP%]   .close-button[_ngcontent-%COMP%]{display:none}.collapsible[_nghost-%COMP%]   .collapse-toggle[_ngcontent-%COMP%], .collapsible   [_nghost-%COMP%]   .collapse-toggle[_ngcontent-%COMP%]{display:block}.collapsible   .collapsed[_nghost-%COMP%]   .auto-hide[_ngcontent-%COMP%]{display:none}.collapsible   .collapsed[_nghost-%COMP%]   .rpanel-wrapper[_ngcontent-%COMP%]{inline-size:var(--rpanel-collapsed-width)}.collapsible   .collapsed[_nghost-%COMP%]   .rpanel-content[_ngcontent-%COMP%]{flex:0 0 auto;margin-block-start:8px}.collapsible   .collapsed[_nghost-%COMP%]   .rpanel-statusactions[_ngcontent-%COMP%]{order:3;flex-direction:column;align-items:flex-start;padding:0!important}.collapsible   .collapsed[_nghost-%COMP%]   .rpanel-statusaction[_ngcontent-%COMP%]{padding-block:8px;padding-inline:12px}.collapsible   .collapsed[_nghost-%COMP%]   .rpanel-statusaction[_ngcontent-%COMP%]:not(.dot-outer):hover{background:var(--element-base-1-hover)}.collapse-toggle[_ngcontent-%COMP%]{display:none}.rpanel-header[_ngcontent-%COMP%], .rpanel-statusaction[_ngcontent-%COMP%]{display:flex;align-items:center}.rpanel-header[_ngcontent-%COMP%]{justify-content:space-between}.rpanel-content[_ngcontent-%COMP%]{margin-block-start:12px}.rpanel-wrapper[_ngcontent-%COMP%], .rpanel-content[_ngcontent-%COMP%]{min-block-size:0;flex:1 0 0;overflow-x:hidden;overflow-y:auto}.rpanel-statusaction[_ngcontent-%COMP%]{text-decoration:none}.rpanel-statusaction[_ngcontent-%COMP%]   .dot[_ngcontent-%COMP%]{inline-size:24px;line-height:24px}.rpanel-statusaction[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-size:12px;white-space:pre-wrap;color:var(--element-text-primary)}.rpanel-statusaction[_ngcontent-%COMP%]:hover   span[_ngcontent-%COMP%]{color:var(--element-text-active)}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSidePanelContentComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-side-panel-content',
      providers: [SiAccordionHCollapseService],
      template: "<div class=\"rpanel-header pt-5\">\n  <p class=\"si-title-2 my-0 ms-6 auto-hide text-truncate\">{{ heading | translate }}</p>\n  <si-content-action-bar\n    *ngIf=\"primaryActions?.length || secondaryActions?.length\"\n    class=\"auto-hide ms-auto border-end\"\n    [primaryActions]=\"primaryActions\"\n    [secondaryActions]=\"secondaryActions\"\n    [toggleItemLabel]=\"toggleItemLabel\"\n    viewType=\"expanded\"\n  ></si-content-action-bar>\n  <button\n    type=\"button\"\n    class=\"close-button btn btn-circle btn-sm btn-ghost element-cancel me-4\"\n    [attr.aria-label]=\"closeButtonLabel | translate\"\n    (click)=\"toggleSidePanel($event)\"\n  ></button>\n  <button\n    type=\"button\"\n    class=\"collapse-toggle flip-rtl btn btn-circle btn-sm btn-ghost mx-4\"\n    [class.element-double-right]=\"!isCollapsed\"\n    [class.element-double-left]=\"isCollapsed\"\n    [attr.aria-label]=\"toggleItemLabel | translate\"\n    (click)=\"toggleSidePanel($event)\"\n  ></button>\n</div>\n<div class=\"rpanel-wrapper d-flex flex-column\">\n  <div *ngIf=\"statusActions?.length\" class=\"rpanel-header rpanel-statusactions px-5 pb-4\">\n    <ng-container *ngFor=\"let dp of statusActions; trackBy: trackByIndex\">\n      <a\n        *ngIf=\"!dp.disabled\"\n        class=\"rpanel-statusaction position-relative focus-inside\"\n        [attr.aria-label]=\"!isCollapsed ? '' : dp.title! | translate\"\n        [siLink]=\"dp\"\n      >\n        <i class=\"icon\" [ngClass]=\"dp.icon!\" aria-hidden=\"true\"></i>\n        <i *ngIf=\"dp.overlayIcon\" class=\"icon position-absolute\" [ngClass]=\"dp.overlayIcon\" aria-hidden=\"true\"></i>\n        <span class=\"ms-2 auto-hide\">{{ dp.title! | translate }}</span>\n      </a>\n      <div *ngIf=\"dp.disabled\" class=\"rpanel-statusaction dot-outer\" aria-hidden=\"true\">\n        <div class=\"dot text-muted text-center\">&bull;</div>\n      </div>\n    </ng-container>\n  </div>\n  <div *ngIf=\"searchable\" class=\"nav-search px-5 pt-2 auto-hide\">\n    <si-search-bar\n      class=\"m-0\"\n      [colorVariant]=\"'base-0'\"\n      #searchBar\n      [placeholder]=\"searchPlaceholder | translate\"\n      (searchChange)=\"searchEvent.emit($event)\"\n      [debounceTime]=\"400\"\n      [showIcon]=\"true\"\n      [prohibitedCharacters]=\"'*?'\"\n    ></si-search-bar>\n  </div>\n  <div class=\"rpanel-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
      styles: [":host{display:flex;flex-direction:column;flex:1}:host-context(.collapsible) .close-button{display:none}:host-context(.collapsible) .collapse-toggle{display:block}:host-context(.collapsible) :host.collapsed .auto-hide{display:none}:host-context(.collapsible) :host.collapsed .rpanel-wrapper{inline-size:var(--rpanel-collapsed-width)}:host-context(.collapsible) :host.collapsed .rpanel-content{flex:0 0 auto;margin-block-start:8px}:host-context(.collapsible) :host.collapsed .rpanel-statusactions{order:3;flex-direction:column;align-items:flex-start;padding:0!important}:host-context(.collapsible) :host.collapsed .rpanel-statusaction{padding-block:8px;padding-inline:12px}:host-context(.collapsible) :host.collapsed .rpanel-statusaction:not(.dot-outer):hover{background:var(--element-base-1-hover)}.collapse-toggle{display:none}.rpanel-header,.rpanel-statusaction{display:flex;align-items:center}.rpanel-header{justify-content:space-between}.rpanel-content{margin-block-start:12px}.rpanel-wrapper,.rpanel-content{min-block-size:0;flex:1 0 0;overflow-x:hidden;overflow-y:auto}.rpanel-statusaction{text-decoration:none}.rpanel-statusaction .dot{inline-size:24px;line-height:24px}.rpanel-statusaction span{font-size:12px;white-space:pre-wrap;color:var(--element-text-primary)}.rpanel-statusaction:hover span{color:var(--element-text-active)}\n"]
    }]
  }], function () {
    return [{
      type: SiSidePanelService
    }, {
      type: SiAccordionHCollapseService
    }];
  }, {
    collapsible: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    heading: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    primaryActions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    secondaryActions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    statusActions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    searchable: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    searchPlaceholder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    closeButtonLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    toggleItemLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    searchEvent: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    isCollapsed: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.collapsed']
    }]
  });
})();

/**
 * @deprecated Use the `SiSidePanelContentComponent` instead.
 */
class SiRightPanelContentComponent extends SiSidePanelContentComponent {}
SiRightPanelContentComponent.ɵfac = /* @__PURE__ */function () {
  let ɵSiRightPanelContentComponent_BaseFactory;
  return function SiRightPanelContentComponent_Factory(t) {
    return (ɵSiRightPanelContentComponent_BaseFactory || (ɵSiRightPanelContentComponent_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](SiRightPanelContentComponent)))(t || SiRightPanelContentComponent);
  };
}();
SiRightPanelContentComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiRightPanelContentComponent,
  selectors: [["si-right-panel-content"]],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([SiAccordionHCollapseService]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
  ngContentSelectors: _c1,
  decls: 14,
  vars: 16,
  consts: [[1, "rpanel-header", "pt-5"], [1, "si-title-2", "my-0", "ms-6", "auto-hide", "text-truncate"], ["class", "auto-hide ms-auto border-end", "viewType", "expanded", 3, "primaryActions", "secondaryActions", "toggleItemLabel", 4, "ngIf"], ["type", "button", 1, "close-button", "btn", "btn-circle", "btn-sm", "btn-ghost", "element-cancel", "me-4", 3, "click"], ["type", "button", 1, "collapse-toggle", "flip-rtl", "btn", "btn-circle", "btn-sm", "btn-ghost", "mx-4", 3, "click"], [1, "rpanel-wrapper", "d-flex", "flex-column"], ["class", "rpanel-header rpanel-statusactions px-5 pb-4", 4, "ngIf"], ["class", "nav-search px-5 pt-2 auto-hide", 4, "ngIf"], [1, "rpanel-content"], ["viewType", "expanded", 1, "auto-hide", "ms-auto", "border-end", 3, "primaryActions", "secondaryActions", "toggleItemLabel"], [1, "rpanel-header", "rpanel-statusactions", "px-5", "pb-4"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "rpanel-statusaction position-relative focus-inside", 3, "siLink", 4, "ngIf"], ["class", "rpanel-statusaction dot-outer", "aria-hidden", "true", 4, "ngIf"], [1, "rpanel-statusaction", "position-relative", "focus-inside", 3, "siLink"], ["aria-hidden", "true", 1, "icon", 3, "ngClass"], ["class", "icon position-absolute", "aria-hidden", "true", 3, "ngClass", 4, "ngIf"], [1, "ms-2", "auto-hide"], ["aria-hidden", "true", 1, "icon", "position-absolute", 3, "ngClass"], ["aria-hidden", "true", 1, "rpanel-statusaction", "dot-outer"], [1, "dot", "text-muted", "text-center"], [1, "nav-search", "px-5", "pt-2", "auto-hide"], [1, "m-0", 3, "colorVariant", "placeholder", "debounceTime", "showIcon", "prohibitedCharacters", "searchChange"], ["searchBar", ""]],
  template: function SiRightPanelContentComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0)(1, "p", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiRightPanelContentComponent_si_content_action_bar_4_Template, 1, 3, "si-content-action-bar", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "button", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiRightPanelContentComponent_Template_button_click_5_listener($event) {
        return ctx.toggleSidePanel($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](6, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "button", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function SiRightPanelContentComponent_Template_button_click_7_listener($event) {
        return ctx.toggleSidePanel($event);
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](8, "translate");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](10, SiRightPanelContentComponent_div_10_Template, 2, 2, "div", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, SiRightPanelContentComponent_div_11_Template, 4, 7, "div", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "div", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](13);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]()();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 10, ctx.heading));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", (ctx.primaryActions == null ? null : ctx.primaryActions.length) || (ctx.secondaryActions == null ? null : ctx.secondaryActions.length));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](6, 12, ctx.closeButtonLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("element-double-right", !ctx.isCollapsed)("element-double-left", ctx.isCollapsed);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](8, 14, ctx.toggleItemLabel));
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.statusActions == null ? null : ctx.statusActions.length);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.searchable);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, SiContentActionBarComponent, SiLinkDirective, SiSearchBarComponent, SiTranslatePipe],
  styles: [_c77],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiRightPanelContentComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-right-panel-content',
      providers: [SiAccordionHCollapseService],
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div class=\"rpanel-header pt-5\">\n  <p class=\"si-title-2 my-0 ms-6 auto-hide text-truncate\">{{ heading | translate }}</p>\n  <si-content-action-bar\n    *ngIf=\"primaryActions?.length || secondaryActions?.length\"\n    class=\"auto-hide ms-auto border-end\"\n    [primaryActions]=\"primaryActions\"\n    [secondaryActions]=\"secondaryActions\"\n    [toggleItemLabel]=\"toggleItemLabel\"\n    viewType=\"expanded\"\n  ></si-content-action-bar>\n  <button\n    type=\"button\"\n    class=\"close-button btn btn-circle btn-sm btn-ghost element-cancel me-4\"\n    [attr.aria-label]=\"closeButtonLabel | translate\"\n    (click)=\"toggleSidePanel($event)\"\n  ></button>\n  <button\n    type=\"button\"\n    class=\"collapse-toggle flip-rtl btn btn-circle btn-sm btn-ghost mx-4\"\n    [class.element-double-right]=\"!isCollapsed\"\n    [class.element-double-left]=\"isCollapsed\"\n    [attr.aria-label]=\"toggleItemLabel | translate\"\n    (click)=\"toggleSidePanel($event)\"\n  ></button>\n</div>\n<div class=\"rpanel-wrapper d-flex flex-column\">\n  <div *ngIf=\"statusActions?.length\" class=\"rpanel-header rpanel-statusactions px-5 pb-4\">\n    <ng-container *ngFor=\"let dp of statusActions; trackBy: trackByIndex\">\n      <a\n        *ngIf=\"!dp.disabled\"\n        class=\"rpanel-statusaction position-relative focus-inside\"\n        [attr.aria-label]=\"!isCollapsed ? '' : dp.title! | translate\"\n        [siLink]=\"dp\"\n      >\n        <i class=\"icon\" [ngClass]=\"dp.icon!\" aria-hidden=\"true\"></i>\n        <i *ngIf=\"dp.overlayIcon\" class=\"icon position-absolute\" [ngClass]=\"dp.overlayIcon\" aria-hidden=\"true\"></i>\n        <span class=\"ms-2 auto-hide\">{{ dp.title! | translate }}</span>\n      </a>\n      <div *ngIf=\"dp.disabled\" class=\"rpanel-statusaction dot-outer\" aria-hidden=\"true\">\n        <div class=\"dot text-muted text-center\">&bull;</div>\n      </div>\n    </ng-container>\n  </div>\n  <div *ngIf=\"searchable\" class=\"nav-search px-5 pt-2 auto-hide\">\n    <si-search-bar\n      class=\"m-0\"\n      [colorVariant]=\"'base-0'\"\n      #searchBar\n      [placeholder]=\"searchPlaceholder | translate\"\n      (searchChange)=\"searchEvent.emit($event)\"\n      [debounceTime]=\"400\"\n      [showIcon]=\"true\"\n      [prohibitedCharacters]=\"'*?'\"\n    ></si-search-bar>\n  </div>\n  <div class=\"rpanel-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
      styles: [":host{display:flex;flex-direction:column;flex:1}:host-context(.collapsible) .close-button{display:none}:host-context(.collapsible) .collapse-toggle{display:block}:host-context(.collapsible) :host.collapsed .auto-hide{display:none}:host-context(.collapsible) :host.collapsed .rpanel-wrapper{inline-size:var(--rpanel-collapsed-width)}:host-context(.collapsible) :host.collapsed .rpanel-content{flex:0 0 auto;margin-block-start:8px}:host-context(.collapsible) :host.collapsed .rpanel-statusactions{order:3;flex-direction:column;align-items:flex-start;padding:0!important}:host-context(.collapsible) :host.collapsed .rpanel-statusaction{padding-block:8px;padding-inline:12px}:host-context(.collapsible) :host.collapsed .rpanel-statusaction:not(.dot-outer):hover{background:var(--element-base-1-hover)}.collapse-toggle{display:none}.rpanel-header,.rpanel-statusaction{display:flex;align-items:center}.rpanel-header{justify-content:space-between}.rpanel-content{margin-block-start:12px}.rpanel-wrapper,.rpanel-content{min-block-size:0;flex:1 0 0;overflow-x:hidden;overflow-y:auto}.rpanel-statusaction{text-decoration:none}.rpanel-statusaction .dot{inline-size:24px;line-height:24px}.rpanel-statusaction span{font-size:12px;white-space:pre-wrap;color:var(--element-text-primary)}.rpanel-statusaction:hover span{color:var(--element-text-active)}\n"]
    }]
  }], null, null);
})();

/**
 * @deprecated Use the `SiSidePanelModule` instead.
 */
class SiRightPanelModule {}
SiRightPanelModule.ɵfac = function SiRightPanelModule_Factory(t) {
  return new (t || SiRightPanelModule)();
};
SiRightPanelModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiRightPanelModule
});
SiRightPanelModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.PortalModule, SiContentActionBarModule, SiLinkModule, SiSearchBarModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiRightPanelModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.PortalModule, SiContentActionBarModule, SiLinkModule, SiSearchBarModule, SiTranslateModule],
      declarations: [SiRightPanelComponent, SiRightPanelContentComponent],
      exports: [SiRightPanelComponent, SiRightPanelContentComponent]
    }]
  }], null, null);
})();
class SiSidePanelModule {}
SiSidePanelModule.ɵfac = function SiSidePanelModule_Factory(t) {
  return new (t || SiSidePanelModule)();
};
SiSidePanelModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiSidePanelModule
});
SiSidePanelModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.PortalModule, SiContentActionBarModule, SiLinkModule, SiSearchBarModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSidePanelModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_38__.PortalModule, SiContentActionBarModule, SiLinkModule, SiSearchBarModule, SiTranslateModule],
      declarations: [SiSidePanelComponent, SiSidePanelContentComponent],
      exports: [SiSidePanelComponent, SiSidePanelContentComponent]
    }]
  }], null, null);
})();

/**
 * The directive allows to template/customize the group option rendering.
 * This requires to use the {@link SiSelectComplexOptionsDirective} to specify complex options as input.
 *
 * @example
 * <pre><code>
 * <si-select [complexOptions]="{ g1: ['g1.i1', 'g1.i2'], g2: ['g2.i1'] }" >
 *   <ng-template siSiSelectGroupTemplate let-group>{{ group.key | uppercase }}</ng-template>
 * </si-select>
 * </code></pre>
 */
class SiSelectGroupTemplateDirective {
  // We need to have the templateRef here, so that the templates variables are properly typed
  constructor(templateRef) {
    this.templateRef = templateRef;
  }
}
SiSelectGroupTemplateDirective.ɵfac = function SiSelectGroupTemplateDirective_Factory(t) {
  return new (t || SiSelectGroupTemplateDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef));
};
SiSelectGroupTemplateDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiSelectGroupTemplateDirective,
  selectors: [["", "siSiSelectGroupTemplate", ""]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSelectGroupTemplateDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siSiSelectGroupTemplate]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
    }];
  }, null);
})();

/**
 * The directive allows to template/customize the value option rendering.
 * This requires to use the {@link SiSelectComplexOptionsDirective} to specify complex options as input.
 *
 * @example
 * <pre><code>
 * <si-select [options]="[{ id: 'good', title: 'Good' }, { id: 'fair', title: 'Fair' }, { id: 'bad', title: 'Bad' }]" >
 *   <ng-template siSiSelectOptionTemplate let-option>{{ option.value | uppercase }}</ng-template>
 * </si-select>
 * </code></pre>
 */
class SiSelectOptionTemplateDirective {
  // We need to have the templateRef here, so that the templates variables are properly typed
  constructor(templateRef) {
    this.templateRef = templateRef;
  }
}
SiSelectOptionTemplateDirective.ɵfac = function SiSelectOptionTemplateDirective_Factory(t) {
  return new (t || SiSelectOptionTemplateDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef));
};
SiSelectOptionTemplateDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiSelectOptionTemplateDirective,
  selectors: [["", "siSiSelectOptionTemplate", ""]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSelectOptionTemplateDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siSiSelectOptionTemplate]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
    }];
  }, null);
})();

/**
 * Input options strategy base class.
 */
class SiSelectOptionsStrategy {
  constructor() {
    this.optionsSubject$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject([]);
    this.rows$ = this.optionsSubject$.asObservable();
  }
}
SiSelectOptionsStrategy.ɵfac = function SiSelectOptionsStrategy_Factory(t) {
  return new (t || SiSelectOptionsStrategy)();
};
SiSelectOptionsStrategy.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiSelectOptionsStrategy
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSelectOptionsStrategy, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive
  }], null, null);
})();

/**
 * Selection strategy base class.
 */
class SiSelectSelectionStrategy {
  constructor() {
    this.onTouched = () => {};
    this.onChange = () => {};
    this._disabled = false;
    this.stateChange$ = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.selectionChange$ = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
  }
  get disabled() {
    return this._disabled;
  }
  set disabled(value) {
    this._disabled = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__.coerceBooleanProperty)(value);
    this.stateChange$.next();
  }
  registerOnChange(fn) {
    this.onChange = fn;
  }
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  setDisabledState(isDisabled) {
    this._disabled = isDisabled;
    this.stateChange$.next();
  }
  ngOnDestroy() {
    this.stateChange$.complete();
    this.selectionChange$.complete();
  }
}
SiSelectSelectionStrategy.ɵfac = function SiSelectSelectionStrategy_Factory(t) {
  return new (t || SiSelectSelectionStrategy)();
};
SiSelectSelectionStrategy.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiSelectSelectionStrategy,
  hostVars: 2,
  hostBindings: function SiSelectSelectionStrategy_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx.disabled);
    }
  },
  inputs: {
    disabled: "disabled"
  }
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSelectSelectionStrategy, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive
  }], null, {
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.disabled']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();
class SiSelectOptionRowTemplateDirective {
  constructor(templateRef) {
    this.templateRef = templateRef;
  }
}
SiSelectOptionRowTemplateDirective.ɵfac = function SiSelectOptionRowTemplateDirective_Factory(t) {
  return new (t || SiSelectOptionRowTemplateDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef));
};
SiSelectOptionRowTemplateDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiSelectOptionRowTemplateDirective,
  selectors: [["", "siSiSelectOptionRowTemplate", ""]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSelectOptionRowTemplateDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      selector: '[siSiSelectOptionRowTemplate]'
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
    }];
  }, null);
})();
class SiSelectComponent {
  get readonly() {
    return this._readonly;
  }
  /**
   * Readonly state. Similar to disabled but with higher contrast
   * @defaultref {@link _readonly}
   **/
  set readonly(value) {
    this._readonly = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_14__.coerceBooleanProperty)(value);
    this.changeDetector.markForCheck();
  }
  constructor(changeDetector, selectOptions, selectionStrategy) {
    this.changeDetector = changeDetector;
    this.selectOptions = selectOptions;
    this.selectionStrategy = selectionStrategy;
    this.classDropdown = true;
    /**
     * Unique identifier.
     */
    this.id = `__si-select-${SiSelectComponent.idCounter++}`;
    /** Aria label of the select. */
    this.ariaLabel = null;
    /** Aria labelledby of the select. */
    this.labelledby = null;
    this._readonly = false;
    this.dropdownClose = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.rows = [];
    this.trackByItem = (index, item) => item;
    this.selectedRows = [];
    this.open = false;
    this.destroyer = new rxjs__WEBPACK_IMPORTED_MODULE_19__.Subject();
    this.backdropClicked = false;
    this.selectOptions.rows$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.takeUntil)(this.destroyer)).subscribe(options => {
      this.rows = options;
      this.refreshSelectedRows();
      this.selectionStrategy.updateArrayValue(this.selectedRows.map(row => row.value));
    });
    this.selectionStrategy.selectionChange$.subscribe(() => this.refreshSelectedRows());
    this.selectionStrategy.stateChange$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.takeUntil)(this.destroyer)).subscribe(() => this.changeDetector.markForCheck());
  }
  ngOnDestroy() {
    this.destroyer.next();
    this.destroyer.complete();
  }
  refreshSelectedRows() {
    this.selectedRows = this.rows.flatMap(row => row.type === 'option' ? [row] : row.options).filter(row => this.selectionStrategy.arrayValue?.some(value => this.selectOptions.optionEqualCheckFn(row.value, value)));
    this.changeDetector.markForCheck();
  }
  listBoxValueChange(changeEvent) {
    this.selectionStrategy.updateArrayValue(changeEvent.value.slice(), true);
    this.refreshSelectedRows();
  }
  openListBox() {
    if (this._readonly || this.selectionStrategy.disabled) {
      return;
    }
    this.open = true;
    // It is necessary to wait for the overlay before we can update the focus
    setTimeout(() => this.listbox?.nativeElement.focus());
  }
  overlayDetach() {
    this.open = false;
    if (!this.backdropClicked) {
      this.trigger.nativeElement.focus();
    } else {
      this.backdropClicked = false;
      this.selectionStrategy.onTouched();
    }
    this.dropdownClose.emit();
  }
  backdropClick() {
    this.backdropClicked = true;
    this.open = false;
  }
  closeListBoxIfSingle() {
    if (!this.selectionStrategy.allowMultiple) {
      this.open = false;
    }
  }
  blur() {
    if (!this.open) {
      this.selectionStrategy.onTouched();
    }
  }
}
SiSelectComponent.idCounter = 0;
SiSelectComponent.ɵfac = function SiSelectComponent_Factory(t) {
  return new (t || SiSelectComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiSelectOptionsStrategy), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](SiSelectSelectionStrategy));
};
SiSelectComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiSelectComponent,
  selectors: [["si-select"]],
  contentQueries: function SiSelectComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, SiSelectOptionTemplateDirective, 5, _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, SiSelectGroupTemplateDirective, 5, _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.optionTemplate = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.groupTemplate = _t.first);
    }
  },
  viewQuery: function SiSelectComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_angular_cdk_listbox__WEBPACK_IMPORTED_MODULE_40__.CdkListbox, 5, _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.CdkOverlayOrigin, 7, _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.listbox = _t.first);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.trigger = _t.first);
    }
  },
  hostVars: 6,
  hostBindings: function SiSelectComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("dropdown", ctx.classDropdown)("readonly", ctx.readonly)("open", ctx.open);
    }
  },
  inputs: {
    id: "id",
    ariaLabel: "ariaLabel",
    labelledby: "labelledby",
    readonly: "readonly"
  },
  outputs: {
    dropdownClose: "dropdownClose"
  },
  decls: 12,
  vars: 19,
  consts: [["cdkOverlayOrigin", "", "role", "combobox", "aria-autocomplete", "none", "aria-haspopup", "listbox", 1, "select", "focus-none", "dropdown-toggle", "d-flex", "align-items-center", "ps-4", "pe-5", 3, "tabindex", "blur", "click", "keydown.arrowUp", "keydown.arrowDown", "keydown.space", "keydown.enter"], ["trigger", "cdkOverlayOrigin"], ["class", "visually-hidden", 3, "id", 4, "ngIf"], [1, "d-flex", "align-items-center", "flex-grow-1", 3, "id", "siAutoCollapsableList"], ["siAutoCollapsableListItem", "", "class", "d-flex align-items-center", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["siAutoCollapsableListOverflowItem", "", 4, "ngIf"], ["aria-hidden", "true", 1, "dropdown-caret", "icon", "flip-rtl", "element-down-2"], ["cdkConnectedOverlay", "", "cdkConnectedOverlayBackdropClass", "cdk-overlay-transparent-backdrop", 3, "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayOpen", "cdkConnectedOverlayFlexibleDimensions", "backdropClick", "detach"], ["siSiSelectOptionTemplate", ""], ["defaultOptionTemplate", ""], ["siSiSelectGroupTemplate", ""], ["defaultGroupTemplate", ""], [1, "visually-hidden", 3, "id"], ["siAutoCollapsableListItem", "", 1, "d-flex", "align-items-center"], [4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["siAutoCollapsableListOverflowItem", ""], ["overflowItem", "siAutoCollapsableListOverflowItem"], [1, "overflow-item"], ["cdkListbox", "", 1, "dropdown-menu", "show", "position-static", "mh-100", "overflow-auto", 3, "id", "cdkListboxMultiple", "cdkListboxValue", "cdkListboxValueChange", "keydown.tab", "click", "keydown.enter", "keydown.space"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["siSiSelectOptionRowTemplate", ""], ["optionRowTemplate", ""], ["role", "group", "class", "ps-0", "aria-disabled", "false", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], ["role", "group", "aria-disabled", "false", 1, "ps-0"], ["role", "presentation", 1, "dropdown-header", 3, "id"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "dropdown-item", "focus-inside", "pe-4", 3, "cdkOption", "cdkOptionDisabled", "cdkOptionTypeaheadLabel"], ["cdkOption", "cdkOption"], ["class", "ms-auto selected-marker", "aria-hidden", "true", 4, "ngIf"], ["aria-hidden", "true", 1, "ms-auto", "selected-marker"], [1, "element-ok"], ["class", "icon me-2", "aria-hidden", "true", 3, "ngClass", 4, "ngIf"], ["aria-hidden", "true", 1, "icon", "me-2", 3, "ngClass"]],
  template: function SiSelectComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("blur", function SiSelectComponent_Template_div_blur_0_listener() {
        return ctx.blur();
      })("click", function SiSelectComponent_Template_div_click_0_listener() {
        return ctx.openListBox();
      })("keydown.arrowUp", function SiSelectComponent_Template_div_keydown_arrowUp_0_listener() {
        return ctx.openListBox();
      })("keydown.arrowDown", function SiSelectComponent_Template_div_keydown_arrowDown_0_listener() {
        return ctx.openListBox();
      })("keydown.space", function SiSelectComponent_Template_div_keydown_space_0_listener() {
        return ctx.openListBox();
      })("keydown.enter", function SiSelectComponent_Template_div_keydown_enter_0_listener() {
        return ctx.openListBox();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, SiSelectComponent_span_2_Template, 2, 2, "span", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, SiSelectComponent_div_4_Template, 3, 5, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, SiSelectComponent_div_5_Template, 4, 1, "div", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](6, "i", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, SiSelectComponent_ng_template_7_Template, 4, 6, "ng-template", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("backdropClick", function SiSelectComponent_Template_ng_template_backdropClick_7_listener() {
        return ctx.backdropClick();
      })("detach", function SiSelectComponent_Template_ng_template_detach_7_listener() {
        return ctx.overlayDetach();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, SiSelectComponent_ng_template_8_Template, 2, 2, "ng-template", 8, 9, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](10, SiSelectComponent_ng_template_10_Template, 2, 3, "ng-template", 10, 11, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    }
    if (rf & 2) {
      const _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("active", ctx.open);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("tabindex", ctx.selectionStrategy.disabled ? "-1" : "0");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-labelledby", ctx.id + "-aria-label" + " " + ctx.labelledby + " " + (ctx.id + "-content"))("aria-disabled", ctx.selectionStrategy.disabled)("aria-controls", ctx.id + "-listbox")("aria-expanded", ctx.open);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.ariaLabel);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("id", ctx.id + "-content")("siAutoCollapsableList", ctx.selectionStrategy.allowMultiple);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.selectedRows)("ngForTrackBy", ctx.trackByItem);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.selectionStrategy.allowMultiple);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("text-muted", ctx.readonly);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("cdkConnectedOverlayHasBackdrop", true)("cdkConnectedOverlayOrigin", _r0)("cdkConnectedOverlayOpen", ctx.open)("cdkConnectedOverlayFlexibleDimensions", true);
    }
  },
  dependencies: [_angular_cdk_listbox__WEBPACK_IMPORTED_MODULE_40__.CdkListbox, _angular_cdk_listbox__WEBPACK_IMPORTED_MODULE_40__.CdkOption, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.CdkConnectedOverlay, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.CdkOverlayOrigin, SiAutoCollapsableListDirective, SiAutoCollapsableListItemDirective, SiAutoCollapsableListOverflowItemDirective, SiSelectGroupTemplateDirective, SiSelectOptionRowTemplateDirective, SiSelectOptionTemplateDirective, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{display:inline-block;padding:0;block-size:2rem}[_nghost-%COMP%]:focus-within, .open[_nghost-%COMP%]{box-shadow:0 0 0 var(--element-button-focus-overlay-width) var(--element-button-focus-overlay-color),0 0 0 calc(var(--element-button-focus-width) + var(--element-button-focus-overlay-width)) var(--element-focus-default)}.form-control[_nghost-%COMP%]   .select[_ngcontent-%COMP%]{padding-block:3px}.select[_ngcontent-%COMP%]{font-weight:700;min-inline-size:72px;block-size:100%;color:var(--element-text-primary);padding-block:4px}[_nghost-%COMP%]:not(.form-control):not(.disabled)   .select[_ngcontent-%COMP%]{cursor:pointer}[_nghost-%COMP%]:not(.form-control):not(.disabled)   .select[_ngcontent-%COMP%]:hover{background:var(--element-base-1-hover)}[_nghost-%COMP%]:not(.form-control):not(.disabled)   .select.active[_ngcontent-%COMP%]{background:var(--element-base-1-selected)}.readonly[_nghost-%COMP%], .disabled[_nghost-%COMP%]{pointer-events:none}.disabled[_nghost-%COMP%]   .select[_ngcontent-%COMP%]{color:var(--element-text-disabled)}[_nghost-%COMP%]   .dropdown-item[_ngcontent-%COMP%]:not(.disabled){cursor:pointer}.selected-marker[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-size:1.5rem;margin-inline-end:-.25rem}.overflow-item[_ngcontent-%COMP%]{border-radius:var(--element-radius-3);background:var(--element-base-0);margin-inline-start:4px;padding-inline:8px}.dropdown-item.active[_ngcontent-%COMP%]:focus{background-color:var(--element-base-1-selected);box-shadow:none!important}"],
  changeDetection: 0
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSelectComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-select',
      changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectionStrategy.OnPush,
      template: "<div\n  cdkOverlayOrigin\n  #trigger=\"cdkOverlayOrigin\"\n  role=\"combobox\"\n  class=\"select focus-none dropdown-toggle d-flex align-items-center ps-4 pe-5\"\n  [tabindex]=\"selectionStrategy.disabled ? '-1' : '0'\"\n  [attr.aria-labelledby]=\"(id + '-aria-label') + ' ' + labelledby + ' ' + (id + '-content')\"\n  [class.active]=\"open\"\n  [attr.aria-disabled]=\"selectionStrategy.disabled\"\n  [attr.aria-controls]=\"id + '-listbox'\"\n  aria-autocomplete=\"none\"\n  aria-haspopup=\"listbox\"\n  [attr.aria-expanded]=\"open\"\n  (blur)=\"blur()\"\n  (click)=\"openListBox()\"\n  (keydown.arrowUp)=\"openListBox()\"\n  (keydown.arrowDown)=\"openListBox()\"\n  (keydown.space)=\"openListBox()\"\n  (keydown.enter)=\"openListBox()\"\n>\n  <span *ngIf=\"ariaLabel\" [id]=\"id + '-aria-label'\" class=\"visually-hidden\">{{ariaLabel}}</span>\n  <div\n    [id]=\"id + '-content'\"\n    [siAutoCollapsableList]=\"selectionStrategy.allowMultiple\"\n    class=\"d-flex align-items-center flex-grow-1\"\n  >\n    <div\n      *ngFor=\"let activeOption of selectedRows; let first = first; trackBy trackByItem\"\n      siAutoCollapsableListItem\n      class=\"d-flex align-items-center\"\n    >\n      <span *ngIf=\"!first\">,&nbsp;</span>\n      <ng-container\n        [ngTemplateOutlet]=\"optionTemplate ?? defaultOptionTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: activeOption }\"\n      ></ng-container>\n    </div>\n    <div *ngIf=\"selectionStrategy.allowMultiple\"\n         siAutoCollapsableListOverflowItem\n         #overflowItem=\"siAutoCollapsableListOverflowItem\"\n    >\n      <div class=\"overflow-item\">\n        {{ overflowItem.hiddenItemCount }}+\n      </div>\n    </div>\n  </div>\n  <i class=\"dropdown-caret icon flip-rtl element-down-2\" aria-hidden=\"true\" [class.text-muted]=\"readonly\"></i>\n</div>\n\n<ng-template\n  cdkConnectedOverlay\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n  [cdkConnectedOverlayHasBackdrop]=\"true\"\n  [cdkConnectedOverlayOrigin]=\"trigger\"\n  [cdkConnectedOverlayOpen]=\"open\"\n  [cdkConnectedOverlayFlexibleDimensions]=\"true\"\n  (backdropClick)=\"backdropClick()\"\n  (detach)=\"overlayDetach()\"\n>\n  <div\n    [id]=\"id + '-listbox'\"\n    class=\"dropdown-menu show position-static mh-100 overflow-auto\"\n    cdkListbox\n    [cdkListboxMultiple]=\"selectionStrategy.allowMultiple\"\n    [cdkListboxValue]=\"selectionStrategy.arrayValue\"\n    (cdkListboxValueChange)=\"listBoxValueChange($event)\"\n    [attr.aria-labelledby]=\"(id + '-aria-label') + ' ' + labelledby + ' ' + (id + '-content')\"\n    (keydown.tab)=\"open = false\"\n    (click)=\"closeListBoxIfSingle()\"\n    (keydown.enter)=\"closeListBoxIfSingle()\"\n    (keydown.space)=\"closeListBoxIfSingle()\"\n  >\n    <ng-container *ngFor=\"let item of rows; let index = index; trackBy: trackByItem\">\n      <div\n        *ngIf=\"item.type === 'group'\"\n        role=\"group\"\n        class=\"ps-0\"\n        aria-disabled=\"false\"\n        [attr.aria-labelledby]=\"id + '-' + index + '-group-header'\"\n      >\n        <span class=\"dropdown-header\" [id]=\"id + '-' + index + '-group-header'\" role=\"presentation\">\n          <ng-container\n            [ngTemplateOutlet]=\"groupTemplate ?? defaultGroupTemplate\"\n            [ngTemplateOutletContext]=\"{ $implicit: item }\"\n          ></ng-container>\n        </span>\n        <ng-container\n          *ngFor=\"let optionRow of item.options; trackBy: trackByItem\"\n          [ngTemplateOutlet]=\"optionRowTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: optionRow }\"\n        ></ng-container>\n      </div>\n      <ng-container\n        *ngIf=\"item.type === 'option'\"\n        [ngTemplateOutlet]=\"optionRowTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: item }\"\n      ></ng-container>\n\n    </ng-container>\n    <ng-template siSiSelectOptionRowTemplate let-option #optionRowTemplate>\n      <div\n        [cdkOption]=\"option.value\"\n        [cdkOptionDisabled]=\"option.disabled\"\n        [cdkOptionTypeaheadLabel]=\"option.typeaheadLabel! | translate\"\n        class=\"dropdown-item focus-inside pe-4\"\n        [class.active]=\"cdkOption.isActive()\"\n        [class.disabled]=\"option.disabled\"\n        [attr.data-id]=\"option.value\"\n        #cdkOption=\"cdkOption\"\n      >\n        <ng-container\n          [ngTemplateOutlet]=\"optionTemplate ?? defaultOptionTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: option }\"\n        ></ng-container>\n        <span\n          *ngIf=\"cdkOption.isSelected()\"\n          class=\"ms-auto selected-marker\"\n          aria-hidden=\"true\"\n        >\n          <span class=\"element-ok\"></span>\n        </span>\n      </div>\n    </ng-template>\n  </div>\n</ng-template>\n\n<ng-template siSiSelectOptionTemplate let-item #defaultOptionTemplate>\n  <i\n    *ngIf=\"item.icon\"\n    class=\"icon me-2\"\n    aria-hidden=\"true\"\n    [ngClass]=\"[item.icon, (!item.disabled && item.color) || '']\"\n  ></i>\n  <span *ngIf=\"item.label\">{{ item.label | translate }}</span>\n</ng-template>\n\n<ng-template\n  siSiSelectGroupTemplate let-group\n  #defaultGroupTemplate\n>{{ (group.label ?? group.key) | translate }}</ng-template>\n",
      styles: [":host{display:inline-block;padding:0;block-size:2rem}:host:focus-within,:host.open{box-shadow:0 0 0 var(--element-button-focus-overlay-width) var(--element-button-focus-overlay-color),0 0 0 calc(var(--element-button-focus-width) + var(--element-button-focus-overlay-width)) var(--element-focus-default)}:host.form-control .select{padding-block:3px}.select{font-weight:700;min-inline-size:72px;block-size:100%;color:var(--element-text-primary);padding-block:4px}:host:not(.form-control):not(.disabled) .select{cursor:pointer}:host:not(.form-control):not(.disabled) .select:hover{background:var(--element-base-1-hover)}:host:not(.form-control):not(.disabled) .select.active{background:var(--element-base-1-selected)}:host.readonly,:host.disabled{pointer-events:none}:host.disabled .select{color:var(--element-text-disabled)}:host .dropdown-item:not(.disabled){cursor:pointer}.selected-marker>span{font-size:1.5rem;margin-inline-end:-.25rem}.overflow-item{border-radius:var(--element-radius-3);background:var(--element-base-0);margin-inline-start:4px;padding-inline:8px}.dropdown-item.active:focus{background-color:var(--element-base-1-selected);box-shadow:none!important}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef
    }, {
      type: SiSelectOptionsStrategy
    }, {
      type: SiSelectSelectionStrategy
    }];
  }, {
    classDropdown: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.dropdown']
    }],
    id: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    ariaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    labelledby: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.readonly']
    }],
    dropdownClose: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    optionTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChild,
      args: [SiSelectOptionTemplateDirective, {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
      }]
    }],
    groupTemplate: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ContentChild,
      args: [SiSelectGroupTemplateDirective, {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef
      }]
    }],
    open: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.open']
    }],
    listbox: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: [_angular_cdk_listbox__WEBPACK_IMPORTED_MODULE_40__.CdkListbox, {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
      }]
    }],
    trigger: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,
      args: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.CdkOverlayOrigin, {
        read: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef,
        static: true
      }]
    }]
  });
})();

/**
 * The directive allows to pass SelectOption options.
 * Otherwise use the {@link SiSelectComplexOptionsDirective} directive.
 *
 * @example
 * <pre><code>
 * <si-select [options]="[{ id: 'one', title: 'One' }, { id: 'two', title: 'Two' }]"></si-select>
 * </code></pre>
 */
class SiSelectSimpleOptionsDirective extends SiSelectOptionsStrategy {
  constructor() {
    super(...arguments);
    this.trackBy = buildTrackByIdentity();
    this.optionEqualCheckFn = (a, b) => a === b;
  }
  ngOnChanges(changes) {
    this.optionsSubject$.next(this.options.map(option => ({
      type: 'option',
      value: option.id,
      label: option.title,
      color: option.color,
      icon: option.icon,
      disabled: option.disabled
    })));
  }
}
SiSelectSimpleOptionsDirective.ɵfac = /* @__PURE__ */function () {
  let ɵSiSelectSimpleOptionsDirective_BaseFactory;
  return function SiSelectSimpleOptionsDirective_Factory(t) {
    return (ɵSiSelectSimpleOptionsDirective_BaseFactory || (ɵSiSelectSimpleOptionsDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](SiSelectSimpleOptionsDirective)))(t || SiSelectSimpleOptionsDirective);
  };
}();
SiSelectSimpleOptionsDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiSelectSimpleOptionsDirective,
  selectors: [["si-select", "options", ""]],
  inputs: {
    options: "options"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: SiSelectOptionsStrategy,
    useExisting: SiSelectSimpleOptionsDirective
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSelectSimpleOptionsDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      // eslint-disable-next-line @angular-eslint/directive-selector
      selector: 'si-select[options]',
      providers: [{
        provide: SiSelectOptionsStrategy,
        useExisting: SiSelectSimpleOptionsDirective
      }]
    }]
  }], null, {
    options: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();

/**
 * The directive allows to pass custom options.
 * Otherwise use the {@link SiSelectSimpleOptionsDirective} directive.
 *
 * @example
 * <pre><code>
 * <si-select [complexOptions]="{ g1: ['g1.i1', 'g1.i2'], g2: ['g2.i1']}"></si-select>
 * </code></pre>
 */
class SiSelectComplexOptionsDirective extends SiSelectOptionsStrategy {
  constructor() {
    super(...arguments);
    this.trackBy = buildTrackByIdentity();
    /**
     * By default, values are check on equality by reference. Override to customize the behavior.
     */
    this.optionEqualCheckFn = (a, b) => a === b;
    /**
     * The valueProvider is used to extract the display text of a value.
     */
    this.valueProvider = () => undefined;
    /**
     * Provides Value for the display text of the dropdown group
     */
    this.groupProvider = () => undefined;
    /**
     * The disabledProvider is used to display menu items as disabled.
     */
    this.disabledProvider = () => false;
  }
  ngOnChanges(changes) {
    if (this.complexOptions instanceof Array) {
      this.optionsSubject$.next(this.convertOptionsArray(this.complexOptions));
    } else if (this.complexOptions) {
      this.optionsSubject$.next(Object.entries(this.complexOptions).map(([key, value]) => ({
        type: 'group',
        key,
        label: this.groupProvider(key) ?? key,
        options: this.convertOptionsArray(value)
      })));
    }
  }
  convertOptionsArray(options) {
    return options.map(option => ({
      type: 'option',
      value: option,
      label: this.valueProvider(option) ?? option + '',
      typeaheadLabel: this.valueProvider(option),
      disabled: this.disabledProvider(option)
    }));
  }
}
SiSelectComplexOptionsDirective.ɵfac = /* @__PURE__ */function () {
  let ɵSiSelectComplexOptionsDirective_BaseFactory;
  return function SiSelectComplexOptionsDirective_Factory(t) {
    return (ɵSiSelectComplexOptionsDirective_BaseFactory || (ɵSiSelectComplexOptionsDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](SiSelectComplexOptionsDirective)))(t || SiSelectComplexOptionsDirective);
  };
}();
SiSelectComplexOptionsDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiSelectComplexOptionsDirective,
  selectors: [["si-select", "complexOptions", ""]],
  inputs: {
    complexOptions: "complexOptions",
    trackBy: "trackBy",
    optionEqualCheckFn: "optionEqualCheckFn",
    valueProvider: "valueProvider",
    groupProvider: "groupProvider",
    disabledProvider: "disabledProvider"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: SiSelectOptionsStrategy,
    useExisting: SiSelectComplexOptionsDirective
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSelectComplexOptionsDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      // eslint-disable-next-line @angular-eslint/directive-selector
      selector: 'si-select[complexOptions]',
      providers: [{
        provide: SiSelectOptionsStrategy,
        useExisting: SiSelectComplexOptionsDirective
      }]
    }]
  }], null, {
    complexOptions: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    trackBy: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    optionEqualCheckFn: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    valueProvider: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    groupProvider: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disabledProvider: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();

/**
 * The directive enables the single-select behavior.
 * Otherwise use the {@link SiSelectMultiValueDirective} directive.
 *
 * @example
 * <pre><code>
 * <si-select [(value)]="selectedValue" [options]="[
 *  { id: 'good', title: 'Good' },
 *  { id: 'average', title: 'Average' },
 *  { id: 'poor', title: 'Poor' }
 * ]"></si-select>
 * </code></pre>
 */
class SiSelectSingleValueDirective extends SiSelectSelectionStrategy {
  constructor() {
    super(...arguments);
    this.allowMultiple = false;
    /** Emitted when the selection is changed */
    this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  /**
   * Set selected value
   */
  set value(value) {
    // Never call valueChange.emit on an input, which causes an ExpressionChangedAfterItHasBeenCheckedError
    if (this._value !== value) {
      this._value = value;
      this.selectionChange$.next();
      this.onChange(this._value);
    }
  }
  get arrayValue() {
    return this._value ? [this._value] : [];
  }
  updateArrayValue([value], triggerByUser) {
    this._value = value;
    if (triggerByUser) {
      this.onChange(this._value);
      this.selectionChange$.next();
      this.valueChange.emit(this._value);
    }
  }
  writeValue(obj) {
    this.value = obj;
    this.valueChange.emit(this._value);
  }
}
SiSelectSingleValueDirective.ɵfac = /* @__PURE__ */function () {
  let ɵSiSelectSingleValueDirective_BaseFactory;
  return function SiSelectSingleValueDirective_Factory(t) {
    return (ɵSiSelectSingleValueDirective_BaseFactory || (ɵSiSelectSingleValueDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](SiSelectSingleValueDirective)))(t || SiSelectSingleValueDirective);
  };
}();
SiSelectSingleValueDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiSelectSingleValueDirective,
  selectors: [["si-select", 3, "multi", ""]],
  inputs: {
    value: "value"
  },
  outputs: {
    valueChange: "valueChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: SiSelectSelectionStrategy,
    useExisting: SiSelectSingleValueDirective
  }, {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
    useExisting: SiSelectSingleValueDirective,
    multi: true
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSelectSingleValueDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      // eslint-disable-next-line @angular-eslint/directive-selector
      selector: 'si-select:not([multi])',
      providers: [{
        provide: SiSelectSelectionStrategy,
        useExisting: SiSelectSingleValueDirective
      }, {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
        useExisting: SiSelectSingleValueDirective,
        multi: true
      }]
    }]
  }], null, {
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    valueChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();

/**
 * The directive enables the multi-select behavior.
 * Otherwise use the {@link SiSelectSingleValueDirective} directive.
 *
 * @example
 * <pre><code>
 * <si-select multi [(value)]="multiValue" [options]="[
 *  { id: 'good', title: 'Good' },
 *  { id: 'average', title: 'Average' },
 *  { id: 'poor', title: 'Poor' }
 * ]"></si-select>
 * </code></pre>
 */
class SiSelectMultiValueDirective extends SiSelectSelectionStrategy {
  constructor() {
    super(...arguments);
    this._value = [];
    this.allowMultiple = true;
    /** Emitted when the selection is changed */
    this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
  /**
   * Set selected values
   */
  set value(value) {
    // Never call valueChange.emit on an input, which causes an ExpressionChangedAfterItHasBeenCheckedError
    if (this._value !== value) {
      this._value = value ?? [];
      this.selectionChange$.next();
      this.onChange(this._value);
    }
  }
  get arrayValue() {
    return this._value;
  }
  updateArrayValue(value, triggerByUser) {
    this._value = value;
    if (triggerByUser) {
      this.onChange(this._value);
      this.selectionChange$.next();
      this.valueChange.emit(this._value);
    }
  }
  writeValue(obj) {
    this.value = obj;
    this.valueChange.emit(this._value);
  }
}
SiSelectMultiValueDirective.ɵfac = /* @__PURE__ */function () {
  let ɵSiSelectMultiValueDirective_BaseFactory;
  return function SiSelectMultiValueDirective_Factory(t) {
    return (ɵSiSelectMultiValueDirective_BaseFactory || (ɵSiSelectMultiValueDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](SiSelectMultiValueDirective)))(t || SiSelectMultiValueDirective);
  };
}();
SiSelectMultiValueDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: SiSelectMultiValueDirective,
  selectors: [["si-select", "multi", ""]],
  inputs: {
    value: "value"
  },
  outputs: {
    valueChange: "valueChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
    provide: SiSelectSelectionStrategy,
    useExisting: SiSelectMultiValueDirective
  }, {
    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
    useExisting: SiSelectMultiValueDirective,
    multi: true
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSelectMultiValueDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Directive,
    args: [{
      // eslint-disable-next-line @angular-eslint/directive-selector
      selector: 'si-select[multi]',
      providers: [{
        provide: SiSelectSelectionStrategy,
        useExisting: SiSelectMultiValueDirective
      }, {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NG_VALUE_ACCESSOR,
        useExisting: SiSelectMultiValueDirective,
        multi: true
      }]
    }]
  }], null, {
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    valueChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiSelectModule {}
SiSelectModule.ɵfac = function SiSelectModule_Factory(t) {
  return new (t || SiSelectModule)();
};
SiSelectModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiSelectModule
});
SiSelectModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_cdk_listbox__WEBPACK_IMPORTED_MODULE_40__.CdkListboxModule, _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.OverlayModule, SiAutoCollapsableListModule, SiDropdownModule, SiListInteractionModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiSelectModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_cdk_listbox__WEBPACK_IMPORTED_MODULE_40__.CdkListboxModule, _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_37__.OverlayModule, SiAutoCollapsableListModule, SiDropdownModule, SiListInteractionModule, SiTranslateModule],
      declarations: [SiSelectComplexOptionsDirective, SiSelectComponent, SiSelectGroupTemplateDirective, SiSelectMultiValueDirective, SiSelectOptionRowTemplateDirective, SiSelectOptionTemplateDirective, SiSelectSimpleOptionsDirective, SiSelectSingleValueDirective],
      exports: [SiSelectComplexOptionsDirective, SiSelectComponent, SiSelectGroupTemplateDirective, SiSelectMultiValueDirective, SiSelectOptionTemplateDirective, SiSelectSimpleOptionsDirective, SiSelectSingleValueDirective]
    }]
  }], null, null);
})();
class SiThresholdComponent {
  constructor(element) {
    this.element = element;
    /** Options to be shown in select dropdown */
    this.options = [];
    /** The thresholds */
    this.thresholdSteps = [];
    /** The unit to show */
    this.unit = '';
    /** The min. value for the threshold value */
    this.minValue = 0;
    /** The max. value for the threshold value */
    this.maxValue = 100;
    /** The step size for the threshold value */
    this.stepSize = 1;
    /** Max. number of steps, 0 for no hard limit */
    this.maxSteps = 0;
    /** Do validation? */
    this.validation = true;
    /** When disabled, steps cannot be added/removed */
    this.canAddRemoveSteps = true;
    /** Use horizontal layout? */
    this.horizontalLayout = false;
    /** Show dec/inc buttons? */
    this.showDecIncButtons = true;
    /** The obvious */
    this.readonly = false;
    /** The aria-label for delete button */
    this.deleteAriaLabel = 'delete step';
    /** The aria-label for add button */
    this.addAriaLabel = 'add step';
    /** The aria-label for input field */
    this.inputAriaLabel = 'threshold value';
    /** The aria-label for status selection */
    this.statusAriaLabel = 'status';
    /** Fired when the thresholds have changed */
    this.thresholdStepsChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    /** Fired when validation status changes */
    this.validChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.trackByItem = (index, item) => item;
    this.colors = [];
    this.valid = true;
  }
  ngOnChanges() {
    this.calcColor();
    this.validate();
  }
  deleteStep(index) {
    this.thresholdSteps.splice(index, 1);
    this.optionChanged();
  }
  addStep(index) {
    const newStep = {
      ...this.thresholdSteps[index],
      value: undefined
    };
    this.thresholdSteps.splice(index + 1, 0, newStep);
    this.optionChanged();
    setTimeout(() => this.element.nativeElement.querySelectorAll('input.form-control')[index]?.focus());
  }
  optionChanged() {
    this.calcColor();
    this.emitChange();
  }
  emitChange() {
    this.validate();
    this.thresholdStepsChange.emit(this.thresholdSteps);
  }
  calcColor() {
    const colorMap = new Map();
    for (const opt of this.options) {
      colorMap.set(opt.id, opt.color ?? '');
    }
    this.colors = this.thresholdSteps.map(ths => colorMap.get(ths.optionValue) ?? '');
  }
  validate() {
    const prevValid = this.valid;
    this.valid = true;
    for (let i = 1; i < this.thresholdSteps.length; i++) {
      const step = this.thresholdSteps[i];
      if (this.validation) {
        const prev = this.thresholdSteps[i - 1];
        const next = this.thresholdSteps[i + 1];
        // valid: withing min/max, each step is lower than next step with step size between
        step.valid = step.value != null && step.value >= this.minValue && step.value <= this.maxValue && (prev.value == null || step.value - this.stepSize >= prev.value) && (next?.value == null || step.value + this.stepSize <= next.value);
        this.valid && (this.valid = step.valid);
      } else {
        step.valid = true;
      }
    }
    if (this.valid !== prevValid) {
      this.validChange.emit(this.valid);
    }
  }
}
SiThresholdComponent.ɵfac = function SiThresholdComponent_Factory(t) {
  return new (t || SiThresholdComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
};
SiThresholdComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SiThresholdComponent,
  selectors: [["si-threshold"]],
  hostVars: 6,
  hostBindings: function SiThresholdComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("add-remove", ctx.canAddRemoveSteps)("horizontal", ctx.horizontalLayout)("dec-inc-buttons", ctx.showDecIncButtons);
    }
  },
  inputs: {
    options: "options",
    thresholdSteps: "thresholdSteps",
    unit: "unit",
    minValue: "minValue",
    maxValue: "maxValue",
    stepSize: "stepSize",
    maxSteps: "maxSteps",
    validation: "validation",
    canAddRemoveSteps: "canAddRemoveSteps",
    horizontalLayout: "horizontalLayout",
    showDecIncButtons: "showDecIncButtons",
    readonly: "readonly",
    deleteAriaLabel: "deleteAriaLabel",
    addAriaLabel: "addAriaLabel",
    inputAriaLabel: "inputAriaLabel",
    statusAriaLabel: "statusAriaLabel"
  },
  outputs: {
    thresholdStepsChange: "thresholdStepsChange",
    validChange: "validChange"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 3,
  vars: 2,
  consts: [["class", "ths-step", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["startend", ""], [1, "ths-step"], ["class", "ths-value d-flex align-items-center", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], [1, "ths-option", "d-flex", "align-items-center"], ["type", "button", "class", "btn btn-circle btn-sm btn-secondary element-plus m-4", 3, "disabled", "click", 4, "ngIf"], ["class", "py-3 my-4", 4, "ngIf"], [1, "line", 3, "ngClass"], [1, "segment"], [1, "my-4", 3, "ariaLabel", "value", "readonly", "options", "valueChange"], [1, "ths-value", "d-flex", "align-items-center"], ["type", "button", "class", "btn btn-circle btn-sm btn-ghost element-delete m-4", 3, "click", 4, "ngIf"], [1, "line"], [1, "segment", 3, "ngClass"], [1, "dot"], [1, "d-flex", "align-items-center", "text-nowrap", "m-4"], [1, "form-control", "text-end", 3, "aria-label", "readonly", "ngModel", "ngModelOptions", "min", "max", "step", "unit", "showButtons", "required", "ngModelChange"], ["valueInput", "ngModel"], ["type", "button", 1, "btn", "btn-circle", "btn-sm", "btn-ghost", "element-delete", "m-4", 3, "click"], [1, "py-3", "my-4"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["type", "button", 1, "btn", "btn-circle", "btn-sm", "btn-secondary", "element-plus", "m-4", 3, "disabled", "click"], [1, "ths-value", "d-flex", "align-items-center", "startend"]],
  template: function SiThresholdComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, SiThresholdComponent_div_0_Template, 10, 10, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, SiThresholdComponent_ng_template_1_Template, 7, 1, "ng-template", null, 1, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.thresholdSteps)("ngForTrackBy", ctx.trackByItem);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgTemplateOutlet, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.RequiredValidator, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.NgModel, SiNumberInputComponent, SiSelectComponent, SiSelectSimpleOptionsDirective, SiSelectSingleValueDirective, SiTranslatePipe],
  styles: ["[_nghost-%COMP%]{--direction-main: column;--direction-option: row;--direction-value: row;--input-width: calc(var(--input-base-width, 90px) + var(--buttons-width, 0px))}.horizontal[_nghost-%COMP%]{--direction-main: row;--direction-option: column;--direction-value: column-reverse;--value-margin: -24px;padding-inline:calc(var(--value-margin) * -1)}.dec-inc-buttons[_nghost-%COMP%]{--buttons-width: 48px}[_nghost-%COMP%], .ths-step[_ngcontent-%COMP%]{display:flex;flex-direction:var(--direction-main)}.ths-option[_ngcontent-%COMP%]{flex-direction:var(--direction-option);min-inline-size:var(--option-width, 160px)}.ths-value[_ngcontent-%COMP%]{flex-direction:var(--direction-value);margin-inline:var(--value-margin)}.form-control[_ngcontent-%COMP%]{inline-size:var(--input-width);block-size:calc(1rem + 16px)}.line[_ngcontent-%COMP%]{align-self:stretch;flex-basis:16px;display:flex;flex-direction:var(--direction-main);align-items:center;color:var(--element-ui-2);gap:4px}.segment[_ngcontent-%COMP%]{flex:1;border:1px solid currentColor}.dot[_ngcontent-%COMP%]{inline-size:6px;block-size:6px;border:1px solid var(--element-ui-2);border-radius:50%}.startend[_ngcontent-%COMP%]{inline-size:calc(var(--input-width) / 2)}"]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiThresholdComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'si-threshold',
      template: "<div\n  *ngFor=\"let step of thresholdSteps; first as first; last as last; index as index; trackBy: trackByItem\"\n  class=\"ths-step\"\n>\n  <div *ngIf=\"!first\" class=\"ths-value d-flex align-items-center\">\n    <button\n      *ngIf=\"canAddRemoveSteps && !readonly\"\n      type=\"button\"\n      class=\"btn btn-circle btn-sm btn-ghost element-delete m-4\"\n      [attr.aria-label]=\"deleteAriaLabel | translate\"\n      (click)=\"deleteStep(index)\"\n    ></button>\n    <div *ngIf=\"!canAddRemoveSteps || readonly\" class=\"py-3 my-4\">&#8203;</div>\n    <div class=\"line\">\n      <div class=\"segment\" [ngClass]=\"colors[index - 1]\"></div>\n      <div class=\"dot\"></div>\n      <div class=\"segment\" [ngClass]=\"colors[index]\"></div>\n    </div>\n    <div class=\"d-flex align-items-center text-nowrap m-4\">\n      <si-number-input\n        class=\"form-control text-end\"\n        [class.is-invalid]=\"step.valid === false\"\n        [aria-label]=\"inputAriaLabel | translate\"\n        [readonly]=\"readonly\"\n        [(ngModel)]=\"step.value\"\n        [ngModelOptions]=\"{ standalone: true }\"\n        #valueInput=\"ngModel\"\n        [min]=\"minValue\"\n        [max]=\"maxValue\"\n        [step]=\"stepSize\"\n        [unit]=\"unit\"\n        [showButtons]=\"showDecIncButtons\"\n        [required]=\"true\"\n        (ngModelChange)=\"emitChange()\"\n      ></si-number-input>\n    </div>\n  </div>\n  <ng-container\n    *ngIf=\"first && horizontalLayout\"\n    [ngTemplateOutlet]=\"startend\"\n    [ngTemplateOutletContext]=\"{ color: colors[index] }\">\n  </ng-container>\n  <div class=\"ths-option d-flex align-items-center\">\n    <button\n      *ngIf=\"canAddRemoveSteps && !readonly\"\n      type=\"button\"\n      class=\"btn btn-circle btn-sm btn-secondary element-plus m-4\"\n      [disabled]=\"maxSteps && thresholdSteps.length >= maxSteps\"\n      [attr.aria-label]=\"addAriaLabel | translate\"\n      (click)=\"addStep(index)\"\n    ></button>\n    <div *ngIf=\"!canAddRemoveSteps || readonly\" class=\"py-3 my-4\">&#8203;</div>\n    <div class=\"line\" [ngClass]=\"colors[index]\">\n      <div class=\"segment\"></div>\n    </div>\n    <si-select\n      [ariaLabel]=\"statusAriaLabel\"\n      class=\"my-4\"\n      [(value)]=\"step.optionValue\"\n      [readonly]=\"readonly\"\n      (valueChange)=\"optionChanged()\"\n      [options]=\"options\"\n    ></si-select>\n  </div>\n  <ng-container\n    *ngIf=\"last && horizontalLayout\"\n    [ngTemplateOutlet]=\"startend\"\n    [ngTemplateOutletContext]=\"{ color: colors[index] }\">\n  </ng-container>\n</div>\n\n<ng-template #startend let-color=\"color\">\n  <div class=\"ths-value d-flex align-items-center startend\">\n    <div class=\"py-3 my-4\">&#8203;</div>\n    <div class=\"line\">\n      <div class=\"segment\" [ngClass]=\"color\"></div>\n    </div>\n    <div class=\"py-3 my-4\">&#8203;</div>\n  </div>\n</ng-template>\n",
      styles: [":host{--direction-main: column;--direction-option: row;--direction-value: row;--input-width: calc(var(--input-base-width, 90px) + var(--buttons-width, 0px))}:host.horizontal{--direction-main: row;--direction-option: column;--direction-value: column-reverse;--value-margin: -24px;padding-inline:calc(var(--value-margin) * -1)}:host.dec-inc-buttons{--buttons-width: 48px}:host,.ths-step{display:flex;flex-direction:var(--direction-main)}.ths-option{flex-direction:var(--direction-option);min-inline-size:var(--option-width, 160px)}.ths-value{flex-direction:var(--direction-value);margin-inline:var(--value-margin)}.form-control{inline-size:var(--input-width);block-size:calc(1rem + 16px)}.line{align-self:stretch;flex-basis:16px;display:flex;flex-direction:var(--direction-main);align-items:center;color:var(--element-ui-2);gap:4px}.segment{flex:1;border:1px solid currentColor}.dot{inline-size:6px;block-size:6px;border:1px solid var(--element-ui-2);border-radius:50%}.startend{inline-size:calc(var(--input-width) / 2)}\n"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }];
  }, {
    options: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    thresholdSteps: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    unit: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    minValue: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    maxValue: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    stepSize: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    maxSteps: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    validation: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    canAddRemoveSteps: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.add-remove']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    horizontalLayout: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.horizontal']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    showDecIncButtons: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.HostBinding,
      args: ['class.dec-inc-buttons']
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    readonly: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    deleteAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    addAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    inputAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    statusAriaLabel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    thresholdStepsChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }],
    validChange: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
    }]
  });
})();
class SiThresholdModule {}
SiThresholdModule.ɵfac = function SiThresholdModule_Factory(t) {
  return new (t || SiThresholdModule)();
};
SiThresholdModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SiThresholdModule
});
SiThresholdModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule, SiNumberInputModule, SiSelectModule, SiTranslateModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SiThresholdModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_29__.FormsModule, SiNumberInputModule, SiSelectModule, SiTranslateModule],
      declarations: [SiThresholdComponent],
      exports: [SiThresholdComponent]
    }]
  }], null, null);
})();

/* eslint-disable @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare */
const DateFormat = {
  DF_DDMMYYYY_DOT: 'dd.mm.yyyy',
  DF_DDMMYYYY_FSLASH: 'dd/mm/yyyy',
  DF_DDMMYYYY_DASH: 'dd-mm-yyyy',
  DF_YYYYMMDD_DOT: 'yyyy.mm.dd',
  DF_YYYYMMDD_FSLASH: 'yyyy/mm/dd',
  DF_YYYYMMDD_DASH: 'yyyy-mm-dd',
  DF_MMDDYYYY_DASH: 'mm-dd-yyyy',
  DF_MMDDYYYY_FSLASH: 'mm/dd/yyyy'
};

/* eslint-disable @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare */
const TimeFormat = {
  TWENTY_FOUR: 'hh:mm:ss',
  TWELVE: 'hh:mm:ss tt'
};
var MeridianDesignation;
(function (MeridianDesignation) {
  MeridianDesignation[MeridianDesignation["AM"] = 0] = "AM";
  MeridianDesignation[MeridianDesignation["PM"] = 1] = "PM";
})(MeridianDesignation || (MeridianDesignation = {}));

// -------------------------------------------------------------------------------

class SimplElementNgModule {}
SimplElementNgModule.ɵfac = function SimplElementNgModule_Factory(t) {
  return new (t || SimplElementNgModule)();
};
SimplElementNgModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: SimplElementNgModule
});
SimplElementNgModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [SiAboutModule, SiAccordionModule, SiActionDialogModule, SiBreadcrumbModule, SiCardModule, SiCircleStatusModule, SiColumnSelectionModalModule, SiComfortScoreModule, SiCommissioningStatusModule, SiConnectionStrengthModule, SiContentActionBarModule, SiDatatableModule, SiDatepickerModule, SiDropdownModule, SiElectrontitlebarModule, SiEmptyStateModule, SiFileUploaderModule, SiFilterBarModule, SiFilteredSearchModule, SiFooterModule, SiFormModule, SiIconModule, SiInlineNotificationModule, SiLandingPageModule, SiLanguageSwitcherModule, SiLinkModule, SiListInteractionModule, SiLoadingSpinnerModule, SiLocalizationModule, SiMasterDetailContainerModule, SiMenuModule, SiModalModule, SiNavbarModule, SiNavbarSecondaryModule, SiNavbarVerticalModule, SiNumberInputModule, SiPaginationModule, SiPasswordStrengthModule, SiPopoverModule, SiProgressbarModule, SiPromptDialogButtonsModule, SiResizeObserverModule, SiResultDetailsListModule, SiRightPanelModule, SiSearchBarModule, SiSelectModule, SiSidePanelModule, SiSliderModule, SiSortBarModule, SiSplitModule, SiStatusBarModule, SiSwitchModule, SiTabsModule, SiThresholdModule, SiToastNotificationModule, SiTooltipModule, SiTreeViewModule, SiTypeaheadModule, SiUnauthorizedPageModule, SiWizardModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SimplElementNgModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      // Since this a library, which does not have any pages, imports are not needed
      exports: [SiAboutModule, SiAccordionModule, SiActionDialogModule, SiBreadcrumbModule, SiCardModule, SiCircleStatusModule, SiColumnSelectionModalModule, SiComfortScoreModule, SiCommissioningStatusModule, SiConnectionStrengthModule, SiContentActionBarModule, SiDatatableModule, SiDatepickerModule, SiDropdownModule, SiElectrontitlebarModule, SiEmptyStateModule, SiFileUploaderModule, SiFilterBarModule, SiFilteredSearchModule, SiFooterModule, SiFormModule, SiIconModule, SiInlineNotificationModule, SiLandingPageModule, SiLanguageSwitcherModule, SiLinkModule, SiListInteractionModule, SiLoadingSpinnerModule, SiLocalizationModule, SiMasterDetailContainerModule, SiMenuModule, SiModalModule, SiNavbarModule, SiNavbarSecondaryModule, SiNavbarVerticalModule, SiNumberInputModule, SiPaginationModule, SiPasswordStrengthModule, SiPopoverModule, SiProgressbarModule, SiPromptDialogButtonsModule, SiResizeObserverModule, SiResultDetailsListModule, SiRightPanelModule, SiSearchBarModule, SiSelectModule, SiSidePanelModule, SiSliderModule, SiSortBarModule, SiSplitModule, SiStatusBarModule, SiSwitchModule, SiTabsModule, SiThresholdModule, SiToastNotificationModule, SiTooltipModule, SiTreeViewModule, SiTypeaheadModule, SiUnauthorizedPageModule, SiWizardModule]
    }]
  }], null, null);
})();

/**
 * Generated bundle index. Do not edit.
 */



/***/ })

}]);
//# sourceMappingURL=src_app_pages_main_main_module_ts.js.map